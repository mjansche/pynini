/* Generated by Cython 0.23 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_23"
#include <stddef.h>
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if !defined(CYTHON_USE_PYLONG_INTERNALS) && CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x02070000
#define CYTHON_USE_PYLONG_INTERNALS 1
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
#define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if PY_VERSION_HEX >= 0x030500B1
#define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
#define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
#elif CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
typedef struct {
    unaryfunc am_await;
    unaryfunc am_aiter;
    unaryfunc am_anext;
} __Pyx_PyAsyncMethodsStruct;
#define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
#else
#define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#define __Pyx_void_to_None(void_result) (void_result, Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #define CYTHON_INLINE inline
#endif
template<typename T>
void __Pyx_call_destructor(T* x) {
    x->~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    operator T&() { return *ptr; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__pynini
#define __PYX_HAVE_API__pynini
#include <memory>
#include <utility>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include "stdint.h"
#include "stddef.h"
#include "time.h"
#include "string.h"
#include <string>
#include <iostream>
#include <fstream>
#include <sstream>
#include <fst/util.h>
#include <fst/fstlib.h>
#include <fst/script/fstscript.h>
#include <fst/extensions/far/far.h>
#include <fst/extensions/far/main.h>
#include <fst/extensions/far/far-class.h>
#include "crossproductscript.h"
#include "optimizescript.h"
#include "tokentype.h"
#include "pathsscript.h"
#include "repeatscript.h"
#include "stringcompilescript.h"
#include "stringfilescript.h"
#include "stringmapscript.h"
#include "merge.h"
#include "mergescript.h"
#include <fst/extensions/mpdt/mpdtlib.h>
#include <fst/extensions/mpdt/mpdtscript.h>
#include <fst/extensions/mpdt/read_write_utils.h>
#include <fst/extensions/pdt/pdtlib.h>
#include <fst/extensions/pdt/pdtscript.h>
#include "cdrewrite.h"
#include "pynini_cdrewrite.h"
#include "pynini_replace.h"
#include "pynini_stringify.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "pynini.pyx",
  "stringsource",
  "pywrapfst.pxd",
};

/* "basictypes.pxd":22
 * 
 * 
 * ctypedef int8_t int8             # <<<<<<<<<<<<<<
 * ctypedef int16_t int16
 * ctypedef int32_t int32
 */
typedef int8_t __pyx_t_10basictypes_int8;

/* "basictypes.pxd":23
 * 
 * ctypedef int8_t int8
 * ctypedef int16_t int16             # <<<<<<<<<<<<<<
 * ctypedef int32_t int32
 * ctypedef int64_t int64
 */
typedef int16_t __pyx_t_10basictypes_int16;

/* "basictypes.pxd":24
 * ctypedef int8_t int8
 * ctypedef int16_t int16
 * ctypedef int32_t int32             # <<<<<<<<<<<<<<
 * ctypedef int64_t int64
 * ctypedef uint8_t uint8
 */
typedef int32_t __pyx_t_10basictypes_int32;

/* "basictypes.pxd":25
 * ctypedef int16_t int16
 * ctypedef int32_t int32
 * ctypedef int64_t int64             # <<<<<<<<<<<<<<
 * ctypedef uint8_t uint8
 * ctypedef uint16_t uint16
 */
typedef int64_t __pyx_t_10basictypes_int64;

/* "basictypes.pxd":26
 * ctypedef int32_t int32
 * ctypedef int64_t int64
 * ctypedef uint8_t uint8             # <<<<<<<<<<<<<<
 * ctypedef uint16_t uint16
 * ctypedef uint32_t uint32
 */
typedef uint8_t __pyx_t_10basictypes_uint8;

/* "basictypes.pxd":27
 * ctypedef int64_t int64
 * ctypedef uint8_t uint8
 * ctypedef uint16_t uint16             # <<<<<<<<<<<<<<
 * ctypedef uint32_t uint32
 * ctypedef uint64_t uint64
 */
typedef uint16_t __pyx_t_10basictypes_uint16;

/* "basictypes.pxd":28
 * ctypedef uint8_t uint8
 * ctypedef uint16_t uint16
 * ctypedef uint32_t uint32             # <<<<<<<<<<<<<<
 * ctypedef uint64_t uint64
 */
typedef uint32_t __pyx_t_10basictypes_uint32;

/* "basictypes.pxd":29
 * ctypedef uint16_t uint16
 * ctypedef uint32_t uint32
 * ctypedef uint64_t uint64             # <<<<<<<<<<<<<<
 */
typedef uint64_t __pyx_t_10basictypes_uint64;

/*--- Type declarations ---*/
struct __pyx_obj_9pywrapfst_Weight;
struct __pyx_obj_9pywrapfst__SymbolTable;
struct __pyx_obj_9pywrapfst__EncodeMapperSymbolTable;
struct __pyx_obj_9pywrapfst__FstSymbolTable;
struct __pyx_obj_9pywrapfst__MutableSymbolTable;
struct __pyx_obj_9pywrapfst__MutableFstSymbolTable;
struct __pyx_obj_9pywrapfst_SymbolTable;
struct __pyx_obj_9pywrapfst_SymbolTableIterator;
struct __pyx_obj_9pywrapfst_EncodeMapper;
struct __pyx_obj_9pywrapfst__Fst;
struct __pyx_obj_9pywrapfst__MutableFst;
struct __pyx_obj_9pywrapfst_Arc;
struct __pyx_obj_9pywrapfst_ArcIterator;
struct __pyx_obj_9pywrapfst_MutableArcIterator;
struct __pyx_obj_9pywrapfst_StateIterator;
struct __pyx_obj_9pywrapfst_Compiler;
struct __pyx_obj_9pywrapfst_FarReader;
struct __pyx_obj_9pywrapfst_FarWriter;
struct __pyx_obj_6pynini_Fst;
struct __pyx_obj_6pynini_PdtParentheses;
struct __pyx_obj_6pynini_MPdtParentheses;
struct __pyx_obj_6pynini_StringPaths;
struct __pyx_obj_6pynini_Far;
struct __pyx_obj_6pynini___pyx_scope_struct___1arg_patch;
struct __pyx_obj_6pynini___pyx_scope_struct_1__shortestdistance_patch;
struct __pyx_obj_6pynini___pyx_scope_struct_2__compose_patch;
struct __pyx_obj_6pynini___pyx_scope_struct_3__difference_patch;
struct __pyx_obj_6pynini___pyx_scope_struct_4__intersect_patch;
struct __pyx_obj_6pynini___pyx_scope_struct_5__comp_patch;
struct __pyx_obj_6pynini___pyx_scope_struct_6__comp_merge_patch;
struct __pyx_obj_6pynini___pyx_scope_struct_7___iter__;
struct __pyx_obj_6pynini___pyx_scope_struct_8___iter__;
struct __pyx_obj_6pynini___pyx_scope_struct_9__copy_patch;

/* "fst.pxd":457
 * 
 * 
 * ctypedef pair[int64, const FstClass *] LabelFstClassPair             # <<<<<<<<<<<<<<
 * 
 * ctypedef pair[int64, int64] LabelPair
 */
typedef std::pair<__pyx_t_10basictypes_int64,fst::script::FstClass const *>  __pyx_t_3fst_LabelFstClassPair;

/* "fst.pxd":459
 * ctypedef pair[int64, const FstClass *] LabelFstClassPair
 * 
 * ctypedef pair[int64, int64] LabelPair             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef std::pair<__pyx_t_10basictypes_int64,__pyx_t_10basictypes_int64>  __pyx_t_3fst_LabelPair;
struct __pyx_opt_args_9pywrapfst_tostring;
struct __pyx_opt_args_9pywrapfst_weighttostring;
struct __pyx_opt_args_9pywrapfst_19_MutableSymbolTable_add_symbol;
struct __pyx_opt_args_9pywrapfst_4_Fst_draw;
struct __pyx_opt_args_9pywrapfst_4_Fst_properties;
struct __pyx_opt_args_9pywrapfst_4_Fst_text;
struct __pyx_opt_args_9pywrapfst_11_MutableFst__arcsort;
struct __pyx_opt_args_9pywrapfst_11_MutableFst__closure;
struct __pyx_opt_args_9pywrapfst_11_MutableFst__delete_arcs;
struct __pyx_opt_args_9pywrapfst_11_MutableFst__delete_states;
struct __pyx_opt_args_9pywrapfst_11_MutableFst__minimize;
struct __pyx_opt_args_9pywrapfst_11_MutableFst__project;
struct __pyx_opt_args_9pywrapfst_11_MutableFst__prune;
struct __pyx_opt_args_9pywrapfst_11_MutableFst__push;
struct __pyx_opt_args_9pywrapfst_11_MutableFst__relabel_pairs;
struct __pyx_opt_args_9pywrapfst_11_MutableFst__relabel_tables;
struct __pyx_opt_args_9pywrapfst_11_MutableFst__reweight;
struct __pyx_opt_args_9pywrapfst_11_MutableFst__rmepsilon;
struct __pyx_opt_args_9pywrapfst_11_MutableFst__set_final;
struct __pyx_opt_args_9pywrapfst__create_Fst;
struct __pyx_opt_args_9pywrapfst__read_Fst;
struct __pyx_opt_args_9pywrapfst__map;
struct __pyx_opt_args_9pywrapfst_arcmap;
struct __pyx_opt_args_9pywrapfst_compose;
struct __pyx_opt_args_9pywrapfst_convert;
struct __pyx_opt_args_9pywrapfst_determinize;
struct __pyx_opt_args_9pywrapfst_difference;
struct __pyx_opt_args_9pywrapfst_disambiguate;
struct __pyx_opt_args_9pywrapfst_epsnormalize;
struct __pyx_opt_args_9pywrapfst_equal;
struct __pyx_opt_args_9pywrapfst_equivalent;
struct __pyx_opt_args_9pywrapfst_intersect;
struct __pyx_opt_args_9pywrapfst_isomorphic;
struct __pyx_opt_args_9pywrapfst_prune;
struct __pyx_opt_args_9pywrapfst_push;
struct __pyx_opt_args_9pywrapfst_randequivalent;
struct __pyx_opt_args_9pywrapfst_randgen;
struct __pyx_opt_args_9pywrapfst_replace;
struct __pyx_opt_args_9pywrapfst_reverse;
struct __pyx_opt_args_9pywrapfst_rmepsilon;
struct __pyx_opt_args_9pywrapfst__shortestdistance;
struct __pyx_opt_args_9pywrapfst_shortestpath;
struct __pyx_opt_args_9pywrapfst_statemap;

/* "pywrapfst.pxd":40
 * 
 * 
 * cdef string tostring(data, encoding=?) except *             # <<<<<<<<<<<<<<
 * 
 * cdef string weighttostring(data, encoding=?) except *
 */
struct __pyx_opt_args_9pywrapfst_tostring {
  int __pyx_n;
  PyObject *encoding;
};

/* "pywrapfst.pxd":42
 * cdef string tostring(data, encoding=?) except *
 * 
 * cdef string weighttostring(data, encoding=?) except *             # <<<<<<<<<<<<<<
 * 
 * cdef fst.ComposeFilter _get_compose_filter(string cf) except *
 */
struct __pyx_opt_args_9pywrapfst_weighttostring {
  int __pyx_n;
  PyObject *encoding;
};

/* "pywrapfst.pxd":84
 * # SymbolTable.
 * 
 * ctypedef fst.SymbolTable * SymbolTable_ptr             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef fst::SymbolTable *__pyx_t_9pywrapfst_SymbolTable_ptr;

/* "pywrapfst.pxd":122
 * cdef class _MutableSymbolTable(_SymbolTable):
 * 
 *   cpdef int64 add_symbol(self, symbol, int64 key=?)             # <<<<<<<<<<<<<<
 * 
 *   cpdef void add_table(self, _SymbolTable syms)
 */
struct __pyx_opt_args_9pywrapfst_19_MutableSymbolTable_add_symbol {
  int __pyx_n;
  __pyx_t_10basictypes_int64 key;
};

/* "pywrapfst.pxd":199
 * 
 * 
 * ctypedef fst.FstClass * FstClass_ptr             # <<<<<<<<<<<<<<
 * ctypedef fst.MutableFstClass * MutableFstClass_ptr
 * ctypedef fst.VectorFstClass * VectorFstClass_ptr
 */
typedef fst::script::FstClass *__pyx_t_9pywrapfst_FstClass_ptr;

/* "pywrapfst.pxd":200
 * 
 * ctypedef fst.FstClass * FstClass_ptr
 * ctypedef fst.MutableFstClass * MutableFstClass_ptr             # <<<<<<<<<<<<<<
 * ctypedef fst.VectorFstClass * VectorFstClass_ptr
 * 
 */
typedef fst::script::MutableFstClass *__pyx_t_9pywrapfst_MutableFstClass_ptr;

/* "pywrapfst.pxd":201
 * ctypedef fst.FstClass * FstClass_ptr
 * ctypedef fst.MutableFstClass * MutableFstClass_ptr
 * ctypedef fst.VectorFstClass * VectorFstClass_ptr             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef fst::script::VectorFstClass *__pyx_t_9pywrapfst_VectorFstClass_ptr;

/* "pywrapfst.pxd":214
 *   cpdef _Fst copy(self)
 * 
 *   cpdef void draw(self, filename, _SymbolTable isymbols=?,             # <<<<<<<<<<<<<<
 *                   _SymbolTable osymbols=?, SymbolTable ssymbols=?,
 *                   bool acceptor=?, title=?, double width=?,
 */
struct __pyx_opt_args_9pywrapfst_4_Fst_draw {
  int __pyx_n;
  struct __pyx_obj_9pywrapfst__SymbolTable *isymbols;
  struct __pyx_obj_9pywrapfst__SymbolTable *osymbols;
  struct __pyx_obj_9pywrapfst_SymbolTable *ssymbols;
  bool acceptor;
  PyObject *title;
  double width;
  double height;
  bool portrait;
  bool vertical;
  double ranksep;
  double nodesep;
  __pyx_t_10basictypes_int32 fontsize;
  __pyx_t_10basictypes_int32 precision;
  bool show_weight_one;
};

/* "pywrapfst.pxd":235
 *   cdef _FstSymbolTable _output_symbols(self)
 * 
 *   cpdef uint64 properties(self, uint64 mask, bool test=?)             # <<<<<<<<<<<<<<
 * 
 *   cdef int64 _start(self)
 */
struct __pyx_opt_args_9pywrapfst_4_Fst_properties {
  int __pyx_n;
  bool test;
};

/* "pywrapfst.pxd":241
 *   cpdef StateIterator states(self)
 * 
 *   cpdef string text(self, _SymbolTable isymbols=?, _SymbolTable osymbols=?,             # <<<<<<<<<<<<<<
 *                     _SymbolTable ssymbols=?, bool acceptor=?,
 *                     bool show_weight_one=?, missing_sym=?)
 */
struct __pyx_opt_args_9pywrapfst_4_Fst_text {
  int __pyx_n;
  struct __pyx_obj_9pywrapfst__SymbolTable *isymbols;
  struct __pyx_obj_9pywrapfst__SymbolTable *osymbols;
  struct __pyx_obj_9pywrapfst__SymbolTable *ssymbols;
  bool acceptor;
  bool show_weight_one;
  PyObject *missing_sym;
};

/* "pywrapfst.pxd":262
 *   cpdef int64 add_state(self) except *
 * 
 *   cdef void _arcsort(self, sort_type=?) except *             # <<<<<<<<<<<<<<
 * 
 *   cdef void _closure(self, bool closure_plus=?) except *
 */
struct __pyx_opt_args_9pywrapfst_11_MutableFst__arcsort {
  int __pyx_n;
  PyObject *sort_type;
};

/* "pywrapfst.pxd":264
 *   cdef void _arcsort(self, sort_type=?) except *
 * 
 *   cdef void _closure(self, bool closure_plus=?) except *             # <<<<<<<<<<<<<<
 * 
 *   cdef void _concat(self, _Fst ifst) except *
 */
struct __pyx_opt_args_9pywrapfst_11_MutableFst__closure {
  int __pyx_n;
  bool closure_plus;
};

/* "pywrapfst.pxd":272
 *   cdef void _decode(self, EncodeMapper) except *
 * 
 *   cdef void _delete_arcs(self, int64 state, size_t n=?) except *             # <<<<<<<<<<<<<<
 * 
 *   cdef void _delete_states(self, states=?) except *
 */
struct __pyx_opt_args_9pywrapfst_11_MutableFst__delete_arcs {
  int __pyx_n;
  size_t n;
};

/* "pywrapfst.pxd":274
 *   cdef void _delete_arcs(self, int64 state, size_t n=?) except *
 * 
 *   cdef void _delete_states(self, states=?) except *             # <<<<<<<<<<<<<<
 * 
 *   cdef void _encode(self, EncodeMapper) except *
 */
struct __pyx_opt_args_9pywrapfst_11_MutableFst__delete_states {
  int __pyx_n;
  PyObject *states;
};

/* "pywrapfst.pxd":280
 *   cdef void _invert(self) except *
 * 
 *   cdef void _minimize(self, float delta=?) except *             # <<<<<<<<<<<<<<
 * 
 *   cpdef MutableArcIterator mutable_arcs(self, int64 state)
 */
struct __pyx_opt_args_9pywrapfst_11_MutableFst__minimize {
  int __pyx_n;
  float delta;
};

/* "pywrapfst.pxd":290
 *   cdef int64 _num_states(self)
 * 
 *   cdef void _project(self, bool project_output=?) except *             # <<<<<<<<<<<<<<
 * 
 *   cdef void _prune(self, float delta=?, int64 nstate=?, weight=?) except *
 */
struct __pyx_opt_args_9pywrapfst_11_MutableFst__project {
  int __pyx_n;
  bool project_output;
};

/* "pywrapfst.pxd":292
 *   cdef void _project(self, bool project_output=?) except *
 * 
 *   cdef void _prune(self, float delta=?, int64 nstate=?, weight=?) except *             # <<<<<<<<<<<<<<
 * 
 *   cdef void _push(self, float delta=?, bool remove_total_weight=?,
 */
struct __pyx_opt_args_9pywrapfst_11_MutableFst__prune {
  int __pyx_n;
  float delta;
  __pyx_t_10basictypes_int64 nstate;
  PyObject *weight;
};

/* "pywrapfst.pxd":294
 *   cdef void _prune(self, float delta=?, int64 nstate=?, weight=?) except *
 * 
 *   cdef void _push(self, float delta=?, bool remove_total_weight=?,             # <<<<<<<<<<<<<<
 *                   bool to_final=?) except *
 * 
 */
struct __pyx_opt_args_9pywrapfst_11_MutableFst__push {
  int __pyx_n;
  float delta;
  bool remove_total_weight;
  bool to_final;
};

/* "pywrapfst.pxd":297
 *                   bool to_final=?) except *
 * 
 *   cdef void _relabel_pairs(self, ipairs=?, opairs=?) except *             # <<<<<<<<<<<<<<
 * 
 *   cdef void _relabel_tables(self, _SymbolTable old_isymbols=?,
 */
struct __pyx_opt_args_9pywrapfst_11_MutableFst__relabel_pairs {
  int __pyx_n;
  PyObject *ipairs;
  PyObject *opairs;
};

/* "pywrapfst.pxd":299
 *   cdef void _relabel_pairs(self, ipairs=?, opairs=?) except *
 * 
 *   cdef void _relabel_tables(self, _SymbolTable old_isymbols=?,             # <<<<<<<<<<<<<<
 *       _SymbolTable new_isymbols=?, bool attach_new_isymbols=?,
 *       _SymbolTable old_osymbols=?, _SymbolTable new_osymbols=?,
 */
struct __pyx_opt_args_9pywrapfst_11_MutableFst__relabel_tables {
  int __pyx_n;
  struct __pyx_obj_9pywrapfst__SymbolTable *old_isymbols;
  struct __pyx_obj_9pywrapfst__SymbolTable *new_isymbols;
  bool attach_new_isymbols;
  struct __pyx_obj_9pywrapfst__SymbolTable *old_osymbols;
  struct __pyx_obj_9pywrapfst__SymbolTable *new_osymbols;
  bool attach_new_osymbols;
};

/* "pywrapfst.pxd":308
 *   cdef void _reserve_states(self, int64 n) except *
 * 
 *   cdef void _reweight(self, potentials, bool to_final=?) except *             # <<<<<<<<<<<<<<
 * 
 *   cdef void _rmepsilon(self, bool connect=?, float delta=?, int64 nstate=?,
 */
struct __pyx_opt_args_9pywrapfst_11_MutableFst__reweight {
  int __pyx_n;
  bool to_final;
};

/* "pywrapfst.pxd":310
 *   cdef void _reweight(self, potentials, bool to_final=?) except *
 * 
 *   cdef void _rmepsilon(self, bool connect=?, float delta=?, int64 nstate=?,             # <<<<<<<<<<<<<<
 *                        weight=?) except *
 * 
 */
struct __pyx_opt_args_9pywrapfst_11_MutableFst__rmepsilon {
  int __pyx_n;
  bool connect;
  float delta;
  __pyx_t_10basictypes_int64 nstate;
  PyObject *weight;
};

/* "pywrapfst.pxd":313
 *                        weight=?) except *
 * 
 *   cdef void _set_final(self, int64 state, weight=?) except *             # <<<<<<<<<<<<<<
 * 
 *   cdef void _set_properties(self, uint64 props, uint64 mask) except *
 */
struct __pyx_opt_args_9pywrapfst_11_MutableFst__set_final {
  int __pyx_n;
  PyObject *weight;
};

/* "pywrapfst.pxd":337
 * cdef _Fst _init_XFst(FstClass_ptr tfst)
 * 
 * cdef _MutableFst _create_Fst(arc_type=?)             # <<<<<<<<<<<<<<
 * 
 * cdef _Fst _read_Fst(filename, fst_type=?)
 */
struct __pyx_opt_args_9pywrapfst__create_Fst {
  int __pyx_n;
  PyObject *arc_type;
};

/* "pywrapfst.pxd":339
 * cdef _MutableFst _create_Fst(arc_type=?)
 * 
 * cdef _Fst _read_Fst(filename, fst_type=?)             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_opt_args_9pywrapfst__read_Fst {
  int __pyx_n;
  PyObject *fst_type;
};

/* "pywrapfst.pxd":421
 * 
 * 
 * cdef _Fst _map(_Fst ifst, float delta=?, map_type=?, weight=?)             # <<<<<<<<<<<<<<
 * 
 * cpdef _Fst arcmap(_Fst ifst, float delta=?, map_type=?, weight=?)
 */
struct __pyx_opt_args_9pywrapfst__map {
  int __pyx_n;
  float delta;
  PyObject *map_type;
  PyObject *weight;
};

/* "pywrapfst.pxd":423
 * cdef _Fst _map(_Fst ifst, float delta=?, map_type=?, weight=?)
 * 
 * cpdef _Fst arcmap(_Fst ifst, float delta=?, map_type=?, weight=?)             # <<<<<<<<<<<<<<
 * 
 * cpdef _MutableFst compose(_Fst ifst1, _Fst ifst2, cf=?, bool connect=?)
 */
struct __pyx_opt_args_9pywrapfst_arcmap {
  int __pyx_n;
  float delta;
  PyObject *map_type;
  PyObject *weight;
};

/* "pywrapfst.pxd":425
 * cpdef _Fst arcmap(_Fst ifst, float delta=?, map_type=?, weight=?)
 * 
 * cpdef _MutableFst compose(_Fst ifst1, _Fst ifst2, cf=?, bool connect=?)             # <<<<<<<<<<<<<<
 * 
 * cpdef _Fst convert(_Fst ifst, fst_type=?)
 */
struct __pyx_opt_args_9pywrapfst_compose {
  int __pyx_n;
  PyObject *cf;
  bool connect;
};

/* "pywrapfst.pxd":427
 * cpdef _MutableFst compose(_Fst ifst1, _Fst ifst2, cf=?, bool connect=?)
 * 
 * cpdef _Fst convert(_Fst ifst, fst_type=?)             # <<<<<<<<<<<<<<
 * 
 * cpdef _MutableFst determinize(_Fst ifst, float delta=?, det_type=?,
 */
struct __pyx_opt_args_9pywrapfst_convert {
  int __pyx_n;
  PyObject *fst_type;
};

/* "pywrapfst.pxd":429
 * cpdef _Fst convert(_Fst ifst, fst_type=?)
 * 
 * cpdef _MutableFst determinize(_Fst ifst, float delta=?, det_type=?,             # <<<<<<<<<<<<<<
 *     int64 nstate=?, int64 subsequential_label=?,
 *     weight=?, bool increment_subsequential_label=?)
 */
struct __pyx_opt_args_9pywrapfst_determinize {
  int __pyx_n;
  float delta;
  PyObject *det_type;
  __pyx_t_10basictypes_int64 nstate;
  __pyx_t_10basictypes_int64 subsequential_label;
  PyObject *weight;
  bool increment_subsequential_label;
};

/* "pywrapfst.pxd":433
 *     weight=?, bool increment_subsequential_label=?)
 * 
 * cpdef _MutableFst difference(_Fst ifst1, _Fst ifst2, cf=?, bool connect=?)             # <<<<<<<<<<<<<<
 * 
 * cpdef _MutableFst disambiguate(_Fst ifst, float delta=?, int64 nstate=?,
 */
struct __pyx_opt_args_9pywrapfst_difference {
  int __pyx_n;
  PyObject *cf;
  bool connect;
};

/* "pywrapfst.pxd":435
 * cpdef _MutableFst difference(_Fst ifst1, _Fst ifst2, cf=?, bool connect=?)
 * 
 * cpdef _MutableFst disambiguate(_Fst ifst, float delta=?, int64 nstate=?,             # <<<<<<<<<<<<<<
 *                             int64 subsequential_label=?, weight=?)
 * 
 */
struct __pyx_opt_args_9pywrapfst_disambiguate {
  int __pyx_n;
  float delta;
  __pyx_t_10basictypes_int64 nstate;
  __pyx_t_10basictypes_int64 subsequential_label;
  PyObject *weight;
};

/* "pywrapfst.pxd":438
 *                             int64 subsequential_label=?, weight=?)
 * 
 * cpdef _MutableFst epsnormalize(_Fst ifst, bool eps_norm_output=?)             # <<<<<<<<<<<<<<
 * 
 * cpdef bool equal(_Fst ifst1, _Fst ifst2, float delta=?)
 */
struct __pyx_opt_args_9pywrapfst_epsnormalize {
  int __pyx_n;
  bool eps_norm_output;
};

/* "pywrapfst.pxd":440
 * cpdef _MutableFst epsnormalize(_Fst ifst, bool eps_norm_output=?)
 * 
 * cpdef bool equal(_Fst ifst1, _Fst ifst2, float delta=?)             # <<<<<<<<<<<<<<
 * 
 * cpdef bool equivalent(_Fst ifst1, _Fst ifst2, float delta=?) except *
 */
struct __pyx_opt_args_9pywrapfst_equal {
  int __pyx_n;
  float delta;
};

/* "pywrapfst.pxd":442
 * cpdef bool equal(_Fst ifst1, _Fst ifst2, float delta=?)
 * 
 * cpdef bool equivalent(_Fst ifst1, _Fst ifst2, float delta=?) except *             # <<<<<<<<<<<<<<
 * 
 * cpdef _MutableFst intersect(_Fst ifst1, _Fst ifst2, cf=?, bool connect=?)
 */
struct __pyx_opt_args_9pywrapfst_equivalent {
  int __pyx_n;
  float delta;
};

/* "pywrapfst.pxd":444
 * cpdef bool equivalent(_Fst ifst1, _Fst ifst2, float delta=?) except *
 * 
 * cpdef _MutableFst intersect(_Fst ifst1, _Fst ifst2, cf=?, bool connect=?)             # <<<<<<<<<<<<<<
 * 
 * cpdef bool isomorphic(_Fst ifst1, _Fst ifst2, float delta=?) except *
 */
struct __pyx_opt_args_9pywrapfst_intersect {
  int __pyx_n;
  PyObject *cf;
  bool connect;
};

/* "pywrapfst.pxd":446
 * cpdef _MutableFst intersect(_Fst ifst1, _Fst ifst2, cf=?, bool connect=?)
 * 
 * cpdef bool isomorphic(_Fst ifst1, _Fst ifst2, float delta=?) except *             # <<<<<<<<<<<<<<
 * 
 * cpdef _MutableFst prune(_Fst ifst, float delta=?, int64 nstate=?,
 */
struct __pyx_opt_args_9pywrapfst_isomorphic {
  int __pyx_n;
  float delta;
};

/* "pywrapfst.pxd":448
 * cpdef bool isomorphic(_Fst ifst1, _Fst ifst2, float delta=?) except *
 * 
 * cpdef _MutableFst prune(_Fst ifst, float delta=?, int64 nstate=?,             # <<<<<<<<<<<<<<
 *                         weight=?)
 * 
 */
struct __pyx_opt_args_9pywrapfst_prune {
  int __pyx_n;
  float delta;
  __pyx_t_10basictypes_int64 nstate;
  PyObject *weight;
};

/* "pywrapfst.pxd":451
 *                         weight=?)
 * 
 * cpdef _MutableFst push(_Fst ifst, float delta=?, bool push_weights=?,             # <<<<<<<<<<<<<<
 *                        bool push_labels=?, bool remove_common_affix=?,
 *                        bool remove_total_weight=?, bool to_final=?)
 */
struct __pyx_opt_args_9pywrapfst_push {
  int __pyx_n;
  float delta;
  bool push_weights;
  bool push_labels;
  bool remove_common_affix;
  bool remove_total_weight;
  bool to_final;
};

/* "pywrapfst.pxd":455
 *                        bool remove_total_weight=?, bool to_final=?)
 * 
 * cpdef bool randequivalent(_Fst ifst1, _Fst ifst2, float delta=?,             # <<<<<<<<<<<<<<
 *                           int32 max_length=?, int32 npath=?,
 *                           time_t seed=?, select=?) except *
 */
struct __pyx_opt_args_9pywrapfst_randequivalent {
  int __pyx_n;
  float delta;
  __pyx_t_10basictypes_int32 max_length;
  __pyx_t_10basictypes_int32 npath;
  time_t seed;
  PyObject *select;
};

/* "pywrapfst.pxd":459
 *                           time_t seed=?, select=?) except *
 * 
 * cpdef _MutableFst randgen(_Fst ifst, int32 max_length=?, int32 npath=?,             # <<<<<<<<<<<<<<
 *                           bool remove_total_weight=?, time_t seed=?,
 *                           select=?, bool weighted=?)
 */
struct __pyx_opt_args_9pywrapfst_randgen {
  int __pyx_n;
  __pyx_t_10basictypes_int32 max_length;
  __pyx_t_10basictypes_int32 npath;
  bool remove_total_weight;
  time_t seed;
  PyObject *select;
  bool weighted;
};

/* "pywrapfst.pxd":466
 *     bool epsilon_on_replace) except *
 * 
 * cpdef _MutableFst replace(pairs, call_arc_labeling=?,             # <<<<<<<<<<<<<<
 *                           return_arc_labeling=?, bool epsilon_on_replace=?,
 *                           int64 return_label=?)
 */
struct __pyx_opt_args_9pywrapfst_replace {
  int __pyx_n;
  PyObject *call_arc_labeling;
  PyObject *return_arc_labeling;
  bool epsilon_on_replace;
  __pyx_t_10basictypes_int64 return_label;
};

/* "pywrapfst.pxd":470
 *                           int64 return_label=?)
 * 
 * cpdef _MutableFst reverse(_Fst ifst, bool require_superinitial=?)             # <<<<<<<<<<<<<<
 * 
 * cpdef _MutableFst rmepsilon(_Fst ifst, bool connect=?, float delta=?,
 */
struct __pyx_opt_args_9pywrapfst_reverse {
  int __pyx_n;
  bool require_superinitial;
};

/* "pywrapfst.pxd":472
 * cpdef _MutableFst reverse(_Fst ifst, bool require_superinitial=?)
 * 
 * cpdef _MutableFst rmepsilon(_Fst ifst, bool connect=?, float delta=?,             # <<<<<<<<<<<<<<
 *                             int64 nstate=?, qt=?, bool reverse=?,
 *                             weight=?)
 */
struct __pyx_opt_args_9pywrapfst_rmepsilon {
  int __pyx_n;
  bool connect;
  float delta;
  __pyx_t_10basictypes_int64 nstate;
  PyObject *qt;
  bool reverse;
  PyObject *weight;
};

/* "pywrapfst.pxd":476
 *                             weight=?)
 * 
 * cdef vector[fst.WeightClass] *_shortestdistance(_Fst ifst, float delta=?,             # <<<<<<<<<<<<<<
 *                                                 int64 nstate=?, qt=?,
 *                                                 bool reverse=?) except *
 */
struct __pyx_opt_args_9pywrapfst__shortestdistance {
  int __pyx_n;
  float delta;
  __pyx_t_10basictypes_int64 nstate;
  PyObject *qt;
  bool reverse;
};

/* "pywrapfst.pxd":480
 *                                                 bool reverse=?) except *
 * 
 * cpdef _MutableFst shortestpath(_Fst ifst, float delta=?, int32 nshortest=?,             # <<<<<<<<<<<<<<
 *                                int64 nstate=?, qt=?, bool unique=?,
 *                                weight=?)
 */
struct __pyx_opt_args_9pywrapfst_shortestpath {
  int __pyx_n;
  float delta;
  __pyx_t_10basictypes_int32 nshortest;
  __pyx_t_10basictypes_int64 nstate;
  PyObject *qt;
  bool unique;
  PyObject *weight;
};

/* "pywrapfst.pxd":484
 *                                weight=?)
 * 
 * cpdef _Fst statemap(_Fst ifst, map_type=?)             # <<<<<<<<<<<<<<
 * 
 * cpdef _MutableFst synchronize(_Fst ifst)
 */
struct __pyx_opt_args_9pywrapfst_statemap {
  int __pyx_n;
  PyObject *map_type;
};

/* "fst_util.pxd":115
 * 
 * 
 * ctypedef pair[string, string] StringPair             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef std::pair<std::string,std::string>  __pyx_t_8fst_util_StringPair;

/* "pynini_includes.pxd":38
 * 
 * 
 * ctypedef pair[int64, int64] LabelPair             # <<<<<<<<<<<<<<
 * ctypedef pair[string, const FstClass *] StringFstClassPair
 * 
 */
typedef std::pair<__pyx_t_10basictypes_int64,__pyx_t_10basictypes_int64>  __pyx_t_15pynini_includes_LabelPair;

/* "pynini_includes.pxd":39
 * 
 * ctypedef pair[int64, int64] LabelPair
 * ctypedef pair[string, const FstClass *] StringFstClassPair             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef std::pair<std::string,fst::script::FstClass const *>  __pyx_t_15pynini_includes_StringFstClassPair;
struct __pyx_opt_args_6pynini_3Fst_paths;
struct __pyx_opt_args_6pynini_3Fst_stringify;
struct __pyx_opt_args_6pynini_3Fst__optimize;
struct __pyx_opt_args_6pynini__compile_or_copy_Fst;
struct __pyx_opt_args_6pynini_acceptor;
struct __pyx_opt_args_6pynini_transducer;
struct __pyx_opt_args_6pynini_cdrewrite;
struct __pyx_opt_args_6pynini_mpdt_compose;

/* "pynini.pyx":372
 *       raise FstOpError("Operation failed")
 * 
 *   cpdef StringPaths paths(self,             # <<<<<<<<<<<<<<
 *                           token_type=b"byte",
 *                           _SymbolTable isymbols=None,
 */
struct __pyx_opt_args_6pynini_3Fst_paths {
  int __pyx_n;
  PyObject *token_type;
  struct __pyx_obj_9pywrapfst__SymbolTable *isymbols;
  struct __pyx_obj_9pywrapfst__SymbolTable *osymbols;
};

/* "pynini.pyx":408
 *     return StringPaths(self, token_type, isymbols, osymbols)
 * 
 *   cpdef string stringify(self, token_type=b"byte") except *:             # <<<<<<<<<<<<<<
 *     """
 *     stringify(self, token_type="byte")
 */
struct __pyx_opt_args_6pynini_3Fst_stringify {
  int __pyx_n;
  PyObject *token_type;
};

/* "pynini.pyx":597
 *     return self
 * 
 *   cdef void _optimize(self, bool compute_props=False) except *:             # <<<<<<<<<<<<<<
 *     Optimize(self._mfst.get(), compute_props)
 *     self._check_pynini_op_error()
 */
struct __pyx_opt_args_6pynini_3Fst__optimize {
  int __pyx_n;
  bool compute_props;
};

/* "pynini.pyx":715
 * 
 * 
 * cpdef Fst _compile_or_copy_Fst(arg, arc_type=b"standard"):             # <<<<<<<<<<<<<<
 *   if not isinstance(arg, Fst):
 *     return acceptor(arg, arc_type=arc_type)
 */
struct __pyx_opt_args_6pynini__compile_or_copy_Fst {
  int __pyx_n;
  PyObject *arc_type;
};

/* "pynini.pyx":736
 * 
 * 
 * cpdef Fst acceptor(astring,             # <<<<<<<<<<<<<<
 *                    weight=None,
 *                    arc_type=b"standard",
 */
struct __pyx_opt_args_6pynini_acceptor {
  int __pyx_n;
  PyObject *weight;
  PyObject *arc_type;
  PyObject *token_type;
};

/* "pynini.pyx":792
 * 
 * 
 * cpdef Fst transducer(istring,             # <<<<<<<<<<<<<<
 *                      ostring,
 *                      weight=None,
 */
struct __pyx_opt_args_6pynini_transducer {
  int __pyx_n;
  PyObject *weight;
  PyObject *arc_type;
  PyObject *input_token_type;
  PyObject *output_token_type;
};

/* "pynini.pyx":861
 * 
 * 
 * cpdef Fst cdrewrite(tau,             # <<<<<<<<<<<<<<
 *                     lambda_,
 *                     rho,
 */
struct __pyx_opt_args_6pynini_cdrewrite {
  int __pyx_n;
  PyObject *direction;
  PyObject *mode;
};

/* "pynini.pyx":1741
 * 
 * 
 * cpdef Fst mpdt_compose(ifst1, ifst2, MPdtParentheses parens, cf=b"paren",             # <<<<<<<<<<<<<<
 *                        bool left_mpdt=True):
 *   """
 */
struct __pyx_opt_args_6pynini_mpdt_compose {
  int __pyx_n;
  PyObject *cf;
  bool left_mpdt;
};

/* "pywrapfst.pxd":66
 * 
 * 
 * cdef class Weight(object):             # <<<<<<<<<<<<<<
 * 
 *   cdef unique_ptr[fst.WeightClass] _weight
 */
struct __pyx_obj_9pywrapfst_Weight {
  PyObject_HEAD
  struct __pyx_vtabstruct_9pywrapfst_Weight *__pyx_vtab;
  std::unique_ptr<fst::script::WeightClass>  _weight;
};


/* "pywrapfst.pxd":87
 * 
 * 
 * cdef class _SymbolTable(object):             # <<<<<<<<<<<<<<
 * 
 *   cdef fst.SymbolTable *_table
 */
struct __pyx_obj_9pywrapfst__SymbolTable {
  PyObject_HEAD
  struct __pyx_vtabstruct_9pywrapfst__SymbolTable *__pyx_vtab;
  fst::SymbolTable *_table;
};


/* "pywrapfst.pxd":110
 * 
 * 
 * cdef class _EncodeMapperSymbolTable(_SymbolTable):             # <<<<<<<<<<<<<<
 * 
 *   cdef shared_ptr[fst.EncodeMapperClass] _encoder
 */
struct __pyx_obj_9pywrapfst__EncodeMapperSymbolTable {
  struct __pyx_obj_9pywrapfst__SymbolTable __pyx_base;
  std::shared_ptr<fst::script::EncodeMapperClass>  _encoder;
};


/* "pywrapfst.pxd":115
 * 
 * 
 * cdef class _FstSymbolTable(_SymbolTable):             # <<<<<<<<<<<<<<
 * 
 *   cdef shared_ptr[fst.FstClass] _fst
 */
struct __pyx_obj_9pywrapfst__FstSymbolTable {
  struct __pyx_obj_9pywrapfst__SymbolTable __pyx_base;
  std::shared_ptr<fst::script::FstClass>  _fst;
};


/* "pywrapfst.pxd":120
 * 
 * 
 * cdef class _MutableSymbolTable(_SymbolTable):             # <<<<<<<<<<<<<<
 * 
 *   cpdef int64 add_symbol(self, symbol, int64 key=?)
 */
struct __pyx_obj_9pywrapfst__MutableSymbolTable {
  struct __pyx_obj_9pywrapfst__SymbolTable __pyx_base;
};


/* "pywrapfst.pxd":129
 * 
 * 
 * cdef class _MutableFstSymbolTable(_MutableSymbolTable):             # <<<<<<<<<<<<<<
 * 
 *   cdef shared_ptr[fst.MutableFstClass] _mfst
 */
struct __pyx_obj_9pywrapfst__MutableFstSymbolTable {
  struct __pyx_obj_9pywrapfst__MutableSymbolTable __pyx_base;
  std::shared_ptr<fst::script::MutableFstClass>  _mfst;
};


/* "pywrapfst.pxd":134
 * 
 * 
 * cdef class SymbolTable(_MutableSymbolTable):             # <<<<<<<<<<<<<<
 * 
 *   cdef unique_ptr[fst.SymbolTable] _smart_table
 */
struct __pyx_obj_9pywrapfst_SymbolTable {
  struct __pyx_obj_9pywrapfst__MutableSymbolTable __pyx_base;
  std::unique_ptr<fst::SymbolTable>  _smart_table;
};


/* "pywrapfst.pxd":155
 * 
 * 
 * cdef class SymbolTableIterator(object):             # <<<<<<<<<<<<<<
 * 
 *   cdef shared_ptr[fst.SymbolTable] _table
 */
struct __pyx_obj_9pywrapfst_SymbolTableIterator {
  PyObject_HEAD
  struct __pyx_vtabstruct_9pywrapfst_SymbolTableIterator *__pyx_vtab;
  std::shared_ptr<fst::SymbolTable>  _table;
  std::unique_ptr<fst::SymbolTableIterator>  _siter;
};


/* "pywrapfst.pxd":175
 * 
 * 
 * cdef class EncodeMapper(object):             # <<<<<<<<<<<<<<
 * 
 *   cdef shared_ptr[fst.EncodeMapperClass] _encoder
 */
struct __pyx_obj_9pywrapfst_EncodeMapper {
  PyObject_HEAD
  struct __pyx_vtabstruct_9pywrapfst_EncodeMapper *__pyx_vtab;
  std::shared_ptr<fst::script::EncodeMapperClass>  _encoder;
};


/* "pywrapfst.pxd":204
 * 
 * 
 * cdef class _Fst(object):             # <<<<<<<<<<<<<<
 * 
 *   cdef shared_ptr[fst.FstClass] _fst
 */
struct __pyx_obj_9pywrapfst__Fst {
  PyObject_HEAD
  struct __pyx_vtabstruct_9pywrapfst__Fst *__pyx_vtab;
  std::shared_ptr<fst::script::FstClass>  _fst;
};


/* "pywrapfst.pxd":252
 * 
 * 
 * cdef class _MutableFst(_Fst):             # <<<<<<<<<<<<<<
 * 
 *   cdef shared_ptr[fst.MutableFstClass] _mfst
 */
struct __pyx_obj_9pywrapfst__MutableFst {
  struct __pyx_obj_9pywrapfst__Fst __pyx_base;
  std::shared_ptr<fst::script::MutableFstClass>  _mfst;
};


/* "pywrapfst.pxd":345
 * 
 * 
 * cdef class Arc(object):             # <<<<<<<<<<<<<<
 * 
 *   cdef unique_ptr[fst.ArcClass] _arc
 */
struct __pyx_obj_9pywrapfst_Arc {
  PyObject_HEAD
  struct __pyx_vtabstruct_9pywrapfst_Arc *__pyx_vtab;
  std::unique_ptr<fst::script::ArcClass>  _arc;
};


/* "pywrapfst.pxd":355
 * 
 * 
 * cdef class ArcIterator(object):             # <<<<<<<<<<<<<<
 * 
 *   cdef shared_ptr[fst.FstClass] _fst
 */
struct __pyx_obj_9pywrapfst_ArcIterator {
  PyObject_HEAD
  struct __pyx_vtabstruct_9pywrapfst_ArcIterator *__pyx_vtab;
  std::shared_ptr<fst::script::FstClass>  _fst;
  std::unique_ptr<fst::script::ArcIteratorClass>  _aiter;
};


/* "pywrapfst.pxd":378
 * 
 * 
 * cdef class MutableArcIterator(object):             # <<<<<<<<<<<<<<
 * 
 *   cdef shared_ptr[fst.MutableFstClass] _mfst
 */
struct __pyx_obj_9pywrapfst_MutableArcIterator {
  PyObject_HEAD
  struct __pyx_vtabstruct_9pywrapfst_MutableArcIterator *__pyx_vtab;
  std::shared_ptr<fst::script::MutableFstClass>  _mfst;
  std::unique_ptr<fst::script::MutableArcIteratorClass>  _aiter;
};


/* "pywrapfst.pxd":403
 * 
 * 
 * cdef class StateIterator(object):             # <<<<<<<<<<<<<<
 * 
 *   cdef shared_ptr[fst.FstClass] _fst
 */
struct __pyx_obj_9pywrapfst_StateIterator {
  PyObject_HEAD
  struct __pyx_vtabstruct_9pywrapfst_StateIterator *__pyx_vtab;
  std::shared_ptr<fst::script::FstClass>  _fst;
  std::unique_ptr<fst::script::StateIteratorClass>  _siter;
};


/* "pywrapfst.pxd":492
 * 
 * 
 * cdef class Compiler(object):             # <<<<<<<<<<<<<<
 * 
 *   cdef unique_ptr[stringstream] _sstrm
 */
struct __pyx_obj_9pywrapfst_Compiler {
  PyObject_HEAD
  struct __pyx_vtabstruct_9pywrapfst_Compiler *__pyx_vtab;
  std::unique_ptr<std::stringstream>  _sstrm;
  std::string _fst_type;
  std::string _arc_type;
  fst::SymbolTable const *_isymbols;
  fst::SymbolTable const *_osymbols;
  fst::SymbolTable const *_ssymbols;
  bool _acceptor;
  bool _keep_isymbols;
  bool _keep_osymbols;
  bool _keep_state_numbering;
  bool _allow_negative_labels;
};


/* "pywrapfst.pxd":513
 * # FarReader.
 * 
 * cdef class FarReader(object):             # <<<<<<<<<<<<<<
 * 
 *   cdef unique_ptr[fst.FarReaderClass] _reader
 */
struct __pyx_obj_9pywrapfst_FarReader {
  PyObject_HEAD
  struct __pyx_vtabstruct_9pywrapfst_FarReader *__pyx_vtab;
  std::unique_ptr<fst::script::FarReaderClass>  _reader;
};


/* "pywrapfst.pxd":538
 * # FarWriter.
 * 
 * cdef class FarWriter(object):             # <<<<<<<<<<<<<<
 * 
 *   cdef unique_ptr[fst.FarWriterClass] _writer
 */
struct __pyx_obj_9pywrapfst_FarWriter {
  PyObject_HEAD
  struct __pyx_vtabstruct_9pywrapfst_FarWriter *__pyx_vtab;
  std::unique_ptr<fst::script::FarWriterClass>  _writer;
};


/* "pynini.pyx":319
 * 
 * 
 * cdef class Fst(_MutableFst):             # <<<<<<<<<<<<<<
 * 
 *   """
 */
struct __pyx_obj_6pynini_Fst {
  struct __pyx_obj_9pywrapfst__MutableFst __pyx_base;
};


/* "pynini.pyx":1307
 * 
 * 
 * cdef class PdtParentheses(object):             # <<<<<<<<<<<<<<
 * 
 *   """
 */
struct __pyx_obj_6pynini_PdtParentheses {
  PyObject_HEAD
  struct __pyx_vtabstruct_6pynini_PdtParentheses *__pyx_vtab;
  std::vector<__pyx_t_15pynini_includes_LabelPair>  _parens;
};


/* "pynini.pyx":1636
 * 
 * 
 * cdef class MPdtParentheses(object):             # <<<<<<<<<<<<<<
 * 
 *   """
 */
struct __pyx_obj_6pynini_MPdtParentheses {
  PyObject_HEAD
  struct __pyx_vtabstruct_6pynini_MPdtParentheses *__pyx_vtab;
  std::vector<__pyx_t_15pynini_includes_LabelPair>  _parens;
  std::vector<__pyx_t_10basictypes_int64>  _assign;
};


/* "pynini.pyx":1873
 * 
 * 
 * cdef class StringPaths(object):             # <<<<<<<<<<<<<<
 * 
 *   """
 */
struct __pyx_obj_6pynini_StringPaths {
  PyObject_HEAD
  struct __pyx_vtabstruct_6pynini_StringPaths *__pyx_vtab;
  std::shared_ptr<fst::script::FstClass>  _fst;
  std::unique_ptr<fst::script::StringPathsClass>  _paths;
};


/* "pynini.pyx":2035
 * 
 * 
 * cdef class Far(object):             # <<<<<<<<<<<<<<
 * 
 *   """
 */
struct __pyx_obj_6pynini_Far {
  PyObject_HEAD
  struct __pyx_vtabstruct_6pynini_Far *__pyx_vtab;
  char _mode;
  std::string _name;
  struct __pyx_obj_9pywrapfst_FarReader *_reader;
  struct __pyx_obj_9pywrapfst_FarWriter *_writer;
};


/* "pynini.pyx":1066
 * 
 * 
 * def _1arg_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg, *args, **kwargs):
 */
struct __pyx_obj_6pynini___pyx_scope_struct___1arg_patch {
  PyObject_HEAD
  PyObject *__pyx_v_fnc;
};


/* "pynini.pyx":1088
 * 
 * 
 * def _shortestdistance_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg, *args, **kwargs):
 */
struct __pyx_obj_6pynini___pyx_scope_struct_1__shortestdistance_patch {
  PyObject_HEAD
  PyObject *__pyx_v_fnc;
};


/* "pynini.pyx":1104
 * 
 * 
 * def _compose_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */
struct __pyx_obj_6pynini___pyx_scope_struct_2__compose_patch {
  PyObject_HEAD
  PyObject *__pyx_v_fnc;
};


/* "pynini.pyx":1125
 * 
 * 
 * def _difference_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */
struct __pyx_obj_6pynini___pyx_scope_struct_3__difference_patch {
  PyObject_HEAD
  PyObject *__pyx_v_fnc;
};


/* "pynini.pyx":1148
 * 
 * 
 * def _intersect_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */
struct __pyx_obj_6pynini___pyx_scope_struct_4__intersect_patch {
  PyObject_HEAD
  PyObject *__pyx_v_fnc;
};


/* "pynini.pyx":1171
 * 
 * 
 * def _comp_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */
struct __pyx_obj_6pynini___pyx_scope_struct_5__comp_patch {
  PyObject_HEAD
  PyObject *__pyx_v_fnc;
};


/* "pynini.pyx":1187
 * 
 * 
 * def _comp_merge_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */
struct __pyx_obj_6pynini___pyx_scope_struct_6__comp_merge_patch {
  PyObject_HEAD
  PyObject *__pyx_v_fnc;
};


/* "pynini.pyx":1331
 *     return self._parens.size()
 * 
 *   def __iter__(self):             # <<<<<<<<<<<<<<
 *     cdef size_t i = 0
 *     for i in xrange(self._parens.size()):
 */
struct __pyx_obj_6pynini___pyx_scope_struct_7___iter__ {
  PyObject_HEAD
  size_t __pyx_v_i;
  struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_self;
  size_t __pyx_t_0;
  size_t __pyx_t_1;
};


/* "pynini.pyx":1662
 *     return self._parens.size()
 * 
 *   def __iter__(self):             # <<<<<<<<<<<<<<
 *     cdef size_t i = 0
 *     for i in xrange(self._parens.size()):
 */
struct __pyx_obj_6pynini___pyx_scope_struct_8___iter__ {
  PyObject_HEAD
  size_t __pyx_v_i;
  struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_self;
  size_t __pyx_t_0;
  size_t __pyx_t_1;
};


/* "pynini.pyx":2403
 * 
 * 
 * def _copy_patch(fnc):             # <<<<<<<<<<<<<<
 *   # The junk in the `functools.wraps` decorator is due to a long-standing bug
 *   # in Python 2.7 (https://bugs.python.org/issue3445).
 */
struct __pyx_obj_6pynini___pyx_scope_struct_9__copy_patch {
  PyObject_HEAD
  PyObject *__pyx_v_fnc;
};



/* "pywrapfst.pxd":66
 * 
 * 
 * cdef class Weight(object):             # <<<<<<<<<<<<<<
 * 
 *   cdef unique_ptr[fst.WeightClass] _weight
 */

struct __pyx_vtabstruct_9pywrapfst_Weight {
  std::string (*_string)(struct __pyx_obj_9pywrapfst_Weight *);
  std::string (*_type)(struct __pyx_obj_9pywrapfst_Weight *);
};
static struct __pyx_vtabstruct_9pywrapfst_Weight *__pyx_vtabptr_9pywrapfst_Weight;


/* "pywrapfst.pxd":87
 * 
 * 
 * cdef class _SymbolTable(object):             # <<<<<<<<<<<<<<
 * 
 *   cdef fst.SymbolTable *_table
 */

struct __pyx_vtabstruct_9pywrapfst__SymbolTable {
  __pyx_t_10basictypes_int64 (*_available_key)(struct __pyx_obj_9pywrapfst__SymbolTable *);
  std::string (*_checksum)(struct __pyx_obj_9pywrapfst__SymbolTable *);
  struct __pyx_obj_9pywrapfst_SymbolTable *(*copy)(struct __pyx_obj_9pywrapfst__SymbolTable *, int __pyx_skip_dispatch);
  __pyx_t_10basictypes_int64 (*get_nth_key)(struct __pyx_obj_9pywrapfst__SymbolTable *, Py_ssize_t, int __pyx_skip_dispatch);
  std::string (*_labeled_checksum)(struct __pyx_obj_9pywrapfst__SymbolTable *);
  std::string (*_name)(struct __pyx_obj_9pywrapfst__SymbolTable *);
  size_t (*_num_symbols)(struct __pyx_obj_9pywrapfst__SymbolTable *);
  void (*write)(struct __pyx_obj_9pywrapfst__SymbolTable *, PyObject *, int __pyx_skip_dispatch);
  void (*write_text)(struct __pyx_obj_9pywrapfst__SymbolTable *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_9pywrapfst__SymbolTable *__pyx_vtabptr_9pywrapfst__SymbolTable;


/* "pywrapfst.pxd":110
 * 
 * 
 * cdef class _EncodeMapperSymbolTable(_SymbolTable):             # <<<<<<<<<<<<<<
 * 
 *   cdef shared_ptr[fst.EncodeMapperClass] _encoder
 */

struct __pyx_vtabstruct_9pywrapfst__EncodeMapperSymbolTable {
  struct __pyx_vtabstruct_9pywrapfst__SymbolTable __pyx_base;
};
static struct __pyx_vtabstruct_9pywrapfst__EncodeMapperSymbolTable *__pyx_vtabptr_9pywrapfst__EncodeMapperSymbolTable;


/* "pywrapfst.pxd":115
 * 
 * 
 * cdef class _FstSymbolTable(_SymbolTable):             # <<<<<<<<<<<<<<
 * 
 *   cdef shared_ptr[fst.FstClass] _fst
 */

struct __pyx_vtabstruct_9pywrapfst__FstSymbolTable {
  struct __pyx_vtabstruct_9pywrapfst__SymbolTable __pyx_base;
};
static struct __pyx_vtabstruct_9pywrapfst__FstSymbolTable *__pyx_vtabptr_9pywrapfst__FstSymbolTable;


/* "pywrapfst.pxd":120
 * 
 * 
 * cdef class _MutableSymbolTable(_SymbolTable):             # <<<<<<<<<<<<<<
 * 
 *   cpdef int64 add_symbol(self, symbol, int64 key=?)
 */

struct __pyx_vtabstruct_9pywrapfst__MutableSymbolTable {
  struct __pyx_vtabstruct_9pywrapfst__SymbolTable __pyx_base;
  __pyx_t_10basictypes_int64 (*add_symbol)(struct __pyx_obj_9pywrapfst__MutableSymbolTable *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_9pywrapfst_19_MutableSymbolTable_add_symbol *__pyx_optional_args);
  void (*add_table)(struct __pyx_obj_9pywrapfst__MutableSymbolTable *, struct __pyx_obj_9pywrapfst__SymbolTable *, int __pyx_skip_dispatch);
  void (*set_name)(struct __pyx_obj_9pywrapfst__MutableSymbolTable *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_9pywrapfst__MutableSymbolTable *__pyx_vtabptr_9pywrapfst__MutableSymbolTable;


/* "pywrapfst.pxd":129
 * 
 * 
 * cdef class _MutableFstSymbolTable(_MutableSymbolTable):             # <<<<<<<<<<<<<<
 * 
 *   cdef shared_ptr[fst.MutableFstClass] _mfst
 */

struct __pyx_vtabstruct_9pywrapfst__MutableFstSymbolTable {
  struct __pyx_vtabstruct_9pywrapfst__MutableSymbolTable __pyx_base;
};
static struct __pyx_vtabstruct_9pywrapfst__MutableFstSymbolTable *__pyx_vtabptr_9pywrapfst__MutableFstSymbolTable;


/* "pywrapfst.pxd":134
 * 
 * 
 * cdef class SymbolTable(_MutableSymbolTable):             # <<<<<<<<<<<<<<
 * 
 *   cdef unique_ptr[fst.SymbolTable] _smart_table
 */

struct __pyx_vtabstruct_9pywrapfst_SymbolTable {
  struct __pyx_vtabstruct_9pywrapfst__MutableSymbolTable __pyx_base;
};
static struct __pyx_vtabstruct_9pywrapfst_SymbolTable *__pyx_vtabptr_9pywrapfst_SymbolTable;


/* "pywrapfst.pxd":155
 * 
 * 
 * cdef class SymbolTableIterator(object):             # <<<<<<<<<<<<<<
 * 
 *   cdef shared_ptr[fst.SymbolTable] _table
 */

struct __pyx_vtabstruct_9pywrapfst_SymbolTableIterator {
  bool (*done)(struct __pyx_obj_9pywrapfst_SymbolTableIterator *, int __pyx_skip_dispatch);
  void (*next)(struct __pyx_obj_9pywrapfst_SymbolTableIterator *, int __pyx_skip_dispatch);
  void (*reset)(struct __pyx_obj_9pywrapfst_SymbolTableIterator *, int __pyx_skip_dispatch);
  std::string (*symbol)(struct __pyx_obj_9pywrapfst_SymbolTableIterator *, int __pyx_skip_dispatch);
  __pyx_t_10basictypes_int64 (*value)(struct __pyx_obj_9pywrapfst_SymbolTableIterator *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_9pywrapfst_SymbolTableIterator *__pyx_vtabptr_9pywrapfst_SymbolTableIterator;


/* "pywrapfst.pxd":175
 * 
 * 
 * cdef class EncodeMapper(object):             # <<<<<<<<<<<<<<
 * 
 *   cdef shared_ptr[fst.EncodeMapperClass] _encoder
 */

struct __pyx_vtabstruct_9pywrapfst_EncodeMapper {
  std::string (*_arc_type)(struct __pyx_obj_9pywrapfst_EncodeMapper *);
  __pyx_t_10basictypes_uint32 (*_flags)(struct __pyx_obj_9pywrapfst_EncodeMapper *);
  struct __pyx_obj_9pywrapfst__EncodeMapperSymbolTable *(*_input_symbols)(struct __pyx_obj_9pywrapfst_EncodeMapper *);
  struct __pyx_obj_9pywrapfst__EncodeMapperSymbolTable *(*_output_symbols)(struct __pyx_obj_9pywrapfst_EncodeMapper *);
  __pyx_t_10basictypes_uint64 (*properties)(struct __pyx_obj_9pywrapfst_EncodeMapper *, __pyx_t_10basictypes_uint64, int __pyx_skip_dispatch);
  void (*set_input_symbols)(struct __pyx_obj_9pywrapfst_EncodeMapper *, struct __pyx_obj_9pywrapfst__SymbolTable *, int __pyx_skip_dispatch);
  void (*set_output_symbols)(struct __pyx_obj_9pywrapfst_EncodeMapper *, struct __pyx_obj_9pywrapfst__SymbolTable *, int __pyx_skip_dispatch);
  std::string (*_weight_type)(struct __pyx_obj_9pywrapfst_EncodeMapper *);
};
static struct __pyx_vtabstruct_9pywrapfst_EncodeMapper *__pyx_vtabptr_9pywrapfst_EncodeMapper;


/* "pywrapfst.pxd":204
 * 
 * 
 * cdef class _Fst(object):             # <<<<<<<<<<<<<<
 * 
 *   cdef shared_ptr[fst.FstClass] _fst
 */

struct __pyx_vtabstruct_9pywrapfst__Fst {
  std::string (*_arc_type)(struct __pyx_obj_9pywrapfst__Fst *);
  struct __pyx_obj_9pywrapfst_ArcIterator *(*arcs)(struct __pyx_obj_9pywrapfst__Fst *, __pyx_t_10basictypes_int64, int __pyx_skip_dispatch);
  struct __pyx_obj_9pywrapfst__Fst *(*copy)(struct __pyx_obj_9pywrapfst__Fst *, int __pyx_skip_dispatch);
  void (*draw)(struct __pyx_obj_9pywrapfst__Fst *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_9pywrapfst_4_Fst_draw *__pyx_optional_args);
  struct __pyx_obj_9pywrapfst_Weight *(*final)(struct __pyx_obj_9pywrapfst__Fst *, __pyx_t_10basictypes_int64, int __pyx_skip_dispatch);
  std::string (*_fst_type)(struct __pyx_obj_9pywrapfst__Fst *);
  struct __pyx_obj_9pywrapfst__FstSymbolTable *(*_input_symbols)(struct __pyx_obj_9pywrapfst__Fst *);
  size_t (*num_arcs)(struct __pyx_obj_9pywrapfst__Fst *, __pyx_t_10basictypes_int64, int __pyx_skip_dispatch);
  size_t (*num_input_epsilons)(struct __pyx_obj_9pywrapfst__Fst *, __pyx_t_10basictypes_int64, int __pyx_skip_dispatch);
  size_t (*num_output_epsilons)(struct __pyx_obj_9pywrapfst__Fst *, __pyx_t_10basictypes_int64, int __pyx_skip_dispatch);
  struct __pyx_obj_9pywrapfst__FstSymbolTable *(*_output_symbols)(struct __pyx_obj_9pywrapfst__Fst *);
  __pyx_t_10basictypes_uint64 (*properties)(struct __pyx_obj_9pywrapfst__Fst *, __pyx_t_10basictypes_uint64, int __pyx_skip_dispatch, struct __pyx_opt_args_9pywrapfst_4_Fst_properties *__pyx_optional_args);
  __pyx_t_10basictypes_int64 (*_start)(struct __pyx_obj_9pywrapfst__Fst *);
  struct __pyx_obj_9pywrapfst_StateIterator *(*states)(struct __pyx_obj_9pywrapfst__Fst *, int __pyx_skip_dispatch);
  std::string (*text)(struct __pyx_obj_9pywrapfst__Fst *, int __pyx_skip_dispatch, struct __pyx_opt_args_9pywrapfst_4_Fst_text *__pyx_optional_args);
  bool (*verify)(struct __pyx_obj_9pywrapfst__Fst *, int __pyx_skip_dispatch);
  std::string (*_weight_type)(struct __pyx_obj_9pywrapfst__Fst *);
  void (*write)(struct __pyx_obj_9pywrapfst__Fst *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_9pywrapfst__Fst *__pyx_vtabptr_9pywrapfst__Fst;


/* "pywrapfst.pxd":252
 * 
 * 
 * cdef class _MutableFst(_Fst):             # <<<<<<<<<<<<<<
 * 
 *   cdef shared_ptr[fst.MutableFstClass] _mfst
 */

struct __pyx_vtabstruct_9pywrapfst__MutableFst {
  struct __pyx_vtabstruct_9pywrapfst__Fst __pyx_base;
  void (*_check_mutating_imethod)(struct __pyx_obj_9pywrapfst__MutableFst *);
  void (*_add_arc)(struct __pyx_obj_9pywrapfst__MutableFst *, __pyx_t_10basictypes_int64, struct __pyx_obj_9pywrapfst_Arc *);
  __pyx_t_10basictypes_int64 (*add_state)(struct __pyx_obj_9pywrapfst__MutableFst *, int __pyx_skip_dispatch);
  void (*_arcsort)(struct __pyx_obj_9pywrapfst__MutableFst *, struct __pyx_opt_args_9pywrapfst_11_MutableFst__arcsort *__pyx_optional_args);
  void (*_closure)(struct __pyx_obj_9pywrapfst__MutableFst *, struct __pyx_opt_args_9pywrapfst_11_MutableFst__closure *__pyx_optional_args);
  void (*_concat)(struct __pyx_obj_9pywrapfst__MutableFst *, struct __pyx_obj_9pywrapfst__Fst *);
  void (*_connect)(struct __pyx_obj_9pywrapfst__MutableFst *);
  void (*_decode)(struct __pyx_obj_9pywrapfst__MutableFst *, struct __pyx_obj_9pywrapfst_EncodeMapper *);
  void (*_delete_arcs)(struct __pyx_obj_9pywrapfst__MutableFst *, __pyx_t_10basictypes_int64, struct __pyx_opt_args_9pywrapfst_11_MutableFst__delete_arcs *__pyx_optional_args);
  void (*_delete_states)(struct __pyx_obj_9pywrapfst__MutableFst *, struct __pyx_opt_args_9pywrapfst_11_MutableFst__delete_states *__pyx_optional_args);
  void (*_encode)(struct __pyx_obj_9pywrapfst__MutableFst *, struct __pyx_obj_9pywrapfst_EncodeMapper *);
  void (*_invert)(struct __pyx_obj_9pywrapfst__MutableFst *);
  void (*_minimize)(struct __pyx_obj_9pywrapfst__MutableFst *, struct __pyx_opt_args_9pywrapfst_11_MutableFst__minimize *__pyx_optional_args);
  struct __pyx_obj_9pywrapfst_MutableArcIterator *(*mutable_arcs)(struct __pyx_obj_9pywrapfst__MutableFst *, __pyx_t_10basictypes_int64, int __pyx_skip_dispatch);
  struct __pyx_obj_9pywrapfst__MutableFstSymbolTable *(*_mutable_input_symbols)(struct __pyx_obj_9pywrapfst__MutableFst *);
  struct __pyx_obj_9pywrapfst__MutableFstSymbolTable *(*_mutable_output_symbols)(struct __pyx_obj_9pywrapfst__MutableFst *);
  __pyx_t_10basictypes_int64 (*_num_states)(struct __pyx_obj_9pywrapfst__MutableFst *);
  void (*_project)(struct __pyx_obj_9pywrapfst__MutableFst *, struct __pyx_opt_args_9pywrapfst_11_MutableFst__project *__pyx_optional_args);
  void (*_prune)(struct __pyx_obj_9pywrapfst__MutableFst *, struct __pyx_opt_args_9pywrapfst_11_MutableFst__prune *__pyx_optional_args);
  void (*_push)(struct __pyx_obj_9pywrapfst__MutableFst *, struct __pyx_opt_args_9pywrapfst_11_MutableFst__push *__pyx_optional_args);
  void (*_relabel_pairs)(struct __pyx_obj_9pywrapfst__MutableFst *, struct __pyx_opt_args_9pywrapfst_11_MutableFst__relabel_pairs *__pyx_optional_args);
  void (*_relabel_tables)(struct __pyx_obj_9pywrapfst__MutableFst *, struct __pyx_opt_args_9pywrapfst_11_MutableFst__relabel_tables *__pyx_optional_args);
  void (*_reserve_arcs)(struct __pyx_obj_9pywrapfst__MutableFst *, __pyx_t_10basictypes_int64, size_t);
  void (*_reserve_states)(struct __pyx_obj_9pywrapfst__MutableFst *, __pyx_t_10basictypes_int64);
  void (*_reweight)(struct __pyx_obj_9pywrapfst__MutableFst *, PyObject *, struct __pyx_opt_args_9pywrapfst_11_MutableFst__reweight *__pyx_optional_args);
  void (*_rmepsilon)(struct __pyx_obj_9pywrapfst__MutableFst *, struct __pyx_opt_args_9pywrapfst_11_MutableFst__rmepsilon *__pyx_optional_args);
  void (*_set_final)(struct __pyx_obj_9pywrapfst__MutableFst *, __pyx_t_10basictypes_int64, struct __pyx_opt_args_9pywrapfst_11_MutableFst__set_final *__pyx_optional_args);
  void (*_set_properties)(struct __pyx_obj_9pywrapfst__MutableFst *, __pyx_t_10basictypes_uint64, __pyx_t_10basictypes_uint64);
  void (*_set_start)(struct __pyx_obj_9pywrapfst__MutableFst *, __pyx_t_10basictypes_int64);
  void (*_set_input_symbols)(struct __pyx_obj_9pywrapfst__MutableFst *, struct __pyx_obj_9pywrapfst__SymbolTable *);
  void (*_set_output_symbols)(struct __pyx_obj_9pywrapfst__MutableFst *, struct __pyx_obj_9pywrapfst__SymbolTable *);
  void (*_topsort)(struct __pyx_obj_9pywrapfst__MutableFst *);
  void (*_union)(struct __pyx_obj_9pywrapfst__MutableFst *, struct __pyx_obj_9pywrapfst__Fst *);
};
static struct __pyx_vtabstruct_9pywrapfst__MutableFst *__pyx_vtabptr_9pywrapfst__MutableFst;


/* "pywrapfst.pxd":345
 * 
 * 
 * cdef class Arc(object):             # <<<<<<<<<<<<<<
 * 
 *   cdef unique_ptr[fst.ArcClass] _arc
 */

struct __pyx_vtabstruct_9pywrapfst_Arc {
  struct __pyx_obj_9pywrapfst_Arc *(*copy)(struct __pyx_obj_9pywrapfst_Arc *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_9pywrapfst_Arc *__pyx_vtabptr_9pywrapfst_Arc;


/* "pywrapfst.pxd":355
 * 
 * 
 * cdef class ArcIterator(object):             # <<<<<<<<<<<<<<
 * 
 *   cdef shared_ptr[fst.FstClass] _fst
 */

struct __pyx_vtabstruct_9pywrapfst_ArcIterator {
  bool (*done)(struct __pyx_obj_9pywrapfst_ArcIterator *, int __pyx_skip_dispatch);
  __pyx_t_10basictypes_uint32 (*flags)(struct __pyx_obj_9pywrapfst_ArcIterator *, int __pyx_skip_dispatch);
  void (*next)(struct __pyx_obj_9pywrapfst_ArcIterator *, int __pyx_skip_dispatch);
  size_t (*position)(struct __pyx_obj_9pywrapfst_ArcIterator *, int __pyx_skip_dispatch);
  void (*reset)(struct __pyx_obj_9pywrapfst_ArcIterator *, int __pyx_skip_dispatch);
  void (*seek)(struct __pyx_obj_9pywrapfst_ArcIterator *, size_t, int __pyx_skip_dispatch);
  void (*set_flags)(struct __pyx_obj_9pywrapfst_ArcIterator *, __pyx_t_10basictypes_uint32, __pyx_t_10basictypes_uint32, int __pyx_skip_dispatch);
  PyObject *(*value)(struct __pyx_obj_9pywrapfst_ArcIterator *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_9pywrapfst_ArcIterator *__pyx_vtabptr_9pywrapfst_ArcIterator;


/* "pywrapfst.pxd":378
 * 
 * 
 * cdef class MutableArcIterator(object):             # <<<<<<<<<<<<<<
 * 
 *   cdef shared_ptr[fst.MutableFstClass] _mfst
 */

struct __pyx_vtabstruct_9pywrapfst_MutableArcIterator {
  bool (*done)(struct __pyx_obj_9pywrapfst_MutableArcIterator *, int __pyx_skip_dispatch);
  __pyx_t_10basictypes_uint32 (*flags)(struct __pyx_obj_9pywrapfst_MutableArcIterator *, int __pyx_skip_dispatch);
  void (*next)(struct __pyx_obj_9pywrapfst_MutableArcIterator *, int __pyx_skip_dispatch);
  size_t (*position)(struct __pyx_obj_9pywrapfst_MutableArcIterator *, int __pyx_skip_dispatch);
  void (*reset)(struct __pyx_obj_9pywrapfst_MutableArcIterator *, int __pyx_skip_dispatch);
  void (*seek)(struct __pyx_obj_9pywrapfst_MutableArcIterator *, size_t, int __pyx_skip_dispatch);
  void (*set_flags)(struct __pyx_obj_9pywrapfst_MutableArcIterator *, __pyx_t_10basictypes_uint32, __pyx_t_10basictypes_uint32, int __pyx_skip_dispatch);
  void (*set_value)(struct __pyx_obj_9pywrapfst_MutableArcIterator *, struct __pyx_obj_9pywrapfst_Arc *, int __pyx_skip_dispatch);
  PyObject *(*value)(struct __pyx_obj_9pywrapfst_MutableArcIterator *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_9pywrapfst_MutableArcIterator *__pyx_vtabptr_9pywrapfst_MutableArcIterator;


/* "pywrapfst.pxd":403
 * 
 * 
 * cdef class StateIterator(object):             # <<<<<<<<<<<<<<
 * 
 *   cdef shared_ptr[fst.FstClass] _fst
 */

struct __pyx_vtabstruct_9pywrapfst_StateIterator {
  bool (*done)(struct __pyx_obj_9pywrapfst_StateIterator *, int __pyx_skip_dispatch);
  void (*next)(struct __pyx_obj_9pywrapfst_StateIterator *, int __pyx_skip_dispatch);
  void (*reset)(struct __pyx_obj_9pywrapfst_StateIterator *, int __pyx_skip_dispatch);
  __pyx_t_10basictypes_int64 (*value)(struct __pyx_obj_9pywrapfst_StateIterator *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_9pywrapfst_StateIterator *__pyx_vtabptr_9pywrapfst_StateIterator;


/* "pywrapfst.pxd":492
 * 
 * 
 * cdef class Compiler(object):             # <<<<<<<<<<<<<<
 * 
 *   cdef unique_ptr[stringstream] _sstrm
 */

struct __pyx_vtabstruct_9pywrapfst_Compiler {
  struct __pyx_obj_9pywrapfst__Fst *(*compile)(struct __pyx_obj_9pywrapfst_Compiler *, int __pyx_skip_dispatch);
  void (*write)(struct __pyx_obj_9pywrapfst_Compiler *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_9pywrapfst_Compiler *__pyx_vtabptr_9pywrapfst_Compiler;


/* "pywrapfst.pxd":513
 * # FarReader.
 * 
 * cdef class FarReader(object):             # <<<<<<<<<<<<<<
 * 
 *   cdef unique_ptr[fst.FarReaderClass] _reader
 */

struct __pyx_vtabstruct_9pywrapfst_FarReader {
  std::string (*_arc_type)(struct __pyx_obj_9pywrapfst_FarReader *);
  bool (*done)(struct __pyx_obj_9pywrapfst_FarReader *, int __pyx_skip_dispatch);
  bool (*error)(struct __pyx_obj_9pywrapfst_FarReader *, int __pyx_skip_dispatch);
  std::string (*_far_type)(struct __pyx_obj_9pywrapfst_FarReader *);
  bool (*find)(struct __pyx_obj_9pywrapfst_FarReader *, PyObject *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pywrapfst__Fst *(*get_fst)(struct __pyx_obj_9pywrapfst_FarReader *, int __pyx_skip_dispatch);
  std::string (*get_key)(struct __pyx_obj_9pywrapfst_FarReader *, int __pyx_skip_dispatch);
  void (*next)(struct __pyx_obj_9pywrapfst_FarReader *, int __pyx_skip_dispatch);
  void (*reset)(struct __pyx_obj_9pywrapfst_FarReader *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_9pywrapfst_FarReader *__pyx_vtabptr_9pywrapfst_FarReader;


/* "pywrapfst.pxd":538
 * # FarWriter.
 * 
 * cdef class FarWriter(object):             # <<<<<<<<<<<<<<
 * 
 *   cdef unique_ptr[fst.FarWriterClass] _writer
 */

struct __pyx_vtabstruct_9pywrapfst_FarWriter {
  std::string (*_arc_type)(struct __pyx_obj_9pywrapfst_FarWriter *);
  void (*_close)(struct __pyx_obj_9pywrapfst_FarWriter *);
  void (*add)(struct __pyx_obj_9pywrapfst_FarWriter *, PyObject *, struct __pyx_obj_9pywrapfst__Fst *, int __pyx_skip_dispatch);
  bool (*error)(struct __pyx_obj_9pywrapfst_FarWriter *, int __pyx_skip_dispatch);
  std::string (*_far_type)(struct __pyx_obj_9pywrapfst_FarWriter *);
};
static struct __pyx_vtabstruct_9pywrapfst_FarWriter *__pyx_vtabptr_9pywrapfst_FarWriter;


/* "pynini.pyx":319
 * 
 * 
 * cdef class Fst(_MutableFst):             # <<<<<<<<<<<<<<
 * 
 *   """
 */

struct __pyx_vtabstruct_6pynini_Fst {
  struct __pyx_vtabstruct_9pywrapfst__MutableFst __pyx_base;
  void (*_check_pynini_op_error)(struct __pyx_obj_6pynini_Fst *);
  struct __pyx_obj_6pynini_StringPaths *(*paths)(struct __pyx_obj_6pynini_Fst *, int __pyx_skip_dispatch, struct __pyx_opt_args_6pynini_3Fst_paths *__pyx_optional_args);
  std::string (*stringify)(struct __pyx_obj_6pynini_Fst *, int __pyx_skip_dispatch, struct __pyx_opt_args_6pynini_3Fst_stringify *__pyx_optional_args);
  struct __pyx_obj_6pynini_Fst *(*copy)(struct __pyx_obj_6pynini_Fst *, int __pyx_skip_dispatch);
  void (*_optimize)(struct __pyx_obj_6pynini_Fst *, struct __pyx_opt_args_6pynini_3Fst__optimize *__pyx_optional_args);
};
static struct __pyx_vtabstruct_6pynini_Fst *__pyx_vtabptr_6pynini_Fst;


/* "pynini.pyx":1307
 * 
 * 
 * cdef class PdtParentheses(object):             # <<<<<<<<<<<<<<
 * 
 *   """
 */

struct __pyx_vtabstruct_6pynini_PdtParentheses {
  struct __pyx_obj_6pynini_PdtParentheses *(*copy)(struct __pyx_obj_6pynini_PdtParentheses *, int __pyx_skip_dispatch);
  void (*add_pair)(struct __pyx_obj_6pynini_PdtParentheses *, __pyx_t_10basictypes_int64, __pyx_t_10basictypes_int64, int __pyx_skip_dispatch);
  void (*write)(struct __pyx_obj_6pynini_PdtParentheses *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_6pynini_PdtParentheses *__pyx_vtabptr_6pynini_PdtParentheses;


/* "pynini.pyx":1636
 * 
 * 
 * cdef class MPdtParentheses(object):             # <<<<<<<<<<<<<<
 * 
 *   """
 */

struct __pyx_vtabstruct_6pynini_MPdtParentheses {
  struct __pyx_obj_6pynini_MPdtParentheses *(*copy)(struct __pyx_obj_6pynini_MPdtParentheses *, int __pyx_skip_dispatch);
  void (*add_triple)(struct __pyx_obj_6pynini_MPdtParentheses *, __pyx_t_10basictypes_int64, __pyx_t_10basictypes_int64, __pyx_t_10basictypes_int64, int __pyx_skip_dispatch);
  void (*write)(struct __pyx_obj_6pynini_MPdtParentheses *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_6pynini_MPdtParentheses *__pyx_vtabptr_6pynini_MPdtParentheses;


/* "pynini.pyx":1873
 * 
 * 
 * cdef class StringPaths(object):             # <<<<<<<<<<<<<<
 * 
 *   """
 */

struct __pyx_vtabstruct_6pynini_StringPaths {
  bool (*done)(struct __pyx_obj_6pynini_StringPaths *, int __pyx_skip_dispatch);
  bool (*error)(struct __pyx_obj_6pynini_StringPaths *, int __pyx_skip_dispatch);
  void (*reset)(struct __pyx_obj_6pynini_StringPaths *, int __pyx_skip_dispatch);
  void (*next)(struct __pyx_obj_6pynini_StringPaths *, int __pyx_skip_dispatch);
  std::string (*istring)(struct __pyx_obj_6pynini_StringPaths *, int __pyx_skip_dispatch);
  std::string (*ostring)(struct __pyx_obj_6pynini_StringPaths *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pywrapfst_Weight *(*weight)(struct __pyx_obj_6pynini_StringPaths *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_6pynini_StringPaths *__pyx_vtabptr_6pynini_StringPaths;


/* "pynini.pyx":2035
 * 
 * 
 * cdef class Far(object):             # <<<<<<<<<<<<<<
 * 
 *   """
 */

struct __pyx_vtabstruct_6pynini_Far {
  void (*_check_mode)(struct __pyx_obj_6pynini_Far *, char);
  void (*_check_not_mode)(struct __pyx_obj_6pynini_Far *, char);
  bool (*error)(struct __pyx_obj_6pynini_Far *, int __pyx_skip_dispatch);
  bool (*find)(struct __pyx_obj_6pynini_Far *, PyObject *, int __pyx_skip_dispatch);
  std::string (*get_key)(struct __pyx_obj_6pynini_Far *, int __pyx_skip_dispatch);
  void (*next)(struct __pyx_obj_6pynini_Far *, int __pyx_skip_dispatch);
  void (*reset)(struct __pyx_obj_6pynini_Far *, int __pyx_skip_dispatch);
  void (*add)(struct __pyx_obj_6pynini_Far *, PyObject *, struct __pyx_obj_6pynini_Fst *, int __pyx_skip_dispatch);
  void (*close)(struct __pyx_obj_6pynini_Far *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_6pynini_Far *__pyx_vtabptr_6pynini_Far;

/* --- Runtime support code (head) --- */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name);

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb);

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

#include <string.h>

static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb);
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb);

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);

#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

#define __Pyx_CyFunction_USED 1
#include <structmember.h>
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code)\
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

static CYTHON_INLINE int __Pyx_IterFinish(void);

static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

static CYTHON_INLINE int __Pyx_unpack_tuple2(PyObject* tuple, PyObject** value1, PyObject** value2,
                                             int is_tuple, int has_known_size, int decref_tuple);

static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

#define __Pyx_tp_new(type_obj, args) __Pyx_tp_new_kwargs(type_obj, args, NULL)
static CYTHON_INLINE PyObject* __Pyx_tp_new_kwargs(PyObject* type_obj, PyObject* args, PyObject* kwargs) {
    return (PyObject*) (((PyTypeObject*)type_obj)->tp_new((PyTypeObject*)type_obj, args, kwargs));
}

#define __Pyx_PyIter_Next(obj) __Pyx_PyIter_Next2(obj, NULL)
static CYTHON_INLINE PyObject *__Pyx_PyIter_Next2(PyObject *, PyObject *);

static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc);

static void* __Pyx_GetVtable(PyObject *dict);

static int __Pyx_SetVtable(PyObject *dict, void *vtable);

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name);

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

#include <new>

static CYTHON_INLINE int32_t __Pyx_PyInt_As_int32_t(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

static CYTHON_INLINE int64_t __Pyx_PyInt_As_int64_t(PyObject *);

static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int64_t(int64_t value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_char(char value);

#include "descrobject.h"
static PyObject* __Pyx_Method_ClassMethod(PyObject *method);

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);

static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyObject *);
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(PyTypeObject *type, __pyx_coroutine_body_t body,
                                                   PyObject *closure, PyObject *name, PyObject *qualname);
static int __Pyx_Coroutine_clear(PyObject *self);
#if 1 || PY_VERSION_HEX < 0x030300B0
static int __Pyx_PyGen_FetchStopIterationValue(PyObject **pvalue);
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue) PyGen_FetchStopIterationValue(pvalue)
#endif

static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

static int __Pyx_patch_abc(void);

#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, closure, name, qualname)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, closure, name, qualname)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

static int __Pyx_check_binary_version(void);

#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

static PyObject *__Pyx_ImportModule(const char *name);

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static void __pyx_f_6pynini_3Fst__check_pynini_op_error(struct __pyx_obj_6pynini_Fst *__pyx_v_self); /* proto*/
static struct __pyx_obj_6pynini_StringPaths *__pyx_f_6pynini_3Fst_paths(struct __pyx_obj_6pynini_Fst *__pyx_v_self, int __pyx_skip_dispatch, struct __pyx_opt_args_6pynini_3Fst_paths *__pyx_optional_args); /* proto*/
static std::string __pyx_f_6pynini_3Fst_stringify(struct __pyx_obj_6pynini_Fst *__pyx_v_self, int __pyx_skip_dispatch, struct __pyx_opt_args_6pynini_3Fst_stringify *__pyx_optional_args); /* proto*/
struct __pyx_obj_6pynini_Fst *__pyx_f_6pynini_3Fst_copy(struct __pyx_obj_6pynini_Fst *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
struct __pyx_obj_6pynini_Fst *__pyx_f_6pynini_3Fst_copy__pyx_wrap_1(struct __pyx_obj_6pynini_Fst *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static void __pyx_f_6pynini_3Fst__optimize(struct __pyx_obj_6pynini_Fst *__pyx_v_self, struct __pyx_opt_args_6pynini_3Fst__optimize *__pyx_optional_args); /* proto*/
static struct __pyx_obj_6pynini_PdtParentheses *__pyx_f_6pynini_14PdtParentheses_copy(struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static void __pyx_f_6pynini_14PdtParentheses_add_pair(struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_self, __pyx_t_10basictypes_int64 __pyx_v_push, __pyx_t_10basictypes_int64 __pyx_v_pop, int __pyx_skip_dispatch); /* proto*/
static void __pyx_f_6pynini_14PdtParentheses_write(struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_self, PyObject *__pyx_v_filename, int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_6pynini_MPdtParentheses *__pyx_f_6pynini_15MPdtParentheses_copy(struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static void __pyx_f_6pynini_15MPdtParentheses_add_triple(struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_self, __pyx_t_10basictypes_int64 __pyx_v_push, __pyx_t_10basictypes_int64 __pyx_v_pop, __pyx_t_10basictypes_int64 __pyx_v_assignment, int __pyx_skip_dispatch); /* proto*/
static void __pyx_f_6pynini_15MPdtParentheses_write(struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_self, PyObject *__pyx_v_filename, int __pyx_skip_dispatch); /* proto*/
static bool __pyx_f_6pynini_11StringPaths_done(struct __pyx_obj_6pynini_StringPaths *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static bool __pyx_f_6pynini_11StringPaths_error(struct __pyx_obj_6pynini_StringPaths *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static void __pyx_f_6pynini_11StringPaths_reset(struct __pyx_obj_6pynini_StringPaths *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static void __pyx_f_6pynini_11StringPaths_next(struct __pyx_obj_6pynini_StringPaths *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static std::string __pyx_f_6pynini_11StringPaths_istring(struct __pyx_obj_6pynini_StringPaths *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static std::string __pyx_f_6pynini_11StringPaths_ostring(struct __pyx_obj_6pynini_StringPaths *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_9pywrapfst_Weight *__pyx_f_6pynini_11StringPaths_weight(struct __pyx_obj_6pynini_StringPaths *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static void __pyx_f_6pynini_3Far__check_mode(struct __pyx_obj_6pynini_Far *__pyx_v_self, char __pyx_v_mode); /* proto*/
static void __pyx_f_6pynini_3Far__check_not_mode(struct __pyx_obj_6pynini_Far *__pyx_v_self, char __pyx_v_mode); /* proto*/
static bool __pyx_f_6pynini_3Far_error(struct __pyx_obj_6pynini_Far *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static bool __pyx_f_6pynini_3Far_find(struct __pyx_obj_6pynini_Far *__pyx_v_self, PyObject *__pyx_v_key, int __pyx_skip_dispatch); /* proto*/
static std::string __pyx_f_6pynini_3Far_get_key(struct __pyx_obj_6pynini_Far *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static void __pyx_f_6pynini_3Far_next(struct __pyx_obj_6pynini_Far *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static void __pyx_f_6pynini_3Far_reset(struct __pyx_obj_6pynini_Far *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static void __pyx_f_6pynini_3Far_add(struct __pyx_obj_6pynini_Far *__pyx_v_self, PyObject *__pyx_v_key, struct __pyx_obj_6pynini_Fst *__pyx_v_fst, int __pyx_skip_dispatch); /* proto*/
static void __pyx_f_6pynini_3Far_close(struct __pyx_obj_6pynini_Far *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/

/* Module declarations from 'libcpp' */

/* Module declarations from 'libcpp.memory' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'basictypes' */

/* Module declarations from 'libc.stddef' */

/* Module declarations from 'libc.time' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'ios' */

/* Module declarations from 'fst' */

/* Module declarations from 'memory' */

/* Module declarations from 'pywrapfst' */
static PyTypeObject *__pyx_ptype_9pywrapfst_Weight = 0;
static PyTypeObject *__pyx_ptype_9pywrapfst__SymbolTable = 0;
static PyTypeObject *__pyx_ptype_9pywrapfst__EncodeMapperSymbolTable = 0;
static PyTypeObject *__pyx_ptype_9pywrapfst__FstSymbolTable = 0;
static PyTypeObject *__pyx_ptype_9pywrapfst__MutableSymbolTable = 0;
static PyTypeObject *__pyx_ptype_9pywrapfst__MutableFstSymbolTable = 0;
static PyTypeObject *__pyx_ptype_9pywrapfst_SymbolTable = 0;
static PyTypeObject *__pyx_ptype_9pywrapfst_SymbolTableIterator = 0;
static PyTypeObject *__pyx_ptype_9pywrapfst_EncodeMapper = 0;
static PyTypeObject *__pyx_ptype_9pywrapfst__Fst = 0;
static PyTypeObject *__pyx_ptype_9pywrapfst__MutableFst = 0;
static PyTypeObject *__pyx_ptype_9pywrapfst_Arc = 0;
static PyTypeObject *__pyx_ptype_9pywrapfst_ArcIterator = 0;
static PyTypeObject *__pyx_ptype_9pywrapfst_MutableArcIterator = 0;
static PyTypeObject *__pyx_ptype_9pywrapfst_StateIterator = 0;
static PyTypeObject *__pyx_ptype_9pywrapfst_Compiler = 0;
static PyTypeObject *__pyx_ptype_9pywrapfst_FarReader = 0;
static PyTypeObject *__pyx_ptype_9pywrapfst_FarWriter = 0;
static std::string (*__pyx_f_9pywrapfst_tostring)(PyObject *, struct __pyx_opt_args_9pywrapfst_tostring *__pyx_optional_args); /*proto*/
static enum fst::QueueType (*__pyx_f_9pywrapfst__get_queue_type)(std::string); /*proto*/
static enum fst::ReplaceLabelType (*__pyx_f_9pywrapfst__get_replace_label_type)(std::string, bool); /*proto*/
static fst::script::WeightClass (*__pyx_f_9pywrapfst__get_WeightClass_or_One)(std::string const &, PyObject *); /*proto*/
static fst::script::WeightClass (*__pyx_f_9pywrapfst__get_WeightClass_or_Zero)(std::string const &, PyObject *); /*proto*/
static struct __pyx_obj_9pywrapfst__Fst *(*__pyx_f_9pywrapfst__read_Fst)(PyObject *, struct __pyx_opt_args_9pywrapfst__read_Fst *__pyx_optional_args); /*proto*/

/* Module declarations from 'fst_util' */

/* Module declarations from 'pynini_includes' */

/* Module declarations from 'pynini' */
static PyTypeObject *__pyx_ptype_6pynini_Fst = 0;
static PyTypeObject *__pyx_ptype_6pynini_PdtParentheses = 0;
static PyTypeObject *__pyx_ptype_6pynini_MPdtParentheses = 0;
static PyTypeObject *__pyx_ptype_6pynini_StringPaths = 0;
static PyTypeObject *__pyx_ptype_6pynini_Far = 0;
static PyTypeObject *__pyx_ptype_6pynini___pyx_scope_struct___1arg_patch = 0;
static PyTypeObject *__pyx_ptype_6pynini___pyx_scope_struct_1__shortestdistance_patch = 0;
static PyTypeObject *__pyx_ptype_6pynini___pyx_scope_struct_2__compose_patch = 0;
static PyTypeObject *__pyx_ptype_6pynini___pyx_scope_struct_3__difference_patch = 0;
static PyTypeObject *__pyx_ptype_6pynini___pyx_scope_struct_4__intersect_patch = 0;
static PyTypeObject *__pyx_ptype_6pynini___pyx_scope_struct_5__comp_patch = 0;
static PyTypeObject *__pyx_ptype_6pynini___pyx_scope_struct_6__comp_merge_patch = 0;
static PyTypeObject *__pyx_ptype_6pynini___pyx_scope_struct_7___iter__ = 0;
static PyTypeObject *__pyx_ptype_6pynini___pyx_scope_struct_8___iter__ = 0;
static PyTypeObject *__pyx_ptype_6pynini___pyx_scope_struct_9__copy_patch = 0;
static __pyx_t_10basictypes_uint64 __pyx_v_6pynini_kAcceptorAndString;
static enum fst::TokenType __pyx_f_6pynini__get_token_type(std::string); /*proto*/
static enum fst::PdtComposeFilter __pyx_f_6pynini__get_pdt_compose_filter(std::string); /*proto*/
static enum fst::PdtParserType __pyx_f_6pynini__get_pdt_parser_type(std::string); /*proto*/
static void __pyx_f_6pynini__add_parentheses_symbols(fst::script::MutableFstClass *, std::vector<__pyx_t_15pynini_includes_LabelPair>  const &, bool); /*proto*/
static struct __pyx_obj_6pynini_Fst *__pyx_f_6pynini__compile_or_copy_Fst(PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_6pynini__compile_or_copy_Fst *__pyx_optional_args); /*proto*/
static struct __pyx_obj_6pynini_Fst *__pyx_f_6pynini__init_Fst_from_MutableFst(struct __pyx_obj_9pywrapfst__MutableFst *); /*proto*/
static struct __pyx_obj_6pynini_Fst *__pyx_f_6pynini_acceptor(PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_6pynini_acceptor *__pyx_optional_args); /*proto*/
static struct __pyx_obj_6pynini_Fst *__pyx_f_6pynini_transducer(PyObject *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_6pynini_transducer *__pyx_optional_args); /*proto*/
static struct __pyx_obj_6pynini_Fst *__pyx_f_6pynini_cdrewrite(PyObject *, PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_6pynini_cdrewrite *__pyx_optional_args); /*proto*/
static struct __pyx_obj_6pynini_Fst *__pyx_f_6pynini_mpdt_compose(PyObject *, PyObject *, struct __pyx_obj_6pynini_MPdtParentheses *, int __pyx_skip_dispatch, struct __pyx_opt_args_6pynini_mpdt_compose *__pyx_optional_args); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "pynini"
int __pyx_module_is_main_pynini = 0;

/* Implementation of 'pynini' */
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_property;
static PyObject *__pyx_builtin_xrange;
static PyObject *__pyx_builtin_KeyError;
static PyObject *__pyx_builtin_super;
static PyObject *__pyx_builtin_NotImplementedError;
static PyObject *__pyx_builtin_UnicodeDecodeError;
static PyObject *__pyx_builtin_id;
static PyObject *__pyx_builtin_StopIteration;
static char __pyx_k_[] = "";
static char __pyx_k_a[] = "a";
static char __pyx_k_c[] = "{:c}";
static char __pyx_k_r[] = "r";
static char __pyx_k_t[] = "t";
static char __pyx_k_u[] = "u";
static char __pyx_k_cf[] = "cf";
static char __pyx_k_id[] = "id";
static char __pyx_k_nt[] = "nt";
static char __pyx_k_qt[] = "qt";
static char __pyx_k_tb[] = "tb";
static char __pyx_k_wc[] = "wc";
static char __pyx_k_Arc[] = "Arc";
static char __pyx_k_add[] = "add";
static char __pyx_k_arg[] = "arg";
static char __pyx_k_cal[] = "cal";
static char __pyx_k_doc[] = "__doc__";
static char __pyx_k_exc[] = "exc";
static char __pyx_k_fnc[] = "fnc";
static char __pyx_k_fst[] = "fst";
static char __pyx_k_key[] = "key";
static char __pyx_k_lhs[] = "lhs";
static char __pyx_k_ltr[] = "ltr";
static char __pyx_k_obl[] = "obl";
static char __pyx_k_opt[] = "opt";
static char __pyx_k_pdt[] = "pdt";
static char __pyx_k_pop[] = "pop";
static char __pyx_k_ral[] = "ral";
static char __pyx_k_rep[] = "rep";
static char __pyx_k_rho[] = "rho";
static char __pyx_k_rhs[] = "rhs";
static char __pyx_k_rtl[] = "rtl";
static char __pyx_k_sim[] = "sim";
static char __pyx_k_tau[] = "tau";
static char __pyx_k_arg1[] = "arg1";
static char __pyx_k_arg2[] = "arg2";
static char __pyx_k_args[] = "args";
static char __pyx_k_byte[] = "byte";
static char __pyx_k_copy[] = "copy";
static char __pyx_k_done[] = "done";
static char __pyx_k_fifo[] = "fifo";
static char __pyx_k_find[] = "find";
static char __pyx_k_ifst[] = "ifst";
static char __pyx_k_ipdt[] = "ipdt";
static char __pyx_k_iter[] = "__iter__";
static char __pyx_k_left[] = "left";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_mode[] = "mode";
static char __pyx_k_mpdt[] = "mpdt";
static char __pyx_k_name[] = "__name__";
static char __pyx_k_next[] = "next";
static char __pyx_k_open[] = "open";
static char __pyx_k_opts[] = "opts";
static char __pyx_k_pair[] = "pair";
static char __pyx_k_plus[] = "plus";
static char __pyx_k_push[] = "push";
static char __pyx_k_ques[] = "ques";
static char __pyx_k_read[] = "read";
static char __pyx_k_rest[] = "rest";
static char __pyx_k_root[] = "root";
static char __pyx_k_send[] = "send";
static char __pyx_k_star[] = "star";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_utf8[] = "utf8";
static char __pyx_k_ERROR[] = "ERROR";
static char __pyx_k_close[] = "close";
static char __pyx_k_equal[] = "equal";
static char __pyx_k_error[] = "error";
static char __pyx_k_first[] = "first";
static char __pyx_k_ifst1[] = "ifst1";
static char __pyx_k_ifst2[] = "ifst2";
static char __pyx_k_impdt[] = "impdt";
static char __pyx_k_isyms[] = "isyms";
static char __pyx_k_items[] = "items";
static char __pyx_k_itype[] = "itype";
static char __pyx_k_lower[] = "lower";
static char __pyx_k_osyms[] = "osyms";
static char __pyx_k_otype[] = "otype";
static char __pyx_k_pairs[] = "pairs";
static char __pyx_k_paren[] = "paren";
static char __pyx_k_patch[] = "patch";
static char __pyx_k_paths[] = "paths";
static char __pyx_k_prune[] = "prune";
static char __pyx_k_range[] = "range";
static char __pyx_k_reset[] = "reset";
static char __pyx_k_super[] = "super";
static char __pyx_k_throw[] = "throw";
static char __pyx_k_union[] = "union";
static char __pyx_k_upper[] = "upper";
static char __pyx_k_value[] = "value";
static char __pyx_k_wraps[] = "wraps";
static char __pyx_k_write[] = "write";
static char __pyx_k_CYCLIC[] = "CYCLIC";
static char __pyx_k_STRING[] = "STRING";
static char __pyx_k_Weight[] = "Weight";
static char __pyx_k_arcmap[] = "arcmap";
static char __pyx_k_closed[] = "closed";
static char __pyx_k_concat[] = "concat";
static char __pyx_k_create[] = "create";
static char __pyx_k_decode[] = "decode";
static char __pyx_k_encode[] = "encode";
static char __pyx_k_expand[] = "expand";
static char __pyx_k_format[] = "format";
static char __pyx_k_ilabel[] = "ilabel";
static char __pyx_k_import[] = "__import__";
static char __pyx_k_invert[] = "invert";
static char __pyx_k_kwargs[] = "kwargs";
static char __pyx_k_lambda[] = "lambda_";
static char __pyx_k_module[] = "__module__";
static char __pyx_k_name_2[] = "name";
static char __pyx_k_olabel[] = "olabel";
static char __pyx_k_parens[] = "parens";
static char __pyx_k_pynini[] = "pynini";
static char __pyx_k_result[] = "result";
static char __pyx_k_string[] = "string";
static char __pyx_k_symbol[] = "symbol";
static char __pyx_k_vector[] = "vector";
static char __pyx_k_weight[] = "weight";
static char __pyx_k_xrange[] = "xrange";
static char __pyx_k_ACYCLIC[] = "ACYCLIC";
static char __pyx_k_MUTABLE[] = "MUTABLE";
static char __pyx_k_arcsort[] = "arcsort";
static char __pyx_k_astring[] = "astring";
static char __pyx_k_closure[] = "closure";
static char __pyx_k_compose[] = "compose";
static char __pyx_k_connect[] = "connect";
static char __pyx_k_default[] = "default";
static char __pyx_k_get_fst[] = "get_fst";
static char __pyx_k_get_key[] = "get_key";
static char __pyx_k_istring[] = "istring";
static char __pyx_k_left_sr[] = "left_sr";
static char __pyx_k_logging[] = "logging";
static char __pyx_k_neither[] = "neither";
static char __pyx_k_nonterm[] = "nonterm";
static char __pyx_k_ostring[] = "ostring";
static char __pyx_k_path_gc[] = "path_gc";
static char __pyx_k_prepare[] = "__prepare__";
static char __pyx_k_project[] = "project";
static char __pyx_k_randgen[] = "randgen";
static char __pyx_k_replace[] = "replace";
static char __pyx_k_reverse[] = "reverse";
static char __pyx_k_success[] = "success";
static char __pyx_k_topsort[] = "topsort";
static char __pyx_k_warning[] = "warning";
static char __pyx_k_ACCEPTOR[] = "ACCEPTOR";
static char __pyx_k_EPSILONS[] = "EPSILONS";
static char __pyx_k_EXPANDED[] = "EXPANDED";
static char __pyx_k_KeyError[] = "KeyError";
static char __pyx_k_WEIGHTED[] = "WEIGHTED";
static char __pyx_k_acceptor[] = "acceptor";
static char __pyx_k_add_pair[] = "add_pair";
static char __pyx_k_arc_type[] = "arc_type";
static char __pyx_k_far_type[] = "far_type";
static char __pyx_k_filename[] = "filename";
static char __pyx_k_isymbols[] = "isymbols";
static char __pyx_k_left_pdt[] = "left_pdt";
static char __pyx_k_minimize[] = "minimize";
static char __pyx_k_optimize[] = "optimize";
static char __pyx_k_osymbols[] = "osymbols";
static char __pyx_k_property[] = "property";
static char __pyx_k_qualname[] = "__qualname__";
static char __pyx_k_reweight[] = "reweight";
static char __pyx_k_root_fst[] = "root_fst";
static char __pyx_k_standard[] = "standard";
static char __pyx_k_statemap[] = "statemap";
static char __pyx_k_typed_cf[] = "typed_cf";
static char __pyx_k_direction[] = "direction";
static char __pyx_k_functools[] = "functools";
static char __pyx_k_intersect[] = "intersect";
static char __pyx_k_iteritems[] = "iteritems";
static char __pyx_k_left_mpdt[] = "left_mpdt";
static char __pyx_k_metaclass[] = "__metaclass__";
static char __pyx_k_new_pairs[] = "new_pairs";
static char __pyx_k_pywrapfst[] = "pywrapfst";
static char __pyx_k_rmepsilon[] = "rmepsilon";
static char __pyx_k_sort_type[] = "sort_type";
static char __pyx_k_stringify[] = "stringify";
static char __pyx_k_1arg_patch[] = "_1arg_patch";
static char __pyx_k_ACCESSIBLE[] = "ACCESSIBLE";
static char __pyx_k_FstIOError[] = "FstIOError";
static char __pyx_k_FstOpError[] = "FstOpError";
static char __pyx_k_I_EPSILONS[] = "I_EPSILONS";
static char __pyx_k_NOT_STRING[] = "NOT_STRING";
static char __pyx_k_O_EPSILONS[] = "O_EPSILONS";
static char __pyx_k_TOP_SORTED[] = "TOP_SORTED";
static char __pyx_k_UNWEIGHTED[] = "UNWEIGHTED";
static char __pyx_k_ValueError[] = "ValueError";
static char __pyx_k_add_triple[] = "add_triple";
static char __pyx_k_assignment[] = "assignment";
static char __pyx_k_comp_patch[] = "_comp_patch";
static char __pyx_k_copy_patch[] = "_copy_patch";
static char __pyx_k_difference[] = "difference";
static char __pyx_k_equivalent[] = "equivalent";
static char __pyx_k_isomorphic[] = "isomorphic";
static char __pyx_k_num_states[] = "num_states";
static char __pyx_k_pdt_expand[] = "pdt_expand";
static char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static char __pyx_k_result_fst[] = "result_fst";
static char __pyx_k_sigma_star[] = "sigma_star";
static char __pyx_k_string_map[] = "string_map";
static char __pyx_k_token_type[] = "token_type";
static char __pyx_k_transducer[] = "transducer";
static char __pyx_k_ArcIterator[] = "ArcIterator";
static char __pyx_k_FstArgError[] = "FstArgError";
static char __pyx_k_NO_EPSILONS[] = "NO_EPSILONS";
static char __pyx_k_Read_failed[] = "Read failed";
static char __pyx_k_SymbolTable[] = "_SymbolTable";
static char __pyx_k_determinize[] = "determinize";
static char __pyx_k_mpdt_expand[] = "mpdt_expand";
static char __pyx_k_pdt_compose[] = "pdt_compose";
static char __pyx_k_pdt_replace[] = "pdt_replace";
static char __pyx_k_pdt_reverse[] = "pdt_reverse";
static char __pyx_k_replacement[] = "replacement";
static char __pyx_k_string_file[] = "string_file";
static char __pyx_k_synchronize[] = "synchronize";
static char __pyx_k_weight_type[] = "weight_type";
static char __pyx_k_COACCESSIBLE[] = "COACCESSIBLE";
static char __pyx_k_EncodeMapper[] = "EncodeMapper";
static char __pyx_k_NOT_ACCEPTOR[] = "NOT_ACCEPTOR";
static char __pyx_k_disambiguate[] = "disambiguate";
static char __pyx_k_epsnormalize[] = "epsnormalize";
static char __pyx_k_expand_paren[] = "expand_paren";
static char __pyx_k_mpdt_reverse[] = "mpdt_reverse";
static char __pyx_k_replacements[] = "replacements";
static char __pyx_k_return_label[] = "return_label";
static char __pyx_k_shortestpath[] = "shortestpath";
static char __pyx_k_FstIndexError[] = "FstIndexError";
static char __pyx_k_NO_I_EPSILONS[] = "NO_I_EPSILONS";
static char __pyx_k_NO_O_EPSILONS[] = "NO_O_EPSILONS";
static char __pyx_k_Read_failed_r[] = "Read failed: {!r}";
static char __pyx_k_StateIterator[] = "StateIterator";
static char __pyx_k_StopIteration[] = "StopIteration";
static char __pyx_k_SymbolTable_2[] = "SymbolTable";
static char __pyx_k_compose_patch[] = "_compose_patch";
static char __pyx_k_compute_props[] = "compute_props";
static char __pyx_k_relabel_pairs[] = "relabel_pairs";
static char __pyx_k_result_parens[] = "result_parens";
static char __pyx_k_FST_PROPERTIES[] = "FST_PROPERTIES";
static char __pyx_k_INITIAL_CYCLIC[] = "INITIAL_CYCLIC";
static char __pyx_k_I_LABEL_SORTED[] = "I_LABEL_SORTED";
static char __pyx_k_NOT_ACCESSIBLE[] = "NOT_ACCESSIBLE";
static char __pyx_k_NOT_TOP_SORTED[] = "NOT_TOP_SORTED";
static char __pyx_k_O_LABEL_SORTED[] = "O_LABEL_SORTED";
static char __pyx_k_Unknown_mode_r[] = "Unknown mode: {!r}";
static char __pyx_k_Write_failed_r[] = "Write failed: {!r}";
static char __pyx_k_randequivalent[] = "randequivalent";
static char __pyx_k_relabel_tables[] = "relabel_tables";
static char __pyx_k_COPY_PROPERTIES[] = "COPY_PROPERTIES";
static char __pyx_k_INITIAL_ACYCLIC[] = "INITIAL_ACYCLIC";
static char __pyx_k_I_DETERMINISTIC[] = "I_DETERMINISTIC";
static char __pyx_k_NULL_PROPERTIES[] = "NULL_PROPERTIES";
static char __pyx_k_O_DETERMINISTIC[] = "O_DETERMINISTIC";
static char __pyx_k_WEIGHTED_CYCLES[] = "WEIGHTED_CYCLES";
static char __pyx_k_intersect_patch[] = "_intersect_patch";
static char __pyx_k_pdt_parser_type[] = "pdt_parser_type";
static char __pyx_k_replacement_set[] = "replacement_set";
static char __pyx_k_NOT_COACCESSIBLE[] = "NOT_COACCESSIBLE";
static char __pyx_k_Operation_failed[] = "Operation failed";
static char __pyx_k_comp_merge_patch[] = "_comp_merge_patch";
static char __pyx_k_difference_patch[] = "_difference_patch";
static char __pyx_k_input_token_type[] = "input_token_type";
static char __pyx_k_keep_parentheses[] = "keep_parentheses";
static char __pyx_k_pdt_shortestpath[] = "pdt_shortestpath";
static char __pyx_k_shortestdistance[] = "shortestdistance";
static char __pyx_k_BINARY_PROPERTIES[] = "BINARY_PROPERTIES";
static char __pyx_k_FstBadWeightError[] = "FstBadWeightError";
static char __pyx_k_UNWEIGHTED_CYCLES[] = "UNWEIGHTED_CYCLES";
static char __pyx_k_call_arc_labeling[] = "call_arc_labeling";
static char __pyx_k_output_token_type[] = "output_token_type";
static char __pyx_k_ADD_ARC_PROPERTIES[] = "ADD_ARC_PROPERTIES";
static char __pyx_k_FST_is_not_acyclic[] = "FST is not acyclic";
static char __pyx_k_MutableArcIterator[] = "MutableArcIterator";
static char __pyx_k_NOT_I_LABEL_SORTED[] = "NOT_I_LABEL_SORTED";
static char __pyx_k_NOT_O_LABEL_SORTED[] = "NOT_O_LABEL_SORTED";
static char __pyx_k_SET_ARC_PROPERTIES[] = "SET_ARC_PROPERTIES";
static char __pyx_k_TRINARY_PROPERTIES[] = "TRINARY_PROPERTIES";
static char __pyx_k_UnicodeDecodeError[] = "UnicodeDecodeError";
static char __pyx_k_Unknown_arc_type_r[] = "Unknown arc type: {!r}";
static char __pyx_k_epsilon_on_replace[] = "epsilon_on_replace";
static char __pyx_k_ARC_SORT_PROPERTIES[] = "ARC_SORT_PROPERTIES";
static char __pyx_k_FST_is_not_a_string[] = "FST is not a string";
static char __pyx_k_NON_I_DETERMINISTIC[] = "NON_I_DETERMINISTIC";
static char __pyx_k_NON_O_DETERMINISTIC[] = "NON_O_DETERMINISTIC";
static char __pyx_k_NotImplementedError[] = "NotImplementedError";
static char __pyx_k_StringPaths_at_0x_x[] = "<StringPaths at 0x{:x}>";
static char __pyx_k_SymbolTableIterator[] = "SymbolTableIterator";
static char __pyx_k_return_arc_labeling[] = "return_arc_labeling";
static char __pyx_k_ADD_STATE_PROPERTIES[] = "ADD_STATE_PROPERTIES";
static char __pyx_k_EXTRINSIC_PROPERTIES[] = "EXTRINSIC_PROPERTIES";
static char __pyx_k_Far_r_mode_c_at_0x_x[] = "<{} Far {!r}, mode '{:c}' at 0x{:x}>";
static char __pyx_k_INTRINSIC_PROPERTIES[] = "INTRINSIC_PROPERTIES";
static char __pyx_k_SET_FINAL_PROPERTIES[] = "SET_FINAL_PROPERTIES";
static char __pyx_k_SET_START_PROPERTIES[] = "SET_START_PROPERTIES";
static char __pyx_k_Unknown_token_type_r[] = "Unknown token type: {!r}";
static char __pyx_k_DELETE_ARC_PROPERTIES[] = "DELETE_ARC_PROPERTIES";
static char __pyx_k_PdtParentheses___iter[] = "PdtParentheses.__iter__";
static char __pyx_k_STATE_SORT_PROPERTIES[] = "STATE_SORT_PROPERTIES";
static char __pyx_k_MPdtParentheses___iter[] = "MPdtParentheses.__iter__";
static char __pyx_k_NEG_TRINARY_PROPERTIES[] = "NEG_TRINARY_PROPERTIES";
static char __pyx_k_POS_TRINARY_PROPERTIES[] = "POS_TRINARY_PROPERTIES";
static char __pyx_k_PdtParentheses_at_0x_x[] = "<PdtParentheses at 0x{:x}>";
static char __pyx_k_shortestdistance_patch[] = "_shortestdistance_patch";
static char __pyx_k_1arg_patch_locals_patch[] = "_1arg_patch.<locals>.patch";
static char __pyx_k_DELETE_STATE_PROPERTIES[] = "DELETE_STATE_PROPERTIES";
static char __pyx_k_MPdtParentheses_at_0x_x[] = "<MPdtParentheses at 0x{:x}>";
static char __pyx_k_comp_patch_locals_patch[] = "_comp_patch.<locals>.patch";
static char __pyx_k_copy_patch_locals_patch[] = "_copy_patch.<locals>.patch";
static char __pyx_k_FstSymbolTableMergeError[] = "FstSymbolTableMergeError";
static char __pyx_k_Operator_not_implemented[] = "Operator {} not implemented";
static char __pyx_k_RM_SUPERFINAL_PROPERTIES[] = "RM_SUPERFINAL_PROPERTIES";
static char __pyx_k_ADD_SUPERFINAL_PROPERTIES[] = "ADD_SUPERFINAL_PROPERTIES";
static char __pyx_k_FstStringCompilationError[] = "FstStringCompilationError";
static char __pyx_k_FstUnknownWeightTypeError[] = "FstUnknownWeightTypeError";
static char __pyx_k_Unknown_PDT_parser_type_r[] = "Unknown PDT parser type: {!r}";
static char __pyx_k_FstDeletedConstructorError[] = "FstDeletedConstructorError";
static char __pyx_k_compose_patch_locals_patch[] = "_compose_patch.<locals>.patch";
static char __pyx_k_Unknown_rewrite_mode_type_r[] = "Unknown rewrite mode type: {!r}";
static char __pyx_k_WEIGHT_INVARIANT_PROPERTIES[] = "WEIGHT_INVARIANT_PROPERTIES";
static char __pyx_k_I_LABEL_INVARIANT_PROPERTIES[] = "I_LABEL_INVARIANT_PROPERTIES";
static char __pyx_k_O_LABEL_INVARIANT_PROPERTIES[] = "O_LABEL_INVARIANT_PROPERTIES";
static char __pyx_k_intersect_patch_locals_patch[] = "_intersect_patch.<locals>.patch";
static char __pyx_k_Bytestring_compilation_failed[] = "Bytestring compilation failed";
static char __pyx_k_String_map_compilation_failed[] = "String map compilation failed";
static char __pyx_k_comp_merge_patch_locals_patch[] = "_comp_merge_patch.<locals>.patch";
static char __pyx_k_difference_patch_locals_patch[] = "_difference_patch.<locals>.patch";
static char __pyx_k_UTF8_string_compilation_failed[] = "UTF8 string compilation failed";
static char __pyx_k_Cannot_invoke_method_in_current[] = "Cannot invoke method in current mode: '{:c}'";
static char __pyx_k_Mappings_must_be_of_length_1_or[] = "Mappings must be of length 1 or 2";
static char __pyx_k_Unknown_PDT_compose_filter_type[] = "Unknown PDT compose filter type: {!r}";
static char __pyx_k_shortestdistance_patch_locals_p[] = "_shortestdistance_patch.<locals>.patch";
static char __pyx_k_usr_local_google_home_kbg_src_p[] = "/usr/local/google/home/kbg/src/pynini9/src/pynini.pyx";
static char __pyx_k_Compiled_rewrite_rule_has_no_con[] = "Compiled rewrite rule has no connected states";
static char __pyx_k_Composed_FST_has_no_connected_st[] = "Composed FST has no connected states";
static char __pyx_k_Composed_MPDT_has_no_connected_s[] = "Composed MPDT has no connected states";
static char __pyx_k_Composed_PDT_has_no_connected_st[] = "Composed PDT has no connected states";
static char __pyx_k_Expected_at_least_2_positional_a[] = "Expected at least 2 positional arguments ({} given)";
static char __pyx_k_Expecting_acceptor_or_string_arg[] = "Expecting acceptor or string argument, got a transducer";
static char __pyx_k_Pynini_finite_state_grammar_comp[] = "Pynini: finite-state grammar compilation for Python.\n\nPynini is an experimental Python module which implements compilation of\ngrammars as finite-state transducers (FSTs).\n\nThis module is designed to be wildcard-import-safe.\n";
static char __pyx_k_Symbol_string_compilation_failed[] = "Symbol string compilation failed";
static char __pyx_k_Unable_to_resolve_parentheses_sy[] = "Unable to resolve parentheses symbol table conflict";
static char __pyx_k_Unable_to_resolve_symbol_table_c[] = "Unable to resolve symbol table conflict without relabeling";
static char __pyx_k_Unknown_rewrite_direction_type_r[] = "Unknown rewrite direction type: {!r}";
static PyObject *__pyx_n_s_1arg_patch;
static PyObject *__pyx_n_s_1arg_patch_locals_patch;
static PyObject *__pyx_n_s_ACCEPTOR;
static PyObject *__pyx_n_s_ACCESSIBLE;
static PyObject *__pyx_n_s_ACYCLIC;
static PyObject *__pyx_n_s_ADD_ARC_PROPERTIES;
static PyObject *__pyx_n_s_ADD_STATE_PROPERTIES;
static PyObject *__pyx_n_s_ADD_SUPERFINAL_PROPERTIES;
static PyObject *__pyx_n_s_ARC_SORT_PROPERTIES;
static PyObject *__pyx_n_s_Arc;
static PyObject *__pyx_n_s_ArcIterator;
static PyObject *__pyx_n_s_BINARY_PROPERTIES;
static PyObject *__pyx_kp_s_Bytestring_compilation_failed;
static PyObject *__pyx_n_s_COACCESSIBLE;
static PyObject *__pyx_n_s_COPY_PROPERTIES;
static PyObject *__pyx_n_s_CYCLIC;
static PyObject *__pyx_kp_s_Cannot_invoke_method_in_current;
static PyObject *__pyx_kp_s_Compiled_rewrite_rule_has_no_con;
static PyObject *__pyx_kp_s_Composed_FST_has_no_connected_st;
static PyObject *__pyx_kp_s_Composed_MPDT_has_no_connected_s;
static PyObject *__pyx_kp_s_Composed_PDT_has_no_connected_st;
static PyObject *__pyx_n_s_DELETE_ARC_PROPERTIES;
static PyObject *__pyx_n_s_DELETE_STATE_PROPERTIES;
static PyObject *__pyx_n_s_EPSILONS;
static PyObject *__pyx_n_s_ERROR;
static PyObject *__pyx_n_s_EXPANDED;
static PyObject *__pyx_n_s_EXTRINSIC_PROPERTIES;
static PyObject *__pyx_n_s_EncodeMapper;
static PyObject *__pyx_kp_s_Expected_at_least_2_positional_a;
static PyObject *__pyx_kp_s_Expecting_acceptor_or_string_arg;
static PyObject *__pyx_n_s_FST_PROPERTIES;
static PyObject *__pyx_kp_s_FST_is_not_a_string;
static PyObject *__pyx_kp_s_FST_is_not_acyclic;
static PyObject *__pyx_kp_s_Far_r_mode_c_at_0x_x;
static PyObject *__pyx_n_s_FstArgError;
static PyObject *__pyx_n_s_FstBadWeightError;
static PyObject *__pyx_n_s_FstDeletedConstructorError;
static PyObject *__pyx_n_s_FstIOError;
static PyObject *__pyx_n_s_FstIndexError;
static PyObject *__pyx_n_s_FstOpError;
static PyObject *__pyx_n_s_FstStringCompilationError;
static PyObject *__pyx_n_s_FstSymbolTableMergeError;
static PyObject *__pyx_n_s_FstUnknownWeightTypeError;
static PyObject *__pyx_n_s_INITIAL_ACYCLIC;
static PyObject *__pyx_n_s_INITIAL_CYCLIC;
static PyObject *__pyx_n_s_INTRINSIC_PROPERTIES;
static PyObject *__pyx_n_s_I_DETERMINISTIC;
static PyObject *__pyx_n_s_I_EPSILONS;
static PyObject *__pyx_n_s_I_LABEL_INVARIANT_PROPERTIES;
static PyObject *__pyx_n_s_I_LABEL_SORTED;
static PyObject *__pyx_n_s_KeyError;
static PyObject *__pyx_n_s_MPdtParentheses___iter;
static PyObject *__pyx_kp_s_MPdtParentheses_at_0x_x;
static PyObject *__pyx_n_s_MUTABLE;
static PyObject *__pyx_kp_s_Mappings_must_be_of_length_1_or;
static PyObject *__pyx_n_s_MutableArcIterator;
static PyObject *__pyx_n_s_NEG_TRINARY_PROPERTIES;
static PyObject *__pyx_n_s_NON_I_DETERMINISTIC;
static PyObject *__pyx_n_s_NON_O_DETERMINISTIC;
static PyObject *__pyx_n_s_NOT_ACCEPTOR;
static PyObject *__pyx_n_s_NOT_ACCESSIBLE;
static PyObject *__pyx_n_s_NOT_COACCESSIBLE;
static PyObject *__pyx_n_s_NOT_I_LABEL_SORTED;
static PyObject *__pyx_n_s_NOT_O_LABEL_SORTED;
static PyObject *__pyx_n_s_NOT_STRING;
static PyObject *__pyx_n_s_NOT_TOP_SORTED;
static PyObject *__pyx_n_s_NO_EPSILONS;
static PyObject *__pyx_n_s_NO_I_EPSILONS;
static PyObject *__pyx_n_s_NO_O_EPSILONS;
static PyObject *__pyx_n_s_NULL_PROPERTIES;
static PyObject *__pyx_n_s_NotImplementedError;
static PyObject *__pyx_n_s_O_DETERMINISTIC;
static PyObject *__pyx_n_s_O_EPSILONS;
static PyObject *__pyx_n_s_O_LABEL_INVARIANT_PROPERTIES;
static PyObject *__pyx_n_s_O_LABEL_SORTED;
static PyObject *__pyx_kp_s_Operation_failed;
static PyObject *__pyx_kp_s_Operator_not_implemented;
static PyObject *__pyx_n_s_POS_TRINARY_PROPERTIES;
static PyObject *__pyx_n_s_PdtParentheses___iter;
static PyObject *__pyx_kp_s_PdtParentheses_at_0x_x;
static PyObject *__pyx_n_s_RM_SUPERFINAL_PROPERTIES;
static PyObject *__pyx_kp_s_Read_failed;
static PyObject *__pyx_kp_s_Read_failed_r;
static PyObject *__pyx_n_s_SET_ARC_PROPERTIES;
static PyObject *__pyx_n_s_SET_FINAL_PROPERTIES;
static PyObject *__pyx_n_s_SET_START_PROPERTIES;
static PyObject *__pyx_n_s_STATE_SORT_PROPERTIES;
static PyObject *__pyx_n_s_STRING;
static PyObject *__pyx_n_s_StateIterator;
static PyObject *__pyx_n_s_StopIteration;
static PyObject *__pyx_kp_s_StringPaths_at_0x_x;
static PyObject *__pyx_kp_s_String_map_compilation_failed;
static PyObject *__pyx_n_s_SymbolTable;
static PyObject *__pyx_n_s_SymbolTableIterator;
static PyObject *__pyx_n_s_SymbolTable_2;
static PyObject *__pyx_kp_s_Symbol_string_compilation_failed;
static PyObject *__pyx_n_s_TOP_SORTED;
static PyObject *__pyx_n_s_TRINARY_PROPERTIES;
static PyObject *__pyx_n_s_UNWEIGHTED;
static PyObject *__pyx_n_s_UNWEIGHTED_CYCLES;
static PyObject *__pyx_kp_s_UTF8_string_compilation_failed;
static PyObject *__pyx_kp_s_Unable_to_resolve_parentheses_sy;
static PyObject *__pyx_kp_s_Unable_to_resolve_symbol_table_c;
static PyObject *__pyx_n_s_UnicodeDecodeError;
static PyObject *__pyx_kp_s_Unknown_PDT_compose_filter_type;
static PyObject *__pyx_kp_s_Unknown_PDT_parser_type_r;
static PyObject *__pyx_kp_s_Unknown_arc_type_r;
static PyObject *__pyx_kp_s_Unknown_mode_r;
static PyObject *__pyx_kp_s_Unknown_rewrite_direction_type_r;
static PyObject *__pyx_kp_s_Unknown_rewrite_mode_type_r;
static PyObject *__pyx_kp_s_Unknown_token_type_r;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_WEIGHTED;
static PyObject *__pyx_n_s_WEIGHTED_CYCLES;
static PyObject *__pyx_n_s_WEIGHT_INVARIANT_PROPERTIES;
static PyObject *__pyx_n_s_Weight;
static PyObject *__pyx_kp_s_Write_failed_r;
static PyObject *__pyx_n_s_a;
static PyObject *__pyx_n_s_acceptor;
static PyObject *__pyx_n_s_add;
static PyObject *__pyx_n_s_add_pair;
static PyObject *__pyx_n_s_add_triple;
static PyObject *__pyx_n_s_arc_type;
static PyObject *__pyx_n_s_arcmap;
static PyObject *__pyx_n_s_arcsort;
static PyObject *__pyx_n_s_arg;
static PyObject *__pyx_n_s_arg1;
static PyObject *__pyx_n_s_arg2;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_assignment;
static PyObject *__pyx_n_s_astring;
static PyObject *__pyx_n_b_byte;
static PyObject *__pyx_kp_s_c;
static PyObject *__pyx_n_s_cal;
static PyObject *__pyx_n_s_call_arc_labeling;
static PyObject *__pyx_n_s_cf;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_closed;
static PyObject *__pyx_n_s_closure;
static PyObject *__pyx_n_s_comp_merge_patch;
static PyObject *__pyx_n_s_comp_merge_patch_locals_patch;
static PyObject *__pyx_n_s_comp_patch;
static PyObject *__pyx_n_s_comp_patch_locals_patch;
static PyObject *__pyx_n_s_compose;
static PyObject *__pyx_n_s_compose_patch;
static PyObject *__pyx_n_s_compose_patch_locals_patch;
static PyObject *__pyx_n_s_compute_props;
static PyObject *__pyx_n_s_concat;
static PyObject *__pyx_n_s_connect;
static PyObject *__pyx_n_s_copy;
static PyObject *__pyx_n_s_copy_patch;
static PyObject *__pyx_n_s_copy_patch_locals_patch;
static PyObject *__pyx_n_s_create;
static PyObject *__pyx_n_s_decode;
static PyObject *__pyx_n_b_default;
static PyObject *__pyx_n_s_determinize;
static PyObject *__pyx_n_s_difference;
static PyObject *__pyx_n_s_difference_patch;
static PyObject *__pyx_n_s_difference_patch_locals_patch;
static PyObject *__pyx_n_s_direction;
static PyObject *__pyx_n_s_disambiguate;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_done;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_epsilon_on_replace;
static PyObject *__pyx_n_s_epsnormalize;
static PyObject *__pyx_n_s_equal;
static PyObject *__pyx_n_s_equivalent;
static PyObject *__pyx_n_s_error;
static PyObject *__pyx_n_s_exc;
static PyObject *__pyx_n_s_far_type;
static PyObject *__pyx_n_b_fifo;
static PyObject *__pyx_n_s_filename;
static PyObject *__pyx_n_s_find;
static PyObject *__pyx_n_s_first;
static PyObject *__pyx_n_s_fnc;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_fst;
static PyObject *__pyx_n_s_functools;
static PyObject *__pyx_n_s_get_fst;
static PyObject *__pyx_n_s_get_key;
static PyObject *__pyx_n_s_id;
static PyObject *__pyx_n_s_ifst;
static PyObject *__pyx_n_s_ifst1;
static PyObject *__pyx_n_s_ifst2;
static PyObject *__pyx_n_s_ilabel;
static PyObject *__pyx_n_s_impdt;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_input_token_type;
static PyObject *__pyx_n_s_intersect;
static PyObject *__pyx_n_s_intersect_patch;
static PyObject *__pyx_n_s_intersect_patch_locals_patch;
static PyObject *__pyx_n_s_invert;
static PyObject *__pyx_n_s_ipdt;
static PyObject *__pyx_n_s_isomorphic;
static PyObject *__pyx_n_s_istring;
static PyObject *__pyx_n_s_isymbols;
static PyObject *__pyx_n_s_isyms;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_n_s_iter;
static PyObject *__pyx_n_s_iteritems;
static PyObject *__pyx_n_s_itype;
static PyObject *__pyx_n_s_keep_parentheses;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_n_s_kwargs;
static PyObject *__pyx_n_s_lambda;
static PyObject *__pyx_n_b_left;
static PyObject *__pyx_n_s_left_mpdt;
static PyObject *__pyx_n_s_left_pdt;
static PyObject *__pyx_n_s_lhs;
static PyObject *__pyx_n_s_logging;
static PyObject *__pyx_n_s_lower;
static PyObject *__pyx_n_b_ltr;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_minimize;
static PyObject *__pyx_n_s_mode;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_mpdt;
static PyObject *__pyx_n_s_mpdt_expand;
static PyObject *__pyx_n_s_mpdt_reverse;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_b_neither;
static PyObject *__pyx_n_s_new_pairs;
static PyObject *__pyx_n_s_next;
static PyObject *__pyx_n_s_nonterm;
static PyObject *__pyx_n_s_nt;
static PyObject *__pyx_n_s_num_states;
static PyObject *__pyx_n_b_obl;
static PyObject *__pyx_n_s_olabel;
static PyObject *__pyx_n_s_open;
static PyObject *__pyx_n_b_opt;
static PyObject *__pyx_n_s_optimize;
static PyObject *__pyx_n_s_opts;
static PyObject *__pyx_n_s_ostring;
static PyObject *__pyx_n_s_osymbols;
static PyObject *__pyx_n_s_osyms;
static PyObject *__pyx_n_s_otype;
static PyObject *__pyx_n_s_output_token_type;
static PyObject *__pyx_n_s_pair;
static PyObject *__pyx_n_s_pairs;
static PyObject *__pyx_n_b_paren;
static PyObject *__pyx_n_s_parens;
static PyObject *__pyx_n_s_patch;
static PyObject *__pyx_n_s_path_gc;
static PyObject *__pyx_n_s_paths;
static PyObject *__pyx_n_s_pdt;
static PyObject *__pyx_n_s_pdt_compose;
static PyObject *__pyx_n_s_pdt_expand;
static PyObject *__pyx_n_s_pdt_parser_type;
static PyObject *__pyx_n_s_pdt_replace;
static PyObject *__pyx_n_s_pdt_reverse;
static PyObject *__pyx_n_s_pdt_shortestpath;
static PyObject *__pyx_n_s_plus;
static PyObject *__pyx_n_s_pop;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_project;
static PyObject *__pyx_n_s_property;
static PyObject *__pyx_n_s_prune;
static PyObject *__pyx_n_s_push;
static PyObject *__pyx_n_s_pynini;
static PyObject *__pyx_n_s_pywrapfst;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_qt;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_ques;
static PyObject *__pyx_n_b_r;
static PyObject *__pyx_n_s_ral;
static PyObject *__pyx_n_s_randequivalent;
static PyObject *__pyx_n_s_randgen;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_read;
static PyObject *__pyx_n_s_relabel_pairs;
static PyObject *__pyx_n_s_relabel_tables;
static PyObject *__pyx_n_s_rep;
static PyObject *__pyx_n_s_replace;
static PyObject *__pyx_n_s_replacement;
static PyObject *__pyx_n_s_replacement_set;
static PyObject *__pyx_n_s_replacements;
static PyObject *__pyx_n_s_reset;
static PyObject *__pyx_n_s_rest;
static PyObject *__pyx_n_s_result;
static PyObject *__pyx_n_s_result_fst;
static PyObject *__pyx_n_s_result_parens;
static PyObject *__pyx_n_s_return_arc_labeling;
static PyObject *__pyx_n_s_return_label;
static PyObject *__pyx_n_s_reverse;
static PyObject *__pyx_n_s_reweight;
static PyObject *__pyx_n_s_rho;
static PyObject *__pyx_n_s_rhs;
static PyObject *__pyx_n_s_rmepsilon;
static PyObject *__pyx_n_s_root;
static PyObject *__pyx_n_s_root_fst;
static PyObject *__pyx_n_b_rtl;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_shortestdistance;
static PyObject *__pyx_n_s_shortestdistance_patch;
static PyObject *__pyx_n_s_shortestdistance_patch_locals_p;
static PyObject *__pyx_n_s_shortestpath;
static PyObject *__pyx_n_s_sigma_star;
static PyObject *__pyx_n_b_sim;
static PyObject *__pyx_n_s_sort_type;
static PyObject *__pyx_n_b_standard;
static PyObject *__pyx_n_s_star;
static PyObject *__pyx_n_s_statemap;
static PyObject *__pyx_n_s_string;
static PyObject *__pyx_n_s_string_file;
static PyObject *__pyx_n_s_string_map;
static PyObject *__pyx_n_s_stringify;
static PyObject *__pyx_n_s_success;
static PyObject *__pyx_n_s_super;
static PyObject *__pyx_n_b_symbol;
static PyObject *__pyx_n_s_synchronize;
static PyObject *__pyx_n_s_t;
static PyObject *__pyx_n_s_tau;
static PyObject *__pyx_n_s_tb;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_token_type;
static PyObject *__pyx_n_s_topsort;
static PyObject *__pyx_n_s_transducer;
static PyObject *__pyx_n_s_typed_cf;
static PyObject *__pyx_n_s_u;
static PyObject *__pyx_n_s_union;
static PyObject *__pyx_n_s_upper;
static PyObject *__pyx_kp_s_usr_local_google_home_kbg_src_p;
static PyObject *__pyx_n_b_utf8;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_b_vector;
static PyObject *__pyx_n_s_warning;
static PyObject *__pyx_n_s_wc;
static PyObject *__pyx_n_s_weight;
static PyObject *__pyx_n_s_weight_type;
static PyObject *__pyx_n_s_wraps;
static PyObject *__pyx_n_s_write;
static PyObject *__pyx_n_s_xrange;
static int __pyx_pf_6pynini_3Fst___init__(struct __pyx_obj_6pynini_Fst *__pyx_v_self, PyObject *__pyx_v_arc_type); /* proto */
static PyObject *__pyx_pf_6pynini_3Fst_2read(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_6pynini_3Fst_4paths(struct __pyx_obj_6pynini_Fst *__pyx_v_self, PyObject *__pyx_v_token_type, struct __pyx_obj_9pywrapfst__SymbolTable *__pyx_v_isymbols, struct __pyx_obj_9pywrapfst__SymbolTable *__pyx_v_osymbols); /* proto */
static PyObject *__pyx_pf_6pynini_3Fst_6stringify(struct __pyx_obj_6pynini_Fst *__pyx_v_self, PyObject *__pyx_v_token_type); /* proto */
static PyObject *__pyx_pf_6pynini_3Fst_8copy(struct __pyx_obj_6pynini_Fst *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_3Fst_10closure(struct __pyx_obj_6pynini_Fst *__pyx_v_self, __pyx_t_10basictypes_int32 __pyx_v_lower, __pyx_t_10basictypes_int32 __pyx_v_upper); /* proto */
static PyObject *__pyx_pf_6pynini_3Fst_12plus(struct __pyx_obj_6pynini_Fst *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_3Fst_14ques(struct __pyx_obj_6pynini_Fst *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_3Fst_16star(struct __pyx_obj_6pynini_Fst *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_3Fst_18concat(struct __pyx_obj_6pynini_Fst *__pyx_v_self, PyObject *__pyx_v_ifst); /* proto */
static PyObject *__pyx_pf_6pynini_3Fst_20optimize(struct __pyx_obj_6pynini_Fst *__pyx_v_self, bool __pyx_v_compute_props); /* proto */
static PyObject *__pyx_pf_6pynini_3Fst_22union(struct __pyx_obj_6pynini_Fst *__pyx_v_self, PyObject *__pyx_v_ifst); /* proto */
static PyObject *__pyx_pf_6pynini_3Fst_24__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op); /* proto */
static PyObject *__pyx_pf_6pynini_3Fst_26__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_6pynini_3Fst_28__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_6pynini_3Fst_30__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_6pynini_3Fst_32__or__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_6pynini__compile_or_copy_Fst(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_arg, PyObject *__pyx_v_arc_type); /* proto */
static PyObject *__pyx_pf_6pynini_2acceptor(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_astring, PyObject *__pyx_v_weight, PyObject *__pyx_v_arc_type, PyObject *__pyx_v_token_type); /* proto */
static PyObject *__pyx_pf_6pynini_4transducer(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_istring, PyObject *__pyx_v_ostring, PyObject *__pyx_v_weight, PyObject *__pyx_v_arc_type, PyObject *__pyx_v_input_token_type, PyObject *__pyx_v_output_token_type); /* proto */
static PyObject *__pyx_pf_6pynini_6cdrewrite(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_tau, PyObject *__pyx_v_lambda_, PyObject *__pyx_v_rho, PyObject *__pyx_v_sigma_star, PyObject *__pyx_v_direction, PyObject *__pyx_v_mode); /* proto */
static PyObject *__pyx_pf_6pynini_8string_file(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_arc_type, PyObject *__pyx_v_input_token_type, PyObject *__pyx_v_output_token_type); /* proto */
static PyObject *__pyx_pf_6pynini_10string_map(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pairs, PyObject *__pyx_v_arc_type, PyObject *__pyx_v_input_token_type, PyObject *__pyx_v_output_token_type); /* proto */
static PyObject *__pyx_pf_6pynini_11_1arg_patch_patch(PyObject *__pyx_self, PyObject *__pyx_v_arg, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_6pynini_12_1arg_patch(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fnc); /* proto */
static PyObject *__pyx_pf_6pynini_23_shortestdistance_patch_patch(PyObject *__pyx_self, PyObject *__pyx_v_arg, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_6pynini_14_shortestdistance_patch(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fnc); /* proto */
static PyObject *__pyx_pf_6pynini_14_compose_patch_patch(PyObject *__pyx_self, PyObject *__pyx_v_arg1, PyObject *__pyx_v_arg2, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_6pynini_16_compose_patch(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fnc); /* proto */
static PyObject *__pyx_pf_6pynini_17_difference_patch_patch(PyObject *__pyx_self, PyObject *__pyx_v_arg1, PyObject *__pyx_v_arg2, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_6pynini_18_difference_patch(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fnc); /* proto */
static PyObject *__pyx_pf_6pynini_16_intersect_patch_patch(PyObject *__pyx_self, PyObject *__pyx_v_arg1, PyObject *__pyx_v_arg2, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_6pynini_20_intersect_patch(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fnc); /* proto */
static PyObject *__pyx_pf_6pynini_11_comp_patch_patch(PyObject *__pyx_self, PyObject *__pyx_v_arg1, PyObject *__pyx_v_arg2, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_6pynini_22_comp_patch(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fnc); /* proto */
static PyObject *__pyx_pf_6pynini_17_comp_merge_patch_patch(PyObject *__pyx_self, PyObject *__pyx_v_arg1, PyObject *__pyx_v_arg2, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_6pynini_24_comp_merge_patch(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fnc); /* proto */
static PyObject *__pyx_pf_6pynini_26replace(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root, PyObject *__pyx_v_call_arc_labeling, PyObject *__pyx_v_return_arc_labeling, bool __pyx_v_epsilon_on_replace, __pyx_t_10basictypes_int64 __pyx_v_return_label, PyObject *__pyx_v_replacements); /* proto */
static PyObject *__pyx_pf_6pynini_28union(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_6pynini_14PdtParentheses___repr__(struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_6pynini_14PdtParentheses_2__len__(struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_14PdtParentheses_4__iter__(struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_14PdtParentheses_7copy(struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_14PdtParentheses_9add_pair(struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_self, __pyx_t_10basictypes_int64 __pyx_v_push, __pyx_t_10basictypes_int64 __pyx_v_pop); /* proto */
static PyObject *__pyx_pf_6pynini_14PdtParentheses_11read(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_6pynini_14PdtParentheses_13write(struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_6pynini_30pdt_compose(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_ifst1, PyObject *__pyx_v_ifst2, struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_parens, PyObject *__pyx_v_cf, bool __pyx_v_left_pdt); /* proto */
static PyObject *__pyx_pf_6pynini_32pdt_expand(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_ipdt, struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_parens, bool __pyx_v_connect, bool __pyx_v_keep_parentheses, PyObject *__pyx_v_weight); /* proto */
static PyObject *__pyx_pf_6pynini_34pdt_replace(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root, PyObject *__pyx_v_pdt_parser_type, PyObject *__pyx_v_replacements); /* proto */
static PyObject *__pyx_pf_6pynini_36pdt_reverse(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_ipdt, struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_parens); /* proto */
static PyObject *__pyx_pf_6pynini_38pdt_shortestpath(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_ipdt, struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_parens, PyObject *__pyx_v_qt, bool __pyx_v_keep_parentheses, bool __pyx_v_path_gc); /* proto */
static PyObject *__pyx_pf_6pynini_15MPdtParentheses___repr__(struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_6pynini_15MPdtParentheses_2__len__(struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_15MPdtParentheses_4__iter__(struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_15MPdtParentheses_7copy(struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_15MPdtParentheses_9add_triple(struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_self, __pyx_t_10basictypes_int64 __pyx_v_push, __pyx_t_10basictypes_int64 __pyx_v_pop, __pyx_t_10basictypes_int64 __pyx_v_assignment); /* proto */
static PyObject *__pyx_pf_6pynini_15MPdtParentheses_11read(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_6pynini_15MPdtParentheses_13write(struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_6pynini_40mpdt_compose(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_ifst1, PyObject *__pyx_v_ifst2, struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_parens, PyObject *__pyx_v_cf, bool __pyx_v_left_mpdt); /* proto */
static PyObject *__pyx_pf_6pynini_42mpdt_expand(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_impdt, struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_parens, bool __pyx_v_connect, bool __pyx_v_keep_parentheses); /* proto */
static PyObject *__pyx_pf_6pynini_44mpdt_reverse(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_impdt, struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_parens); /* proto */
static PyObject *__pyx_pf_6pynini_11StringPaths___repr__(struct __pyx_obj_6pynini_StringPaths *__pyx_v_self); /* proto */
static int __pyx_pf_6pynini_11StringPaths_2__init__(struct __pyx_obj_6pynini_StringPaths *__pyx_v_self, struct __pyx_obj_9pywrapfst__Fst *__pyx_v_ifst, PyObject *__pyx_v_token_type, struct __pyx_obj_9pywrapfst__SymbolTable *__pyx_v_isymbols, struct __pyx_obj_9pywrapfst__SymbolTable *__pyx_v_osymbols); /* proto */
static PyObject *__pyx_pf_6pynini_11StringPaths_4__iter__(struct __pyx_obj_6pynini_StringPaths *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_11StringPaths_6__next__(struct __pyx_obj_6pynini_StringPaths *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_11StringPaths_8done(struct __pyx_obj_6pynini_StringPaths *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_11StringPaths_10error(struct __pyx_obj_6pynini_StringPaths *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_11StringPaths_12reset(struct __pyx_obj_6pynini_StringPaths *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_11StringPaths_14next(struct __pyx_obj_6pynini_StringPaths *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_11StringPaths_16istring(struct __pyx_obj_6pynini_StringPaths *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_11StringPaths_18ostring(struct __pyx_obj_6pynini_StringPaths *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_11StringPaths_20weight(struct __pyx_obj_6pynini_StringPaths *__pyx_v_self); /* proto */
static int __pyx_pf_6pynini_3Far___init__(struct __pyx_obj_6pynini_Far *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_mode, PyObject *__pyx_v_arc_type, PyObject *__pyx_v_far_type); /* proto */
static PyObject *__pyx_pf_6pynini_3Far_2__repr__(struct __pyx_obj_6pynini_Far *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_3Far_4error(struct __pyx_obj_6pynini_Far *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_3Far_6arc_type(struct __pyx_obj_6pynini_Far *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_3Far_8closed(struct __pyx_obj_6pynini_Far *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_3Far_10far_type(struct __pyx_obj_6pynini_Far *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_3Far_12mode(struct __pyx_obj_6pynini_Far *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_3Far_14name(struct __pyx_obj_6pynini_Far *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_3Far_16__iter__(struct __pyx_obj_6pynini_Far *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_3Far_18__next__(struct __pyx_obj_6pynini_Far *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_3Far_20find(struct __pyx_obj_6pynini_Far *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_6pynini_3Far_22get_fst(struct __pyx_obj_6pynini_Far *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_3Far_24get_key(struct __pyx_obj_6pynini_Far *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_3Far_26next(struct __pyx_obj_6pynini_Far *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_3Far_28reset(struct __pyx_obj_6pynini_Far *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_3Far_30__getitem__(struct __pyx_obj_6pynini_Far *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_6pynini_3Far_32add(struct __pyx_obj_6pynini_Far *__pyx_v_self, PyObject *__pyx_v_key, struct __pyx_obj_6pynini_Fst *__pyx_v_fst); /* proto */
static int __pyx_pf_6pynini_3Far_34__setitem__(struct __pyx_obj_6pynini_Far *__pyx_v_self, PyObject *__pyx_v_key, struct __pyx_obj_6pynini_Fst *__pyx_v_fst); /* proto */
static PyObject *__pyx_pf_6pynini_3Far_36close(struct __pyx_obj_6pynini_Far *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_3Far_38__enter__(struct __pyx_obj_6pynini_Far *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_3Far_40__exit__(struct __pyx_obj_6pynini_Far *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_exc, CYTHON_UNUSED PyObject *__pyx_v_value, CYTHON_UNUSED PyObject *__pyx_v_tb); /* proto */
static PyObject *__pyx_pf_6pynini_11_copy_patch_patch(PyObject *__pyx_self, PyObject *__pyx_v_arg1, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_6pynini_46_copy_patch(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fnc); /* proto */
static PyObject *__pyx_tp_new_6pynini_Fst(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pynini_PdtParentheses(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pynini_MPdtParentheses(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pynini_StringPaths(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pynini_Far(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pynini___pyx_scope_struct___1arg_patch(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pynini___pyx_scope_struct_1__shortestdistance_patch(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pynini___pyx_scope_struct_2__compose_patch(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pynini___pyx_scope_struct_3__difference_patch(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pynini___pyx_scope_struct_4__intersect_patch(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pynini___pyx_scope_struct_5__comp_patch(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pynini___pyx_scope_struct_6__comp_merge_patch(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pynini___pyx_scope_struct_7___iter__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pynini___pyx_scope_struct_8___iter__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pynini___pyx_scope_struct_9__copy_patch(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__60;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__68;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__72;
static PyObject *__pyx_tuple__74;
static PyObject *__pyx_tuple__76;
static PyObject *__pyx_tuple__78;
static PyObject *__pyx_tuple__80;
static PyObject *__pyx_tuple__82;
static PyObject *__pyx_tuple__84;
static PyObject *__pyx_codeobj__18;
static PyObject *__pyx_codeobj__20;
static PyObject *__pyx_codeobj__24;
static PyObject *__pyx_codeobj__29;
static PyObject *__pyx_codeobj__33;
static PyObject *__pyx_codeobj__35;
static PyObject *__pyx_codeobj__38;
static PyObject *__pyx_codeobj__47;
static PyObject *__pyx_codeobj__49;
static PyObject *__pyx_codeobj__51;
static PyObject *__pyx_codeobj__53;
static PyObject *__pyx_codeobj__55;
static PyObject *__pyx_codeobj__57;
static PyObject *__pyx_codeobj__59;
static PyObject *__pyx_codeobj__61;
static PyObject *__pyx_codeobj__63;
static PyObject *__pyx_codeobj__65;
static PyObject *__pyx_codeobj__67;
static PyObject *__pyx_codeobj__69;
static PyObject *__pyx_codeobj__71;
static PyObject *__pyx_codeobj__73;
static PyObject *__pyx_codeobj__75;
static PyObject *__pyx_codeobj__77;
static PyObject *__pyx_codeobj__79;
static PyObject *__pyx_codeobj__81;
static PyObject *__pyx_codeobj__83;
static PyObject *__pyx_codeobj__85;

/* "pynini.pyx":192
 * 
 * 
 * cdef TokenType _get_token_type(string token_type) except *:             # <<<<<<<<<<<<<<
 *   """Matches string with the appropriate TokenType enum value.
 * 
 */

static enum fst::TokenType __pyx_f_6pynini__get_token_type(std::string __pyx_v_token_type) {
  enum fst::TokenType __pyx_v_tt;
  enum fst::TokenType __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_token_type", 0);

  /* "pynini.pyx":208
 *   """
 *   cdef TokenType tt
 *   if token_type == b"byte":             # <<<<<<<<<<<<<<
 *     tt = BYTE
 *   elif token_type == b"symbol":
 */
  __pyx_t_1 = ((__pyx_v_token_type == __pyx_k_byte) != 0);
  if (__pyx_t_1) {

    /* "pynini.pyx":209
 *   cdef TokenType tt
 *   if token_type == b"byte":
 *     tt = BYTE             # <<<<<<<<<<<<<<
 *   elif token_type == b"symbol":
 *     tt = SYMBOL
 */
    __pyx_v_tt = fst::BYTE;

    /* "pynini.pyx":208
 *   """
 *   cdef TokenType tt
 *   if token_type == b"byte":             # <<<<<<<<<<<<<<
 *     tt = BYTE
 *   elif token_type == b"symbol":
 */
    goto __pyx_L3;
  }

  /* "pynini.pyx":210
 *   if token_type == b"byte":
 *     tt = BYTE
 *   elif token_type == b"symbol":             # <<<<<<<<<<<<<<
 *     tt = SYMBOL
 *   elif token_type == b"utf8":
 */
  __pyx_t_1 = ((__pyx_v_token_type == __pyx_k_symbol) != 0);
  if (__pyx_t_1) {

    /* "pynini.pyx":211
 *     tt = BYTE
 *   elif token_type == b"symbol":
 *     tt = SYMBOL             # <<<<<<<<<<<<<<
 *   elif token_type == b"utf8":
 *     tt = UTF8
 */
    __pyx_v_tt = fst::SYMBOL;

    /* "pynini.pyx":210
 *   if token_type == b"byte":
 *     tt = BYTE
 *   elif token_type == b"symbol":             # <<<<<<<<<<<<<<
 *     tt = SYMBOL
 *   elif token_type == b"utf8":
 */
    goto __pyx_L3;
  }

  /* "pynini.pyx":212
 *   elif token_type == b"symbol":
 *     tt = SYMBOL
 *   elif token_type == b"utf8":             # <<<<<<<<<<<<<<
 *     tt = UTF8
 *   else:
 */
  __pyx_t_1 = ((__pyx_v_token_type == __pyx_k_utf8) != 0);
  if (__pyx_t_1) {

    /* "pynini.pyx":213
 *     tt = SYMBOL
 *   elif token_type == b"utf8":
 *     tt = UTF8             # <<<<<<<<<<<<<<
 *   else:
 *     raise FstArgError("Unknown token type: {!r}".format(token_type))
 */
    __pyx_v_tt = fst::UTF8;

    /* "pynini.pyx":212
 *   elif token_type == b"symbol":
 *     tt = SYMBOL
 *   elif token_type == b"utf8":             # <<<<<<<<<<<<<<
 *     tt = UTF8
 *   else:
 */
    goto __pyx_L3;
  }

  /* "pynini.pyx":215
 *     tt = UTF8
 *   else:
 *     raise FstArgError("Unknown token type: {!r}".format(token_type))             # <<<<<<<<<<<<<<
 *   return tt
 * 
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstArgError); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Unknown_token_type_r, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_token_type); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "pynini.pyx":216
 *   else:
 *     raise FstArgError("Unknown token type: {!r}".format(token_type))
 *   return tt             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_tt;
  goto __pyx_L0;

  /* "pynini.pyx":192
 * 
 * 
 * cdef TokenType _get_token_type(string token_type) except *:             # <<<<<<<<<<<<<<
 *   """Matches string with the appropriate TokenType enum value.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pynini._get_token_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = (enum fst::TokenType) 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":219
 * 
 * 
 * cdef PdtComposeFilter _get_pdt_compose_filter(string cf) except *:             # <<<<<<<<<<<<<<
 *   """Matches string with the appropriate PdtComposeFilter enum value.
 * 
 */

static enum fst::PdtComposeFilter __pyx_f_6pynini__get_pdt_compose_filter(std::string __pyx_v_cf) {
  enum fst::PdtComposeFilter __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_pdt_compose_filter", 0);

  /* "pynini.pyx":227
 *   This function is not visible to Python users.
 *   """
 *   if cf == b"paren":             # <<<<<<<<<<<<<<
 *     return PAREN_FILTER
 *   if cf == b"expand":
 */
  __pyx_t_1 = ((__pyx_v_cf == __pyx_k_paren) != 0);
  if (__pyx_t_1) {

    /* "pynini.pyx":228
 *   """
 *   if cf == b"paren":
 *     return PAREN_FILTER             # <<<<<<<<<<<<<<
 *   if cf == b"expand":
 *     return EXPAND_FILTER
 */
    __pyx_r = fst::PAREN_FILTER;
    goto __pyx_L0;

    /* "pynini.pyx":227
 *   This function is not visible to Python users.
 *   """
 *   if cf == b"paren":             # <<<<<<<<<<<<<<
 *     return PAREN_FILTER
 *   if cf == b"expand":
 */
  }

  /* "pynini.pyx":229
 *   if cf == b"paren":
 *     return PAREN_FILTER
 *   if cf == b"expand":             # <<<<<<<<<<<<<<
 *     return EXPAND_FILTER
 *   if cf == b"expand_paren":
 */
  __pyx_t_1 = ((__pyx_v_cf == __pyx_k_expand) != 0);
  if (__pyx_t_1) {

    /* "pynini.pyx":230
 *     return PAREN_FILTER
 *   if cf == b"expand":
 *     return EXPAND_FILTER             # <<<<<<<<<<<<<<
 *   if cf == b"expand_paren":
 *     return EXPAND_PAREN_FILTER
 */
    __pyx_r = fst::EXPAND_FILTER;
    goto __pyx_L0;

    /* "pynini.pyx":229
 *   if cf == b"paren":
 *     return PAREN_FILTER
 *   if cf == b"expand":             # <<<<<<<<<<<<<<
 *     return EXPAND_FILTER
 *   if cf == b"expand_paren":
 */
  }

  /* "pynini.pyx":231
 *   if cf == b"expand":
 *     return EXPAND_FILTER
 *   if cf == b"expand_paren":             # <<<<<<<<<<<<<<
 *     return EXPAND_PAREN_FILTER
 *   raise FstArgError("Unknown PDT compose filter type: {!r}".format(cf))
 */
  __pyx_t_1 = ((__pyx_v_cf == __pyx_k_expand_paren) != 0);
  if (__pyx_t_1) {

    /* "pynini.pyx":232
 *     return EXPAND_FILTER
 *   if cf == b"expand_paren":
 *     return EXPAND_PAREN_FILTER             # <<<<<<<<<<<<<<
 *   raise FstArgError("Unknown PDT compose filter type: {!r}".format(cf))
 * 
 */
    __pyx_r = fst::EXPAND_PAREN_FILTER;
    goto __pyx_L0;

    /* "pynini.pyx":231
 *   if cf == b"expand":
 *     return EXPAND_FILTER
 *   if cf == b"expand_paren":             # <<<<<<<<<<<<<<
 *     return EXPAND_PAREN_FILTER
 *   raise FstArgError("Unknown PDT compose filter type: {!r}".format(cf))
 */
  }

  /* "pynini.pyx":233
 *   if cf == b"expand_paren":
 *     return EXPAND_PAREN_FILTER
 *   raise FstArgError("Unknown PDT compose filter type: {!r}".format(cf))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstArgError); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Unknown_PDT_compose_filter_type, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_cf); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_7) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":219
 * 
 * 
 * cdef PdtComposeFilter _get_pdt_compose_filter(string cf) except *:             # <<<<<<<<<<<<<<
 *   """Matches string with the appropriate PdtComposeFilter enum value.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pynini._get_pdt_compose_filter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = (enum fst::PdtComposeFilter) 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":236
 * 
 * 
 * cdef PdtParserType _get_pdt_parser_type(string parser_type) except *:             # <<<<<<<<<<<<<<
 *   """Matches string with the appropriate PdtParserType enum value.
 * 
 */

static enum fst::PdtParserType __pyx_f_6pynini__get_pdt_parser_type(std::string __pyx_v_parser_type) {
  enum fst::PdtParserType __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_pdt_parser_type", 0);

  /* "pynini.pyx":253
 *   This function is not visible to Python users.
 *   """
 *   if parser_type == b"left":             # <<<<<<<<<<<<<<
 *     return PDT_LEFT_PARSER
 *   if parser_type == b"left_sr":
 */
  __pyx_t_1 = ((__pyx_v_parser_type == __pyx_k_left) != 0);
  if (__pyx_t_1) {

    /* "pynini.pyx":254
 *   """
 *   if parser_type == b"left":
 *     return PDT_LEFT_PARSER             # <<<<<<<<<<<<<<
 *   if parser_type == b"left_sr":
 *     return PDT_LEFT_SR_PARSER
 */
    __pyx_r = fst::PDT_LEFT_PARSER;
    goto __pyx_L0;

    /* "pynini.pyx":253
 *   This function is not visible to Python users.
 *   """
 *   if parser_type == b"left":             # <<<<<<<<<<<<<<
 *     return PDT_LEFT_PARSER
 *   if parser_type == b"left_sr":
 */
  }

  /* "pynini.pyx":255
 *   if parser_type == b"left":
 *     return PDT_LEFT_PARSER
 *   if parser_type == b"left_sr":             # <<<<<<<<<<<<<<
 *     return PDT_LEFT_SR_PARSER
 *   raise FstArgError("Unknown PDT parser type: {!r}".format(parser_type))
 */
  __pyx_t_1 = ((__pyx_v_parser_type == __pyx_k_left_sr) != 0);
  if (__pyx_t_1) {

    /* "pynini.pyx":256
 *     return PDT_LEFT_PARSER
 *   if parser_type == b"left_sr":
 *     return PDT_LEFT_SR_PARSER             # <<<<<<<<<<<<<<
 *   raise FstArgError("Unknown PDT parser type: {!r}".format(parser_type))
 * 
 */
    __pyx_r = fst::PDT_LEFT_SR_PARSER;
    goto __pyx_L0;

    /* "pynini.pyx":255
 *   if parser_type == b"left":
 *     return PDT_LEFT_PARSER
 *   if parser_type == b"left_sr":             # <<<<<<<<<<<<<<
 *     return PDT_LEFT_SR_PARSER
 *   raise FstArgError("Unknown PDT parser type: {!r}".format(parser_type))
 */
  }

  /* "pynini.pyx":257
 *   if parser_type == b"left_sr":
 *     return PDT_LEFT_SR_PARSER
 *   raise FstArgError("Unknown PDT parser type: {!r}".format(parser_type))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstArgError); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Unknown_PDT_parser_type_r, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_parser_type); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_7) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":236
 * 
 * 
 * cdef PdtParserType _get_pdt_parser_type(string parser_type) except *:             # <<<<<<<<<<<<<<
 *   """Matches string with the appropriate PdtParserType enum value.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pynini._get_pdt_parser_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = (enum fst::PdtParserType) 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":260
 * 
 * 
 * cdef void _add_parentheses_symbols(MutableFstClass *fst,             # <<<<<<<<<<<<<<
 *                                    const vector[LabelPair] &parens,
 *                                    bool left) except *:
 */

static void __pyx_f_6pynini__add_parentheses_symbols(fst::script::MutableFstClass *__pyx_v_fst, std::vector<__pyx_t_15pynini_includes_LabelPair>  const &__pyx_v_parens, bool __pyx_v_left) {
  __pyx_t_9pywrapfst_SymbolTable_ptr __pyx_v_source_syms;
  __pyx_t_9pywrapfst_SymbolTable_ptr __pyx_v_sink_syms;
  size_t __pyx_v_i;
  __pyx_t_10basictypes_int64 __pyx_v_label;
  std::string __pyx_v_symbol;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  __pyx_t_10basictypes_int64 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_add_parentheses_symbols", 0);

  /* "pynini.pyx":279
 *   cdef SymbolTable_ptr source_syms
 *   cdef SymbolTable_ptr sink_syms
 *   cdef size_t i = 0             # <<<<<<<<<<<<<<
 *   cdef int64 label
 *   cdef string symbol
 */
  __pyx_v_i = 0;

  /* "pynini.pyx":282
 *   cdef int64 label
 *   cdef string symbol
 *   if left:             # <<<<<<<<<<<<<<
 *     source_syms = fst.MutableInputSymbols()
 *     if source_syms == NULL:
 */
  __pyx_t_1 = (__pyx_v_left != 0);
  if (__pyx_t_1) {

    /* "pynini.pyx":283
 *   cdef string symbol
 *   if left:
 *     source_syms = fst.MutableInputSymbols()             # <<<<<<<<<<<<<<
 *     if source_syms == NULL:
 *       return
 */
    __pyx_v_source_syms = __pyx_v_fst->MutableInputSymbols();

    /* "pynini.pyx":284
 *   if left:
 *     source_syms = fst.MutableInputSymbols()
 *     if source_syms == NULL:             # <<<<<<<<<<<<<<
 *       return
 *     sink_syms = fst.MutableOutputSymbols()
 */
    __pyx_t_1 = ((__pyx_v_source_syms == NULL) != 0);
    if (__pyx_t_1) {

      /* "pynini.pyx":285
 *     source_syms = fst.MutableInputSymbols()
 *     if source_syms == NULL:
 *       return             # <<<<<<<<<<<<<<
 *     sink_syms = fst.MutableOutputSymbols()
 *     if sink_syms == NULL:
 */
      goto __pyx_L0;

      /* "pynini.pyx":284
 *   if left:
 *     source_syms = fst.MutableInputSymbols()
 *     if source_syms == NULL:             # <<<<<<<<<<<<<<
 *       return
 *     sink_syms = fst.MutableOutputSymbols()
 */
    }

    /* "pynini.pyx":286
 *     if source_syms == NULL:
 *       return
 *     sink_syms = fst.MutableOutputSymbols()             # <<<<<<<<<<<<<<
 *     if sink_syms == NULL:
 *       return
 */
    __pyx_v_sink_syms = __pyx_v_fst->MutableOutputSymbols();

    /* "pynini.pyx":287
 *       return
 *     sink_syms = fst.MutableOutputSymbols()
 *     if sink_syms == NULL:             # <<<<<<<<<<<<<<
 *       return
 *   else:
 */
    __pyx_t_1 = ((__pyx_v_sink_syms == NULL) != 0);
    if (__pyx_t_1) {

      /* "pynini.pyx":288
 *     sink_syms = fst.MutableOutputSymbols()
 *     if sink_syms == NULL:
 *       return             # <<<<<<<<<<<<<<
 *   else:
 *     source_syms = fst.MutableOutputSymbols()
 */
      goto __pyx_L0;

      /* "pynini.pyx":287
 *       return
 *     sink_syms = fst.MutableOutputSymbols()
 *     if sink_syms == NULL:             # <<<<<<<<<<<<<<
 *       return
 *   else:
 */
    }

    /* "pynini.pyx":282
 *   cdef int64 label
 *   cdef string symbol
 *   if left:             # <<<<<<<<<<<<<<
 *     source_syms = fst.MutableInputSymbols()
 *     if source_syms == NULL:
 */
    goto __pyx_L3;
  }

  /* "pynini.pyx":290
 *       return
 *   else:
 *     source_syms = fst.MutableOutputSymbols()             # <<<<<<<<<<<<<<
 *     if source_syms == NULL:
 *       return
 */
  /*else*/ {
    __pyx_v_source_syms = __pyx_v_fst->MutableOutputSymbols();

    /* "pynini.pyx":291
 *   else:
 *     source_syms = fst.MutableOutputSymbols()
 *     if source_syms == NULL:             # <<<<<<<<<<<<<<
 *       return
 *     sink_syms = fst.MutableInputSymbols()
 */
    __pyx_t_1 = ((__pyx_v_source_syms == NULL) != 0);
    if (__pyx_t_1) {

      /* "pynini.pyx":292
 *     source_syms = fst.MutableOutputSymbols()
 *     if source_syms == NULL:
 *       return             # <<<<<<<<<<<<<<
 *     sink_syms = fst.MutableInputSymbols()
 *     if sink_syms == NULL:
 */
      goto __pyx_L0;

      /* "pynini.pyx":291
 *   else:
 *     source_syms = fst.MutableOutputSymbols()
 *     if source_syms == NULL:             # <<<<<<<<<<<<<<
 *       return
 *     sink_syms = fst.MutableInputSymbols()
 */
    }

    /* "pynini.pyx":293
 *     if source_syms == NULL:
 *       return
 *     sink_syms = fst.MutableInputSymbols()             # <<<<<<<<<<<<<<
 *     if sink_syms == NULL:
 *       return
 */
    __pyx_v_sink_syms = __pyx_v_fst->MutableInputSymbols();

    /* "pynini.pyx":294
 *       return
 *     sink_syms = fst.MutableInputSymbols()
 *     if sink_syms == NULL:             # <<<<<<<<<<<<<<
 *       return
 *   for i in xrange(parens.size()):
 */
    __pyx_t_1 = ((__pyx_v_sink_syms == NULL) != 0);
    if (__pyx_t_1) {

      /* "pynini.pyx":295
 *     sink_syms = fst.MutableInputSymbols()
 *     if sink_syms == NULL:
 *       return             # <<<<<<<<<<<<<<
 *   for i in xrange(parens.size()):
 *     label = parens[i].first
 */
      goto __pyx_L0;

      /* "pynini.pyx":294
 *       return
 *     sink_syms = fst.MutableInputSymbols()
 *     if sink_syms == NULL:             # <<<<<<<<<<<<<<
 *       return
 *   for i in xrange(parens.size()):
 */
    }
  }
  __pyx_L3:;

  /* "pynini.pyx":296
 *     if sink_syms == NULL:
 *       return
 *   for i in xrange(parens.size()):             # <<<<<<<<<<<<<<
 *     label = parens[i].first
 *     symbol = source_syms.FindSymbol(label)
 */
  __pyx_t_2 = __pyx_v_parens.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "pynini.pyx":297
 *       return
 *   for i in xrange(parens.size()):
 *     label = parens[i].first             # <<<<<<<<<<<<<<
 *     symbol = source_syms.FindSymbol(label)
 *     if symbol == b"":
 */
    __pyx_t_4 = (__pyx_v_parens[__pyx_v_i]).first;
    __pyx_v_label = __pyx_t_4;

    /* "pynini.pyx":298
 *   for i in xrange(parens.size()):
 *     label = parens[i].first
 *     symbol = source_syms.FindSymbol(label)             # <<<<<<<<<<<<<<
 *     if symbol == b"":
 *       raise KeyError(label)
 */
    __pyx_v_symbol = __pyx_v_source_syms->Find(__pyx_v_label);

    /* "pynini.pyx":299
 *     label = parens[i].first
 *     symbol = source_syms.FindSymbol(label)
 *     if symbol == b"":             # <<<<<<<<<<<<<<
 *       raise KeyError(label)
 *     if label != sink_syms.AddSymbol(symbol, label):
 */
    __pyx_t_1 = ((__pyx_v_symbol == __pyx_k_) != 0);
    if (__pyx_t_1) {

      /* "pynini.pyx":300
 *     symbol = source_syms.FindSymbol(label)
 *     if symbol == b"":
 *       raise KeyError(label)             # <<<<<<<<<<<<<<
 *     if label != sink_syms.AddSymbol(symbol, label):
 *       raise FstSymbolTableMergeError(
 */
      __pyx_t_5 = __Pyx_PyInt_From_int64_t(__pyx_v_label); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_KeyError, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "pynini.pyx":299
 *     label = parens[i].first
 *     symbol = source_syms.FindSymbol(label)
 *     if symbol == b"":             # <<<<<<<<<<<<<<
 *       raise KeyError(label)
 *     if label != sink_syms.AddSymbol(symbol, label):
 */
    }

    /* "pynini.pyx":301
 *     if symbol == b"":
 *       raise KeyError(label)
 *     if label != sink_syms.AddSymbol(symbol, label):             # <<<<<<<<<<<<<<
 *       raise FstSymbolTableMergeError(
 *           "Unable to resolve parentheses symbol table conflict")
 */
    __pyx_t_1 = ((__pyx_v_label != __pyx_v_sink_syms->AddSymbol(__pyx_v_symbol, __pyx_v_label)) != 0);
    if (__pyx_t_1) {

      /* "pynini.pyx":302
 *       raise KeyError(label)
 *     if label != sink_syms.AddSymbol(symbol, label):
 *       raise FstSymbolTableMergeError(             # <<<<<<<<<<<<<<
 *           "Unable to resolve parentheses symbol table conflict")
 *     label = parens[i].second
 */
      __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstSymbolTableMergeError); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "pynini.pyx":301
 *     if symbol == b"":
 *       raise KeyError(label)
 *     if label != sink_syms.AddSymbol(symbol, label):             # <<<<<<<<<<<<<<
 *       raise FstSymbolTableMergeError(
 *           "Unable to resolve parentheses symbol table conflict")
 */
    }

    /* "pynini.pyx":304
 *       raise FstSymbolTableMergeError(
 *           "Unable to resolve parentheses symbol table conflict")
 *     label = parens[i].second             # <<<<<<<<<<<<<<
 *     symbol = source_syms.FindSymbol(label)
 *     if symbol == b"":
 */
    __pyx_t_4 = (__pyx_v_parens[__pyx_v_i]).second;
    __pyx_v_label = __pyx_t_4;

    /* "pynini.pyx":305
 *           "Unable to resolve parentheses symbol table conflict")
 *     label = parens[i].second
 *     symbol = source_syms.FindSymbol(label)             # <<<<<<<<<<<<<<
 *     if symbol == b"":
 *       raise KeyError(label)
 */
    __pyx_v_symbol = __pyx_v_source_syms->Find(__pyx_v_label);

    /* "pynini.pyx":306
 *     label = parens[i].second
 *     symbol = source_syms.FindSymbol(label)
 *     if symbol == b"":             # <<<<<<<<<<<<<<
 *       raise KeyError(label)
 *     if label != sink_syms.AddSymbol(symbol, label):
 */
    __pyx_t_1 = ((__pyx_v_symbol == __pyx_k_) != 0);
    if (__pyx_t_1) {

      /* "pynini.pyx":307
 *     symbol = source_syms.FindSymbol(label)
 *     if symbol == b"":
 *       raise KeyError(label)             # <<<<<<<<<<<<<<
 *     if label != sink_syms.AddSymbol(symbol, label):
 *       raise FstSymbolTableMergeError(
 */
      __pyx_t_6 = __Pyx_PyInt_From_int64_t(__pyx_v_label); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_KeyError, __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "pynini.pyx":306
 *     label = parens[i].second
 *     symbol = source_syms.FindSymbol(label)
 *     if symbol == b"":             # <<<<<<<<<<<<<<
 *       raise KeyError(label)
 *     if label != sink_syms.AddSymbol(symbol, label):
 */
    }

    /* "pynini.pyx":308
 *     if symbol == b"":
 *       raise KeyError(label)
 *     if label != sink_syms.AddSymbol(symbol, label):             # <<<<<<<<<<<<<<
 *       raise FstSymbolTableMergeError(
 *           "Unable to resolve parentheses symbol table conflict")
 */
    __pyx_t_1 = ((__pyx_v_label != __pyx_v_sink_syms->AddSymbol(__pyx_v_symbol, __pyx_v_label)) != 0);
    if (__pyx_t_1) {

      /* "pynini.pyx":309
 *       raise KeyError(label)
 *     if label != sink_syms.AddSymbol(symbol, label):
 *       raise FstSymbolTableMergeError(             # <<<<<<<<<<<<<<
 *           "Unable to resolve parentheses symbol table conflict")
 * 
 */
      __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstSymbolTableMergeError); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "pynini.pyx":308
 *     if symbol == b"":
 *       raise KeyError(label)
 *     if label != sink_syms.AddSymbol(symbol, label):             # <<<<<<<<<<<<<<
 *       raise FstSymbolTableMergeError(
 *           "Unable to resolve parentheses symbol table conflict")
 */
    }
  }

  /* "pynini.pyx":260
 * 
 * 
 * cdef void _add_parentheses_symbols(MutableFstClass *fst,             # <<<<<<<<<<<<<<
 *                                    const vector[LabelPair] &parens,
 *                                    bool left) except *:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pynini._add_parentheses_symbols", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "pynini.pyx":338
 *   """
 * 
 *   def __init__(self, arc_type=b"standard"):             # <<<<<<<<<<<<<<
 *     cdef VectorFstClass *tfst = new VectorFstClass(tostring(arc_type))
 *     if tfst.Properties(kError, True) == kError:
 */

/* Python wrapper */
static int __pyx_pw_6pynini_3Fst_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pynini_3Fst_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arc_type = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arc_type,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_n_b_standard);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arc_type);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_arc_type = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.Fst.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_3Fst___init__(((struct __pyx_obj_6pynini_Fst *)__pyx_v_self), __pyx_v_arc_type);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pynini_3Fst___init__(struct __pyx_obj_6pynini_Fst *__pyx_v_self, PyObject *__pyx_v_arc_type) {
  fst::script::VectorFstClass *__pyx_v_tfst;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pynini.pyx":339
 * 
 *   def __init__(self, arc_type=b"standard"):
 *     cdef VectorFstClass *tfst = new VectorFstClass(tostring(arc_type))             # <<<<<<<<<<<<<<
 *     if tfst.Properties(kError, True) == kError:
 *        raise FstArgError("Unknown arc type: {!r}".format(arc_type))
 */
  __pyx_t_1 = __pyx_f_9pywrapfst_tostring(__pyx_v_arc_type, NULL); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_tfst = new fst::script::VectorFstClass(__pyx_t_1);

  /* "pynini.pyx":340
 *   def __init__(self, arc_type=b"standard"):
 *     cdef VectorFstClass *tfst = new VectorFstClass(tostring(arc_type))
 *     if tfst.Properties(kError, True) == kError:             # <<<<<<<<<<<<<<
 *        raise FstArgError("Unknown arc type: {!r}".format(arc_type))
 *     self._fst.reset(tfst)
 */
  __pyx_t_2 = ((__pyx_v_tfst->Properties(fst::kError, 1) == fst::kError) != 0);
  if (__pyx_t_2) {

    /* "pynini.pyx":341
 *     cdef VectorFstClass *tfst = new VectorFstClass(tostring(arc_type))
 *     if tfst.Properties(kError, True) == kError:
 *        raise FstArgError("Unknown arc type: {!r}".format(arc_type))             # <<<<<<<<<<<<<<
 *     self._fst.reset(tfst)
 *     self._mfst = static_pointer_cast[MutableFstClass,
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstArgError); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Unknown_arc_type_r, __pyx_n_s_format); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_arc_type); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
    } else {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
      __Pyx_INCREF(__pyx_v_arc_type);
      __Pyx_GIVEREF(__pyx_v_arc_type);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_v_arc_type);
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pynini.pyx":340
 *   def __init__(self, arc_type=b"standard"):
 *     cdef VectorFstClass *tfst = new VectorFstClass(tostring(arc_type))
 *     if tfst.Properties(kError, True) == kError:             # <<<<<<<<<<<<<<
 *        raise FstArgError("Unknown arc type: {!r}".format(arc_type))
 *     self._fst.reset(tfst)
 */
  }

  /* "pynini.pyx":342
 *     if tfst.Properties(kError, True) == kError:
 *        raise FstArgError("Unknown arc type: {!r}".format(arc_type))
 *     self._fst.reset(tfst)             # <<<<<<<<<<<<<<
 *     self._mfst = static_pointer_cast[MutableFstClass,
 *                                      FstClass](self._fst)
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_fst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_self->__pyx_base.__pyx_base._fst.reset(__pyx_v_tfst);

  /* "pynini.pyx":344
 *     self._fst.reset(tfst)
 *     self._mfst = static_pointer_cast[MutableFstClass,
 *                                      FstClass](self._fst)             # <<<<<<<<<<<<<<
 * 
 *   @classmethod
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_fst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pynini.pyx":343
 *        raise FstArgError("Unknown arc type: {!r}".format(arc_type))
 *     self._fst.reset(tfst)
 *     self._mfst = static_pointer_cast[MutableFstClass,             # <<<<<<<<<<<<<<
 *                                      FstClass](self._fst)
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_mfst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_self->__pyx_base._mfst = std::static_pointer_cast<fst::script::MutableFstClass,fst::script::FstClass>(__pyx_v_self->__pyx_base.__pyx_base._fst);

  /* "pynini.pyx":338
 *   """
 * 
 *   def __init__(self, arc_type=b"standard"):             # <<<<<<<<<<<<<<
 *     cdef VectorFstClass *tfst = new VectorFstClass(tostring(arc_type))
 *     if tfst.Properties(kError, True) == kError:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pynini.Fst.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":347
 * 
 *   @classmethod
 *   def read(cls, filename):             # <<<<<<<<<<<<<<
 *     """
 *     Fst.read(filename)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Fst_3read(PyObject *__pyx_v_cls, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_6pynini_3Fst_2read[] = "\n    Fst.read(filename)\n\n    Constructs an FST from a file.\n\n    Args:\n      filename: The string location of the input file.\n\n    Returns:\n      An FST.\n\n    Raises:\n      FstIOError: Read failed.\n      FstOpError: Read-time conversion failed.\n    ";
static PyObject *__pyx_pw_6pynini_3Fst_3read(PyObject *__pyx_v_cls, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Fst_2read(((PyTypeObject*)__pyx_v_cls), ((PyObject *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Fst_2read(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_9pywrapfst__read_Fst __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read", 0);

  /* "pynini.pyx":363
 *       FstOpError: Read-time conversion failed.
 *     """
 *     return _init_Fst_from_MutableFst(_read_Fst(filename, fst_type=b"vector"))             # <<<<<<<<<<<<<<
 * 
 *   # This hidden method is called immediately after FST operations to check for
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.fst_type = __pyx_n_b_vector;
  __pyx_t_1 = ((PyObject *)__pyx_f_9pywrapfst__read_Fst(__pyx_v_filename, &__pyx_t_2)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9pywrapfst__MutableFst))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = ((PyObject *)__pyx_f_6pynini__init_Fst_from_MutableFst(((struct __pyx_obj_9pywrapfst__MutableFst *)__pyx_t_1))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":347
 * 
 *   @classmethod
 *   def read(cls, filename):             # <<<<<<<<<<<<<<
 *     """
 *     Fst.read(filename)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynini.Fst.read", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":368
 *   # the error bit.
 * 
 *   cdef void _check_pynini_op_error(self) except *:             # <<<<<<<<<<<<<<
 *     if self._fst.get().Properties(kError, True) == kError:
 *       raise FstOpError("Operation failed")
 */

static void __pyx_f_6pynini_3Fst__check_pynini_op_error(struct __pyx_obj_6pynini_Fst *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_check_pynini_op_error", 0);

  /* "pynini.pyx":369
 * 
 *   cdef void _check_pynini_op_error(self) except *:
 *     if self._fst.get().Properties(kError, True) == kError:             # <<<<<<<<<<<<<<
 *       raise FstOpError("Operation failed")
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_fst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.__pyx_base._fst.get()->Properties(fst::kError, 1) == fst::kError) != 0);
  if (__pyx_t_1) {

    /* "pynini.pyx":370
 *   cdef void _check_pynini_op_error(self) except *:
 *     if self._fst.get().Properties(kError, True) == kError:
 *       raise FstOpError("Operation failed")             # <<<<<<<<<<<<<<
 * 
 *   cpdef StringPaths paths(self,
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstOpError); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pynini.pyx":369
 * 
 *   cdef void _check_pynini_op_error(self) except *:
 *     if self._fst.get().Properties(kError, True) == kError:             # <<<<<<<<<<<<<<
 *       raise FstOpError("Operation failed")
 * 
 */
  }

  /* "pynini.pyx":368
 *   # the error bit.
 * 
 *   cdef void _check_pynini_op_error(self) except *:             # <<<<<<<<<<<<<<
 *     if self._fst.get().Properties(kError, True) == kError:
 *       raise FstOpError("Operation failed")
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynini.Fst._check_pynini_op_error", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "pynini.pyx":372
 *       raise FstOpError("Operation failed")
 * 
 *   cpdef StringPaths paths(self,             # <<<<<<<<<<<<<<
 *                           token_type=b"byte",
 *                           _SymbolTable isymbols=None,
 */

static PyObject *__pyx_pw_6pynini_3Fst_5paths(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static struct __pyx_obj_6pynini_StringPaths *__pyx_f_6pynini_3Fst_paths(struct __pyx_obj_6pynini_Fst *__pyx_v_self, int __pyx_skip_dispatch, struct __pyx_opt_args_6pynini_3Fst_paths *__pyx_optional_args) {
  PyObject *__pyx_v_token_type = ((PyObject *)__pyx_n_b_byte);

  /* "pynini.pyx":374
 *   cpdef StringPaths paths(self,
 *                           token_type=b"byte",
 *                           _SymbolTable isymbols=None,             # <<<<<<<<<<<<<<
 *                           _SymbolTable osymbols=None):
 *     """
 */
  struct __pyx_obj_9pywrapfst__SymbolTable *__pyx_v_isymbols = ((struct __pyx_obj_9pywrapfst__SymbolTable *)Py_None);

  /* "pynini.pyx":375
 *                           token_type=b"byte",
 *                           _SymbolTable isymbols=None,
 *                           _SymbolTable osymbols=None):             # <<<<<<<<<<<<<<
 *     """
 *     paths(self, token_type="byte", isymbols=None, osymbols=None)
 */
  struct __pyx_obj_9pywrapfst__SymbolTable *__pyx_v_osymbols = ((struct __pyx_obj_9pywrapfst__SymbolTable *)Py_None);
  struct __pyx_obj_6pynini_StringPaths *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("paths", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_token_type = __pyx_optional_args->token_type;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_isymbols = __pyx_optional_args->isymbols;
        if (__pyx_optional_args->__pyx_n > 2) {
          __pyx_v_osymbols = __pyx_optional_args->osymbols;
        }
      }
    }
  }

  /* "pynini.pyx":372
 *       raise FstOpError("Operation failed")
 * 
 *   cpdef StringPaths paths(self,             # <<<<<<<<<<<<<<
 *                           token_type=b"byte",
 *                           _SymbolTable isymbols=None,
 */
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_paths); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_3Fst_5paths)) {
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      __pyx_t_5 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_5 = 1;
        }
      }
      __pyx_t_6 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_INCREF(__pyx_v_token_type);
      __Pyx_GIVEREF(__pyx_v_token_type);
      PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_token_type);
      __Pyx_INCREF(((PyObject *)__pyx_v_isymbols));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_isymbols));
      PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, ((PyObject *)__pyx_v_isymbols));
      __Pyx_INCREF(((PyObject *)__pyx_v_osymbols));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_osymbols));
      PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, ((PyObject *)__pyx_v_osymbols));
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_6pynini_StringPaths))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_r = ((struct __pyx_obj_6pynini_StringPaths *)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":406
 *     See also: `StringPaths`. `StringPaths`. `StringPaths`. `StringPaths`.
 *     """
 *     return StringPaths(self, token_type, isymbols, osymbols)             # <<<<<<<<<<<<<<
 * 
 *   cpdef string stringify(self, token_type=b"byte") except *:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self));
  __Pyx_INCREF(__pyx_v_token_type);
  __Pyx_GIVEREF(__pyx_v_token_type);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_token_type);
  __Pyx_INCREF(((PyObject *)__pyx_v_isymbols));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_isymbols));
  PyTuple_SET_ITEM(__pyx_t_1, 2, ((PyObject *)__pyx_v_isymbols));
  __Pyx_INCREF(((PyObject *)__pyx_v_osymbols));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_osymbols));
  PyTuple_SET_ITEM(__pyx_t_1, 3, ((PyObject *)__pyx_v_osymbols));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6pynini_StringPaths), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = ((struct __pyx_obj_6pynini_StringPaths *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":372
 *       raise FstOpError("Operation failed")
 * 
 *   cpdef StringPaths paths(self,             # <<<<<<<<<<<<<<
 *                           token_type=b"byte",
 *                           _SymbolTable isymbols=None,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pynini.Fst.paths", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Fst_5paths(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pynini_3Fst_4paths[] = "\n    paths(self, token_type=\"byte\", isymbols=None, osymbols=None)\n\n    Creates iterator over all string paths in an acyclic FST.\n\n    This method returns an iterator over all paths (represented as pairs of\n    strings and an associated path weight) through an acyclic FST. This\n    operation is only feasible when the FST is acyclic. Depending on the\n    requested token type, the arc labels along the input and output sides of a\n    path are interpreted as UTF-8-encoded Unicode strings, raw bytes, or a\n    concatenation of string labels from a symbol table.\n\n    Note that this method creates an iterator over all paths *at the time\n    of creation* and the iterator will not be affected by any mutations to\n    the FST after that point.\n\n    Args:\n      token_type: A string indicating how arc labels are to be interpreted as\n          strings; (interprets arc labels as UTF-8 encoded Unicode strings),\n          \"byte\" (interprets arc labels as byte strings), \"symbol\" (interprets\n          arc labels according to the provided symbol tables).\n      isymbols: Input symbol table (ignored unless token_type is \"symbol\").\n      osymbols: Output symbol table (ignored unless token_Type is \"symbol\").\n\n    Raises:\n      FstArgError: Unknown token type.\n      FstArgError: FST is not acyclic.\n\n    See also: `StringPaths`. `StringPaths`. `StringPaths`. `StringPaths`.\n    ";
static PyObject *__pyx_pw_6pynini_3Fst_5paths(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_token_type = 0;
  struct __pyx_obj_9pywrapfst__SymbolTable *__pyx_v_isymbols = 0;
  struct __pyx_obj_9pywrapfst__SymbolTable *__pyx_v_osymbols = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("paths (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_token_type,&__pyx_n_s_isymbols,&__pyx_n_s_osymbols,0};
    PyObject* values[3] = {0,0,0};
    values[0] = ((PyObject *)__pyx_n_b_byte);

    /* "pynini.pyx":374
 *   cpdef StringPaths paths(self,
 *                           token_type=b"byte",
 *                           _SymbolTable isymbols=None,             # <<<<<<<<<<<<<<
 *                           _SymbolTable osymbols=None):
 *     """
 */
    values[1] = (PyObject *)((struct __pyx_obj_9pywrapfst__SymbolTable *)Py_None);

    /* "pynini.pyx":375
 *                           token_type=b"byte",
 *                           _SymbolTable isymbols=None,
 *                           _SymbolTable osymbols=None):             # <<<<<<<<<<<<<<
 *     """
 *     paths(self, token_type="byte", isymbols=None, osymbols=None)
 */
    values[2] = (PyObject *)((struct __pyx_obj_9pywrapfst__SymbolTable *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_token_type);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isymbols);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_osymbols);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "paths") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_token_type = values[0];
    __pyx_v_isymbols = ((struct __pyx_obj_9pywrapfst__SymbolTable *)values[1]);
    __pyx_v_osymbols = ((struct __pyx_obj_9pywrapfst__SymbolTable *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("paths", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.Fst.paths", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isymbols), __pyx_ptype_9pywrapfst__SymbolTable, 1, "isymbols", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_osymbols), __pyx_ptype_9pywrapfst__SymbolTable, 1, "osymbols", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6pynini_3Fst_4paths(((struct __pyx_obj_6pynini_Fst *)__pyx_v_self), __pyx_v_token_type, __pyx_v_isymbols, __pyx_v_osymbols);

  /* "pynini.pyx":372
 *       raise FstOpError("Operation failed")
 * 
 *   cpdef StringPaths paths(self,             # <<<<<<<<<<<<<<
 *                           token_type=b"byte",
 *                           _SymbolTable isymbols=None,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Fst_4paths(struct __pyx_obj_6pynini_Fst *__pyx_v_self, PyObject *__pyx_v_token_type, struct __pyx_obj_9pywrapfst__SymbolTable *__pyx_v_isymbols, struct __pyx_obj_9pywrapfst__SymbolTable *__pyx_v_osymbols) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_6pynini_3Fst_paths __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("paths", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 3;
  __pyx_t_2.token_type = __pyx_v_token_type;
  __pyx_t_2.isymbols = __pyx_v_isymbols;
  __pyx_t_2.osymbols = __pyx_v_osymbols;
  __pyx_t_1 = ((PyObject *)__pyx_vtabptr_6pynini_Fst->paths(__pyx_v_self, 1, &__pyx_t_2)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.Fst.paths", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":408
 *     return StringPaths(self, token_type, isymbols, osymbols)
 * 
 *   cpdef string stringify(self, token_type=b"byte") except *:             # <<<<<<<<<<<<<<
 *     """
 *     stringify(self, token_type="byte")
 */

static PyObject *__pyx_pw_6pynini_3Fst_7stringify(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static std::string __pyx_f_6pynini_3Fst_stringify(struct __pyx_obj_6pynini_Fst *__pyx_v_self, int __pyx_skip_dispatch, struct __pyx_opt_args_6pynini_3Fst_stringify *__pyx_optional_args) {
  PyObject *__pyx_v_token_type = ((PyObject *)__pyx_n_b_byte);
  enum fst::TokenType __pyx_v_tt;
  std::string __pyx_v_result;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  std::string __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("stringify", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_token_type = __pyx_optional_args->token_type;
    }
  }
  __Pyx_INCREF(__pyx_v_token_type);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_stringify); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_3Fst_7stringify)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_token_type); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(__pyx_v_token_type);
        __Pyx_GIVEREF(__pyx_v_token_type);
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_token_type);
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_6;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":446
 *     """
 *     cdef TokenType tt
 *     token_type = tostring(token_type)             # <<<<<<<<<<<<<<
 *     if token_type == b"byte":
 *       tt = BYTE
 */
  __pyx_t_6 = __pyx_f_9pywrapfst_tostring(__pyx_v_token_type, NULL); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_t_6); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF_SET(__pyx_v_token_type, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":447
 *     cdef TokenType tt
 *     token_type = tostring(token_type)
 *     if token_type == b"byte":             # <<<<<<<<<<<<<<
 *       tt = BYTE
 *     elif token_type == b"symbol":
 */
  __pyx_t_7 = (__Pyx_PyBytes_Equals(__pyx_v_token_type, __pyx_n_b_byte, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_7) {

    /* "pynini.pyx":448
 *     token_type = tostring(token_type)
 *     if token_type == b"byte":
 *       tt = BYTE             # <<<<<<<<<<<<<<
 *     elif token_type == b"symbol":
 *       tt = SYMBOL
 */
    __pyx_v_tt = fst::BYTE;

    /* "pynini.pyx":447
 *     cdef TokenType tt
 *     token_type = tostring(token_type)
 *     if token_type == b"byte":             # <<<<<<<<<<<<<<
 *       tt = BYTE
 *     elif token_type == b"symbol":
 */
    goto __pyx_L3;
  }

  /* "pynini.pyx":449
 *     if token_type == b"byte":
 *       tt = BYTE
 *     elif token_type == b"symbol":             # <<<<<<<<<<<<<<
 *       tt = SYMBOL
 *     elif token_type == b"utf8":
 */
  __pyx_t_7 = (__Pyx_PyBytes_Equals(__pyx_v_token_type, __pyx_n_b_symbol, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_7) {

    /* "pynini.pyx":450
 *       tt = BYTE
 *     elif token_type == b"symbol":
 *       tt = SYMBOL             # <<<<<<<<<<<<<<
 *     elif token_type == b"utf8":
 *       tt = UTF8
 */
    __pyx_v_tt = fst::SYMBOL;

    /* "pynini.pyx":449
 *     if token_type == b"byte":
 *       tt = BYTE
 *     elif token_type == b"symbol":             # <<<<<<<<<<<<<<
 *       tt = SYMBOL
 *     elif token_type == b"utf8":
 */
    goto __pyx_L3;
  }

  /* "pynini.pyx":451
 *     elif token_type == b"symbol":
 *       tt = SYMBOL
 *     elif token_type == b"utf8":             # <<<<<<<<<<<<<<
 *       tt = UTF8
 *     else:
 */
  __pyx_t_7 = (__Pyx_PyBytes_Equals(__pyx_v_token_type, __pyx_n_b_utf8, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_7) {

    /* "pynini.pyx":452
 *       tt = SYMBOL
 *     elif token_type == b"utf8":
 *       tt = UTF8             # <<<<<<<<<<<<<<
 *     else:
 *      raise FstArgError("Unknown token type: {!r}".format(token_type))
 */
    __pyx_v_tt = fst::UTF8;

    /* "pynini.pyx":451
 *     elif token_type == b"symbol":
 *       tt = SYMBOL
 *     elif token_type == b"utf8":             # <<<<<<<<<<<<<<
 *       tt = UTF8
 *     else:
 */
    goto __pyx_L3;
  }

  /* "pynini.pyx":454
 *       tt = UTF8
 *     else:
 *      raise FstArgError("Unknown token type: {!r}".format(token_type))             # <<<<<<<<<<<<<<
 *     cdef string result
 *     if not PyniniStringify(deref(self._fst), tt,
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstArgError); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Unknown_token_type_r, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_token_type); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_INCREF(__pyx_v_token_type);
      __Pyx_GIVEREF(__pyx_v_token_type);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_v_token_type);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "pynini.pyx":456
 *      raise FstArgError("Unknown token type: {!r}".format(token_type))
 *     cdef string result
 *     if not PyniniStringify(deref(self._fst), tt,             # <<<<<<<<<<<<<<
 *                            self._fst.get().OutputSymbols(), addr(result)):
 *       raise FstArgError("FST is not a string")
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_fst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 456; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pynini.pyx":457
 *     cdef string result
 *     if not PyniniStringify(deref(self._fst), tt,
 *                            self._fst.get().OutputSymbols(), addr(result)):             # <<<<<<<<<<<<<<
 *       raise FstArgError("FST is not a string")
 *     return result
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_fst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 457; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pynini.pyx":456
 *      raise FstArgError("Unknown token type: {!r}".format(token_type))
 *     cdef string result
 *     if not PyniniStringify(deref(self._fst), tt,             # <<<<<<<<<<<<<<
 *                            self._fst.get().OutputSymbols(), addr(result)):
 *       raise FstArgError("FST is not a string")
 */
  __pyx_t_7 = ((!(fst::script::PyniniStringify((*__pyx_v_self->__pyx_base.__pyx_base._fst), __pyx_v_tt, __pyx_v_self->__pyx_base.__pyx_base._fst.get()->OutputSymbols(), (&__pyx_v_result)) != 0)) != 0);
  if (__pyx_t_7) {

    /* "pynini.pyx":458
 *     if not PyniniStringify(deref(self._fst), tt,
 *                            self._fst.get().OutputSymbols(), addr(result)):
 *       raise FstArgError("FST is not a string")             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstArgError); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pynini.pyx":456
 *      raise FstArgError("Unknown token type: {!r}".format(token_type))
 *     cdef string result
 *     if not PyniniStringify(deref(self._fst), tt,             # <<<<<<<<<<<<<<
 *                            self._fst.get().OutputSymbols(), addr(result)):
 *       raise FstArgError("FST is not a string")
 */
  }

  /* "pynini.pyx":459
 *                            self._fst.get().OutputSymbols(), addr(result)):
 *       raise FstArgError("FST is not a string")
 *     return result             # <<<<<<<<<<<<<<
 * 
 *   # The following all override their definition in _MutableFst.
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "pynini.pyx":408
 *     return StringPaths(self, token_type, isymbols, osymbols)
 * 
 *   cpdef string stringify(self, token_type=b"byte") except *:             # <<<<<<<<<<<<<<
 *     """
 *     stringify(self, token_type="byte")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pynini.Fst.stringify", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_token_type);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Fst_7stringify(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pynini_3Fst_6stringify[] = "\n    stringify(self, token_type=\"byte\")\n\n    Creates a Python string from a string FST.\n\n    This method returns the string recognized by the FST as a Python byte or\n    Unicode string. This is only well-defined when the FST is an acceptor and a\n    \"string\" FST (meaning that the start state is numbered 0, and there is\n    exactly one transition from each state i to each state i + 1, there are no\n    other transitions, and the last state is final). Depending on the requested\n    token type, the arc labels are interpreted as a UTF-8-encoded Unicode\n    string, raw bytes, or as a concatenation of string labels from the output\n    symbol table.\n\n    The underlying routine reads only the output labels, so if the FST is\n    not an acceptor, it will be treated as the output projection of the FST.\n\n    If \"symbol\" mode is requested, the separator between symbols is determined\n    by the command-line flag --fst_field_separator (by default, space).\n\n    If \"symbol\" mode is requested but no symbol table is present, the integer\n    arc labels will be used instead.\n\n    Args:\n      token_type: A string indicating how arc labels are to be interpreted as\n          strings; (interprets arc labels as UTF-8 encoded Unicode strings),\n          \"byte\" (interprets arc labels as byte strings), \"symbol\" (interprets\n          arc labels according to FST's symbol tables).\n\n    Returns:\n      The Python string accepted by the FST.\n\n    Raises:\n      FstArgError: FST is not a string.\n      FstArgError: Unknown token type.\n    ";
static PyObject *__pyx_pw_6pynini_3Fst_7stringify(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_token_type = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stringify (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_token_type,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_n_b_byte);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_token_type);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "stringify") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_token_type = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("stringify", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.Fst.stringify", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_3Fst_6stringify(((struct __pyx_obj_6pynini_Fst *)__pyx_v_self), __pyx_v_token_type);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Fst_6stringify(struct __pyx_obj_6pynini_Fst *__pyx_v_self, PyObject *__pyx_v_token_type) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  struct __pyx_opt_args_6pynini_3Fst_stringify __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("stringify", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.token_type = __pyx_v_token_type;
  __pyx_t_1 = __pyx_vtabptr_6pynini_Fst->stringify(__pyx_v_self, 1, &__pyx_t_2); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynini.Fst.stringify", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":463
 *   # The following all override their definition in _MutableFst.
 * 
 *   cpdef Fst copy(self):             # <<<<<<<<<<<<<<
 *     """
 *     copy(self)
 */

static PyObject *__pyx_pw_6pynini_3Fst_9copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
struct __pyx_obj_6pynini_Fst *__pyx_f_6pynini_3Fst_copy(struct __pyx_obj_6pynini_Fst *__pyx_v_self, int __pyx_skip_dispatch) {
  struct __pyx_obj_6pynini_Fst *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_copy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_3Fst_9copy)) {
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_6pynini_Fst))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_r = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":469
 *     Makes a copy of the FST.
 *     """
 *     return _init_Fst_from_MutableFst(super(_MutableFst, self).copy())             # <<<<<<<<<<<<<<
 * 
 *   def closure(self, int32 lower=0, int32 upper=0):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_9pywrapfst__MutableFst));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_9pywrapfst__MutableFst));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_9pywrapfst__MutableFst));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_copy); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9pywrapfst__MutableFst))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((PyObject *)__pyx_f_6pynini__init_Fst_from_MutableFst(((struct __pyx_obj_9pywrapfst__MutableFst *)__pyx_t_1))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":463
 *   # The following all override their definition in _MutableFst.
 * 
 *   cpdef Fst copy(self):             # <<<<<<<<<<<<<<
 *     """
 *     copy(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynini.Fst.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Fst_9copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pynini_3Fst_8copy[] = "\n    copy(self)\n\n    Makes a copy of the FST.\n    ";
static PyObject *__pyx_pw_6pynini_3Fst_9copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Fst_8copy(((struct __pyx_obj_6pynini_Fst *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Fst_8copy(struct __pyx_obj_6pynini_Fst *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini_3Fst_copy(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.Fst.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

struct __pyx_obj_6pynini_Fst *__pyx_f_6pynini_3Fst_copy__pyx_wrap_1(struct __pyx_obj_6pynini_Fst *__pyx_v_self, int __pyx_skip_dispatch) {
  return __pyx_f_6pynini_3Fst_copy(__pyx_v_self, __pyx_skip_dispatch);
}

/* "pynini.pyx":471
 *     return _init_Fst_from_MutableFst(super(_MutableFst, self).copy())
 * 
 *   def closure(self, int32 lower=0, int32 upper=0):             # <<<<<<<<<<<<<<
 *     """
 *     closure(self, lower)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Fst_11closure(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pynini_3Fst_10closure[] = "\n    closure(self, lower)\n    closure(self, lower, upper)\n\n    Computes concatenative closure.\n\n    This operation destructively converts the FST to its concatenative closure.\n    If A transduces string x to y with weight w, then the zero-argument form\n    `A.closure()` mutates A so that it transduces between empty strings with\n    weight 1, transduces string x to y with weight w, transduces xx to yy with\n    weight w \\otimes w, string xxx to yyy with weight w \\otimes w \\otimes w\n    (and so on).\n\n    When called with two optional positive integer arguments, these act as\n    lower and upper bounds, respectively, for the number of cycles through the\n    original FST that the mutated FST permits. Therefore, `A.closure(0, 1)`\n    mutates A so that it permits 0 or 1 cycles; i.e., the mutated A transduces\n    between empty strings or transduces x to y.\n\n    When called with one optional positive integer argument, this argument\n    acts as the lower bound, with the upper bound implicitly set to infinity.\n    Therefore, `A.closure(1)` performs a mutation roughly equivalent to\n    `A.closure()` except that the former does not transduce between empty\n    strings.\n\n    The following are the equivalents for the closure-style syntax used in\n    Perl-style regular expressions:\n\n    Regexp:\t\tThis method:\t\tCopy shortcuts:\n\n    /x?/\t\tx.closure(0, 1)\t\tx.ques()\n    /x*/\t\tx.closure()\t\tx.star()\n    /x+/\t\tx.closure(1)\t\tx.plus()\n    /x{N}/\t\tx.closure(N, N)\n    /x{M,N}/\t\tx.closure(M, N)\n    /x{N,}/\t\tx.closure(N)\n    /x{,N}/\t\tx.closure(0, N)\n\n    Args:\n      lower: lower bound.\n      upper: upper bound.\n\n    Returns:\n      self.\n\n    See also `ques`, `star`, `plus`.\n    ";
static PyObject *__pyx_pw_6pynini_3Fst_11closure(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_10basictypes_int32 __pyx_v_lower;
  __pyx_t_10basictypes_int32 __pyx_v_upper;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("closure (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_lower,&__pyx_n_s_upper,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_lower);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_upper);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "closure") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_lower = __Pyx_PyInt_As_int32_t(values[0]); if (unlikely((__pyx_v_lower == (int32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_lower = ((__pyx_t_10basictypes_int32)0);
    }
    if (values[1]) {
      __pyx_v_upper = __Pyx_PyInt_As_int32_t(values[1]); if (unlikely((__pyx_v_upper == (int32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_upper = ((__pyx_t_10basictypes_int32)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("closure", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.Fst.closure", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_3Fst_10closure(((struct __pyx_obj_6pynini_Fst *)__pyx_v_self), __pyx_v_lower, __pyx_v_upper);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Fst_10closure(struct __pyx_obj_6pynini_Fst *__pyx_v_self, __pyx_t_10basictypes_int32 __pyx_v_lower, __pyx_t_10basictypes_int32 __pyx_v_upper) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("closure", 0);

  /* "pynini.pyx":519
 *     See also `ques`, `star`, `plus`.
 *     """
 *     Repeat(self._mfst.get(), lower, upper)             # <<<<<<<<<<<<<<
 *     self._check_pynini_op_error()
 *     return self
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_mfst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  fst::script::Repeat(__pyx_v_self->__pyx_base._mfst.get(), __pyx_v_lower, __pyx_v_upper);

  /* "pynini.pyx":520
 *     """
 *     Repeat(self._mfst.get(), lower, upper)
 *     self._check_pynini_op_error()             # <<<<<<<<<<<<<<
 *     return self
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_check_pynini_op_error");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 520; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  ((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->_check_pynini_op_error(__pyx_v_self); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 520; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":521
 *     Repeat(self._mfst.get(), lower, upper)
 *     self._check_pynini_op_error()
 *     return self             # <<<<<<<<<<<<<<
 * 
 *   @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pynini.pyx":471
 *     return _init_Fst_from_MutableFst(super(_MutableFst, self).copy())
 * 
 *   def closure(self, int32 lower=0, int32 upper=0):             # <<<<<<<<<<<<<<
 *     """
 *     closure(self, lower)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pynini.Fst.closure", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":524
 * 
 *   @property
 *   def plus(self):             # <<<<<<<<<<<<<<
 *     """
 *     Constructively computes +-closure.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Fst_13plus(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pynini_3Fst_12plus[] = "\n    Constructively computes +-closure.\n\n    Returns:\n      Closure-d copy.\n\n    See also: `closure`.\n    ";
static PyObject *__pyx_pw_6pynini_3Fst_13plus(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("plus (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Fst_12plus(((struct __pyx_obj_6pynini_Fst *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Fst_12plus(struct __pyx_obj_6pynini_Fst *__pyx_v_self) {
  struct __pyx_obj_6pynini_Fst *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("plus", 0);

  /* "pynini.pyx":533
 *     See also: `closure`.
 *     """
 *     result = self.copy()             # <<<<<<<<<<<<<<
 *     Closure(result._mfst.get(), CLOSURE_PLUS)
 *     result._check_pynini_op_error()
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "copy");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 533; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->copy(__pyx_v_self, 0)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 533; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":534
 *     """
 *     result = self.copy()
 *     Closure(result._mfst.get(), CLOSURE_PLUS)             # <<<<<<<<<<<<<<
 *     result._check_pynini_op_error()
 *     return result
 */
  if (unlikely(((PyObject *)__pyx_v_result) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_mfst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 534; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  fst::script::Closure(__pyx_v_result->__pyx_base._mfst.get(), fst::CLOSURE_PLUS);

  /* "pynini.pyx":535
 *     result = self.copy()
 *     Closure(result._mfst.get(), CLOSURE_PLUS)
 *     result._check_pynini_op_error()             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_result) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_check_pynini_op_error");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 535; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  ((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_result->__pyx_base.__pyx_base.__pyx_vtab)->_check_pynini_op_error(__pyx_v_result); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 535; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":536
 *     Closure(result._mfst.get(), CLOSURE_PLUS)
 *     result._check_pynini_op_error()
 *     return result             # <<<<<<<<<<<<<<
 * 
 *   @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "pynini.pyx":524
 * 
 *   @property
 *   def plus(self):             # <<<<<<<<<<<<<<
 *     """
 *     Constructively computes +-closure.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.Fst.plus", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":539
 * 
 *   @property
 *   def ques(self):             # <<<<<<<<<<<<<<
 *     """
 *     Constructively computes ?-closure.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Fst_15ques(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pynini_3Fst_14ques[] = "\n    Constructively computes ?-closure.\n\n    Returns:\n      Closure-d copy.\n\n    See also: `closure`.\n    ";
static PyObject *__pyx_pw_6pynini_3Fst_15ques(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ques (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Fst_14ques(((struct __pyx_obj_6pynini_Fst *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Fst_14ques(struct __pyx_obj_6pynini_Fst *__pyx_v_self) {
  struct __pyx_obj_6pynini_Fst *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("ques", 0);

  /* "pynini.pyx":548
 *     See also: `closure`.
 *     """
 *     result = self.copy()             # <<<<<<<<<<<<<<
 *     Repeat(result._mfst.get(), 0, 1)
 *     result._check_pynini_op_error()
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "copy");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 548; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->copy(__pyx_v_self, 0)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 548; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":549
 *     """
 *     result = self.copy()
 *     Repeat(result._mfst.get(), 0, 1)             # <<<<<<<<<<<<<<
 *     result._check_pynini_op_error()
 *     return result
 */
  if (unlikely(((PyObject *)__pyx_v_result) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_mfst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  fst::script::Repeat(__pyx_v_result->__pyx_base._mfst.get(), 0, 1);

  /* "pynini.pyx":550
 *     result = self.copy()
 *     Repeat(result._mfst.get(), 0, 1)
 *     result._check_pynini_op_error()             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_result) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_check_pynini_op_error");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 550; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  ((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_result->__pyx_base.__pyx_base.__pyx_vtab)->_check_pynini_op_error(__pyx_v_result); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 550; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":551
 *     Repeat(result._mfst.get(), 0, 1)
 *     result._check_pynini_op_error()
 *     return result             # <<<<<<<<<<<<<<
 * 
 *   @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "pynini.pyx":539
 * 
 *   @property
 *   def ques(self):             # <<<<<<<<<<<<<<
 *     """
 *     Constructively computes ?-closure.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.Fst.ques", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":554
 * 
 *   @property
 *   def star(self):             # <<<<<<<<<<<<<<
 *     """
 *     Constructively computes *-closure.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Fst_17star(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pynini_3Fst_16star[] = "\n    Constructively computes *-closure.\n\n    Returns:\n      Closure-d copy.\n\n    See also: `closure`.\n    ";
static PyObject *__pyx_pw_6pynini_3Fst_17star(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("star (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Fst_16star(((struct __pyx_obj_6pynini_Fst *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Fst_16star(struct __pyx_obj_6pynini_Fst *__pyx_v_self) {
  struct __pyx_obj_6pynini_Fst *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("star", 0);

  /* "pynini.pyx":563
 *     See also: `closure`.
 *     """
 *     result = self.copy()             # <<<<<<<<<<<<<<
 *     Closure(result._mfst.get(), CLOSURE_STAR)
 *     result._check_pynini_op_error()
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "copy");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->copy(__pyx_v_self, 0)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":564
 *     """
 *     result = self.copy()
 *     Closure(result._mfst.get(), CLOSURE_STAR)             # <<<<<<<<<<<<<<
 *     result._check_pynini_op_error()
 *     return result
 */
  if (unlikely(((PyObject *)__pyx_v_result) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_mfst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  fst::script::Closure(__pyx_v_result->__pyx_base._mfst.get(), fst::CLOSURE_STAR);

  /* "pynini.pyx":565
 *     result = self.copy()
 *     Closure(result._mfst.get(), CLOSURE_STAR)
 *     result._check_pynini_op_error()             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_result) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_check_pynini_op_error");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 565; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  ((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_result->__pyx_base.__pyx_base.__pyx_vtab)->_check_pynini_op_error(__pyx_v_result); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 565; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":566
 *     Closure(result._mfst.get(), CLOSURE_STAR)
 *     result._check_pynini_op_error()
 *     return result             # <<<<<<<<<<<<<<
 * 
 *   def concat(self, ifst):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "pynini.pyx":554
 * 
 *   @property
 *   def star(self):             # <<<<<<<<<<<<<<
 *     """
 *     Constructively computes *-closure.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.Fst.star", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":568
 *     return result
 * 
 *   def concat(self, ifst):             # <<<<<<<<<<<<<<
 *     """
 *     concat(self, ifst)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Fst_19concat(PyObject *__pyx_v_self, PyObject *__pyx_v_ifst); /*proto*/
static char __pyx_doc_6pynini_3Fst_18concat[] = "\n    concat(self, ifst)\n\n    Computes the concatenation (product) of two FSTs.\n\n    This operation destructively concatenates the FST with a second FST. If A\n    transduces string x to y with weight a and B transduces string w to v with\n    weight b, then their concatenation transduces string xw to yv with weight\n    a \\otimes b.\n\n    Args:\n      ifst: The second input Fst.\n\n    Returns:\n      self.\n\n    Raises:\n      FstSymbolTableMergeError: Unable to resolve symbol table conflict\n          without relabeling.\n    ";
static PyObject *__pyx_pw_6pynini_3Fst_19concat(PyObject *__pyx_v_self, PyObject *__pyx_v_ifst) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("concat (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Fst_18concat(((struct __pyx_obj_6pynini_Fst *)__pyx_v_self), ((PyObject *)__pyx_v_ifst));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Fst_18concat(struct __pyx_obj_6pynini_Fst *__pyx_v_self, PyObject *__pyx_v_ifst) {
  struct __pyx_obj_6pynini_Fst *__pyx_v_rhs = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  struct __pyx_opt_args_6pynini__compile_or_copy_Fst __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("concat", 0);

  /* "pynini.pyx":589
 *           without relabeling.
 *     """
 *     cdef Fst rhs = _compile_or_copy_Fst(ifst, arc_type=self.arc_type)             # <<<<<<<<<<<<<<
 *     if not MergeSymbols(self._mfst.get(), rhs._mfst.get(),
 *                         MERGE_INPUT_AND_OUTPUT_SYMBOLS):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_arc_type); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3.__pyx_n = 1;
  __pyx_t_3.arc_type = __pyx_t_1;
  __pyx_t_2 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_ifst, 0, &__pyx_t_3)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_rhs = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pynini.pyx":590
 *     """
 *     cdef Fst rhs = _compile_or_copy_Fst(ifst, arc_type=self.arc_type)
 *     if not MergeSymbols(self._mfst.get(), rhs._mfst.get(),             # <<<<<<<<<<<<<<
 *                         MERGE_INPUT_AND_OUTPUT_SYMBOLS):
 *       raise FstSymbolTableMergeError(
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_mfst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 590; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (unlikely(((PyObject *)__pyx_v_rhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_mfst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 590; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pynini.pyx":591
 *     cdef Fst rhs = _compile_or_copy_Fst(ifst, arc_type=self.arc_type)
 *     if not MergeSymbols(self._mfst.get(), rhs._mfst.get(),
 *                         MERGE_INPUT_AND_OUTPUT_SYMBOLS):             # <<<<<<<<<<<<<<
 *       raise FstSymbolTableMergeError(
 *           "Unable to resolve symbol table conflict without relabeling")
 */
  __pyx_t_4 = ((!(fst::script::MergeSymbols(__pyx_v_self->__pyx_base._mfst.get(), __pyx_v_rhs->__pyx_base._mfst.get(), fst::MERGE_INPUT_AND_OUTPUT_SYMBOLS) != 0)) != 0);

  /* "pynini.pyx":590
 *     """
 *     cdef Fst rhs = _compile_or_copy_Fst(ifst, arc_type=self.arc_type)
 *     if not MergeSymbols(self._mfst.get(), rhs._mfst.get(),             # <<<<<<<<<<<<<<
 *                         MERGE_INPUT_AND_OUTPUT_SYMBOLS):
 *       raise FstSymbolTableMergeError(
 */
  if (__pyx_t_4) {

    /* "pynini.pyx":592
 *     if not MergeSymbols(self._mfst.get(), rhs._mfst.get(),
 *                         MERGE_INPUT_AND_OUTPUT_SYMBOLS):
 *       raise FstSymbolTableMergeError(             # <<<<<<<<<<<<<<
 *           "Unable to resolve symbol table conflict without relabeling")
 *     self._concat(rhs)
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstSymbolTableMergeError); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pynini.pyx":590
 *     """
 *     cdef Fst rhs = _compile_or_copy_Fst(ifst, arc_type=self.arc_type)
 *     if not MergeSymbols(self._mfst.get(), rhs._mfst.get(),             # <<<<<<<<<<<<<<
 *                         MERGE_INPUT_AND_OUTPUT_SYMBOLS):
 *       raise FstSymbolTableMergeError(
 */
  }

  /* "pynini.pyx":594
 *       raise FstSymbolTableMergeError(
 *           "Unable to resolve symbol table conflict without relabeling")
 *     self._concat(rhs)             # <<<<<<<<<<<<<<
 *     return self
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_concat");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 594; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  ((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base._concat(((struct __pyx_obj_9pywrapfst__MutableFst *)__pyx_v_self), ((struct __pyx_obj_9pywrapfst__Fst *)__pyx_v_rhs)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 594; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":595
 *           "Unable to resolve symbol table conflict without relabeling")
 *     self._concat(rhs)
 *     return self             # <<<<<<<<<<<<<<
 * 
 *   cdef void _optimize(self, bool compute_props=False) except *:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pynini.pyx":568
 *     return result
 * 
 *   def concat(self, ifst):             # <<<<<<<<<<<<<<
 *     """
 *     concat(self, ifst)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pynini.Fst.concat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_rhs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":597
 *     return self
 * 
 *   cdef void _optimize(self, bool compute_props=False) except *:             # <<<<<<<<<<<<<<
 *     Optimize(self._mfst.get(), compute_props)
 *     self._check_pynini_op_error()
 */

static void __pyx_f_6pynini_3Fst__optimize(struct __pyx_obj_6pynini_Fst *__pyx_v_self, struct __pyx_opt_args_6pynini_3Fst__optimize *__pyx_optional_args) {
  bool __pyx_v_compute_props = ((bool)0);
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_optimize", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_compute_props = __pyx_optional_args->compute_props;
    }
  }

  /* "pynini.pyx":598
 * 
 *   cdef void _optimize(self, bool compute_props=False) except *:
 *     Optimize(self._mfst.get(), compute_props)             # <<<<<<<<<<<<<<
 *     self._check_pynini_op_error()
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_mfst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 598; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  fst::script::Optimize(__pyx_v_self->__pyx_base._mfst.get(), __pyx_v_compute_props);

  /* "pynini.pyx":599
 *   cdef void _optimize(self, bool compute_props=False) except *:
 *     Optimize(self._mfst.get(), compute_props)
 *     self._check_pynini_op_error()             # <<<<<<<<<<<<<<
 * 
 *   def optimize(self, bool compute_props=False):
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_check_pynini_op_error");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 599; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  ((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->_check_pynini_op_error(__pyx_v_self); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 599; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":597
 *     return self
 * 
 *   cdef void _optimize(self, bool compute_props=False) except *:             # <<<<<<<<<<<<<<
 *     Optimize(self._mfst.get(), compute_props)
 *     self._check_pynini_op_error()
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pynini.Fst._optimize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "pynini.pyx":601
 *     self._check_pynini_op_error()
 * 
 *   def optimize(self, bool compute_props=False):             # <<<<<<<<<<<<<<
 *     """
 *     optimize(self, compute_props=False)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Fst_21optimize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pynini_3Fst_20optimize[] = "\n    optimize(self, compute_props=False)\n\n    Performs a generic optimization of the FST.\n\n    This operation destructively optimizes the FST using epsilon-removal,\n    arc-sum mapping, determinization, and minimization (where possible). The\n    algorithm is as follows:\n\n    * If the FST is not (known to be) epsilon-free, perform epsilon-removal.\n    * Combine identically labeled multi-arcs and sum their weights.\n    * If the FST does not have idempotent weights, halt.\n    * If the FST is not (known to be) deterministic:\n      - If the FST is a (known) acceptor:\n        * If the FST is not (known to be) unweighted and/or acyclic, encode\n          weights.\n      - Otherwise, encode labels and, if the FST is not (known to be)\n        unweighted, encode weights.\n      - Determinize the FST.\n    * Minimize the FST.\n    * Decode the FST and combine identically-labeled multi-arcs and sum their\n      weights, if the FST was previously encoded.\n\n    By default, FST properties are not computed if they are not already set.\n\n    This optimization may result in a reduction of size (due to epsilon-removal,\n    arc-sum mapping, and minimization) and possibly faster composition, but\n    determinization (a prerequisite of minimization) may result in an\n    exponential blowup in size in the worst case. Judicious use of optimization\n    is a bit of a black art.\n\n    Args:\n      compute_props: Should unknown FST properties be computed to help choose\n          appropriate optimizations?\n\n    Returns:\n      self.\n    ";
static PyObject *__pyx_pw_6pynini_3Fst_21optimize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  bool __pyx_v_compute_props;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("optimize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_compute_props,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_compute_props);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "optimize") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 601; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_compute_props = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_compute_props == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 601; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_compute_props = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("optimize", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 601; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.Fst.optimize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_3Fst_20optimize(((struct __pyx_obj_6pynini_Fst *)__pyx_v_self), __pyx_v_compute_props);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Fst_20optimize(struct __pyx_obj_6pynini_Fst *__pyx_v_self, bool __pyx_v_compute_props) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  struct __pyx_opt_args_6pynini_3Fst__optimize __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("optimize", 0);

  /* "pynini.pyx":640
 *       self.
 *     """
 *     self._optimize(compute_props)             # <<<<<<<<<<<<<<
 *     return self
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_optimize");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 640; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1.__pyx_n = 1;
  __pyx_t_1.compute_props = __pyx_v_compute_props;
  ((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->_optimize(__pyx_v_self, &__pyx_t_1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 640; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":641
 *     """
 *     self._optimize(compute_props)
 *     return self             # <<<<<<<<<<<<<<
 * 
 *   def union(self, ifst):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pynini.pyx":601
 *     self._check_pynini_op_error()
 * 
 *   def optimize(self, bool compute_props=False):             # <<<<<<<<<<<<<<
 *     """
 *     optimize(self, compute_props=False)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pynini.Fst.optimize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":643
 *     return self
 * 
 *   def union(self, ifst):             # <<<<<<<<<<<<<<
 *     """
 *     union(self, ifst)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Fst_23union(PyObject *__pyx_v_self, PyObject *__pyx_v_ifst); /*proto*/
static char __pyx_doc_6pynini_3Fst_22union[] = "\n    union(self, ifst)\n\n    Computes the union (sum) of two FSTs.\n\n    This operation destructively computes the union (sum) of two FSTs. If A\n    transduces string x to y with weight a and B transduces string w to v with\n    weight b, then their union transduces x to y with weight a and w to v with\n    weight b.\n\n    Args:\n      ifst: The second input Fst.\n\n    Raises:\n      FstSymbolTableMergeError: Unable to resolve symbol table conflict\n          without relabeling.\n    ";
static PyObject *__pyx_pw_6pynini_3Fst_23union(PyObject *__pyx_v_self, PyObject *__pyx_v_ifst) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("union (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Fst_22union(((struct __pyx_obj_6pynini_Fst *)__pyx_v_self), ((PyObject *)__pyx_v_ifst));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Fst_22union(struct __pyx_obj_6pynini_Fst *__pyx_v_self, PyObject *__pyx_v_ifst) {
  struct __pyx_obj_6pynini_Fst *__pyx_v_rhs = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  struct __pyx_opt_args_6pynini__compile_or_copy_Fst __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("union", 0);

  /* "pynini.pyx":661
 *           without relabeling.
 *     """
 *     cdef Fst rhs = _compile_or_copy_Fst(ifst, arc_type=self.arc_type)             # <<<<<<<<<<<<<<
 *     if not MergeSymbols(self._mfst.get(), rhs._mfst.get(),
 *                         MERGE_INPUT_AND_OUTPUT_SYMBOLS):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_arc_type); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3.__pyx_n = 1;
  __pyx_t_3.arc_type = __pyx_t_1;
  __pyx_t_2 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_ifst, 0, &__pyx_t_3)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_rhs = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pynini.pyx":662
 *     """
 *     cdef Fst rhs = _compile_or_copy_Fst(ifst, arc_type=self.arc_type)
 *     if not MergeSymbols(self._mfst.get(), rhs._mfst.get(),             # <<<<<<<<<<<<<<
 *                         MERGE_INPUT_AND_OUTPUT_SYMBOLS):
 *       raise FstSymbolTableMergeError(
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_mfst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (unlikely(((PyObject *)__pyx_v_rhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_mfst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pynini.pyx":663
 *     cdef Fst rhs = _compile_or_copy_Fst(ifst, arc_type=self.arc_type)
 *     if not MergeSymbols(self._mfst.get(), rhs._mfst.get(),
 *                         MERGE_INPUT_AND_OUTPUT_SYMBOLS):             # <<<<<<<<<<<<<<
 *       raise FstSymbolTableMergeError(
 *           "Unable to resolve symbol table conflict without relabeling")
 */
  __pyx_t_4 = ((!(fst::script::MergeSymbols(__pyx_v_self->__pyx_base._mfst.get(), __pyx_v_rhs->__pyx_base._mfst.get(), fst::MERGE_INPUT_AND_OUTPUT_SYMBOLS) != 0)) != 0);

  /* "pynini.pyx":662
 *     """
 *     cdef Fst rhs = _compile_or_copy_Fst(ifst, arc_type=self.arc_type)
 *     if not MergeSymbols(self._mfst.get(), rhs._mfst.get(),             # <<<<<<<<<<<<<<
 *                         MERGE_INPUT_AND_OUTPUT_SYMBOLS):
 *       raise FstSymbolTableMergeError(
 */
  if (__pyx_t_4) {

    /* "pynini.pyx":664
 *     if not MergeSymbols(self._mfst.get(), rhs._mfst.get(),
 *                         MERGE_INPUT_AND_OUTPUT_SYMBOLS):
 *       raise FstSymbolTableMergeError(             # <<<<<<<<<<<<<<
 *           "Unable to resolve symbol table conflict without relabeling")
 *     self._union(rhs)
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstSymbolTableMergeError); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 664; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 664; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 664; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pynini.pyx":662
 *     """
 *     cdef Fst rhs = _compile_or_copy_Fst(ifst, arc_type=self.arc_type)
 *     if not MergeSymbols(self._mfst.get(), rhs._mfst.get(),             # <<<<<<<<<<<<<<
 *                         MERGE_INPUT_AND_OUTPUT_SYMBOLS):
 *       raise FstSymbolTableMergeError(
 */
  }

  /* "pynini.pyx":666
 *       raise FstSymbolTableMergeError(
 *           "Unable to resolve symbol table conflict without relabeling")
 *     self._union(rhs)             # <<<<<<<<<<<<<<
 *     return self
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_union");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  ((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base._union(((struct __pyx_obj_9pywrapfst__MutableFst *)__pyx_v_self), ((struct __pyx_obj_9pywrapfst__Fst *)__pyx_v_rhs)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":667
 *           "Unable to resolve symbol table conflict without relabeling")
 *     self._union(rhs)
 *     return self             # <<<<<<<<<<<<<<
 * 
 *   # Operator overloads.
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pynini.pyx":643
 *     return self
 * 
 *   def union(self, ifst):             # <<<<<<<<<<<<<<
 *     """
 *     union(self, ifst)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pynini.Fst.union", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_rhs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":671
 *   # Operator overloads.
 * 
 *   def __richcmp__(self, other, int op):             # <<<<<<<<<<<<<<
 *     cdef string arc_type = (self.arc_type if hasattr(self, "arc_type") else
 *                             other.arc_type)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Fst_25__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op); /*proto*/
static PyObject *__pyx_pw_6pynini_3Fst_25__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Fst_24__richcmp__(((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_other), ((int)__pyx_v_op));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Fst_24__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op) {
  std::string __pyx_v_arc_type;
  struct __pyx_obj_6pynini_Fst *__pyx_v_lhs = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_v_rhs = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  struct __pyx_opt_args_6pynini__compile_or_copy_Fst __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "pynini.pyx":672
 * 
 *   def __richcmp__(self, other, int op):
 *     cdef string arc_type = (self.arc_type if hasattr(self, "arc_type") else             # <<<<<<<<<<<<<<
 *                             other.arc_type)
 *     cdef Fst lhs = _compile_or_copy_Fst(self, arc_type=arc_type)
 */
  __pyx_t_2 = PyObject_HasAttr(__pyx_v_self, __pyx_n_s_arc_type); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 672; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if ((__pyx_t_2 != 0)) {
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_arc_type); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 672; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_3); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 672; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __pyx_t_4;
  } else {

    /* "pynini.pyx":673
 *   def __richcmp__(self, other, int op):
 *     cdef string arc_type = (self.arc_type if hasattr(self, "arc_type") else
 *                             other.arc_type)             # <<<<<<<<<<<<<<
 *     cdef Fst lhs = _compile_or_copy_Fst(self, arc_type=arc_type)
 *     cdef Fst rhs = _compile_or_copy_Fst(other, arc_type=arc_type)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_arc_type); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 673; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_3); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 673; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __pyx_t_4;
  }
  __pyx_v_arc_type = __pyx_t_1;

  /* "pynini.pyx":674
 *     cdef string arc_type = (self.arc_type if hasattr(self, "arc_type") else
 *                             other.arc_type)
 *     cdef Fst lhs = _compile_or_copy_Fst(self, arc_type=arc_type)             # <<<<<<<<<<<<<<
 *     cdef Fst rhs = _compile_or_copy_Fst(other, arc_type=arc_type)
 *     if op == 2:    # ==
 */
  __pyx_t_3 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_arc_type); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 674; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6.__pyx_n = 1;
  __pyx_t_6.arc_type = __pyx_t_3;
  __pyx_t_5 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_self, 0, &__pyx_t_6)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 674; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_lhs = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "pynini.pyx":675
 *                             other.arc_type)
 *     cdef Fst lhs = _compile_or_copy_Fst(self, arc_type=arc_type)
 *     cdef Fst rhs = _compile_or_copy_Fst(other, arc_type=arc_type)             # <<<<<<<<<<<<<<
 *     if op == 2:    # ==
 *       return Equal(deref(lhs._fst), deref(rhs._fst), kDelta)
 */
  __pyx_t_5 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_arc_type); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 675; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6.__pyx_n = 1;
  __pyx_t_6.arc_type = __pyx_t_5;
  __pyx_t_3 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_other, 0, &__pyx_t_6)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 675; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_rhs = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pynini.pyx":676
 *     cdef Fst lhs = _compile_or_copy_Fst(self, arc_type=arc_type)
 *     cdef Fst rhs = _compile_or_copy_Fst(other, arc_type=arc_type)
 *     if op == 2:    # ==             # <<<<<<<<<<<<<<
 *       return Equal(deref(lhs._fst), deref(rhs._fst), kDelta)
 *     elif op == 3:  # !=
 */
  switch (__pyx_v_op) {
    case 2:

    /* "pynini.pyx":677
 *     cdef Fst rhs = _compile_or_copy_Fst(other, arc_type=arc_type)
 *     if op == 2:    # ==
 *       return Equal(deref(lhs._fst), deref(rhs._fst), kDelta)             # <<<<<<<<<<<<<<
 *     elif op == 3:  # !=
 *       return not Equal(deref(lhs._fst), deref(rhs._fst), kDelta)
 */
    __Pyx_XDECREF(__pyx_r);
    if (unlikely(((PyObject *)__pyx_v_lhs) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_fst");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 677; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    if (unlikely(((PyObject *)__pyx_v_rhs) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_fst");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 677; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_3 = __Pyx_PyBool_FromLong(fst::script::Equal((*__pyx_v_lhs->__pyx_base.__pyx_base._fst), (*__pyx_v_rhs->__pyx_base.__pyx_base._fst), fst::kDelta)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 677; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pynini.pyx":676
 *     cdef Fst lhs = _compile_or_copy_Fst(self, arc_type=arc_type)
 *     cdef Fst rhs = _compile_or_copy_Fst(other, arc_type=arc_type)
 *     if op == 2:    # ==             # <<<<<<<<<<<<<<
 *       return Equal(deref(lhs._fst), deref(rhs._fst), kDelta)
 *     elif op == 3:  # !=
 */
    break;

    /* "pynini.pyx":678
 *     if op == 2:    # ==
 *       return Equal(deref(lhs._fst), deref(rhs._fst), kDelta)
 *     elif op == 3:  # !=             # <<<<<<<<<<<<<<
 *       return not Equal(deref(lhs._fst), deref(rhs._fst), kDelta)
 *     raise NotImplementedError("Operator {} not implemented".format(op))
 */
    case 3:

    /* "pynini.pyx":679
 *       return Equal(deref(lhs._fst), deref(rhs._fst), kDelta)
 *     elif op == 3:  # !=
 *       return not Equal(deref(lhs._fst), deref(rhs._fst), kDelta)             # <<<<<<<<<<<<<<
 *     raise NotImplementedError("Operator {} not implemented".format(op))
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    if (unlikely(((PyObject *)__pyx_v_lhs) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_fst");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 679; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    if (unlikely(((PyObject *)__pyx_v_rhs) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_fst");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 679; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_3 = __Pyx_PyBool_FromLong((!(fst::script::Equal((*__pyx_v_lhs->__pyx_base.__pyx_base._fst), (*__pyx_v_rhs->__pyx_base.__pyx_base._fst), fst::kDelta) != 0))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 679; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pynini.pyx":678
 *     if op == 2:    # ==
 *       return Equal(deref(lhs._fst), deref(rhs._fst), kDelta)
 *     elif op == 3:  # !=             # <<<<<<<<<<<<<<
 *       return not Equal(deref(lhs._fst), deref(rhs._fst), kDelta)
 *     raise NotImplementedError("Operator {} not implemented".format(op))
 */
    break;
    default: break;
  }

  /* "pynini.pyx":680
 *     elif op == 3:  # !=
 *       return not Equal(deref(lhs._fst), deref(rhs._fst), kDelta)
 *     raise NotImplementedError("Operator {} not implemented".format(op))             # <<<<<<<<<<<<<<
 * 
 *   # x + y
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Operator_not_implemented, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 680; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_op); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 680; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_8) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_7); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 680; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 680; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8); __pyx_t_8 = NULL;
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_9, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 680; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 680; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 680; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_Raise(__pyx_t_3, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 680; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":671
 *   # Operator overloads.
 * 
 *   def __richcmp__(self, other, int op):             # <<<<<<<<<<<<<<
 *     cdef string arc_type = (self.arc_type if hasattr(self, "arc_type") else
 *                             other.arc_type)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pynini.Fst.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_lhs);
  __Pyx_XDECREF((PyObject *)__pyx_v_rhs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":684
 *   # x + y
 * 
 *   def __add__(self, other):             # <<<<<<<<<<<<<<
 *     cdef string arc_type = (self.arc_type if hasattr(self, "arc_type") else
 *                             other.arc_type)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Fst_27__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_6pynini_3Fst_27__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__add__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Fst_26__add__(((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Fst_26__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  std::string __pyx_v_arc_type;
  struct __pyx_obj_6pynini_Fst *__pyx_v_lhs = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  struct __pyx_opt_args_6pynini__compile_or_copy_Fst __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__add__", 0);

  /* "pynini.pyx":685
 * 
 *   def __add__(self, other):
 *     cdef string arc_type = (self.arc_type if hasattr(self, "arc_type") else             # <<<<<<<<<<<<<<
 *                             other.arc_type)
 *     cdef Fst lhs = _compile_or_copy_Fst(self, arc_type=arc_type)
 */
  __pyx_t_2 = PyObject_HasAttr(__pyx_v_self, __pyx_n_s_arc_type); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 685; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if ((__pyx_t_2 != 0)) {
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_arc_type); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 685; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_3); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 685; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __pyx_t_4;
  } else {

    /* "pynini.pyx":686
 *   def __add__(self, other):
 *     cdef string arc_type = (self.arc_type if hasattr(self, "arc_type") else
 *                             other.arc_type)             # <<<<<<<<<<<<<<
 *     cdef Fst lhs = _compile_or_copy_Fst(self, arc_type=arc_type)
 *     lhs.concat(other)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_arc_type); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 686; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_3); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 686; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __pyx_t_4;
  }
  __pyx_v_arc_type = __pyx_t_1;

  /* "pynini.pyx":687
 *     cdef string arc_type = (self.arc_type if hasattr(self, "arc_type") else
 *                             other.arc_type)
 *     cdef Fst lhs = _compile_or_copy_Fst(self, arc_type=arc_type)             # <<<<<<<<<<<<<<
 *     lhs.concat(other)
 *     return lhs
 */
  __pyx_t_3 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_arc_type); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 687; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6.__pyx_n = 1;
  __pyx_t_6.arc_type = __pyx_t_3;
  __pyx_t_5 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_self, 0, &__pyx_t_6)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 687; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_lhs = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "pynini.pyx":688
 *                             other.arc_type)
 *     cdef Fst lhs = _compile_or_copy_Fst(self, arc_type=arc_type)
 *     lhs.concat(other)             # <<<<<<<<<<<<<<
 *     return lhs
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_lhs), __pyx_n_s_concat); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_7) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_other); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
  } else {
    __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
    __Pyx_INCREF(__pyx_v_other);
    __Pyx_GIVEREF(__pyx_v_other);
    PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_v_other);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "pynini.pyx":689
 *     cdef Fst lhs = _compile_or_copy_Fst(self, arc_type=arc_type)
 *     lhs.concat(other)
 *     return lhs             # <<<<<<<<<<<<<<
 * 
 *   # x - y
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_lhs));
  __pyx_r = ((PyObject *)__pyx_v_lhs);
  goto __pyx_L0;

  /* "pynini.pyx":684
 *   # x + y
 * 
 *   def __add__(self, other):             # <<<<<<<<<<<<<<
 *     cdef string arc_type = (self.arc_type if hasattr(self, "arc_type") else
 *                             other.arc_type)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pynini.Fst.__add__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_lhs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":693
 *   # x - y
 * 
 *   def __sub__(self, other):             # <<<<<<<<<<<<<<
 *     return difference(self, other)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Fst_29__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_6pynini_3Fst_29__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__sub__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Fst_28__sub__(((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Fst_28__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__sub__", 0);

  /* "pynini.pyx":694
 * 
 *   def __sub__(self, other):
 *     return difference(self, other)             # <<<<<<<<<<<<<<
 * 
 *   # x * y
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_difference); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (__pyx_t_3) {
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
  }
  __Pyx_INCREF(__pyx_v_self);
  __Pyx_GIVEREF(__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_self);
  __Pyx_INCREF(__pyx_v_other);
  __Pyx_GIVEREF(__pyx_v_other);
  PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_other);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":693
 *   # x - y
 * 
 *   def __sub__(self, other):             # <<<<<<<<<<<<<<
 *     return difference(self, other)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynini.Fst.__sub__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":698
 *   # x * y
 * 
 *   def __mul__(self, other):             # <<<<<<<<<<<<<<
 *     return compose(self, other)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Fst_31__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_6pynini_3Fst_31__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__mul__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Fst_30__mul__(((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Fst_30__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__mul__", 0);

  /* "pynini.pyx":699
 * 
 *   def __mul__(self, other):
 *     return compose(self, other)             # <<<<<<<<<<<<<<
 * 
 *   # x | y
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_compose); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 699; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 699; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (__pyx_t_3) {
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
  }
  __Pyx_INCREF(__pyx_v_self);
  __Pyx_GIVEREF(__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_self);
  __Pyx_INCREF(__pyx_v_other);
  __Pyx_GIVEREF(__pyx_v_other);
  PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_other);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 699; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":698
 *   # x * y
 * 
 *   def __mul__(self, other):             # <<<<<<<<<<<<<<
 *     return compose(self, other)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynini.Fst.__mul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":703
 *   # x | y
 * 
 *   def __or__(self, other):             # <<<<<<<<<<<<<<
 *     cdef string arc_type = (self.arc_type if hasattr(self, "arc_type") else
 *                             other.arc_type)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Fst_33__or__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_6pynini_3Fst_33__or__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__or__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Fst_32__or__(((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Fst_32__or__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  std::string __pyx_v_arc_type;
  struct __pyx_obj_6pynini_Fst *__pyx_v_lhs = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  struct __pyx_opt_args_6pynini__compile_or_copy_Fst __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__or__", 0);

  /* "pynini.pyx":704
 * 
 *   def __or__(self, other):
 *     cdef string arc_type = (self.arc_type if hasattr(self, "arc_type") else             # <<<<<<<<<<<<<<
 *                             other.arc_type)
 *     cdef Fst lhs = _compile_or_copy_Fst(self, arc_type=arc_type)
 */
  __pyx_t_2 = PyObject_HasAttr(__pyx_v_self, __pyx_n_s_arc_type); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 704; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if ((__pyx_t_2 != 0)) {
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_arc_type); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 704; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_3); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 704; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __pyx_t_4;
  } else {

    /* "pynini.pyx":705
 *   def __or__(self, other):
 *     cdef string arc_type = (self.arc_type if hasattr(self, "arc_type") else
 *                             other.arc_type)             # <<<<<<<<<<<<<<
 *     cdef Fst lhs = _compile_or_copy_Fst(self, arc_type=arc_type)
 *     lhs.union(other)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_arc_type); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 705; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_3); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 705; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __pyx_t_4;
  }
  __pyx_v_arc_type = __pyx_t_1;

  /* "pynini.pyx":706
 *     cdef string arc_type = (self.arc_type if hasattr(self, "arc_type") else
 *                             other.arc_type)
 *     cdef Fst lhs = _compile_or_copy_Fst(self, arc_type=arc_type)             # <<<<<<<<<<<<<<
 *     lhs.union(other)
 *     return lhs
 */
  __pyx_t_3 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_arc_type); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 706; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6.__pyx_n = 1;
  __pyx_t_6.arc_type = __pyx_t_3;
  __pyx_t_5 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_self, 0, &__pyx_t_6)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 706; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_lhs = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "pynini.pyx":707
 *                             other.arc_type)
 *     cdef Fst lhs = _compile_or_copy_Fst(self, arc_type=arc_type)
 *     lhs.union(other)             # <<<<<<<<<<<<<<
 *     return lhs
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_lhs), __pyx_n_s_union); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 707; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_7) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_other); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 707; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
  } else {
    __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 707; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
    __Pyx_INCREF(__pyx_v_other);
    __Pyx_GIVEREF(__pyx_v_other);
    PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_v_other);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 707; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "pynini.pyx":708
 *     cdef Fst lhs = _compile_or_copy_Fst(self, arc_type=arc_type)
 *     lhs.union(other)
 *     return lhs             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_lhs));
  __pyx_r = ((PyObject *)__pyx_v_lhs);
  goto __pyx_L0;

  /* "pynini.pyx":703
 *   # x | y
 * 
 *   def __or__(self, other):             # <<<<<<<<<<<<<<
 *     cdef string arc_type = (self.arc_type if hasattr(self, "arc_type") else
 *                             other.arc_type)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pynini.Fst.__or__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_lhs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":715
 * 
 * 
 * cpdef Fst _compile_or_copy_Fst(arg, arc_type=b"standard"):             # <<<<<<<<<<<<<<
 *   if not isinstance(arg, Fst):
 *     return acceptor(arg, arc_type=arc_type)
 */

static PyObject *__pyx_pw_6pynini_1_compile_or_copy_Fst(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static struct __pyx_obj_6pynini_Fst *__pyx_f_6pynini__compile_or_copy_Fst(PyObject *__pyx_v_arg, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_6pynini__compile_or_copy_Fst *__pyx_optional_args) {
  PyObject *__pyx_v_arc_type = ((PyObject *)__pyx_n_b_standard);
  struct __pyx_obj_6pynini_Fst *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_compile_or_copy_Fst", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_arc_type = __pyx_optional_args->arc_type;
    }
  }

  /* "pynini.pyx":716
 * 
 * cpdef Fst _compile_or_copy_Fst(arg, arc_type=b"standard"):
 *   if not isinstance(arg, Fst):             # <<<<<<<<<<<<<<
 *     return acceptor(arg, arc_type=arc_type)
 *   else:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_arg, __pyx_ptype_6pynini_Fst); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "pynini.pyx":717
 * cpdef Fst _compile_or_copy_Fst(arg, arc_type=b"standard"):
 *   if not isinstance(arg, Fst):
 *     return acceptor(arg, arc_type=arc_type)             # <<<<<<<<<<<<<<
 *   else:
 *     return arg.copy()
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_acceptor); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 717; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 717; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_arg);
    __Pyx_GIVEREF(__pyx_v_arg);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_arg);
    __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 717; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_arc_type, __pyx_v_arc_type) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 717; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 717; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_6pynini_Fst))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 717; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_r = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_6);
    __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "pynini.pyx":716
 * 
 * cpdef Fst _compile_or_copy_Fst(arg, arc_type=b"standard"):
 *   if not isinstance(arg, Fst):             # <<<<<<<<<<<<<<
 *     return acceptor(arg, arc_type=arc_type)
 *   else:
 */
  }

  /* "pynini.pyx":719
 *     return acceptor(arg, arc_type=arc_type)
 *   else:
 *     return arg.copy()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_arg, __pyx_n_s_copy); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_6 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_6pynini_Fst))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_r = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_6);
    __pyx_t_6 = 0;
    goto __pyx_L0;
  }

  /* "pynini.pyx":715
 * 
 * 
 * cpdef Fst _compile_or_copy_Fst(arg, arc_type=b"standard"):             # <<<<<<<<<<<<<<
 *   if not isinstance(arg, Fst):
 *     return acceptor(arg, arc_type=arc_type)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pynini._compile_or_copy_Fst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_1_compile_or_copy_Fst(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6pynini_1_compile_or_copy_Fst(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg = 0;
  PyObject *__pyx_v_arc_type = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_compile_or_copy_Fst (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arg,&__pyx_n_s_arc_type,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)__pyx_n_b_standard);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arg)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arc_type);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_compile_or_copy_Fst") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 715; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_arg = values[0];
    __pyx_v_arc_type = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_compile_or_copy_Fst", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 715; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini._compile_or_copy_Fst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini__compile_or_copy_Fst(__pyx_self, __pyx_v_arg, __pyx_v_arc_type);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini__compile_or_copy_Fst(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_arg, PyObject *__pyx_v_arc_type) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_6pynini__compile_or_copy_Fst __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_compile_or_copy_Fst", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.arc_type = __pyx_v_arc_type;
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_arg, 0, &__pyx_t_2)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 715; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini._compile_or_copy_Fst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":726
 * 
 * 
 * cdef Fst _init_Fst_from_MutableFst(_MutableFst rhs):             # <<<<<<<<<<<<<<
 *   cdef Fst result = Fst.__new__(Fst)
 *   result._fst = rhs._fst
 */

static struct __pyx_obj_6pynini_Fst *__pyx_f_6pynini__init_Fst_from_MutableFst(struct __pyx_obj_9pywrapfst__MutableFst *__pyx_v_rhs) {
  struct __pyx_obj_6pynini_Fst *__pyx_v_result = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::shared_ptr<fst::script::FstClass>  __pyx_t_2;
  std::shared_ptr<fst::script::MutableFstClass>  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_init_Fst_from_MutableFst", 0);

  /* "pynini.pyx":727
 * 
 * cdef Fst _init_Fst_from_MutableFst(_MutableFst rhs):
 *   cdef Fst result = Fst.__new__(Fst)             # <<<<<<<<<<<<<<
 *   result._fst = rhs._fst
 *   result._mfst = rhs._mfst
 */
  __pyx_t_1 = __pyx_tp_new_6pynini_Fst(((PyTypeObject *)__pyx_ptype_6pynini_Fst), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 727; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_6pynini_Fst)))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 727; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_result = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":728
 * cdef Fst _init_Fst_from_MutableFst(_MutableFst rhs):
 *   cdef Fst result = Fst.__new__(Fst)
 *   result._fst = rhs._fst             # <<<<<<<<<<<<<<
 *   result._mfst = rhs._mfst
 *   return result
 */
  if (unlikely(((PyObject *)__pyx_v_rhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_fst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 728; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = __pyx_v_rhs->__pyx_base._fst;
  if (unlikely(((PyObject *)__pyx_v_result) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_fst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 728; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_result->__pyx_base.__pyx_base._fst = __pyx_t_2;

  /* "pynini.pyx":729
 *   cdef Fst result = Fst.__new__(Fst)
 *   result._fst = rhs._fst
 *   result._mfst = rhs._mfst             # <<<<<<<<<<<<<<
 *   return result
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_rhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_mfst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 729; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_3 = __pyx_v_rhs->_mfst;
  if (unlikely(((PyObject *)__pyx_v_result) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_mfst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 729; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_result->__pyx_base._mfst = __pyx_t_3;

  /* "pynini.pyx":730
 *   result._fst = rhs._fst
 *   result._mfst = rhs._mfst
 *   return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "pynini.pyx":726
 * 
 * 
 * cdef Fst _init_Fst_from_MutableFst(_MutableFst rhs):             # <<<<<<<<<<<<<<
 *   cdef Fst result = Fst.__new__(Fst)
 *   result._fst = rhs._fst
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini._init_Fst_from_MutableFst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":736
 * 
 * 
 * cpdef Fst acceptor(astring,             # <<<<<<<<<<<<<<
 *                    weight=None,
 *                    arc_type=b"standard",
 */

static PyObject *__pyx_pw_6pynini_3acceptor(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static struct __pyx_obj_6pynini_Fst *__pyx_f_6pynini_acceptor(PyObject *__pyx_v_astring, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_6pynini_acceptor *__pyx_optional_args) {

  /* "pynini.pyx":737
 * 
 * cpdef Fst acceptor(astring,
 *                    weight=None,             # <<<<<<<<<<<<<<
 *                    arc_type=b"standard",
 *                    token_type=b"byte"):
 */
  PyObject *__pyx_v_weight = ((PyObject *)Py_None);
  PyObject *__pyx_v_arc_type = ((PyObject *)__pyx_n_b_standard);
  PyObject *__pyx_v_token_type = ((PyObject *)__pyx_n_b_byte);
  struct __pyx_obj_6pynini_Fst *__pyx_v_result = 0;
  fst::script::WeightClass __pyx_v_wc;
  std::string __pyx_v__astring;
  __pyx_t_9pywrapfst_SymbolTable_ptr __pyx_v_syms;
  struct __pyx_obj_6pynini_Fst *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  fst::script::WeightClass __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("acceptor", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_weight = __pyx_optional_args->weight;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_arc_type = __pyx_optional_args->arc_type;
        if (__pyx_optional_args->__pyx_n > 2) {
          __pyx_v_token_type = __pyx_optional_args->token_type;
        }
      }
    }
  }
  __Pyx_INCREF(__pyx_v_token_type);

  /* "pynini.pyx":767
 *       FstStringCompilationError: String compilation failed.
 *   """
 *   cdef Fst result = Fst(tostring(arc_type))             # <<<<<<<<<<<<<<
 *   cdef WeightClass wc = _get_WeightClass_or_One(result.weight_type, weight)
 *   cdef string _astring = tostring(astring)
 */
  __pyx_t_1 = __pyx_f_9pywrapfst_tostring(__pyx_v_arc_type, NULL); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 767; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 767; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 767; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 767; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pynini.pyx":768
 *   """
 *   cdef Fst result = Fst(tostring(arc_type))
 *   cdef WeightClass wc = _get_WeightClass_or_One(result.weight_type, weight)             # <<<<<<<<<<<<<<
 *   cdef string _astring = tostring(astring)
 *   cdef SymbolTable_ptr syms
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_result), __pyx_n_s_weight_type); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 768; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 768; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_f_9pywrapfst__get_WeightClass_or_One(__pyx_t_1, __pyx_v_weight); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 768; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_wc = __pyx_t_4;

  /* "pynini.pyx":769
 *   cdef Fst result = Fst(tostring(arc_type))
 *   cdef WeightClass wc = _get_WeightClass_or_One(result.weight_type, weight)
 *   cdef string _astring = tostring(astring)             # <<<<<<<<<<<<<<
 *   cdef SymbolTable_ptr syms
 *   try:
 */
  __pyx_t_1 = __pyx_f_9pywrapfst_tostring(__pyx_v_astring, NULL); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 769; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v__astring = __pyx_t_1;

  /* "pynini.pyx":771
 *   cdef string _astring = tostring(astring)
 *   cdef SymbolTable_ptr syms
 *   try:             # <<<<<<<<<<<<<<
 *     token_type = tostring(token_type)
 *     if token_type == b"byte":
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_7);
    /*try:*/ {

      /* "pynini.pyx":772
 *   cdef SymbolTable_ptr syms
 *   try:
 *     token_type = tostring(token_type)             # <<<<<<<<<<<<<<
 *     if token_type == b"byte":
 *       if not CompileBracketedByteString(_astring, wc, result._mfst.get()):
 */
      __pyx_t_1 = __pyx_f_9pywrapfst_tostring(__pyx_v_token_type, NULL); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF_SET(__pyx_v_token_type, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "pynini.pyx":773
 *   try:
 *     token_type = tostring(token_type)
 *     if token_type == b"byte":             # <<<<<<<<<<<<<<
 *       if not CompileBracketedByteString(_astring, wc, result._mfst.get()):
 *         raise FstStringCompilationError("Bytestring compilation failed")
 */
      __pyx_t_8 = (__Pyx_PyBytes_Equals(__pyx_v_token_type, __pyx_n_b_byte, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 773; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      if (__pyx_t_8) {

        /* "pynini.pyx":774
 *     token_type = tostring(token_type)
 *     if token_type == b"byte":
 *       if not CompileBracketedByteString(_astring, wc, result._mfst.get()):             # <<<<<<<<<<<<<<
 *         raise FstStringCompilationError("Bytestring compilation failed")
 *     elif token_type == b"utf8":
 */
        __pyx_t_8 = ((!(fst::script::CompileBracketedByteString(__pyx_v__astring, __pyx_v_wc, __pyx_v_result->__pyx_base._mfst.get()) != 0)) != 0);
        if (__pyx_t_8) {

          /* "pynini.pyx":775
 *     if token_type == b"byte":
 *       if not CompileBracketedByteString(_astring, wc, result._mfst.get()):
 *         raise FstStringCompilationError("Bytestring compilation failed")             # <<<<<<<<<<<<<<
 *     elif token_type == b"utf8":
 *       if not CompileBracketedUTF8String(_astring, wc, result._mfst.get()):
 */
          __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstStringCompilationError); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 775; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 775; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_Raise(__pyx_t_3, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 775; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

          /* "pynini.pyx":774
 *     token_type = tostring(token_type)
 *     if token_type == b"byte":
 *       if not CompileBracketedByteString(_astring, wc, result._mfst.get()):             # <<<<<<<<<<<<<<
 *         raise FstStringCompilationError("Bytestring compilation failed")
 *     elif token_type == b"utf8":
 */
        }

        /* "pynini.pyx":773
 *   try:
 *     token_type = tostring(token_type)
 *     if token_type == b"byte":             # <<<<<<<<<<<<<<
 *       if not CompileBracketedByteString(_astring, wc, result._mfst.get()):
 *         raise FstStringCompilationError("Bytestring compilation failed")
 */
        goto __pyx_L11;
      }

      /* "pynini.pyx":776
 *       if not CompileBracketedByteString(_astring, wc, result._mfst.get()):
 *         raise FstStringCompilationError("Bytestring compilation failed")
 *     elif token_type == b"utf8":             # <<<<<<<<<<<<<<
 *       if not CompileBracketedUTF8String(_astring, wc, result._mfst.get()):
 *         raise FstStringCompilationError("UTF8 string compilation failed")
 */
      __pyx_t_8 = (__Pyx_PyBytes_Equals(__pyx_v_token_type, __pyx_n_b_utf8, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 776; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      if (__pyx_t_8) {

        /* "pynini.pyx":777
 *         raise FstStringCompilationError("Bytestring compilation failed")
 *     elif token_type == b"utf8":
 *       if not CompileBracketedUTF8String(_astring, wc, result._mfst.get()):             # <<<<<<<<<<<<<<
 *         raise FstStringCompilationError("UTF8 string compilation failed")
 *     else:
 */
        __pyx_t_8 = ((!(fst::script::CompileBracketedUTF8String(__pyx_v__astring, __pyx_v_wc, __pyx_v_result->__pyx_base._mfst.get()) != 0)) != 0);
        if (__pyx_t_8) {

          /* "pynini.pyx":778
 *     elif token_type == b"utf8":
 *       if not CompileBracketedUTF8String(_astring, wc, result._mfst.get()):
 *         raise FstStringCompilationError("UTF8 string compilation failed")             # <<<<<<<<<<<<<<
 *     else:
 *       raise FstArgError("Unknown token type: {!r}".format(token_type))
 */
          __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstStringCompilationError); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_Raise(__pyx_t_2, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

          /* "pynini.pyx":777
 *         raise FstStringCompilationError("Bytestring compilation failed")
 *     elif token_type == b"utf8":
 *       if not CompileBracketedUTF8String(_astring, wc, result._mfst.get()):             # <<<<<<<<<<<<<<
 *         raise FstStringCompilationError("UTF8 string compilation failed")
 *     else:
 */
        }

        /* "pynini.pyx":776
 *       if not CompileBracketedByteString(_astring, wc, result._mfst.get()):
 *         raise FstStringCompilationError("Bytestring compilation failed")
 *     elif token_type == b"utf8":             # <<<<<<<<<<<<<<
 *       if not CompileBracketedUTF8String(_astring, wc, result._mfst.get()):
 *         raise FstStringCompilationError("UTF8 string compilation failed")
 */
        goto __pyx_L11;
      }

      /* "pynini.pyx":780
 *         raise FstStringCompilationError("UTF8 string compilation failed")
 *     else:
 *       raise FstArgError("Unknown token type: {!r}".format(token_type))             # <<<<<<<<<<<<<<
 *   except (FstArgError, UnicodeDecodeError):
 *     if isinstance(token_type, pywrapfst._SymbolTable):
 */
      /*else*/ {
        __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstArgError); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 780; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Unknown_token_type_r, __pyx_n_s_format); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 780; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_11 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_10))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_10, function);
          }
        }
        if (!__pyx_t_11) {
          __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_v_token_type); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 780; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
          __Pyx_GOTREF(__pyx_t_9);
        } else {
          __pyx_t_12 = PyTuple_New(1+1); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 780; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_11); __pyx_t_11 = NULL;
          __Pyx_INCREF(__pyx_v_token_type);
          __Pyx_GIVEREF(__pyx_v_token_type);
          PyTuple_SET_ITEM(__pyx_t_12, 0+1, __pyx_v_token_type);
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_12, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 780; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        }
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        if (!__pyx_t_10) {
          __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_9); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 780; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else {
          __pyx_t_12 = PyTuple_New(1+1); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 780; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_10); __pyx_t_10 = NULL;
          __Pyx_GIVEREF(__pyx_t_9);
          PyTuple_SET_ITEM(__pyx_t_12, 0+1, __pyx_t_9);
          __pyx_t_9 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_12, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 780; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_Raise(__pyx_t_2, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 780; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      __pyx_L11:;

      /* "pynini.pyx":771
 *   cdef string _astring = tostring(astring)
 *   cdef SymbolTable_ptr syms
 *   try:             # <<<<<<<<<<<<<<
 *     token_type = tostring(token_type)
 *     if token_type == b"byte":
 */
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L10_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pynini.pyx":781
 *     else:
 *       raise FstArgError("Unknown token type: {!r}".format(token_type))
 *   except (FstArgError, UnicodeDecodeError):             # <<<<<<<<<<<<<<
 *     if isinstance(token_type, pywrapfst._SymbolTable):
 *       syms = (<SymbolTable_ptr> (<_SymbolTable> token_type)._table)
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstArgError); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 781; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_13 = PyErr_ExceptionMatches(__pyx_t_2) || PyErr_ExceptionMatches(__pyx_builtin_UnicodeDecodeError);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_13) {
      __Pyx_AddTraceback("pynini.acceptor", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_3, &__pyx_t_12) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 781; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GOTREF(__pyx_t_12);

      /* "pynini.pyx":782
 *       raise FstArgError("Unknown token type: {!r}".format(token_type))
 *   except (FstArgError, UnicodeDecodeError):
 *     if isinstance(token_type, pywrapfst._SymbolTable):             # <<<<<<<<<<<<<<
 *       syms = (<SymbolTable_ptr> (<_SymbolTable> token_type)._table)
 *       if not CompileSymbolString(_astring, wc, deref(syms), result._mfst.get()):
 */
      __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 782; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_SymbolTable); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 782; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_8 = PyObject_IsInstance(__pyx_v_token_type, __pyx_t_10); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 782; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_14 = (__pyx_t_8 != 0);
      if (__pyx_t_14) {

        /* "pynini.pyx":783
 *   except (FstArgError, UnicodeDecodeError):
 *     if isinstance(token_type, pywrapfst._SymbolTable):
 *       syms = (<SymbolTable_ptr> (<_SymbolTable> token_type)._table)             # <<<<<<<<<<<<<<
 *       if not CompileSymbolString(_astring, wc, deref(syms), result._mfst.get()):
 *         raise FstStringCompilationError("Symbol string compilation failed")
 */
        if (unlikely(__pyx_v_token_type == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_table");
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 783; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
        }
        __pyx_v_syms = ((__pyx_t_9pywrapfst_SymbolTable_ptr)((struct __pyx_obj_9pywrapfst__SymbolTable *)__pyx_v_token_type)->_table);

        /* "pynini.pyx":784
 *     if isinstance(token_type, pywrapfst._SymbolTable):
 *       syms = (<SymbolTable_ptr> (<_SymbolTable> token_type)._table)
 *       if not CompileSymbolString(_astring, wc, deref(syms), result._mfst.get()):             # <<<<<<<<<<<<<<
 *         raise FstStringCompilationError("Symbol string compilation failed")
 *     else:
 */
        __pyx_t_14 = ((!(fst::script::CompileSymbolString(__pyx_v__astring, __pyx_v_wc, (*__pyx_v_syms), __pyx_v_result->__pyx_base._mfst.get()) != 0)) != 0);
        if (__pyx_t_14) {

          /* "pynini.pyx":785
 *       syms = (<SymbolTable_ptr> (<_SymbolTable> token_type)._table)
 *       if not CompileSymbolString(_astring, wc, deref(syms), result._mfst.get()):
 *         raise FstStringCompilationError("Symbol string compilation failed")             # <<<<<<<<<<<<<<
 *     else:
 *       raise
 */
          __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstStringCompilationError); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 785; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 785; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_Raise(__pyx_t_9, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 785; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}

          /* "pynini.pyx":784
 *     if isinstance(token_type, pywrapfst._SymbolTable):
 *       syms = (<SymbolTable_ptr> (<_SymbolTable> token_type)._table)
 *       if not CompileSymbolString(_astring, wc, deref(syms), result._mfst.get()):             # <<<<<<<<<<<<<<
 *         raise FstStringCompilationError("Symbol string compilation failed")
 *     else:
 */
        }

        /* "pynini.pyx":782
 *       raise FstArgError("Unknown token type: {!r}".format(token_type))
 *   except (FstArgError, UnicodeDecodeError):
 *     if isinstance(token_type, pywrapfst._SymbolTable):             # <<<<<<<<<<<<<<
 *       syms = (<SymbolTable_ptr> (<_SymbolTable> token_type)._table)
 *       if not CompileSymbolString(_astring, wc, deref(syms), result._mfst.get()):
 */
        goto __pyx_L16;
      }

      /* "pynini.pyx":787
 *         raise FstStringCompilationError("Symbol string compilation failed")
 *     else:
 *       raise             # <<<<<<<<<<<<<<
 *   result._check_pynini_op_error()
 *   return result
 */
      /*else*/ {
        __Pyx_GIVEREF(__pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_3);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ErrRestore(__pyx_t_2, __pyx_t_3, __pyx_t_12);
        __pyx_t_2 = 0; __pyx_t_3 = 0; __pyx_t_12 = 0; 
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 787; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      }
      __pyx_L16:;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "pynini.pyx":771
 *   cdef string _astring = tostring(astring)
 *   cdef SymbolTable_ptr syms
 *   try:             # <<<<<<<<<<<<<<
 *     token_type = tostring(token_type)
 *     if token_type == b"byte":
 */
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    __pyx_L10_try_end:;
  }

  /* "pynini.pyx":788
 *     else:
 *       raise
 *   result._check_pynini_op_error()             # <<<<<<<<<<<<<<
 *   return result
 * 
 */
  ((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_result->__pyx_base.__pyx_base.__pyx_vtab)->_check_pynini_op_error(__pyx_v_result); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 788; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":789
 *       raise
 *   result._check_pynini_op_error()
 *   return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "pynini.pyx":736
 * 
 * 
 * cpdef Fst acceptor(astring,             # <<<<<<<<<<<<<<
 *                    weight=None,
 *                    arc_type=b"standard",
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("pynini.acceptor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_token_type);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3acceptor(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pynini_2acceptor[] = "\n  acceptor(astring, weight=None, arc_type=\"standard\", token_type=\"byte\")\n\n  Creates an acceptor from a string.\n\n  This function creates an FST which accepts its input with a fixed weight\n  (defaulting to semiring One).\n\n  Args:\n    astring: The input string.\n    weight: A Weight or weight string indicating the desired path weight. If\n        omitted or null, the path weight is set to semiring One.\n    arc_type: An optional string indicating the arc type for the compiled FST.\n        This argument is silently ignored if istring and/or ostring is already\n        compiled.\n    token_type: Either a string indicating how the input string is to be\n        encoded as arc labels---one of: utf8\" (encodes the strings as UTF-8\n        encoded Unicode string), \"byte\" (encodes the string as raw bytes)---or\n        a SymbolTable to be used to encode the string.\n\n    Returns:\n      An FST acceptor.\n\n    Raises:\n      FstArgError: Unknown token type.\n      FstStringCompilationError: String compilation failed.\n  ";
static PyObject *__pyx_pw_6pynini_3acceptor(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_astring = 0;
  PyObject *__pyx_v_weight = 0;
  PyObject *__pyx_v_arc_type = 0;
  PyObject *__pyx_v_token_type = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("acceptor (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_astring,&__pyx_n_s_weight,&__pyx_n_s_arc_type,&__pyx_n_s_token_type,0};
    PyObject* values[4] = {0,0,0,0};

    /* "pynini.pyx":737
 * 
 * cpdef Fst acceptor(astring,
 *                    weight=None,             # <<<<<<<<<<<<<<
 *                    arc_type=b"standard",
 *                    token_type=b"byte"):
 */
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)__pyx_n_b_standard);
    values[3] = ((PyObject *)__pyx_n_b_byte);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_astring)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_weight);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arc_type);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_token_type);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "acceptor") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 736; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_astring = values[0];
    __pyx_v_weight = values[1];
    __pyx_v_arc_type = values[2];
    __pyx_v_token_type = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("acceptor", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 736; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.acceptor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_2acceptor(__pyx_self, __pyx_v_astring, __pyx_v_weight, __pyx_v_arc_type, __pyx_v_token_type);

  /* "pynini.pyx":736
 * 
 * 
 * cpdef Fst acceptor(astring,             # <<<<<<<<<<<<<<
 *                    weight=None,
 *                    arc_type=b"standard",
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_2acceptor(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_astring, PyObject *__pyx_v_weight, PyObject *__pyx_v_arc_type, PyObject *__pyx_v_token_type) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_6pynini_acceptor __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("acceptor", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 3;
  __pyx_t_2.weight = __pyx_v_weight;
  __pyx_t_2.arc_type = __pyx_v_arc_type;
  __pyx_t_2.token_type = __pyx_v_token_type;
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini_acceptor(__pyx_v_astring, 0, &__pyx_t_2)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 736; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.acceptor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":792
 * 
 * 
 * cpdef Fst transducer(istring,             # <<<<<<<<<<<<<<
 *                      ostring,
 *                      weight=None,
 */

static PyObject *__pyx_pw_6pynini_5transducer(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static struct __pyx_obj_6pynini_Fst *__pyx_f_6pynini_transducer(PyObject *__pyx_v_istring, PyObject *__pyx_v_ostring, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_6pynini_transducer *__pyx_optional_args) {

  /* "pynini.pyx":794
 * cpdef Fst transducer(istring,
 *                      ostring,
 *                      weight=None,             # <<<<<<<<<<<<<<
 *                      arc_type=b"standard",
 *                      input_token_type=b"byte",
 */
  PyObject *__pyx_v_weight = ((PyObject *)Py_None);
  PyObject *__pyx_v_arc_type = ((PyObject *)__pyx_n_b_standard);
  PyObject *__pyx_v_input_token_type = ((PyObject *)__pyx_n_b_byte);
  PyObject *__pyx_v_output_token_type = ((PyObject *)__pyx_n_b_byte);
  struct __pyx_obj_6pynini_Fst *__pyx_v_lower = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_v_upper = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_v_result = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  struct __pyx_opt_args_6pynini_acceptor __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("transducer", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_weight = __pyx_optional_args->weight;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_arc_type = __pyx_optional_args->arc_type;
        if (__pyx_optional_args->__pyx_n > 2) {
          __pyx_v_input_token_type = __pyx_optional_args->input_token_type;
          if (__pyx_optional_args->__pyx_n > 3) {
            __pyx_v_output_token_type = __pyx_optional_args->output_token_type;
          }
        }
      }
    }
  }

  /* "pynini.pyx":839
 *   cdef Fst lower
 *   cdef Fst upper
 *   cdef Fst result = Fst(arc_type)             # <<<<<<<<<<<<<<
 *   # Sets up upper language.
 *   if not isinstance(istring, Fst):
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_arc_type);
  __Pyx_GIVEREF(__pyx_v_arc_type);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_arc_type);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_result = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pynini.pyx":841
 *   cdef Fst result = Fst(arc_type)
 *   # Sets up upper language.
 *   if not isinstance(istring, Fst):             # <<<<<<<<<<<<<<
 *     upper = acceptor(istring, arc_type=arc_type, token_type=input_token_type)
 *   else:
 */
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_istring, __pyx_ptype_6pynini_Fst); 
  __pyx_t_4 = ((!(__pyx_t_3 != 0)) != 0);
  if (__pyx_t_4) {

    /* "pynini.pyx":842
 *   # Sets up upper language.
 *   if not isinstance(istring, Fst):
 *     upper = acceptor(istring, arc_type=arc_type, token_type=input_token_type)             # <<<<<<<<<<<<<<
 *   else:
 *     upper = istring
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_acceptor); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_istring);
    __Pyx_GIVEREF(__pyx_v_istring);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_istring);
    __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_arc_type, __pyx_v_arc_type) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_token_type, __pyx_v_input_token_type) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_6pynini_Fst))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_upper = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "pynini.pyx":841
 *   cdef Fst result = Fst(arc_type)
 *   # Sets up upper language.
 *   if not isinstance(istring, Fst):             # <<<<<<<<<<<<<<
 *     upper = acceptor(istring, arc_type=arc_type, token_type=input_token_type)
 *   else:
 */
    goto __pyx_L3;
  }

  /* "pynini.pyx":844
 *     upper = acceptor(istring, arc_type=arc_type, token_type=input_token_type)
 *   else:
 *     upper = istring             # <<<<<<<<<<<<<<
 *   if upper._fst.get().Properties(kAcceptor, True) != kAcceptor:
 *     logging.warning("Expecting acceptor or string argument, got a transducer")
 */
  /*else*/ {
    if (!(likely(((__pyx_v_istring) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_istring, __pyx_ptype_6pynini_Fst))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_6 = __pyx_v_istring;
    __Pyx_INCREF(__pyx_t_6);
    __pyx_v_upper = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_6);
    __pyx_t_6 = 0;
  }
  __pyx_L3:;

  /* "pynini.pyx":845
 *   else:
 *     upper = istring
 *   if upper._fst.get().Properties(kAcceptor, True) != kAcceptor:             # <<<<<<<<<<<<<<
 *     logging.warning("Expecting acceptor or string argument, got a transducer")
 *   # Sets up lower language, and passes weight.
 */
  if (unlikely(((PyObject *)__pyx_v_upper) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_fst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 845; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_4 = ((__pyx_v_upper->__pyx_base.__pyx_base._fst.get()->Properties(fst::kAcceptor, 1) != fst::kAcceptor) != 0);
  if (__pyx_t_4) {

    /* "pynini.pyx":846
 *     upper = istring
 *   if upper._fst.get().Properties(kAcceptor, True) != kAcceptor:
 *     logging.warning("Expecting acceptor or string argument, got a transducer")             # <<<<<<<<<<<<<<
 *   # Sets up lower language, and passes weight.
 *   if not isinstance(ostring, Fst):
 */
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_logging); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 846; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_warning); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 846; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 846; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "pynini.pyx":845
 *   else:
 *     upper = istring
 *   if upper._fst.get().Properties(kAcceptor, True) != kAcceptor:             # <<<<<<<<<<<<<<
 *     logging.warning("Expecting acceptor or string argument, got a transducer")
 *   # Sets up lower language, and passes weight.
 */
  }

  /* "pynini.pyx":848
 *     logging.warning("Expecting acceptor or string argument, got a transducer")
 *   # Sets up lower language, and passes weight.
 *   if not isinstance(ostring, Fst):             # <<<<<<<<<<<<<<
 *     lower = acceptor(ostring, weight=weight, arc_type=arc_type,
 *                      token_type=output_token_type)
 */
  __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_ostring, __pyx_ptype_6pynini_Fst); 
  __pyx_t_3 = ((!(__pyx_t_4 != 0)) != 0);
  if (__pyx_t_3) {

    /* "pynini.pyx":849
 *   # Sets up lower language, and passes weight.
 *   if not isinstance(ostring, Fst):
 *     lower = acceptor(ostring, weight=weight, arc_type=arc_type,             # <<<<<<<<<<<<<<
 *                      token_type=output_token_type)
 *   else:
 */
    __pyx_t_7.__pyx_n = 3;
    __pyx_t_7.weight = __pyx_v_weight;
    __pyx_t_7.arc_type = __pyx_v_arc_type;
    __pyx_t_7.token_type = __pyx_v_output_token_type;
    __pyx_t_6 = ((PyObject *)__pyx_f_6pynini_acceptor(__pyx_v_ostring, 0, &__pyx_t_7)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_v_lower = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "pynini.pyx":848
 *     logging.warning("Expecting acceptor or string argument, got a transducer")
 *   # Sets up lower language, and passes weight.
 *   if not isinstance(ostring, Fst):             # <<<<<<<<<<<<<<
 *     lower = acceptor(ostring, weight=weight, arc_type=arc_type,
 *                      token_type=output_token_type)
 */
    goto __pyx_L5;
  }

  /* "pynini.pyx":852
 *                      token_type=output_token_type)
 *   else:
 *     lower = ostring             # <<<<<<<<<<<<<<
 *     if lower._fst.get().Properties(kAcceptor, True) != kAcceptor:
 *       logging.warning("Expecting acceptor or string argument, got a transducer")
 */
  /*else*/ {
    if (!(likely(((__pyx_v_ostring) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_ostring, __pyx_ptype_6pynini_Fst))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 852; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_6 = __pyx_v_ostring;
    __Pyx_INCREF(__pyx_t_6);
    __pyx_v_lower = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "pynini.pyx":853
 *   else:
 *     lower = ostring
 *     if lower._fst.get().Properties(kAcceptor, True) != kAcceptor:             # <<<<<<<<<<<<<<
 *       logging.warning("Expecting acceptor or string argument, got a transducer")
 *   # Actually computes cross-product.
 */
    if (unlikely(((PyObject *)__pyx_v_lower) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_fst");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 853; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_3 = ((__pyx_v_lower->__pyx_base.__pyx_base._fst.get()->Properties(fst::kAcceptor, 1) != fst::kAcceptor) != 0);
    if (__pyx_t_3) {

      /* "pynini.pyx":854
 *     lower = ostring
 *     if lower._fst.get().Properties(kAcceptor, True) != kAcceptor:
 *       logging.warning("Expecting acceptor or string argument, got a transducer")             # <<<<<<<<<<<<<<
 *   # Actually computes cross-product.
 *   CrossProduct(deref(upper._fst), deref(lower._fst), result._mfst.get())
 */
      __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_logging); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 854; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_warning); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 854; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 854; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "pynini.pyx":853
 *   else:
 *     lower = ostring
 *     if lower._fst.get().Properties(kAcceptor, True) != kAcceptor:             # <<<<<<<<<<<<<<
 *       logging.warning("Expecting acceptor or string argument, got a transducer")
 *   # Actually computes cross-product.
 */
    }
  }
  __pyx_L5:;

  /* "pynini.pyx":856
 *       logging.warning("Expecting acceptor or string argument, got a transducer")
 *   # Actually computes cross-product.
 *   CrossProduct(deref(upper._fst), deref(lower._fst), result._mfst.get())             # <<<<<<<<<<<<<<
 *   result._check_pynini_op_error()
 *   return result
 */
  if (unlikely(((PyObject *)__pyx_v_upper) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_fst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 856; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (unlikely(((PyObject *)__pyx_v_lower) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_fst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 856; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  fst::script::CrossProduct((*__pyx_v_upper->__pyx_base.__pyx_base._fst), (*__pyx_v_lower->__pyx_base.__pyx_base._fst), __pyx_v_result->__pyx_base._mfst.get());

  /* "pynini.pyx":857
 *   # Actually computes cross-product.
 *   CrossProduct(deref(upper._fst), deref(lower._fst), result._mfst.get())
 *   result._check_pynini_op_error()             # <<<<<<<<<<<<<<
 *   return result
 * 
 */
  ((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_result->__pyx_base.__pyx_base.__pyx_vtab)->_check_pynini_op_error(__pyx_v_result); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 857; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":858
 *   CrossProduct(deref(upper._fst), deref(lower._fst), result._mfst.get())
 *   result._check_pynini_op_error()
 *   return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "pynini.pyx":792
 * 
 * 
 * cpdef Fst transducer(istring,             # <<<<<<<<<<<<<<
 *                      ostring,
 *                      weight=None,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pynini.transducer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_lower);
  __Pyx_XDECREF((PyObject *)__pyx_v_upper);
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_5transducer(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pynini_4transducer[] = "\n  transducer(istring, ostring, weight=None, arc_type=\"standard\",\n             input_token_type=\"byte\", output_token_type==\"byte\")\n\n  Creates a transducer from a pair of strings or acceptor FSTs.\n\n  This function creates an FST which transduces from the first string to\n  the second with a fixed weight (defaulting to semiring One). If one or both\n  of the input arguments is already compiled as an FST, the resulting transducer\n  is simply the cross-product between the language accepted by the upper and\n  lower FSTs.\n\n  Arg:\n    istring: The input string, or an acceptor FST representing the upper\n        language.\n    ostring: The output string, or an acceptor FST representing the upper\n        language.\n    weight: A Weight or weight string indicating the desired path weight. If\n        omitted or null, the path weight is set to semiring One. This argument\n        is silently ignored if istring and/or ostring is already compiled.\n    arc_type: An optional string indicating the arc type for the compiled FST.\n        This argument is silently ignored if istring and/or ostring is already\n        compiled.\n    input_token_type: Either a string indicating how the input strings are to be\n        encoded as arc labels---one of: utf8\" (encodes strings as UTF-8 encoded\n        Unicode strings), \"byte\" (encodes strings as raw bytes)---or a\n        SymbolTable to be used to encode the string.\n    output_token_type: Either a string indicating how the output strings are to\n        be encoded as arc labels---one of: utf8\" (encodes strings as UTF-8\n        encoded Unicode strings), \"byte\" (encodes strings as raw bytes)---or a\n        SymbolTable to be used to encode the string.\n\n  Returns:\n    An FST transducer.\n\n  Raises:\n    FstArgError: Unknown token type.\n    PyniniStringCompilationError: String compilation failed.\n  ";
static PyObject *__pyx_pw_6pynini_5transducer(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_istring = 0;
  PyObject *__pyx_v_ostring = 0;
  PyObject *__pyx_v_weight = 0;
  PyObject *__pyx_v_arc_type = 0;
  PyObject *__pyx_v_input_token_type = 0;
  PyObject *__pyx_v_output_token_type = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("transducer (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_istring,&__pyx_n_s_ostring,&__pyx_n_s_weight,&__pyx_n_s_arc_type,&__pyx_n_s_input_token_type,&__pyx_n_s_output_token_type,0};
    PyObject* values[6] = {0,0,0,0,0,0};

    /* "pynini.pyx":794
 * cpdef Fst transducer(istring,
 *                      ostring,
 *                      weight=None,             # <<<<<<<<<<<<<<
 *                      arc_type=b"standard",
 *                      input_token_type=b"byte",
 */
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)__pyx_n_b_standard);
    values[4] = ((PyObject *)__pyx_n_b_byte);
    values[5] = ((PyObject *)__pyx_n_b_byte);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_istring)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ostring)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("transducer", 0, 2, 6, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 792; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_weight);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arc_type);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_input_token_type);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_output_token_type);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "transducer") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 792; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_istring = values[0];
    __pyx_v_ostring = values[1];
    __pyx_v_weight = values[2];
    __pyx_v_arc_type = values[3];
    __pyx_v_input_token_type = values[4];
    __pyx_v_output_token_type = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("transducer", 0, 2, 6, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 792; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.transducer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_4transducer(__pyx_self, __pyx_v_istring, __pyx_v_ostring, __pyx_v_weight, __pyx_v_arc_type, __pyx_v_input_token_type, __pyx_v_output_token_type);

  /* "pynini.pyx":792
 * 
 * 
 * cpdef Fst transducer(istring,             # <<<<<<<<<<<<<<
 *                      ostring,
 *                      weight=None,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_4transducer(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_istring, PyObject *__pyx_v_ostring, PyObject *__pyx_v_weight, PyObject *__pyx_v_arc_type, PyObject *__pyx_v_input_token_type, PyObject *__pyx_v_output_token_type) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_6pynini_transducer __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("transducer", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 4;
  __pyx_t_2.weight = __pyx_v_weight;
  __pyx_t_2.arc_type = __pyx_v_arc_type;
  __pyx_t_2.input_token_type = __pyx_v_input_token_type;
  __pyx_t_2.output_token_type = __pyx_v_output_token_type;
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini_transducer(__pyx_v_istring, __pyx_v_ostring, 0, &__pyx_t_2)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 792; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.transducer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":861
 * 
 * 
 * cpdef Fst cdrewrite(tau,             # <<<<<<<<<<<<<<
 *                     lambda_,
 *                     rho,
 */

static PyObject *__pyx_pw_6pynini_7cdrewrite(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static struct __pyx_obj_6pynini_Fst *__pyx_f_6pynini_cdrewrite(PyObject *__pyx_v_tau, PyObject *__pyx_v_lambda_, PyObject *__pyx_v_rho, PyObject *__pyx_v_sigma_star, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_6pynini_cdrewrite *__pyx_optional_args) {
  PyObject *__pyx_v_direction = ((PyObject *)__pyx_n_b_ltr);
  PyObject *__pyx_v_mode = ((PyObject *)__pyx_n_b_obl);
  enum fst::CDRewriteDirection __pyx_v_cd;
  enum fst::CDRewriteMode __pyx_v_cm;
  struct __pyx_obj_6pynini_Fst *__pyx_v_tau_compiled = 0;
  std::string __pyx_v_arc_type;
  struct __pyx_obj_6pynini_Fst *__pyx_v_lambda_compiled = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_v_rho_compiled = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_v_sigma_star_compiled = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_v_result = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  struct __pyx_opt_args_6pynini__compile_or_copy_Fst __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cdrewrite", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_direction = __pyx_optional_args->direction;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_mode = __pyx_optional_args->mode;
      }
    }
  }
  __Pyx_INCREF(__pyx_v_direction);
  __Pyx_INCREF(__pyx_v_mode);

  /* "pynini.pyx":901
 *   """
 *   cdef CDRewriteDirection cd
 *   direction = tostring(direction)             # <<<<<<<<<<<<<<
 *   if direction == b"ltr":
 *     cd = LEFT_TO_RIGHT
 */
  __pyx_t_1 = __pyx_f_9pywrapfst_tostring(__pyx_v_direction, NULL); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 901; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 901; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF_SET(__pyx_v_direction, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "pynini.pyx":902
 *   cdef CDRewriteDirection cd
 *   direction = tostring(direction)
 *   if direction == b"ltr":             # <<<<<<<<<<<<<<
 *     cd = LEFT_TO_RIGHT
 *   elif direction == b"rtl":
 */
  __pyx_t_3 = (__Pyx_PyBytes_Equals(__pyx_v_direction, __pyx_n_b_ltr, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 902; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_3) {

    /* "pynini.pyx":903
 *   direction = tostring(direction)
 *   if direction == b"ltr":
 *     cd = LEFT_TO_RIGHT             # <<<<<<<<<<<<<<
 *   elif direction == b"rtl":
 *     cd = RIGHT_TO_LEFT
 */
    __pyx_v_cd = fst::LEFT_TO_RIGHT;

    /* "pynini.pyx":902
 *   cdef CDRewriteDirection cd
 *   direction = tostring(direction)
 *   if direction == b"ltr":             # <<<<<<<<<<<<<<
 *     cd = LEFT_TO_RIGHT
 *   elif direction == b"rtl":
 */
    goto __pyx_L3;
  }

  /* "pynini.pyx":904
 *   if direction == b"ltr":
 *     cd = LEFT_TO_RIGHT
 *   elif direction == b"rtl":             # <<<<<<<<<<<<<<
 *     cd = RIGHT_TO_LEFT
 *   elif direction == b"sim":
 */
  __pyx_t_3 = (__Pyx_PyBytes_Equals(__pyx_v_direction, __pyx_n_b_rtl, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 904; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_3) {

    /* "pynini.pyx":905
 *     cd = LEFT_TO_RIGHT
 *   elif direction == b"rtl":
 *     cd = RIGHT_TO_LEFT             # <<<<<<<<<<<<<<
 *   elif direction == b"sim":
 *     cd = SIMULTANEOUS
 */
    __pyx_v_cd = fst::RIGHT_TO_LEFT;

    /* "pynini.pyx":904
 *   if direction == b"ltr":
 *     cd = LEFT_TO_RIGHT
 *   elif direction == b"rtl":             # <<<<<<<<<<<<<<
 *     cd = RIGHT_TO_LEFT
 *   elif direction == b"sim":
 */
    goto __pyx_L3;
  }

  /* "pynini.pyx":906
 *   elif direction == b"rtl":
 *     cd = RIGHT_TO_LEFT
 *   elif direction == b"sim":             # <<<<<<<<<<<<<<
 *     cd = SIMULTANEOUS
 *   else:
 */
  __pyx_t_3 = (__Pyx_PyBytes_Equals(__pyx_v_direction, __pyx_n_b_sim, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 906; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_3) {

    /* "pynini.pyx":907
 *     cd = RIGHT_TO_LEFT
 *   elif direction == b"sim":
 *     cd = SIMULTANEOUS             # <<<<<<<<<<<<<<
 *   else:
 *     raise FstArgError("Unknown rewrite direction type: "
 */
    __pyx_v_cd = fst::SIMULTANEOUS;

    /* "pynini.pyx":906
 *   elif direction == b"rtl":
 *     cd = RIGHT_TO_LEFT
 *   elif direction == b"sim":             # <<<<<<<<<<<<<<
 *     cd = SIMULTANEOUS
 *   else:
 */
    goto __pyx_L3;
  }

  /* "pynini.pyx":909
 *     cd = SIMULTANEOUS
 *   else:
 *     raise FstArgError("Unknown rewrite direction type: "             # <<<<<<<<<<<<<<
 *                          "{!r}".format(direction))
 *   cdef CDRewriteMode cm
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstArgError); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 909; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);

    /* "pynini.pyx":910
 *   else:
 *     raise FstArgError("Unknown rewrite direction type: "
 *                          "{!r}".format(direction))             # <<<<<<<<<<<<<<
 *   cdef CDRewriteMode cm
 *   mode = tostring(mode)
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Unknown_rewrite_direction_type_r, __pyx_n_s_format); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 910; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_direction); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 910; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
    } else {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 910; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
      __Pyx_INCREF(__pyx_v_direction);
      __Pyx_GIVEREF(__pyx_v_direction);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_v_direction);
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 910; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 909; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 909; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 909; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 909; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "pynini.pyx":912
 *                          "{!r}".format(direction))
 *   cdef CDRewriteMode cm
 *   mode = tostring(mode)             # <<<<<<<<<<<<<<
 *   if mode == b"obl":
 *     cm = OBLIGATORY
 */
  __pyx_t_1 = __pyx_f_9pywrapfst_tostring(__pyx_v_mode, NULL); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 912; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 912; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF_SET(__pyx_v_mode, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "pynini.pyx":913
 *   cdef CDRewriteMode cm
 *   mode = tostring(mode)
 *   if mode == b"obl":             # <<<<<<<<<<<<<<
 *     cm = OBLIGATORY
 *   elif mode == b"opt":
 */
  __pyx_t_3 = (__Pyx_PyBytes_Equals(__pyx_v_mode, __pyx_n_b_obl, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 913; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_3) {

    /* "pynini.pyx":914
 *   mode = tostring(mode)
 *   if mode == b"obl":
 *     cm = OBLIGATORY             # <<<<<<<<<<<<<<
 *   elif mode == b"opt":
 *     cm = OPTIONAL
 */
    __pyx_v_cm = fst::OBLIGATORY;

    /* "pynini.pyx":913
 *   cdef CDRewriteMode cm
 *   mode = tostring(mode)
 *   if mode == b"obl":             # <<<<<<<<<<<<<<
 *     cm = OBLIGATORY
 *   elif mode == b"opt":
 */
    goto __pyx_L4;
  }

  /* "pynini.pyx":915
 *   if mode == b"obl":
 *     cm = OBLIGATORY
 *   elif mode == b"opt":             # <<<<<<<<<<<<<<
 *     cm = OPTIONAL
 *   else:
 */
  __pyx_t_3 = (__Pyx_PyBytes_Equals(__pyx_v_mode, __pyx_n_b_opt, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 915; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_3) {

    /* "pynini.pyx":916
 *     cm = OBLIGATORY
 *   elif mode == b"opt":
 *     cm = OPTIONAL             # <<<<<<<<<<<<<<
 *   else:
 *     raise FstArgError("Unknown rewrite mode type: {!r}".format(mode))
 */
    __pyx_v_cm = fst::OPTIONAL;

    /* "pynini.pyx":915
 *   if mode == b"obl":
 *     cm = OBLIGATORY
 *   elif mode == b"opt":             # <<<<<<<<<<<<<<
 *     cm = OPTIONAL
 *   else:
 */
    goto __pyx_L4;
  }

  /* "pynini.pyx":918
 *     cm = OPTIONAL
 *   else:
 *     raise FstArgError("Unknown rewrite mode type: {!r}".format(mode))             # <<<<<<<<<<<<<<
 *   cdef Fst tau_compiled = _compile_or_copy_Fst(tau)
 *   cdef string arc_type = tau_compiled.arc_type
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstArgError); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 918; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Unknown_rewrite_mode_type_r, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 918; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_mode); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 918; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
    } else {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 918; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_INCREF(__pyx_v_mode);
      __Pyx_GIVEREF(__pyx_v_mode);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v_mode);
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 918; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_8); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 918; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 918; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_8);
      __pyx_t_8 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 918; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 918; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L4:;

  /* "pynini.pyx":919
 *   else:
 *     raise FstArgError("Unknown rewrite mode type: {!r}".format(mode))
 *   cdef Fst tau_compiled = _compile_or_copy_Fst(tau)             # <<<<<<<<<<<<<<
 *   cdef string arc_type = tau_compiled.arc_type
 *   cdef Fst lambda_compiled = _compile_or_copy_Fst(lambda_, arc_type)
 */
  __pyx_t_2 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_tau, 0, NULL)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 919; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_tau_compiled = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pynini.pyx":920
 *     raise FstArgError("Unknown rewrite mode type: {!r}".format(mode))
 *   cdef Fst tau_compiled = _compile_or_copy_Fst(tau)
 *   cdef string arc_type = tau_compiled.arc_type             # <<<<<<<<<<<<<<
 *   cdef Fst lambda_compiled = _compile_or_copy_Fst(lambda_, arc_type)
 *   cdef Fst rho_compiled = _compile_or_copy_Fst(rho, arc_type)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_tau_compiled), __pyx_n_s_arc_type); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 920; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 920; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_arc_type = __pyx_t_1;

  /* "pynini.pyx":921
 *   cdef Fst tau_compiled = _compile_or_copy_Fst(tau)
 *   cdef string arc_type = tau_compiled.arc_type
 *   cdef Fst lambda_compiled = _compile_or_copy_Fst(lambda_, arc_type)             # <<<<<<<<<<<<<<
 *   cdef Fst rho_compiled = _compile_or_copy_Fst(rho, arc_type)
 *   cdef Fst sigma_star_compiled = _compile_or_copy_Fst(sigma_star, arc_type)
 */
  __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_arc_type); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 921; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_9.__pyx_n = 1;
  __pyx_t_9.arc_type = __pyx_t_2;
  __pyx_t_4 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_lambda_, 0, &__pyx_t_9)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 921; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_lambda_compiled = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pynini.pyx":922
 *   cdef string arc_type = tau_compiled.arc_type
 *   cdef Fst lambda_compiled = _compile_or_copy_Fst(lambda_, arc_type)
 *   cdef Fst rho_compiled = _compile_or_copy_Fst(rho, arc_type)             # <<<<<<<<<<<<<<
 *   cdef Fst sigma_star_compiled = _compile_or_copy_Fst(sigma_star, arc_type)
 *   cdef Fst result = Fst(arc_type)
 */
  __pyx_t_4 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_arc_type); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_9.__pyx_n = 1;
  __pyx_t_9.arc_type = __pyx_t_4;
  __pyx_t_2 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_rho, 0, &__pyx_t_9)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_rho_compiled = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pynini.pyx":923
 *   cdef Fst lambda_compiled = _compile_or_copy_Fst(lambda_, arc_type)
 *   cdef Fst rho_compiled = _compile_or_copy_Fst(rho, arc_type)
 *   cdef Fst sigma_star_compiled = _compile_or_copy_Fst(sigma_star, arc_type)             # <<<<<<<<<<<<<<
 *   cdef Fst result = Fst(arc_type)
 *   PyniniCDRewrite(deref(tau_compiled._fst), deref(lambda_compiled._fst),
 */
  __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_arc_type); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 923; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_9.__pyx_n = 1;
  __pyx_t_9.arc_type = __pyx_t_2;
  __pyx_t_4 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_sigma_star, 0, &__pyx_t_9)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 923; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_sigma_star_compiled = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pynini.pyx":924
 *   cdef Fst rho_compiled = _compile_or_copy_Fst(rho, arc_type)
 *   cdef Fst sigma_star_compiled = _compile_or_copy_Fst(sigma_star, arc_type)
 *   cdef Fst result = Fst(arc_type)             # <<<<<<<<<<<<<<
 *   PyniniCDRewrite(deref(tau_compiled._fst), deref(lambda_compiled._fst),
 *                   deref(rho_compiled._fst), deref(sigma_star_compiled._fst),
 */
  __pyx_t_4 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_arc_type); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 924; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 924; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 924; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_result = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pynini.pyx":925
 *   cdef Fst sigma_star_compiled = _compile_or_copy_Fst(sigma_star, arc_type)
 *   cdef Fst result = Fst(arc_type)
 *   PyniniCDRewrite(deref(tau_compiled._fst), deref(lambda_compiled._fst),             # <<<<<<<<<<<<<<
 *                   deref(rho_compiled._fst), deref(sigma_star_compiled._fst),
 *                   result._mfst.get(), cd, cm)
 */
  if (unlikely(((PyObject *)__pyx_v_tau_compiled) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_fst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 925; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (unlikely(((PyObject *)__pyx_v_lambda_compiled) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_fst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 925; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pynini.pyx":926
 *   cdef Fst result = Fst(arc_type)
 *   PyniniCDRewrite(deref(tau_compiled._fst), deref(lambda_compiled._fst),
 *                   deref(rho_compiled._fst), deref(sigma_star_compiled._fst),             # <<<<<<<<<<<<<<
 *                   result._mfst.get(), cd, cm)
 *   result._check_pynini_op_error()
 */
  if (unlikely(((PyObject *)__pyx_v_rho_compiled) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_fst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 926; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (unlikely(((PyObject *)__pyx_v_sigma_star_compiled) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_fst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 926; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pynini.pyx":925
 *   cdef Fst sigma_star_compiled = _compile_or_copy_Fst(sigma_star, arc_type)
 *   cdef Fst result = Fst(arc_type)
 *   PyniniCDRewrite(deref(tau_compiled._fst), deref(lambda_compiled._fst),             # <<<<<<<<<<<<<<
 *                   deref(rho_compiled._fst), deref(sigma_star_compiled._fst),
 *                   result._mfst.get(), cd, cm)
 */
  fst::script::PyniniCDRewrite((*__pyx_v_tau_compiled->__pyx_base.__pyx_base._fst), (*__pyx_v_lambda_compiled->__pyx_base.__pyx_base._fst), (*__pyx_v_rho_compiled->__pyx_base.__pyx_base._fst), (*__pyx_v_sigma_star_compiled->__pyx_base.__pyx_base._fst), __pyx_v_result->__pyx_base._mfst.get(), __pyx_v_cd, __pyx_v_cm);

  /* "pynini.pyx":928
 *                   deref(rho_compiled._fst), deref(sigma_star_compiled._fst),
 *                   result._mfst.get(), cd, cm)
 *   result._check_pynini_op_error()             # <<<<<<<<<<<<<<
 *   if not result.num_states:
 *     logging.warning("Compiled rewrite rule has no connected states")
 */
  ((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_result->__pyx_base.__pyx_base.__pyx_vtab)->_check_pynini_op_error(__pyx_v_result); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 928; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":929
 *                   result._mfst.get(), cd, cm)
 *   result._check_pynini_op_error()
 *   if not result.num_states:             # <<<<<<<<<<<<<<
 *     logging.warning("Compiled rewrite rule has no connected states")
 *   return result
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_result), __pyx_n_s_num_states); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 929; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 929; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_10 = ((!__pyx_t_3) != 0);
  if (__pyx_t_10) {

    /* "pynini.pyx":930
 *   result._check_pynini_op_error()
 *   if not result.num_states:
 *     logging.warning("Compiled rewrite rule has no connected states")             # <<<<<<<<<<<<<<
 *   return result
 * 
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_logging); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 930; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_warning); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 930; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 930; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pynini.pyx":929
 *                   result._mfst.get(), cd, cm)
 *   result._check_pynini_op_error()
 *   if not result.num_states:             # <<<<<<<<<<<<<<
 *     logging.warning("Compiled rewrite rule has no connected states")
 *   return result
 */
  }

  /* "pynini.pyx":931
 *   if not result.num_states:
 *     logging.warning("Compiled rewrite rule has no connected states")
 *   return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "pynini.pyx":861
 * 
 * 
 * cpdef Fst cdrewrite(tau,             # <<<<<<<<<<<<<<
 *                     lambda_,
 *                     rho,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pynini.cdrewrite", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_tau_compiled);
  __Pyx_XDECREF((PyObject *)__pyx_v_lambda_compiled);
  __Pyx_XDECREF((PyObject *)__pyx_v_rho_compiled);
  __Pyx_XDECREF((PyObject *)__pyx_v_sigma_star_compiled);
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_direction);
  __Pyx_XDECREF(__pyx_v_mode);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_7cdrewrite(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pynini_6cdrewrite[] = "\n  cdrewrite(tau, lambda, rho, sigma_star, direction=\"ltr\", mode=\"obl\")\n\n  Generates a transducer expressing a context-dependent rewrite rule.\n\n  This operation compiles a transducer representing a context-dependent\n  rewrite rule of the form\n\n      phi -> psi / lambda __ rho\n\n  over a finite vocabulary. To apply the resulting transducer, simply compose\n  it with an input string or lattice.\n\n  Args:\n    tau: A (weighted) transducer representing phi -> psi.\n    lambda: An unweighted acceptor representing the left context.\n    rho: An unweighted acceptor representing the right context.\n    sigma_star: An unweighted acceptor representing the closure over the\n        alphabet.\n    direction: A string specifying the direction of rule application; one of:\n        \"ltr\" (left-to-right application), \"rtl\" (right-to-left application),\n        or \"sim\" (simultaneous application).\n    mode: A string specifying the mode of rule application; one of: \"obl\"\n        (obligatory application), \"opt\" (optional application).\n\n  Returns:\n    An FST representing the context-dependent rewrite rule.\n\n  Raises:\n    FstArgError: Unknown cdrewrite direction type.\n    FstArgError: Unknown cdrewrite mode type.\n    FstOpError: Operation failed.\n  ";
static PyObject *__pyx_pw_6pynini_7cdrewrite(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_tau = 0;
  PyObject *__pyx_v_lambda_ = 0;
  PyObject *__pyx_v_rho = 0;
  PyObject *__pyx_v_sigma_star = 0;
  PyObject *__pyx_v_direction = 0;
  PyObject *__pyx_v_mode = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cdrewrite (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_tau,&__pyx_n_s_lambda,&__pyx_n_s_rho,&__pyx_n_s_sigma_star,&__pyx_n_s_direction,&__pyx_n_s_mode,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[4] = ((PyObject *)__pyx_n_b_ltr);
    values[5] = ((PyObject *)__pyx_n_b_obl);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tau)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_lambda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cdrewrite", 0, 4, 6, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 861; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rho)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cdrewrite", 0, 4, 6, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 861; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sigma_star)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cdrewrite", 0, 4, 6, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 861; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_direction);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mode);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "cdrewrite") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 861; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_tau = values[0];
    __pyx_v_lambda_ = values[1];
    __pyx_v_rho = values[2];
    __pyx_v_sigma_star = values[3];
    __pyx_v_direction = values[4];
    __pyx_v_mode = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cdrewrite", 0, 4, 6, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 861; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.cdrewrite", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_6cdrewrite(__pyx_self, __pyx_v_tau, __pyx_v_lambda_, __pyx_v_rho, __pyx_v_sigma_star, __pyx_v_direction, __pyx_v_mode);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_6cdrewrite(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_tau, PyObject *__pyx_v_lambda_, PyObject *__pyx_v_rho, PyObject *__pyx_v_sigma_star, PyObject *__pyx_v_direction, PyObject *__pyx_v_mode) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_6pynini_cdrewrite __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cdrewrite", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 2;
  __pyx_t_2.direction = __pyx_v_direction;
  __pyx_t_2.mode = __pyx_v_mode;
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini_cdrewrite(__pyx_v_tau, __pyx_v_lambda_, __pyx_v_rho, __pyx_v_sigma_star, 0, &__pyx_t_2)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 861; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.cdrewrite", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":934
 * 
 * 
 * def string_file(filename,             # <<<<<<<<<<<<<<
 *                 arc_type=b"standard",
 *                 input_token_type=b"byte",
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_9string_file(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pynini_8string_file[] = "\n  string_file(filename, arc_type=\"standard\", input_token_type=\"byte\",\n             output_token_type=\"byte\")\n\n  Creates a transducer that maps between elements of mappings read from\n  a tab-delimited file.\n\n  Args:\n    filename: The path to a file consisting of lines of input/output pairs\n        separated by a tab character; if a line element is a singleton, the\n        identity mapping is used.\n    arc_type: A string indicating the arc type.\n    input_token_type: A string indicating how the input strings are to be\n        encoded as arc labels---one of: utf8\" (encodes strings as a UTF-8\n        encoded Unicode strings), \"byte\" (encodes strings as raw bytes)---or a\n        SymbolTable.\n    output_token_type: A string indicating how the output strings are to be\n        encoded as arc labels---one of: utf8\" (encodes strings as a UTF-8\n        encoded Unicode strings), \"byte\" (encodes strings as raw bytes)---or a\n        SymbolTable.\n\n  Returns:\n    An FST.\n\n  Raises:\n    FstIOError: Read failed.\n  ";
static PyMethodDef __pyx_mdef_6pynini_9string_file = {"string_file", (PyCFunction)__pyx_pw_6pynini_9string_file, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pynini_8string_file};
static PyObject *__pyx_pw_6pynini_9string_file(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_arc_type = 0;
  PyObject *__pyx_v_input_token_type = 0;
  PyObject *__pyx_v_output_token_type = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("string_file (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_arc_type,&__pyx_n_s_input_token_type,&__pyx_n_s_output_token_type,0};
    PyObject* values[4] = {0,0,0,0};
    values[1] = ((PyObject *)__pyx_n_b_standard);
    values[2] = ((PyObject *)__pyx_n_b_byte);
    values[3] = ((PyObject *)__pyx_n_b_byte);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arc_type);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_input_token_type);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_output_token_type);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "string_file") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 934; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = values[0];
    __pyx_v_arc_type = values[1];
    __pyx_v_input_token_type = values[2];
    __pyx_v_output_token_type = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("string_file", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 934; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.string_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_8string_file(__pyx_self, __pyx_v_filename, __pyx_v_arc_type, __pyx_v_input_token_type, __pyx_v_output_token_type);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_8string_file(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_arc_type, PyObject *__pyx_v_input_token_type, PyObject *__pyx_v_output_token_type) {
  enum fst::TokenType __pyx_v_itype;
  enum fst::TokenType __pyx_v_otype;
  __pyx_t_9pywrapfst_SymbolTable_ptr __pyx_v_isyms;
  __pyx_t_9pywrapfst_SymbolTable_ptr __pyx_v_osyms;
  struct __pyx_obj_6pynini_Fst *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  enum fst::TokenType __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("string_file", 0);

  /* "pynini.pyx":967
 *   cdef TokenType itype
 *   cdef TokenType otype
 *   cdef SymbolTable_ptr isyms = NULL             # <<<<<<<<<<<<<<
 *   cdef SymbolTable_ptr osyms = NULL
 *   try:
 */
  __pyx_v_isyms = NULL;

  /* "pynini.pyx":968
 *   cdef TokenType otype
 *   cdef SymbolTable_ptr isyms = NULL
 *   cdef SymbolTable_ptr osyms = NULL             # <<<<<<<<<<<<<<
 *   try:
 *     itype = _get_token_type(tostring(input_token_type))
 */
  __pyx_v_osyms = NULL;

  /* "pynini.pyx":969
 *   cdef SymbolTable_ptr isyms = NULL
 *   cdef SymbolTable_ptr osyms = NULL
 *   try:             # <<<<<<<<<<<<<<
 *     itype = _get_token_type(tostring(input_token_type))
 *   except FstArgError:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "pynini.pyx":970
 *   cdef SymbolTable_ptr osyms = NULL
 *   try:
 *     itype = _get_token_type(tostring(input_token_type))             # <<<<<<<<<<<<<<
 *   except FstArgError:
 *     if isinstance(input_token_type, pywrapfst._SymbolTable):
 */
      __pyx_t_4 = __pyx_f_9pywrapfst_tostring(__pyx_v_input_token_type, NULL); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __pyx_t_5 = __pyx_f_6pynini__get_token_type(__pyx_t_4); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __pyx_v_itype = __pyx_t_5;

      /* "pynini.pyx":969
 *   cdef SymbolTable_ptr isyms = NULL
 *   cdef SymbolTable_ptr osyms = NULL
 *   try:             # <<<<<<<<<<<<<<
 *     itype = _get_token_type(tostring(input_token_type))
 *   except FstArgError:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L10_try_end;
    __pyx_L3_error:;

    /* "pynini.pyx":971
 *   try:
 *     itype = _get_token_type(tostring(input_token_type))
 *   except FstArgError:             # <<<<<<<<<<<<<<
 *     if isinstance(input_token_type, pywrapfst._SymbolTable):
 *       isyms = (<SymbolTable_ptr> (<_SymbolTable> input_token_type)._table)
 */
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstArgError); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 971; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyErr_ExceptionMatches(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_7) {
      __Pyx_AddTraceback("pynini.string_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_8, &__pyx_t_9) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 971; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GOTREF(__pyx_t_9);

      /* "pynini.pyx":972
 *     itype = _get_token_type(tostring(input_token_type))
 *   except FstArgError:
 *     if isinstance(input_token_type, pywrapfst._SymbolTable):             # <<<<<<<<<<<<<<
 *       isyms = (<SymbolTable_ptr> (<_SymbolTable> input_token_type)._table)
 *       itype = SYMBOL
 */
      __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 972; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_SymbolTable); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 972; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_12 = PyObject_IsInstance(__pyx_v_input_token_type, __pyx_t_11); if (unlikely(__pyx_t_12 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 972; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_13 = (__pyx_t_12 != 0);
      if (__pyx_t_13) {

        /* "pynini.pyx":973
 *   except FstArgError:
 *     if isinstance(input_token_type, pywrapfst._SymbolTable):
 *       isyms = (<SymbolTable_ptr> (<_SymbolTable> input_token_type)._table)             # <<<<<<<<<<<<<<
 *       itype = SYMBOL
 *   try:
 */
        if (unlikely(__pyx_v_input_token_type == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_table");
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 973; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
        }
        __pyx_v_isyms = ((__pyx_t_9pywrapfst_SymbolTable_ptr)((struct __pyx_obj_9pywrapfst__SymbolTable *)__pyx_v_input_token_type)->_table);

        /* "pynini.pyx":974
 *     if isinstance(input_token_type, pywrapfst._SymbolTable):
 *       isyms = (<SymbolTable_ptr> (<_SymbolTable> input_token_type)._table)
 *       itype = SYMBOL             # <<<<<<<<<<<<<<
 *   try:
 *     otype = _get_token_type(tostring(output_token_type))
 */
        __pyx_v_itype = fst::SYMBOL;

        /* "pynini.pyx":972
 *     itype = _get_token_type(tostring(input_token_type))
 *   except FstArgError:
 *     if isinstance(input_token_type, pywrapfst._SymbolTable):             # <<<<<<<<<<<<<<
 *       isyms = (<SymbolTable_ptr> (<_SymbolTable> input_token_type)._table)
 *       itype = SYMBOL
 */
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "pynini.pyx":969
 *   cdef SymbolTable_ptr isyms = NULL
 *   cdef SymbolTable_ptr osyms = NULL
 *   try:             # <<<<<<<<<<<<<<
 *     itype = _get_token_type(tostring(input_token_type))
 *   except FstArgError:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L10_try_end:;
  }

  /* "pynini.pyx":975
 *       isyms = (<SymbolTable_ptr> (<_SymbolTable> input_token_type)._table)
 *       itype = SYMBOL
 *   try:             # <<<<<<<<<<<<<<
 *     otype = _get_token_type(tostring(output_token_type))
 *   except FstArgError:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_2, &__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_1);
    /*try:*/ {

      /* "pynini.pyx":976
 *       itype = SYMBOL
 *   try:
 *     otype = _get_token_type(tostring(output_token_type))             # <<<<<<<<<<<<<<
 *   except FstArgError:
 *     if isinstance(output_token_type, pywrapfst._SymbolTable):
 */
      __pyx_t_4 = __pyx_f_9pywrapfst_tostring(__pyx_v_output_token_type, NULL); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 976; __pyx_clineno = __LINE__; goto __pyx_L14_error;}
      __pyx_t_5 = __pyx_f_6pynini__get_token_type(__pyx_t_4); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 976; __pyx_clineno = __LINE__; goto __pyx_L14_error;}
      __pyx_v_otype = __pyx_t_5;

      /* "pynini.pyx":975
 *       isyms = (<SymbolTable_ptr> (<_SymbolTable> input_token_type)._table)
 *       itype = SYMBOL
 *   try:             # <<<<<<<<<<<<<<
 *     otype = _get_token_type(tostring(output_token_type))
 *   except FstArgError:
 */
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L21_try_end;
    __pyx_L14_error:;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "pynini.pyx":977
 *   try:
 *     otype = _get_token_type(tostring(output_token_type))
 *   except FstArgError:             # <<<<<<<<<<<<<<
 *     if isinstance(output_token_type, pywrapfst._SymbolTable):
 *       osyms = (<SymbolTable_ptr> (<_SymbolTable> output_token_type)._table)
 */
    __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstArgError); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 977; __pyx_clineno = __LINE__; goto __pyx_L16_except_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_7 = PyErr_ExceptionMatches(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (__pyx_t_7) {
      __Pyx_AddTraceback("pynini.string_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_9, &__pyx_t_8, &__pyx_t_6) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 977; __pyx_clineno = __LINE__; goto __pyx_L16_except_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GOTREF(__pyx_t_6);

      /* "pynini.pyx":978
 *     otype = _get_token_type(tostring(output_token_type))
 *   except FstArgError:
 *     if isinstance(output_token_type, pywrapfst._SymbolTable):             # <<<<<<<<<<<<<<
 *       osyms = (<SymbolTable_ptr> (<_SymbolTable> output_token_type)._table)
 *       otype = SYMBOL
 */
      __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 978; __pyx_clineno = __LINE__; goto __pyx_L16_except_error;}
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_SymbolTable); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 978; __pyx_clineno = __LINE__; goto __pyx_L16_except_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_13 = PyObject_IsInstance(__pyx_v_output_token_type, __pyx_t_10); if (unlikely(__pyx_t_13 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 978; __pyx_clineno = __LINE__; goto __pyx_L16_except_error;}
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_12 = (__pyx_t_13 != 0);
      if (__pyx_t_12) {

        /* "pynini.pyx":979
 *   except FstArgError:
 *     if isinstance(output_token_type, pywrapfst._SymbolTable):
 *       osyms = (<SymbolTable_ptr> (<_SymbolTable> output_token_type)._table)             # <<<<<<<<<<<<<<
 *       otype = SYMBOL
 *   cdef Fst result = Fst(arc_type)
 */
        if (unlikely(__pyx_v_output_token_type == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_table");
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 979; __pyx_clineno = __LINE__; goto __pyx_L16_except_error;}
        }
        __pyx_v_osyms = ((__pyx_t_9pywrapfst_SymbolTable_ptr)((struct __pyx_obj_9pywrapfst__SymbolTable *)__pyx_v_output_token_type)->_table);

        /* "pynini.pyx":980
 *     if isinstance(output_token_type, pywrapfst._SymbolTable):
 *       osyms = (<SymbolTable_ptr> (<_SymbolTable> output_token_type)._table)
 *       otype = SYMBOL             # <<<<<<<<<<<<<<
 *   cdef Fst result = Fst(arc_type)
 *   if not StringFile(tostring(filename), itype, otype, result._mfst.get(),
 */
        __pyx_v_otype = fst::SYMBOL;

        /* "pynini.pyx":978
 *     otype = _get_token_type(tostring(output_token_type))
 *   except FstArgError:
 *     if isinstance(output_token_type, pywrapfst._SymbolTable):             # <<<<<<<<<<<<<<
 *       osyms = (<SymbolTable_ptr> (<_SymbolTable> output_token_type)._table)
 *       otype = SYMBOL
 */
      }
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L15_exception_handled;
    }
    goto __pyx_L16_except_error;
    __pyx_L16_except_error:;

    /* "pynini.pyx":975
 *       isyms = (<SymbolTable_ptr> (<_SymbolTable> input_token_type)._table)
 *       itype = SYMBOL
 *   try:             # <<<<<<<<<<<<<<
 *     otype = _get_token_type(tostring(output_token_type))
 *   except FstArgError:
 */
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_2, __pyx_t_1);
    goto __pyx_L1_error;
    __pyx_L15_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_2, __pyx_t_1);
    __pyx_L21_try_end:;
  }

  /* "pynini.pyx":981
 *       osyms = (<SymbolTable_ptr> (<_SymbolTable> output_token_type)._table)
 *       otype = SYMBOL
 *   cdef Fst result = Fst(arc_type)             # <<<<<<<<<<<<<<
 *   if not StringFile(tostring(filename), itype, otype, result._mfst.get(),
 *                     isyms, osyms):
 */
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 981; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_v_arc_type);
  __Pyx_GIVEREF(__pyx_v_arc_type);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_arc_type);
  __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_t_6, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 981; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_result = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "pynini.pyx":982
 *       otype = SYMBOL
 *   cdef Fst result = Fst(arc_type)
 *   if not StringFile(tostring(filename), itype, otype, result._mfst.get(),             # <<<<<<<<<<<<<<
 *                     isyms, osyms):
 *     raise FstIOError("Read failed")
 */
  __pyx_t_4 = __pyx_f_9pywrapfst_tostring(__pyx_v_filename, NULL); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 982; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":983
 *   cdef Fst result = Fst(arc_type)
 *   if not StringFile(tostring(filename), itype, otype, result._mfst.get(),
 *                     isyms, osyms):             # <<<<<<<<<<<<<<
 *     raise FstIOError("Read failed")
 *   return result
 */
  __pyx_t_12 = ((!(fst::script::StringFile(__pyx_t_4, __pyx_v_itype, __pyx_v_otype, __pyx_v_result->__pyx_base._mfst.get(), __pyx_v_isyms, __pyx_v_osyms) != 0)) != 0);

  /* "pynini.pyx":982
 *       otype = SYMBOL
 *   cdef Fst result = Fst(arc_type)
 *   if not StringFile(tostring(filename), itype, otype, result._mfst.get(),             # <<<<<<<<<<<<<<
 *                     isyms, osyms):
 *     raise FstIOError("Read failed")
 */
  if (__pyx_t_12) {

    /* "pynini.pyx":984
 *   if not StringFile(tostring(filename), itype, otype, result._mfst.get(),
 *                     isyms, osyms):
 *     raise FstIOError("Read failed")             # <<<<<<<<<<<<<<
 *   return result
 * 
 */
    __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstIOError); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 984; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 984; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 984; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pynini.pyx":982
 *       otype = SYMBOL
 *   cdef Fst result = Fst(arc_type)
 *   if not StringFile(tostring(filename), itype, otype, result._mfst.get(),             # <<<<<<<<<<<<<<
 *                     isyms, osyms):
 *     raise FstIOError("Read failed")
 */
  }

  /* "pynini.pyx":985
 *                     isyms, osyms):
 *     raise FstIOError("Read failed")
 *   return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "pynini.pyx":934
 * 
 * 
 * def string_file(filename,             # <<<<<<<<<<<<<<
 *                 arc_type=b"standard",
 *                 input_token_type=b"byte",
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("pynini.string_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":988
 * 
 * 
 * def string_map(pairs,             # <<<<<<<<<<<<<<
 *                arc_type=b"standard",
 *                input_token_type=b"byte",
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_11string_map(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pynini_10string_map[] = "\n  string_map(pairs, arc_type=\"standard\", input_token_type=\"byte\",\n             output_token_type=\"byte\")\n\n  Creates a transducer that maps between elements of mappings.\n\n  Args:\n    pairs: An iterable containing strings. If the iterable implements .iteritems\n      or .items, this is used to extract the pairs. If any element of the\n      iterable is a string, or an iterable containing exactly one string, the\n      identity mapping is used.\n    arc_type: A string indicating the arc type.\n    input_token_type: A string indicating how the input strings are to be\n        encoded as arc labels---one of: utf8\" (encodes strings as a UTF-8\n        encoded Unicode strings), \"byte\" (encodes strings as raw bytes)---or a\n        SymbolTable.\n    output_token_type: A string indicating how the output strings are to be\n        encoded as arc labels---one of: utf8\" (encodes strings as a UTF-8\n        encoded Unicode strings), \"byte\" (encodes strings as raw bytes)---or a\n        SymbolTable.\n\n  Returns:\n    An FST.\n\n  Raises:\n    FstArgError: Mappings must be of length 1 or 2.\n    FstArgError: String map compilation failed.\n  ";
static PyMethodDef __pyx_mdef_6pynini_11string_map = {"string_map", (PyCFunction)__pyx_pw_6pynini_11string_map, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pynini_10string_map};
static PyObject *__pyx_pw_6pynini_11string_map(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pairs = 0;
  PyObject *__pyx_v_arc_type = 0;
  PyObject *__pyx_v_input_token_type = 0;
  PyObject *__pyx_v_output_token_type = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("string_map (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pairs,&__pyx_n_s_arc_type,&__pyx_n_s_input_token_type,&__pyx_n_s_output_token_type,0};
    PyObject* values[4] = {0,0,0,0};
    values[1] = ((PyObject *)__pyx_n_b_standard);
    values[2] = ((PyObject *)__pyx_n_b_byte);
    values[3] = ((PyObject *)__pyx_n_b_byte);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pairs)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arc_type);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_input_token_type);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_output_token_type);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "string_map") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 988; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_pairs = values[0];
    __pyx_v_arc_type = values[1];
    __pyx_v_input_token_type = values[2];
    __pyx_v_output_token_type = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("string_map", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 988; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.string_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_10string_map(__pyx_self, __pyx_v_pairs, __pyx_v_arc_type, __pyx_v_input_token_type, __pyx_v_output_token_type);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_10string_map(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pairs, PyObject *__pyx_v_arc_type, PyObject *__pyx_v_input_token_type, PyObject *__pyx_v_output_token_type) {
  enum fst::TokenType __pyx_v_itype;
  enum fst::TokenType __pyx_v_otype;
  __pyx_t_9pywrapfst_SymbolTable_ptr __pyx_v_isyms;
  __pyx_t_9pywrapfst_SymbolTable_ptr __pyx_v_osyms;
  struct __pyx_obj_6pynini_Fst *__pyx_v_result = 0;
  std::unique_ptr<std::vector<__pyx_t_8fst_util_StringPair> >  __pyx_v_new_pairs;
  PyObject *__pyx_v_pair = NULL;
  std::string __pyx_v_string;
  bool __pyx_v_success;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  enum fst::TokenType __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  int __pyx_t_13;
  std::vector<__pyx_t_8fst_util_StringPair>  *__pyx_t_14;
  Py_ssize_t __pyx_t_15;
  PyObject *(*__pyx_t_16)(PyObject *);
  Py_ssize_t __pyx_t_17;
  std::string __pyx_t_18;
  __pyx_t_8fst_util_StringPair __pyx_t_19;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("string_map", 0);
  __Pyx_INCREF(__pyx_v_pairs);

  /* "pynini.pyx":1022
 *   cdef TokenType itype
 *   cdef TokenType otype
 *   cdef SymbolTable_ptr isyms = NULL             # <<<<<<<<<<<<<<
 *   cdef SymbolTable_ptr osyms = NULL
 *   try:
 */
  __pyx_v_isyms = NULL;

  /* "pynini.pyx":1023
 *   cdef TokenType otype
 *   cdef SymbolTable_ptr isyms = NULL
 *   cdef SymbolTable_ptr osyms = NULL             # <<<<<<<<<<<<<<
 *   try:
 *     itype = _get_token_type(tostring(input_token_type))
 */
  __pyx_v_osyms = NULL;

  /* "pynini.pyx":1024
 *   cdef SymbolTable_ptr isyms = NULL
 *   cdef SymbolTable_ptr osyms = NULL
 *   try:             # <<<<<<<<<<<<<<
 *     itype = _get_token_type(tostring(input_token_type))
 *   except FstArgError:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "pynini.pyx":1025
 *   cdef SymbolTable_ptr osyms = NULL
 *   try:
 *     itype = _get_token_type(tostring(input_token_type))             # <<<<<<<<<<<<<<
 *   except FstArgError:
 *     if isinstance(input_token_type, pywrapfst._SymbolTable):
 */
      __pyx_t_4 = __pyx_f_9pywrapfst_tostring(__pyx_v_input_token_type, NULL); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1025; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __pyx_t_5 = __pyx_f_6pynini__get_token_type(__pyx_t_4); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1025; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __pyx_v_itype = __pyx_t_5;

      /* "pynini.pyx":1024
 *   cdef SymbolTable_ptr isyms = NULL
 *   cdef SymbolTable_ptr osyms = NULL
 *   try:             # <<<<<<<<<<<<<<
 *     itype = _get_token_type(tostring(input_token_type))
 *   except FstArgError:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L10_try_end;
    __pyx_L3_error:;

    /* "pynini.pyx":1026
 *   try:
 *     itype = _get_token_type(tostring(input_token_type))
 *   except FstArgError:             # <<<<<<<<<<<<<<
 *     if isinstance(input_token_type, pywrapfst._SymbolTable):
 *       isyms = (<SymbolTable_ptr> (<_SymbolTable> input_token_type)._table)
 */
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstArgError); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1026; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyErr_ExceptionMatches(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_7) {
      __Pyx_AddTraceback("pynini.string_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_8, &__pyx_t_9) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1026; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GOTREF(__pyx_t_9);

      /* "pynini.pyx":1027
 *     itype = _get_token_type(tostring(input_token_type))
 *   except FstArgError:
 *     if isinstance(input_token_type, pywrapfst._SymbolTable):             # <<<<<<<<<<<<<<
 *       isyms = (<SymbolTable_ptr> (<_SymbolTable> input_token_type)._table)
 *       itype = SYMBOL
 */
      __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1027; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_SymbolTable); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1027; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_12 = PyObject_IsInstance(__pyx_v_input_token_type, __pyx_t_11); if (unlikely(__pyx_t_12 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1027; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_13 = (__pyx_t_12 != 0);
      if (__pyx_t_13) {

        /* "pynini.pyx":1028
 *   except FstArgError:
 *     if isinstance(input_token_type, pywrapfst._SymbolTable):
 *       isyms = (<SymbolTable_ptr> (<_SymbolTable> input_token_type)._table)             # <<<<<<<<<<<<<<
 *       itype = SYMBOL
 *   try:
 */
        if (unlikely(__pyx_v_input_token_type == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_table");
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1028; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
        }
        __pyx_v_isyms = ((__pyx_t_9pywrapfst_SymbolTable_ptr)((struct __pyx_obj_9pywrapfst__SymbolTable *)__pyx_v_input_token_type)->_table);

        /* "pynini.pyx":1029
 *     if isinstance(input_token_type, pywrapfst._SymbolTable):
 *       isyms = (<SymbolTable_ptr> (<_SymbolTable> input_token_type)._table)
 *       itype = SYMBOL             # <<<<<<<<<<<<<<
 *   try:
 *     otype = _get_token_type(tostring(output_token_type))
 */
        __pyx_v_itype = fst::SYMBOL;

        /* "pynini.pyx":1027
 *     itype = _get_token_type(tostring(input_token_type))
 *   except FstArgError:
 *     if isinstance(input_token_type, pywrapfst._SymbolTable):             # <<<<<<<<<<<<<<
 *       isyms = (<SymbolTable_ptr> (<_SymbolTable> input_token_type)._table)
 *       itype = SYMBOL
 */
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "pynini.pyx":1024
 *   cdef SymbolTable_ptr isyms = NULL
 *   cdef SymbolTable_ptr osyms = NULL
 *   try:             # <<<<<<<<<<<<<<
 *     itype = _get_token_type(tostring(input_token_type))
 *   except FstArgError:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L10_try_end:;
  }

  /* "pynini.pyx":1030
 *       isyms = (<SymbolTable_ptr> (<_SymbolTable> input_token_type)._table)
 *       itype = SYMBOL
 *   try:             # <<<<<<<<<<<<<<
 *     otype = _get_token_type(tostring(output_token_type))
 *   except FstArgError:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_2, &__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_1);
    /*try:*/ {

      /* "pynini.pyx":1031
 *       itype = SYMBOL
 *   try:
 *     otype = _get_token_type(tostring(output_token_type))             # <<<<<<<<<<<<<<
 *   except FstArgError:
 *     if isinstance(output_token_type, pywrapfst._SymbolTable):
 */
      __pyx_t_4 = __pyx_f_9pywrapfst_tostring(__pyx_v_output_token_type, NULL); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1031; __pyx_clineno = __LINE__; goto __pyx_L14_error;}
      __pyx_t_5 = __pyx_f_6pynini__get_token_type(__pyx_t_4); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1031; __pyx_clineno = __LINE__; goto __pyx_L14_error;}
      __pyx_v_otype = __pyx_t_5;

      /* "pynini.pyx":1030
 *       isyms = (<SymbolTable_ptr> (<_SymbolTable> input_token_type)._table)
 *       itype = SYMBOL
 *   try:             # <<<<<<<<<<<<<<
 *     otype = _get_token_type(tostring(output_token_type))
 *   except FstArgError:
 */
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L21_try_end;
    __pyx_L14_error:;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "pynini.pyx":1032
 *   try:
 *     otype = _get_token_type(tostring(output_token_type))
 *   except FstArgError:             # <<<<<<<<<<<<<<
 *     if isinstance(output_token_type, pywrapfst._SymbolTable):
 *       osyms = (<SymbolTable_ptr> (<_SymbolTable> output_token_type)._table)
 */
    __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstArgError); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1032; __pyx_clineno = __LINE__; goto __pyx_L16_except_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_7 = PyErr_ExceptionMatches(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (__pyx_t_7) {
      __Pyx_AddTraceback("pynini.string_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_9, &__pyx_t_8, &__pyx_t_6) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1032; __pyx_clineno = __LINE__; goto __pyx_L16_except_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GOTREF(__pyx_t_6);

      /* "pynini.pyx":1033
 *     otype = _get_token_type(tostring(output_token_type))
 *   except FstArgError:
 *     if isinstance(output_token_type, pywrapfst._SymbolTable):             # <<<<<<<<<<<<<<
 *       osyms = (<SymbolTable_ptr> (<_SymbolTable> output_token_type)._table)
 *       otype = SYMBOL
 */
      __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1033; __pyx_clineno = __LINE__; goto __pyx_L16_except_error;}
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_SymbolTable); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1033; __pyx_clineno = __LINE__; goto __pyx_L16_except_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_13 = PyObject_IsInstance(__pyx_v_output_token_type, __pyx_t_10); if (unlikely(__pyx_t_13 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1033; __pyx_clineno = __LINE__; goto __pyx_L16_except_error;}
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_12 = (__pyx_t_13 != 0);
      if (__pyx_t_12) {

        /* "pynini.pyx":1034
 *   except FstArgError:
 *     if isinstance(output_token_type, pywrapfst._SymbolTable):
 *       osyms = (<SymbolTable_ptr> (<_SymbolTable> output_token_type)._table)             # <<<<<<<<<<<<<<
 *       otype = SYMBOL
 *   cdef Fst result = Fst(arc_type)
 */
        if (unlikely(__pyx_v_output_token_type == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_table");
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1034; __pyx_clineno = __LINE__; goto __pyx_L16_except_error;}
        }
        __pyx_v_osyms = ((__pyx_t_9pywrapfst_SymbolTable_ptr)((struct __pyx_obj_9pywrapfst__SymbolTable *)__pyx_v_output_token_type)->_table);

        /* "pynini.pyx":1035
 *     if isinstance(output_token_type, pywrapfst._SymbolTable):
 *       osyms = (<SymbolTable_ptr> (<_SymbolTable> output_token_type)._table)
 *       otype = SYMBOL             # <<<<<<<<<<<<<<
 *   cdef Fst result = Fst(arc_type)
 *   cdef unique_ptr[vector[StringPair]] new_pairs
 */
        __pyx_v_otype = fst::SYMBOL;

        /* "pynini.pyx":1033
 *     otype = _get_token_type(tostring(output_token_type))
 *   except FstArgError:
 *     if isinstance(output_token_type, pywrapfst._SymbolTable):             # <<<<<<<<<<<<<<
 *       osyms = (<SymbolTable_ptr> (<_SymbolTable> output_token_type)._table)
 *       otype = SYMBOL
 */
      }
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L15_exception_handled;
    }
    goto __pyx_L16_except_error;
    __pyx_L16_except_error:;

    /* "pynini.pyx":1030
 *       isyms = (<SymbolTable_ptr> (<_SymbolTable> input_token_type)._table)
 *       itype = SYMBOL
 *   try:             # <<<<<<<<<<<<<<
 *     otype = _get_token_type(tostring(output_token_type))
 *   except FstArgError:
 */
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_2, __pyx_t_1);
    goto __pyx_L1_error;
    __pyx_L15_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_2, __pyx_t_1);
    __pyx_L21_try_end:;
  }

  /* "pynini.pyx":1036
 *       osyms = (<SymbolTable_ptr> (<_SymbolTable> output_token_type)._table)
 *       otype = SYMBOL
 *   cdef Fst result = Fst(arc_type)             # <<<<<<<<<<<<<<
 *   cdef unique_ptr[vector[StringPair]] new_pairs
 *   new_pairs.reset(new vector[StringPair]())
 */
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1036; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_v_arc_type);
  __Pyx_GIVEREF(__pyx_v_arc_type);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_arc_type);
  __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_t_6, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1036; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_result = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "pynini.pyx":1038
 *   cdef Fst result = Fst(arc_type)
 *   cdef unique_ptr[vector[StringPair]] new_pairs
 *   new_pairs.reset(new vector[StringPair]())             # <<<<<<<<<<<<<<
 *   if hasattr(pairs, "iteritems"):
 *     pairs = pairs.iteritems()
 */
  try {
    __pyx_t_14 = new std::vector<__pyx_t_8fst_util_StringPair> ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1038; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_new_pairs.reset(__pyx_t_14);

  /* "pynini.pyx":1039
 *   cdef unique_ptr[vector[StringPair]] new_pairs
 *   new_pairs.reset(new vector[StringPair]())
 *   if hasattr(pairs, "iteritems"):             # <<<<<<<<<<<<<<
 *     pairs = pairs.iteritems()
 *   elif hasattr(pairs, "items"):
 */
  __pyx_t_12 = PyObject_HasAttr(__pyx_v_pairs, __pyx_n_s_iteritems); if (unlikely(__pyx_t_12 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1039; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_13 = (__pyx_t_12 != 0);
  if (__pyx_t_13) {

    /* "pynini.pyx":1040
 *   new_pairs.reset(new vector[StringPair]())
 *   if hasattr(pairs, "iteritems"):
 *     pairs = pairs.iteritems()             # <<<<<<<<<<<<<<
 *   elif hasattr(pairs, "items"):
 *     pairs = pairs.items()
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_pairs, __pyx_n_s_iteritems); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1040; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_9 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (__pyx_t_9) {
      __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_9); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1040; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else {
      __pyx_t_8 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1040; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF_SET(__pyx_v_pairs, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "pynini.pyx":1039
 *   cdef unique_ptr[vector[StringPair]] new_pairs
 *   new_pairs.reset(new vector[StringPair]())
 *   if hasattr(pairs, "iteritems"):             # <<<<<<<<<<<<<<
 *     pairs = pairs.iteritems()
 *   elif hasattr(pairs, "items"):
 */
    goto __pyx_L25;
  }

  /* "pynini.pyx":1041
 *   if hasattr(pairs, "iteritems"):
 *     pairs = pairs.iteritems()
 *   elif hasattr(pairs, "items"):             # <<<<<<<<<<<<<<
 *     pairs = pairs.items()
 *   for pair in pairs:
 */
  __pyx_t_13 = PyObject_HasAttr(__pyx_v_pairs, __pyx_n_s_items); if (unlikely(__pyx_t_13 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1041; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_12 = (__pyx_t_13 != 0);
  if (__pyx_t_12) {

    /* "pynini.pyx":1042
 *     pairs = pairs.iteritems()
 *   elif hasattr(pairs, "items"):
 *     pairs = pairs.items()             # <<<<<<<<<<<<<<
 *   for pair in pairs:
 *     if hasattr(pair, "__iter__"):
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_pairs, __pyx_n_s_items); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1042; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_9 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (__pyx_t_9) {
      __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_9); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1042; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else {
      __pyx_t_8 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1042; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF_SET(__pyx_v_pairs, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "pynini.pyx":1041
 *   if hasattr(pairs, "iteritems"):
 *     pairs = pairs.iteritems()
 *   elif hasattr(pairs, "items"):             # <<<<<<<<<<<<<<
 *     pairs = pairs.items()
 *   for pair in pairs:
 */
  }
  __pyx_L25:;

  /* "pynini.pyx":1043
 *   elif hasattr(pairs, "items"):
 *     pairs = pairs.items()
 *   for pair in pairs:             # <<<<<<<<<<<<<<
 *     if hasattr(pair, "__iter__"):
 *       if len(pair) == 2:
 */
  if (likely(PyList_CheckExact(__pyx_v_pairs)) || PyTuple_CheckExact(__pyx_v_pairs)) {
    __pyx_t_8 = __pyx_v_pairs; __Pyx_INCREF(__pyx_t_8); __pyx_t_15 = 0;
    __pyx_t_16 = NULL;
  } else {
    __pyx_t_15 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_v_pairs); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1043; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_16 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1043; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_16)) {
      if (likely(PyList_CheckExact(__pyx_t_8))) {
        if (__pyx_t_15 >= PyList_GET_SIZE(__pyx_t_8)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_6 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_15); __Pyx_INCREF(__pyx_t_6); __pyx_t_15++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1043; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_8, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1043; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      } else {
        if (__pyx_t_15 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_15); __Pyx_INCREF(__pyx_t_6); __pyx_t_15++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1043; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_8, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1043; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      }
    } else {
      __pyx_t_6 = __pyx_t_16(__pyx_t_8);
      if (unlikely(!__pyx_t_6)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1043; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_6);
    }
    __Pyx_XDECREF_SET(__pyx_v_pair, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "pynini.pyx":1044
 *     pairs = pairs.items()
 *   for pair in pairs:
 *     if hasattr(pair, "__iter__"):             # <<<<<<<<<<<<<<
 *       if len(pair) == 2:
 *         new_pairs.get().push_back(StringPair(tostring(pair[0]),
 */
    __pyx_t_12 = PyObject_HasAttr(__pyx_v_pair, __pyx_n_s_iter); if (unlikely(__pyx_t_12 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1044; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_13 = (__pyx_t_12 != 0);
    if (__pyx_t_13) {

      /* "pynini.pyx":1045
 *   for pair in pairs:
 *     if hasattr(pair, "__iter__"):
 *       if len(pair) == 2:             # <<<<<<<<<<<<<<
 *         new_pairs.get().push_back(StringPair(tostring(pair[0]),
 *                                              tostring(pair[1])))
 */
      __pyx_t_17 = PyObject_Length(__pyx_v_pair); if (unlikely(__pyx_t_17 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1045; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_13 = ((__pyx_t_17 == 2) != 0);
      if (__pyx_t_13) {

        /* "pynini.pyx":1046
 *     if hasattr(pair, "__iter__"):
 *       if len(pair) == 2:
 *         new_pairs.get().push_back(StringPair(tostring(pair[0]),             # <<<<<<<<<<<<<<
 *                                              tostring(pair[1])))
 *       elif len(pair) == 1:
 */
        if (unlikely(__pyx_v_pair == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1046; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_pair, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1046; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_4 = __pyx_f_9pywrapfst_tostring(__pyx_t_6, NULL); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1046; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "pynini.pyx":1047
 *       if len(pair) == 2:
 *         new_pairs.get().push_back(StringPair(tostring(pair[0]),
 *                                              tostring(pair[1])))             # <<<<<<<<<<<<<<
 *       elif len(pair) == 1:
 *         string = tostring(pair[0])
 */
        if (unlikely(__pyx_v_pair == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1047; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_pair, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1047; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_18 = __pyx_f_9pywrapfst_tostring(__pyx_t_6, NULL); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1047; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "pynini.pyx":1046
 *     if hasattr(pair, "__iter__"):
 *       if len(pair) == 2:
 *         new_pairs.get().push_back(StringPair(tostring(pair[0]),             # <<<<<<<<<<<<<<
 *                                              tostring(pair[1])))
 *       elif len(pair) == 1:
 */
        try {
          __pyx_t_19 = __pyx_t_8fst_util_StringPair(__pyx_t_4, __pyx_t_18);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1046; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        try {
          __pyx_v_new_pairs.get()->push_back(__pyx_t_19);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1046; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }

        /* "pynini.pyx":1045
 *   for pair in pairs:
 *     if hasattr(pair, "__iter__"):
 *       if len(pair) == 2:             # <<<<<<<<<<<<<<
 *         new_pairs.get().push_back(StringPair(tostring(pair[0]),
 *                                              tostring(pair[1])))
 */
        goto __pyx_L29;
      }

      /* "pynini.pyx":1048
 *         new_pairs.get().push_back(StringPair(tostring(pair[0]),
 *                                              tostring(pair[1])))
 *       elif len(pair) == 1:             # <<<<<<<<<<<<<<
 *         string = tostring(pair[0])
 *         new_pairs.get().push_back(StringPair(string, string))
 */
      __pyx_t_17 = PyObject_Length(__pyx_v_pair); if (unlikely(__pyx_t_17 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1048; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_13 = ((__pyx_t_17 == 1) != 0);
      if (__pyx_t_13) {

        /* "pynini.pyx":1049
 *                                              tostring(pair[1])))
 *       elif len(pair) == 1:
 *         string = tostring(pair[0])             # <<<<<<<<<<<<<<
 *         new_pairs.get().push_back(StringPair(string, string))
 *       else:
 */
        if (unlikely(__pyx_v_pair == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_pair, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1049; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_18 = __pyx_f_9pywrapfst_tostring(__pyx_t_6, NULL); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_v_string = __pyx_t_18;

        /* "pynini.pyx":1050
 *       elif len(pair) == 1:
 *         string = tostring(pair[0])
 *         new_pairs.get().push_back(StringPair(string, string))             # <<<<<<<<<<<<<<
 *       else:
 *         raise FstArgError("Mappings must be of length 1 or 2")
 */
        try {
          __pyx_t_19 = __pyx_t_8fst_util_StringPair(__pyx_v_string, __pyx_v_string);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1050; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        try {
          __pyx_v_new_pairs.get()->push_back(__pyx_t_19);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1050; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }

        /* "pynini.pyx":1048
 *         new_pairs.get().push_back(StringPair(tostring(pair[0]),
 *                                              tostring(pair[1])))
 *       elif len(pair) == 1:             # <<<<<<<<<<<<<<
 *         string = tostring(pair[0])
 *         new_pairs.get().push_back(StringPair(string, string))
 */
        goto __pyx_L29;
      }

      /* "pynini.pyx":1052
 *         new_pairs.get().push_back(StringPair(string, string))
 *       else:
 *         raise FstArgError("Mappings must be of length 1 or 2")             # <<<<<<<<<<<<<<
 *     else:
 *       string = tostring(pair)
 */
      /*else*/ {
        __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstArgError); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1052; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1052; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_Raise(__pyx_t_9, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1052; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_L29:;

      /* "pynini.pyx":1044
 *     pairs = pairs.items()
 *   for pair in pairs:
 *     if hasattr(pair, "__iter__"):             # <<<<<<<<<<<<<<
 *       if len(pair) == 2:
 *         new_pairs.get().push_back(StringPair(tostring(pair[0]),
 */
      goto __pyx_L28;
    }

    /* "pynini.pyx":1054
 *         raise FstArgError("Mappings must be of length 1 or 2")
 *     else:
 *       string = tostring(pair)             # <<<<<<<<<<<<<<
 *       new_pairs.get().push_back(StringPair(string, string))
 *   cdef bool success = StringMap(deref(new_pairs), itype, otype,
 */
    /*else*/ {
      __pyx_t_18 = __pyx_f_9pywrapfst_tostring(__pyx_v_pair, NULL); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1054; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_string = __pyx_t_18;

      /* "pynini.pyx":1055
 *     else:
 *       string = tostring(pair)
 *       new_pairs.get().push_back(StringPair(string, string))             # <<<<<<<<<<<<<<
 *   cdef bool success = StringMap(deref(new_pairs), itype, otype,
 *                                 result._mfst.get(), isyms, osyms)
 */
      try {
        __pyx_t_19 = __pyx_t_8fst_util_StringPair(__pyx_v_string, __pyx_v_string);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1055; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      try {
        __pyx_v_new_pairs.get()->push_back(__pyx_t_19);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1055; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
    }
    __pyx_L28:;

    /* "pynini.pyx":1043
 *   elif hasattr(pairs, "items"):
 *     pairs = pairs.items()
 *   for pair in pairs:             # <<<<<<<<<<<<<<
 *     if hasattr(pair, "__iter__"):
 *       if len(pair) == 2:
 */
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "pynini.pyx":1056
 *       string = tostring(pair)
 *       new_pairs.get().push_back(StringPair(string, string))
 *   cdef bool success = StringMap(deref(new_pairs), itype, otype,             # <<<<<<<<<<<<<<
 *                                 result._mfst.get(), isyms, osyms)
 *   if not success:
 */
  __pyx_v_success = fst::script::StringMap((*__pyx_v_new_pairs), __pyx_v_itype, __pyx_v_otype, __pyx_v_result->__pyx_base._mfst.get(), __pyx_v_isyms, __pyx_v_osyms);

  /* "pynini.pyx":1058
 *   cdef bool success = StringMap(deref(new_pairs), itype, otype,
 *                                 result._mfst.get(), isyms, osyms)
 *   if not success:             # <<<<<<<<<<<<<<
 *     raise FstArgError("String map compilation failed")
 *   return result
 */
  __pyx_t_13 = ((!(__pyx_v_success != 0)) != 0);
  if (__pyx_t_13) {

    /* "pynini.pyx":1059
 *                                 result._mfst.get(), isyms, osyms)
 *   if not success:
 *     raise FstArgError("String map compilation failed")             # <<<<<<<<<<<<<<
 *   return result
 * 
 */
    __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstArgError); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1059; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1059; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_Raise(__pyx_t_9, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1059; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pynini.pyx":1058
 *   cdef bool success = StringMap(deref(new_pairs), itype, otype,
 *                                 result._mfst.get(), isyms, osyms)
 *   if not success:             # <<<<<<<<<<<<<<
 *     raise FstArgError("String map compilation failed")
 *   return result
 */
  }

  /* "pynini.pyx":1060
 *   if not success:
 *     raise FstArgError("String map compilation failed")
 *   return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "pynini.pyx":988
 * 
 * 
 * def string_map(pairs,             # <<<<<<<<<<<<<<
 *                arc_type=b"standard",
 *                input_token_type=b"byte",
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("pynini.string_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_pair);
  __Pyx_XDECREF(__pyx_v_pairs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1066
 * 
 * 
 * def _1arg_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg, *args, **kwargs):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_13_1arg_patch(PyObject *__pyx_self, PyObject *__pyx_v_fnc); /*proto*/
static PyMethodDef __pyx_mdef_6pynini_13_1arg_patch = {"_1arg_patch", (PyCFunction)__pyx_pw_6pynini_13_1arg_patch, METH_O, 0};
static PyObject *__pyx_pw_6pynini_13_1arg_patch(PyObject *__pyx_self, PyObject *__pyx_v_fnc) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_1arg_patch (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_12_1arg_patch(__pyx_self, ((PyObject *)__pyx_v_fnc));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1068
 * def _1arg_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst fst = _compile_or_copy_Fst(arg)
 *     return _init_Fst_from_MutableFst(fnc(fst, *args, **kwargs))
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_11_1arg_patch_1patch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6pynini_11_1arg_patch_1patch = {"patch", (PyCFunction)__pyx_pw_6pynini_11_1arg_patch_1patch, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6pynini_11_1arg_patch_1patch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("patch (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arg,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arg)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "patch") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1068; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_arg = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("patch", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1068; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynini._1arg_patch.patch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_11_1arg_patch_patch(__pyx_self, __pyx_v_arg, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_11_1arg_patch_patch(PyObject *__pyx_self, PyObject *__pyx_v_arg, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  struct __pyx_obj_6pynini___pyx_scope_struct___1arg_patch *__pyx_cur_scope;
  struct __pyx_obj_6pynini___pyx_scope_struct___1arg_patch *__pyx_outer_scope;
  struct __pyx_obj_6pynini_Fst *__pyx_v_fst = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("patch", 0);
  __pyx_outer_scope = (struct __pyx_obj_6pynini___pyx_scope_struct___1arg_patch *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "pynini.pyx":1069
 *   @functools.wraps(fnc)
 *   def patch(arg, *args, **kwargs):
 *     cdef Fst fst = _compile_or_copy_Fst(arg)             # <<<<<<<<<<<<<<
 *     return _init_Fst_from_MutableFst(fnc(fst, *args, **kwargs))
 *   return patch
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_arg, 0, NULL)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1069; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_fst = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":1070
 *   def patch(arg, *args, **kwargs):
 *     cdef Fst fst = _compile_or_copy_Fst(arg)
 *     return _init_Fst_from_MutableFst(fnc(fst, *args, **kwargs))             # <<<<<<<<<<<<<<
 *   return patch
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_v_fnc)) { __Pyx_RaiseClosureNameError("fnc"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1070; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1070; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_fst));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_fst));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_fst));
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_v_args); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1070; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_cur_scope->__pyx_v_fnc, __pyx_t_2, __pyx_v_kwargs); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1070; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9pywrapfst__MutableFst))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1070; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((PyObject *)__pyx_f_6pynini__init_Fst_from_MutableFst(((struct __pyx_obj_9pywrapfst__MutableFst *)__pyx_t_1))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1070; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":1068
 * def _1arg_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst fst = _compile_or_copy_Fst(arg)
 *     return _init_Fst_from_MutableFst(fnc(fst, *args, **kwargs))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pynini._1arg_patch.patch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_fst);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1066
 * 
 * 
 * def _1arg_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg, *args, **kwargs):
 */

static PyObject *__pyx_pf_6pynini_12_1arg_patch(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fnc) {
  struct __pyx_obj_6pynini___pyx_scope_struct___1arg_patch *__pyx_cur_scope;
  PyObject *__pyx_v_patch = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_1arg_patch", 0);
  __pyx_cur_scope = (struct __pyx_obj_6pynini___pyx_scope_struct___1arg_patch *)__pyx_tp_new_6pynini___pyx_scope_struct___1arg_patch(__pyx_ptype_6pynini___pyx_scope_struct___1arg_patch, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_fnc = __pyx_v_fnc;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fnc);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fnc);

  /* "pynini.pyx":1067
 * 
 * def _1arg_patch(fnc):
 *   @functools.wraps(fnc)             # <<<<<<<<<<<<<<
 *   def patch(arg, *args, **kwargs):
 *     cdef Fst fst = _compile_or_copy_Fst(arg)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_functools); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1067; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_wraps); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1067; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_cur_scope->__pyx_v_fnc); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1067; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1067; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fnc);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fnc);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_cur_scope->__pyx_v_fnc);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1067; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pynini.pyx":1068
 * def _1arg_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst fst = _compile_or_copy_Fst(arg)
 *     return _init_Fst_from_MutableFst(fnc(fst, *args, **kwargs))
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6pynini_11_1arg_patch_1patch, 0, __pyx_n_s_1arg_patch_locals_patch, ((PyObject*)__pyx_cur_scope), __pyx_n_s_pynini, __pyx_d, ((PyObject *)__pyx_codeobj__18)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1068; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1067; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1067; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1067; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_patch = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pynini.pyx":1071
 *     cdef Fst fst = _compile_or_copy_Fst(arg)
 *     return _init_Fst_from_MutableFst(fnc(fst, *args, **kwargs))
 *   return patch             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_patch);
  __pyx_r = __pyx_v_patch;
  goto __pyx_L0;

  /* "pynini.pyx":1066
 * 
 * 
 * def _1arg_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg, *args, **kwargs):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynini._1arg_patch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_patch);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1088
 * 
 * 
 * def _shortestdistance_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg, *args, **kwargs):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_15_shortestdistance_patch(PyObject *__pyx_self, PyObject *__pyx_v_fnc); /*proto*/
static PyMethodDef __pyx_mdef_6pynini_15_shortestdistance_patch = {"_shortestdistance_patch", (PyCFunction)__pyx_pw_6pynini_15_shortestdistance_patch, METH_O, 0};
static PyObject *__pyx_pw_6pynini_15_shortestdistance_patch(PyObject *__pyx_self, PyObject *__pyx_v_fnc) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_shortestdistance_patch (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_14_shortestdistance_patch(__pyx_self, ((PyObject *)__pyx_v_fnc));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1090
 * def _shortestdistance_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst fst = _compile_or_copy_Fst(arg)
 *     return fnc(fst, *args, **kwargs)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_23_shortestdistance_patch_1patch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6pynini_23_shortestdistance_patch_1patch = {"patch", (PyCFunction)__pyx_pw_6pynini_23_shortestdistance_patch_1patch, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6pynini_23_shortestdistance_patch_1patch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("patch (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arg,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arg)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "patch") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1090; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_arg = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("patch", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1090; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynini._shortestdistance_patch.patch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_23_shortestdistance_patch_patch(__pyx_self, __pyx_v_arg, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_23_shortestdistance_patch_patch(PyObject *__pyx_self, PyObject *__pyx_v_arg, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  struct __pyx_obj_6pynini___pyx_scope_struct_1__shortestdistance_patch *__pyx_cur_scope;
  struct __pyx_obj_6pynini___pyx_scope_struct_1__shortestdistance_patch *__pyx_outer_scope;
  struct __pyx_obj_6pynini_Fst *__pyx_v_fst = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("patch", 0);
  __pyx_outer_scope = (struct __pyx_obj_6pynini___pyx_scope_struct_1__shortestdistance_patch *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "pynini.pyx":1091
 *   @functools.wraps(fnc)
 *   def patch(arg, *args, **kwargs):
 *     cdef Fst fst = _compile_or_copy_Fst(arg)             # <<<<<<<<<<<<<<
 *     return fnc(fst, *args, **kwargs)
 *   return patch
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_arg, 0, NULL)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1091; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_fst = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":1092
 *   def patch(arg, *args, **kwargs):
 *     cdef Fst fst = _compile_or_copy_Fst(arg)
 *     return fnc(fst, *args, **kwargs)             # <<<<<<<<<<<<<<
 *   return patch
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_v_fnc)) { __Pyx_RaiseClosureNameError("fnc"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1092; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1092; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_fst));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_fst));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_fst));
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_v_args); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1092; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_cur_scope->__pyx_v_fnc, __pyx_t_2, __pyx_v_kwargs); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1092; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":1090
 * def _shortestdistance_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst fst = _compile_or_copy_Fst(arg)
 *     return fnc(fst, *args, **kwargs)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pynini._shortestdistance_patch.patch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_fst);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1088
 * 
 * 
 * def _shortestdistance_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg, *args, **kwargs):
 */

static PyObject *__pyx_pf_6pynini_14_shortestdistance_patch(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fnc) {
  struct __pyx_obj_6pynini___pyx_scope_struct_1__shortestdistance_patch *__pyx_cur_scope;
  PyObject *__pyx_v_patch = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_shortestdistance_patch", 0);
  __pyx_cur_scope = (struct __pyx_obj_6pynini___pyx_scope_struct_1__shortestdistance_patch *)__pyx_tp_new_6pynini___pyx_scope_struct_1__shortestdistance_patch(__pyx_ptype_6pynini___pyx_scope_struct_1__shortestdistance_patch, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_fnc = __pyx_v_fnc;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fnc);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fnc);

  /* "pynini.pyx":1089
 * 
 * def _shortestdistance_patch(fnc):
 *   @functools.wraps(fnc)             # <<<<<<<<<<<<<<
 *   def patch(arg, *args, **kwargs):
 *     cdef Fst fst = _compile_or_copy_Fst(arg)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_functools); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1089; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_wraps); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1089; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_cur_scope->__pyx_v_fnc); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1089; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1089; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fnc);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fnc);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_cur_scope->__pyx_v_fnc);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1089; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pynini.pyx":1090
 * def _shortestdistance_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst fst = _compile_or_copy_Fst(arg)
 *     return fnc(fst, *args, **kwargs)
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6pynini_23_shortestdistance_patch_1patch, 0, __pyx_n_s_shortestdistance_patch_locals_p, ((PyObject*)__pyx_cur_scope), __pyx_n_s_pynini, __pyx_d, ((PyObject *)__pyx_codeobj__20)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1090; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1089; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1089; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1089; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_patch = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pynini.pyx":1093
 *     cdef Fst fst = _compile_or_copy_Fst(arg)
 *     return fnc(fst, *args, **kwargs)
 *   return patch             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_patch);
  __pyx_r = __pyx_v_patch;
  goto __pyx_L0;

  /* "pynini.pyx":1088
 * 
 * 
 * def _shortestdistance_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg, *args, **kwargs):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynini._shortestdistance_patch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_patch);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1104
 * 
 * 
 * def _compose_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_17_compose_patch(PyObject *__pyx_self, PyObject *__pyx_v_fnc); /*proto*/
static PyMethodDef __pyx_mdef_6pynini_17_compose_patch = {"_compose_patch", (PyCFunction)__pyx_pw_6pynini_17_compose_patch, METH_O, 0};
static PyObject *__pyx_pw_6pynini_17_compose_patch(PyObject *__pyx_self, PyObject *__pyx_v_fnc) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_compose_patch (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_16_compose_patch(__pyx_self, ((PyObject *)__pyx_v_fnc));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1106
 * def _compose_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst lhs = _compile_or_copy_Fst(arg1)
 *     cdef Fst rhs = _compile_or_copy_Fst(arg2, arc_type=lhs.arc_type)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_14_compose_patch_1patch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6pynini_14_compose_patch_1patch = {"patch", (PyCFunction)__pyx_pw_6pynini_14_compose_patch_1patch, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6pynini_14_compose_patch_1patch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg1 = 0;
  PyObject *__pyx_v_arg2 = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("patch (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 2) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 2, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arg1,&__pyx_n_s_arg2,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arg1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arg2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("patch", 0, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1106; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 2) ? pos_args : 2;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "patch") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1106; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_arg1 = values[0];
    __pyx_v_arg2 = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("patch", 0, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1106; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynini._compose_patch.patch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_14_compose_patch_patch(__pyx_self, __pyx_v_arg1, __pyx_v_arg2, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_14_compose_patch_patch(PyObject *__pyx_self, PyObject *__pyx_v_arg1, PyObject *__pyx_v_arg2, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  struct __pyx_obj_6pynini___pyx_scope_struct_2__compose_patch *__pyx_cur_scope;
  struct __pyx_obj_6pynini___pyx_scope_struct_2__compose_patch *__pyx_outer_scope;
  struct __pyx_obj_6pynini_Fst *__pyx_v_lhs = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_v_rhs = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  struct __pyx_opt_args_6pynini__compile_or_copy_Fst __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("patch", 0);
  __pyx_outer_scope = (struct __pyx_obj_6pynini___pyx_scope_struct_2__compose_patch *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "pynini.pyx":1107
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 *     cdef Fst lhs = _compile_or_copy_Fst(arg1)             # <<<<<<<<<<<<<<
 *     cdef Fst rhs = _compile_or_copy_Fst(arg2, arc_type=lhs.arc_type)
 *     if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_arg1, 0, NULL)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_lhs = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":1108
 *   def patch(arg1, arg2, *args, **kwargs):
 *     cdef Fst lhs = _compile_or_copy_Fst(arg1)
 *     cdef Fst rhs = _compile_or_copy_Fst(arg2, arc_type=lhs.arc_type)             # <<<<<<<<<<<<<<
 *     if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 *                         MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_lhs), __pyx_n_s_arc_type); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3.__pyx_n = 1;
  __pyx_t_3.arc_type = __pyx_t_1;
  __pyx_t_2 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_arg2, 0, &__pyx_t_3)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_rhs = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pynini.pyx":1109
 *     cdef Fst lhs = _compile_or_copy_Fst(arg1)
 *     cdef Fst rhs = _compile_or_copy_Fst(arg2, arc_type=lhs.arc_type)
 *     if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),             # <<<<<<<<<<<<<<
 *                         MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS):
 *       raise FstSymbolTableMergeError(
 */
  if (unlikely(((PyObject *)__pyx_v_lhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_mfst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (unlikely(((PyObject *)__pyx_v_rhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_mfst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pynini.pyx":1110
 *     cdef Fst rhs = _compile_or_copy_Fst(arg2, arc_type=lhs.arc_type)
 *     if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 *                         MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS):             # <<<<<<<<<<<<<<
 *       raise FstSymbolTableMergeError(
 *            "Unable to resolve symbol table conflict without relabeling")
 */
  __pyx_t_4 = ((!(fst::script::MergeSymbols(__pyx_v_lhs->__pyx_base._mfst.get(), __pyx_v_rhs->__pyx_base._mfst.get(), fst::MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS) != 0)) != 0);

  /* "pynini.pyx":1109
 *     cdef Fst lhs = _compile_or_copy_Fst(arg1)
 *     cdef Fst rhs = _compile_or_copy_Fst(arg2, arc_type=lhs.arc_type)
 *     if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),             # <<<<<<<<<<<<<<
 *                         MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS):
 *       raise FstSymbolTableMergeError(
 */
  if (__pyx_t_4) {

    /* "pynini.pyx":1111
 *     if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 *                         MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS):
 *       raise FstSymbolTableMergeError(             # <<<<<<<<<<<<<<
 *            "Unable to resolve symbol table conflict without relabeling")
 *     lhs.arcsort(sort_type="olabel")
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstSymbolTableMergeError); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pynini.pyx":1109
 *     cdef Fst lhs = _compile_or_copy_Fst(arg1)
 *     cdef Fst rhs = _compile_or_copy_Fst(arg2, arc_type=lhs.arc_type)
 *     if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),             # <<<<<<<<<<<<<<
 *                         MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS):
 *       raise FstSymbolTableMergeError(
 */
  }

  /* "pynini.pyx":1113
 *       raise FstSymbolTableMergeError(
 *            "Unable to resolve symbol table conflict without relabeling")
 *     lhs.arcsort(sort_type="olabel")             # <<<<<<<<<<<<<<
 *     rhs.arcsort(sort_type="ilabel")
 *     lhs = _init_Fst_from_MutableFst(fnc(lhs, rhs, *args, **kwargs))
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_lhs), __pyx_n_s_arcsort); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_sort_type, __pyx_n_s_olabel) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "pynini.pyx":1114
 *            "Unable to resolve symbol table conflict without relabeling")
 *     lhs.arcsort(sort_type="olabel")
 *     rhs.arcsort(sort_type="ilabel")             # <<<<<<<<<<<<<<
 *     lhs = _init_Fst_from_MutableFst(fnc(lhs, rhs, *args, **kwargs))
 *     if not lhs.num_states:
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_rhs), __pyx_n_s_arcsort); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_sort_type, __pyx_n_s_ilabel) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":1115
 *     lhs.arcsort(sort_type="olabel")
 *     rhs.arcsort(sort_type="ilabel")
 *     lhs = _init_Fst_from_MutableFst(fnc(lhs, rhs, *args, **kwargs))             # <<<<<<<<<<<<<<
 *     if not lhs.num_states:
 *       logging.warning("Composed FST has no connected states")
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_fnc)) { __Pyx_RaiseClosureNameError("fnc"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1115; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_lhs));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_lhs));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_lhs));
  __Pyx_INCREF(((PyObject *)__pyx_v_rhs));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_rhs));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_rhs));
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_v_args); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_cur_scope->__pyx_v_fnc, __pyx_t_2, __pyx_v_kwargs); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9pywrapfst__MutableFst))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((PyObject *)__pyx_f_6pynini__init_Fst_from_MutableFst(((struct __pyx_obj_9pywrapfst__MutableFst *)__pyx_t_1))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF_SET(__pyx_v_lhs, ((struct __pyx_obj_6pynini_Fst *)__pyx_t_2));
  __pyx_t_2 = 0;

  /* "pynini.pyx":1116
 *     rhs.arcsort(sort_type="ilabel")
 *     lhs = _init_Fst_from_MutableFst(fnc(lhs, rhs, *args, **kwargs))
 *     if not lhs.num_states:             # <<<<<<<<<<<<<<
 *       logging.warning("Composed FST has no connected states")
 *     return lhs
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_lhs), __pyx_n_s_num_states); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = ((!__pyx_t_4) != 0);
  if (__pyx_t_6) {

    /* "pynini.pyx":1117
 *     lhs = _init_Fst_from_MutableFst(fnc(lhs, rhs, *args, **kwargs))
 *     if not lhs.num_states:
 *       logging.warning("Composed FST has no connected states")             # <<<<<<<<<<<<<<
 *     return lhs
 *   return patch
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_logging); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_warning); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pynini.pyx":1116
 *     rhs.arcsort(sort_type="ilabel")
 *     lhs = _init_Fst_from_MutableFst(fnc(lhs, rhs, *args, **kwargs))
 *     if not lhs.num_states:             # <<<<<<<<<<<<<<
 *       logging.warning("Composed FST has no connected states")
 *     return lhs
 */
  }

  /* "pynini.pyx":1118
 *     if not lhs.num_states:
 *       logging.warning("Composed FST has no connected states")
 *     return lhs             # <<<<<<<<<<<<<<
 *   return patch
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_lhs));
  __pyx_r = ((PyObject *)__pyx_v_lhs);
  goto __pyx_L0;

  /* "pynini.pyx":1106
 * def _compose_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst lhs = _compile_or_copy_Fst(arg1)
 *     cdef Fst rhs = _compile_or_copy_Fst(arg2, arc_type=lhs.arc_type)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynini._compose_patch.patch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_lhs);
  __Pyx_XDECREF((PyObject *)__pyx_v_rhs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1104
 * 
 * 
 * def _compose_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */

static PyObject *__pyx_pf_6pynini_16_compose_patch(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fnc) {
  struct __pyx_obj_6pynini___pyx_scope_struct_2__compose_patch *__pyx_cur_scope;
  PyObject *__pyx_v_patch = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_compose_patch", 0);
  __pyx_cur_scope = (struct __pyx_obj_6pynini___pyx_scope_struct_2__compose_patch *)__pyx_tp_new_6pynini___pyx_scope_struct_2__compose_patch(__pyx_ptype_6pynini___pyx_scope_struct_2__compose_patch, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_fnc = __pyx_v_fnc;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fnc);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fnc);

  /* "pynini.pyx":1105
 * 
 * def _compose_patch(fnc):
 *   @functools.wraps(fnc)             # <<<<<<<<<<<<<<
 *   def patch(arg1, arg2, *args, **kwargs):
 *     cdef Fst lhs = _compile_or_copy_Fst(arg1)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_functools); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_wraps); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_cur_scope->__pyx_v_fnc); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fnc);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fnc);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_cur_scope->__pyx_v_fnc);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pynini.pyx":1106
 * def _compose_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst lhs = _compile_or_copy_Fst(arg1)
 *     cdef Fst rhs = _compile_or_copy_Fst(arg2, arc_type=lhs.arc_type)
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6pynini_14_compose_patch_1patch, 0, __pyx_n_s_compose_patch_locals_patch, ((PyObject*)__pyx_cur_scope), __pyx_n_s_pynini, __pyx_d, ((PyObject *)__pyx_codeobj__24)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_patch = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pynini.pyx":1119
 *       logging.warning("Composed FST has no connected states")
 *     return lhs
 *   return patch             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_patch);
  __pyx_r = __pyx_v_patch;
  goto __pyx_L0;

  /* "pynini.pyx":1104
 * 
 * 
 * def _compose_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynini._compose_patch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_patch);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1125
 * 
 * 
 * def _difference_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_19_difference_patch(PyObject *__pyx_self, PyObject *__pyx_v_fnc); /*proto*/
static PyMethodDef __pyx_mdef_6pynini_19_difference_patch = {"_difference_patch", (PyCFunction)__pyx_pw_6pynini_19_difference_patch, METH_O, 0};
static PyObject *__pyx_pw_6pynini_19_difference_patch(PyObject *__pyx_self, PyObject *__pyx_v_fnc) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_difference_patch (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_18_difference_patch(__pyx_self, ((PyObject *)__pyx_v_fnc));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1127
 * def _difference_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst lhs = _compile_or_copy_Fst(arg1)
 *     cdef Fst rhs = _compile_or_copy_Fst(arg2, arc_type=lhs.arc_type)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_17_difference_patch_1patch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6pynini_17_difference_patch_1patch = {"patch", (PyCFunction)__pyx_pw_6pynini_17_difference_patch_1patch, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6pynini_17_difference_patch_1patch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg1 = 0;
  PyObject *__pyx_v_arg2 = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("patch (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 2) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 2, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arg1,&__pyx_n_s_arg2,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arg1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arg2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("patch", 0, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1127; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 2) ? pos_args : 2;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "patch") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1127; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_arg1 = values[0];
    __pyx_v_arg2 = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("patch", 0, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1127; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynini._difference_patch.patch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_17_difference_patch_patch(__pyx_self, __pyx_v_arg1, __pyx_v_arg2, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_17_difference_patch_patch(PyObject *__pyx_self, PyObject *__pyx_v_arg1, PyObject *__pyx_v_arg2, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  struct __pyx_obj_6pynini___pyx_scope_struct_3__difference_patch *__pyx_cur_scope;
  struct __pyx_obj_6pynini___pyx_scope_struct_3__difference_patch *__pyx_outer_scope;
  struct __pyx_obj_6pynini_Fst *__pyx_v_lhs = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_v_rhs = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  struct __pyx_opt_args_6pynini__compile_or_copy_Fst __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("patch", 0);
  __pyx_outer_scope = (struct __pyx_obj_6pynini___pyx_scope_struct_3__difference_patch *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "pynini.pyx":1128
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 *     cdef Fst lhs = _compile_or_copy_Fst(arg1)             # <<<<<<<<<<<<<<
 *     cdef Fst rhs = _compile_or_copy_Fst(arg2, arc_type=lhs.arc_type)
 *     if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_arg1, 0, NULL)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_lhs = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":1129
 *   def patch(arg1, arg2, *args, **kwargs):
 *     cdef Fst lhs = _compile_or_copy_Fst(arg1)
 *     cdef Fst rhs = _compile_or_copy_Fst(arg2, arc_type=lhs.arc_type)             # <<<<<<<<<<<<<<
 *     if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 *                         MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_lhs), __pyx_n_s_arc_type); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3.__pyx_n = 1;
  __pyx_t_3.arc_type = __pyx_t_1;
  __pyx_t_2 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_arg2, 0, &__pyx_t_3)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_rhs = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pynini.pyx":1130
 *     cdef Fst lhs = _compile_or_copy_Fst(arg1)
 *     cdef Fst rhs = _compile_or_copy_Fst(arg2, arc_type=lhs.arc_type)
 *     if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),             # <<<<<<<<<<<<<<
 *                         MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS):
 *       raise FstSymbolTableMergeError(
 */
  if (unlikely(((PyObject *)__pyx_v_lhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_mfst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (unlikely(((PyObject *)__pyx_v_rhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_mfst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pynini.pyx":1131
 *     cdef Fst rhs = _compile_or_copy_Fst(arg2, arc_type=lhs.arc_type)
 *     if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 *                         MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS):             # <<<<<<<<<<<<<<
 *       raise FstSymbolTableMergeError(
 *           "Unable to resolve symbol table conflict without relabeling")
 */
  __pyx_t_4 = ((!(fst::script::MergeSymbols(__pyx_v_lhs->__pyx_base._mfst.get(), __pyx_v_rhs->__pyx_base._mfst.get(), fst::MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS) != 0)) != 0);

  /* "pynini.pyx":1130
 *     cdef Fst lhs = _compile_or_copy_Fst(arg1)
 *     cdef Fst rhs = _compile_or_copy_Fst(arg2, arc_type=lhs.arc_type)
 *     if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),             # <<<<<<<<<<<<<<
 *                         MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS):
 *       raise FstSymbolTableMergeError(
 */
  if (__pyx_t_4) {

    /* "pynini.pyx":1132
 *     if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 *                         MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS):
 *       raise FstSymbolTableMergeError(             # <<<<<<<<<<<<<<
 *           "Unable to resolve symbol table conflict without relabeling")
 *     if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstSymbolTableMergeError); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pynini.pyx":1130
 *     cdef Fst lhs = _compile_or_copy_Fst(arg1)
 *     cdef Fst rhs = _compile_or_copy_Fst(arg2, arc_type=lhs.arc_type)
 *     if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),             # <<<<<<<<<<<<<<
 *                         MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS):
 *       raise FstSymbolTableMergeError(
 */
  }

  /* "pynini.pyx":1134
 *       raise FstSymbolTableMergeError(
 *           "Unable to resolve symbol table conflict without relabeling")
 *     if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),             # <<<<<<<<<<<<<<
 *                         MERGE_INPUT_AND_OUTPUT_SYMBOLS):
 *       raise FstSymbolTableMergeError(
 */
  if (unlikely(((PyObject *)__pyx_v_lhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_mfst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (unlikely(((PyObject *)__pyx_v_rhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_mfst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pynini.pyx":1135
 *           "Unable to resolve symbol table conflict without relabeling")
 *     if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 *                         MERGE_INPUT_AND_OUTPUT_SYMBOLS):             # <<<<<<<<<<<<<<
 *       raise FstSymbolTableMergeError(
 *           "Unable to resolve symbol table conflict without relabeling")
 */
  __pyx_t_4 = ((!(fst::script::MergeSymbols(__pyx_v_lhs->__pyx_base._mfst.get(), __pyx_v_rhs->__pyx_base._mfst.get(), fst::MERGE_INPUT_AND_OUTPUT_SYMBOLS) != 0)) != 0);

  /* "pynini.pyx":1134
 *       raise FstSymbolTableMergeError(
 *           "Unable to resolve symbol table conflict without relabeling")
 *     if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),             # <<<<<<<<<<<<<<
 *                         MERGE_INPUT_AND_OUTPUT_SYMBOLS):
 *       raise FstSymbolTableMergeError(
 */
  if (__pyx_t_4) {

    /* "pynini.pyx":1136
 *     if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 *                         MERGE_INPUT_AND_OUTPUT_SYMBOLS):
 *       raise FstSymbolTableMergeError(             # <<<<<<<<<<<<<<
 *           "Unable to resolve symbol table conflict without relabeling")
 *     # Following Thrax, we do what we can to make rhs epsilon-free and
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstSymbolTableMergeError); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pynini.pyx":1134
 *       raise FstSymbolTableMergeError(
 *           "Unable to resolve symbol table conflict without relabeling")
 *     if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),             # <<<<<<<<<<<<<<
 *                         MERGE_INPUT_AND_OUTPUT_SYMBOLS):
 *       raise FstSymbolTableMergeError(
 */
  }

  /* "pynini.pyx":1140
 *     # Following Thrax, we do what we can to make rhs epsilon-free and
 *     # deterministic.
 *     rhs.optimize(True)             # <<<<<<<<<<<<<<
 *     return _init_Fst_from_MutableFst(fnc(lhs, rhs, *args, **kwargs))
 *   return patch
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_rhs), __pyx_n_s_optimize); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":1141
 *     # deterministic.
 *     rhs.optimize(True)
 *     return _init_Fst_from_MutableFst(fnc(lhs, rhs, *args, **kwargs))             # <<<<<<<<<<<<<<
 *   return patch
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_v_fnc)) { __Pyx_RaiseClosureNameError("fnc"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1141; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_lhs));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_lhs));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_lhs));
  __Pyx_INCREF(((PyObject *)__pyx_v_rhs));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_rhs));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_rhs));
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_v_args); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_cur_scope->__pyx_v_fnc, __pyx_t_2, __pyx_v_kwargs); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9pywrapfst__MutableFst))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((PyObject *)__pyx_f_6pynini__init_Fst_from_MutableFst(((struct __pyx_obj_9pywrapfst__MutableFst *)__pyx_t_1))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":1127
 * def _difference_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst lhs = _compile_or_copy_Fst(arg1)
 *     cdef Fst rhs = _compile_or_copy_Fst(arg2, arc_type=lhs.arc_type)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pynini._difference_patch.patch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_lhs);
  __Pyx_XDECREF((PyObject *)__pyx_v_rhs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1125
 * 
 * 
 * def _difference_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */

static PyObject *__pyx_pf_6pynini_18_difference_patch(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fnc) {
  struct __pyx_obj_6pynini___pyx_scope_struct_3__difference_patch *__pyx_cur_scope;
  PyObject *__pyx_v_patch = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_difference_patch", 0);
  __pyx_cur_scope = (struct __pyx_obj_6pynini___pyx_scope_struct_3__difference_patch *)__pyx_tp_new_6pynini___pyx_scope_struct_3__difference_patch(__pyx_ptype_6pynini___pyx_scope_struct_3__difference_patch, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_fnc = __pyx_v_fnc;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fnc);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fnc);

  /* "pynini.pyx":1126
 * 
 * def _difference_patch(fnc):
 *   @functools.wraps(fnc)             # <<<<<<<<<<<<<<
 *   def patch(arg1, arg2, *args, **kwargs):
 *     cdef Fst lhs = _compile_or_copy_Fst(arg1)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_functools); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_wraps); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_cur_scope->__pyx_v_fnc); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fnc);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fnc);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_cur_scope->__pyx_v_fnc);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pynini.pyx":1127
 * def _difference_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst lhs = _compile_or_copy_Fst(arg1)
 *     cdef Fst rhs = _compile_or_copy_Fst(arg2, arc_type=lhs.arc_type)
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6pynini_17_difference_patch_1patch, 0, __pyx_n_s_difference_patch_locals_patch, ((PyObject*)__pyx_cur_scope), __pyx_n_s_pynini, __pyx_d, ((PyObject *)__pyx_codeobj__29)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_patch = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pynini.pyx":1142
 *     rhs.optimize(True)
 *     return _init_Fst_from_MutableFst(fnc(lhs, rhs, *args, **kwargs))
 *   return patch             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_patch);
  __pyx_r = __pyx_v_patch;
  goto __pyx_L0;

  /* "pynini.pyx":1125
 * 
 * 
 * def _difference_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynini._difference_patch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_patch);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1148
 * 
 * 
 * def _intersect_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_21_intersect_patch(PyObject *__pyx_self, PyObject *__pyx_v_fnc); /*proto*/
static PyMethodDef __pyx_mdef_6pynini_21_intersect_patch = {"_intersect_patch", (PyCFunction)__pyx_pw_6pynini_21_intersect_patch, METH_O, 0};
static PyObject *__pyx_pw_6pynini_21_intersect_patch(PyObject *__pyx_self, PyObject *__pyx_v_fnc) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_intersect_patch (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_20_intersect_patch(__pyx_self, ((PyObject *)__pyx_v_fnc));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1150
 * def _intersect_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst lhs = _compile_or_copy_Fst(arg1)
 *     cdef Fst rhs = _compile_or_copy_Fst(arg2, arc_type=lhs.arc_type)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_16_intersect_patch_1patch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6pynini_16_intersect_patch_1patch = {"patch", (PyCFunction)__pyx_pw_6pynini_16_intersect_patch_1patch, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6pynini_16_intersect_patch_1patch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg1 = 0;
  PyObject *__pyx_v_arg2 = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("patch (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 2) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 2, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arg1,&__pyx_n_s_arg2,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arg1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arg2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("patch", 0, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1150; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 2) ? pos_args : 2;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "patch") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1150; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_arg1 = values[0];
    __pyx_v_arg2 = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("patch", 0, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1150; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynini._intersect_patch.patch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_16_intersect_patch_patch(__pyx_self, __pyx_v_arg1, __pyx_v_arg2, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_16_intersect_patch_patch(PyObject *__pyx_self, PyObject *__pyx_v_arg1, PyObject *__pyx_v_arg2, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  struct __pyx_obj_6pynini___pyx_scope_struct_4__intersect_patch *__pyx_cur_scope;
  struct __pyx_obj_6pynini___pyx_scope_struct_4__intersect_patch *__pyx_outer_scope;
  struct __pyx_obj_6pynini_Fst *__pyx_v_lhs = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_v_rhs = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  struct __pyx_opt_args_6pynini__compile_or_copy_Fst __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("patch", 0);
  __pyx_outer_scope = (struct __pyx_obj_6pynini___pyx_scope_struct_4__intersect_patch *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "pynini.pyx":1151
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 *     cdef Fst lhs = _compile_or_copy_Fst(arg1)             # <<<<<<<<<<<<<<
 *     cdef Fst rhs = _compile_or_copy_Fst(arg2, arc_type=lhs.arc_type)
 *     if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_arg1, 0, NULL)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_lhs = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":1152
 *   def patch(arg1, arg2, *args, **kwargs):
 *     cdef Fst lhs = _compile_or_copy_Fst(arg1)
 *     cdef Fst rhs = _compile_or_copy_Fst(arg2, arc_type=lhs.arc_type)             # <<<<<<<<<<<<<<
 *     if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 *                         MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_lhs), __pyx_n_s_arc_type); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3.__pyx_n = 1;
  __pyx_t_3.arc_type = __pyx_t_1;
  __pyx_t_2 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_arg2, 0, &__pyx_t_3)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_rhs = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pynini.pyx":1153
 *     cdef Fst lhs = _compile_or_copy_Fst(arg1)
 *     cdef Fst rhs = _compile_or_copy_Fst(arg2, arc_type=lhs.arc_type)
 *     if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),             # <<<<<<<<<<<<<<
 *                         MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS):
 *       raise FstSymbolTableMergeError(
 */
  if (unlikely(((PyObject *)__pyx_v_lhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_mfst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (unlikely(((PyObject *)__pyx_v_rhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_mfst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pynini.pyx":1154
 *     cdef Fst rhs = _compile_or_copy_Fst(arg2, arc_type=lhs.arc_type)
 *     if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 *                         MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS):             # <<<<<<<<<<<<<<
 *       raise FstSymbolTableMergeError(
 *           "Unable to resolve symbol table conflict without relabeling")
 */
  __pyx_t_4 = ((!(fst::script::MergeSymbols(__pyx_v_lhs->__pyx_base._mfst.get(), __pyx_v_rhs->__pyx_base._mfst.get(), fst::MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS) != 0)) != 0);

  /* "pynini.pyx":1153
 *     cdef Fst lhs = _compile_or_copy_Fst(arg1)
 *     cdef Fst rhs = _compile_or_copy_Fst(arg2, arc_type=lhs.arc_type)
 *     if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),             # <<<<<<<<<<<<<<
 *                         MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS):
 *       raise FstSymbolTableMergeError(
 */
  if (__pyx_t_4) {

    /* "pynini.pyx":1155
 *     if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 *                         MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS):
 *       raise FstSymbolTableMergeError(             # <<<<<<<<<<<<<<
 *           "Unable to resolve symbol table conflict without relabeling")
 *     if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstSymbolTableMergeError); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pynini.pyx":1153
 *     cdef Fst lhs = _compile_or_copy_Fst(arg1)
 *     cdef Fst rhs = _compile_or_copy_Fst(arg2, arc_type=lhs.arc_type)
 *     if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),             # <<<<<<<<<<<<<<
 *                         MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS):
 *       raise FstSymbolTableMergeError(
 */
  }

  /* "pynini.pyx":1157
 *       raise FstSymbolTableMergeError(
 *           "Unable to resolve symbol table conflict without relabeling")
 *     if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),             # <<<<<<<<<<<<<<
 *                         MERGE_INPUT_AND_OUTPUT_SYMBOLS):
 *       raise FstSymbolTableMergeError(
 */
  if (unlikely(((PyObject *)__pyx_v_lhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_mfst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (unlikely(((PyObject *)__pyx_v_rhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_mfst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pynini.pyx":1158
 *           "Unable to resolve symbol table conflict without relabeling")
 *     if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 *                         MERGE_INPUT_AND_OUTPUT_SYMBOLS):             # <<<<<<<<<<<<<<
 *       raise FstSymbolTableMergeError(
 *           "Unable to resolve symbol table conflict without relabeling")
 */
  __pyx_t_4 = ((!(fst::script::MergeSymbols(__pyx_v_lhs->__pyx_base._mfst.get(), __pyx_v_rhs->__pyx_base._mfst.get(), fst::MERGE_INPUT_AND_OUTPUT_SYMBOLS) != 0)) != 0);

  /* "pynini.pyx":1157
 *       raise FstSymbolTableMergeError(
 *           "Unable to resolve symbol table conflict without relabeling")
 *     if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),             # <<<<<<<<<<<<<<
 *                         MERGE_INPUT_AND_OUTPUT_SYMBOLS):
 *       raise FstSymbolTableMergeError(
 */
  if (__pyx_t_4) {

    /* "pynini.pyx":1159
 *     if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 *                         MERGE_INPUT_AND_OUTPUT_SYMBOLS):
 *       raise FstSymbolTableMergeError(             # <<<<<<<<<<<<<<
 *           "Unable to resolve symbol table conflict without relabeling")
 *     return _init_Fst_from_MutableFst(fnc(lhs, rhs, *args, **kwargs))
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstSymbolTableMergeError); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pynini.pyx":1157
 *       raise FstSymbolTableMergeError(
 *           "Unable to resolve symbol table conflict without relabeling")
 *     if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),             # <<<<<<<<<<<<<<
 *                         MERGE_INPUT_AND_OUTPUT_SYMBOLS):
 *       raise FstSymbolTableMergeError(
 */
  }

  /* "pynini.pyx":1161
 *       raise FstSymbolTableMergeError(
 *           "Unable to resolve symbol table conflict without relabeling")
 *     return _init_Fst_from_MutableFst(fnc(lhs, rhs, *args, **kwargs))             # <<<<<<<<<<<<<<
 *   return patch
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_v_fnc)) { __Pyx_RaiseClosureNameError("fnc"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1161; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_lhs));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_lhs));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_lhs));
  __Pyx_INCREF(((PyObject *)__pyx_v_rhs));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_rhs));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_rhs));
  __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_v_args); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_cur_scope->__pyx_v_fnc, __pyx_t_1, __pyx_v_kwargs); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_9pywrapfst__MutableFst))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini__init_Fst_from_MutableFst(((struct __pyx_obj_9pywrapfst__MutableFst *)__pyx_t_2))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":1150
 * def _intersect_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst lhs = _compile_or_copy_Fst(arg1)
 *     cdef Fst rhs = _compile_or_copy_Fst(arg2, arc_type=lhs.arc_type)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pynini._intersect_patch.patch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_lhs);
  __Pyx_XDECREF((PyObject *)__pyx_v_rhs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1148
 * 
 * 
 * def _intersect_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */

static PyObject *__pyx_pf_6pynini_20_intersect_patch(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fnc) {
  struct __pyx_obj_6pynini___pyx_scope_struct_4__intersect_patch *__pyx_cur_scope;
  PyObject *__pyx_v_patch = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_intersect_patch", 0);
  __pyx_cur_scope = (struct __pyx_obj_6pynini___pyx_scope_struct_4__intersect_patch *)__pyx_tp_new_6pynini___pyx_scope_struct_4__intersect_patch(__pyx_ptype_6pynini___pyx_scope_struct_4__intersect_patch, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_fnc = __pyx_v_fnc;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fnc);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fnc);

  /* "pynini.pyx":1149
 * 
 * def _intersect_patch(fnc):
 *   @functools.wraps(fnc)             # <<<<<<<<<<<<<<
 *   def patch(arg1, arg2, *args, **kwargs):
 *     cdef Fst lhs = _compile_or_copy_Fst(arg1)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_functools); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_wraps); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_cur_scope->__pyx_v_fnc); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fnc);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fnc);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_cur_scope->__pyx_v_fnc);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pynini.pyx":1150
 * def _intersect_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst lhs = _compile_or_copy_Fst(arg1)
 *     cdef Fst rhs = _compile_or_copy_Fst(arg2, arc_type=lhs.arc_type)
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6pynini_16_intersect_patch_1patch, 0, __pyx_n_s_intersect_patch_locals_patch, ((PyObject*)__pyx_cur_scope), __pyx_n_s_pynini, __pyx_d, ((PyObject *)__pyx_codeobj__33)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_patch = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pynini.pyx":1162
 *           "Unable to resolve symbol table conflict without relabeling")
 *     return _init_Fst_from_MutableFst(fnc(lhs, rhs, *args, **kwargs))
 *   return patch             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_patch);
  __pyx_r = __pyx_v_patch;
  goto __pyx_L0;

  /* "pynini.pyx":1148
 * 
 * 
 * def _intersect_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynini._intersect_patch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_patch);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1171
 * 
 * 
 * def _comp_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_23_comp_patch(PyObject *__pyx_self, PyObject *__pyx_v_fnc); /*proto*/
static PyMethodDef __pyx_mdef_6pynini_23_comp_patch = {"_comp_patch", (PyCFunction)__pyx_pw_6pynini_23_comp_patch, METH_O, 0};
static PyObject *__pyx_pw_6pynini_23_comp_patch(PyObject *__pyx_self, PyObject *__pyx_v_fnc) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_comp_patch (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_22_comp_patch(__pyx_self, ((PyObject *)__pyx_v_fnc));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1173
 * def _comp_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst lhs = _compile_or_copy_Fst(arg1)
 *     cdef Fst rhs = _compile_or_copy_Fst(arg2, arc_type=lhs.arc_type)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_11_comp_patch_1patch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6pynini_11_comp_patch_1patch = {"patch", (PyCFunction)__pyx_pw_6pynini_11_comp_patch_1patch, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6pynini_11_comp_patch_1patch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg1 = 0;
  PyObject *__pyx_v_arg2 = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("patch (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 2) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 2, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arg1,&__pyx_n_s_arg2,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arg1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arg2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("patch", 0, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1173; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 2) ? pos_args : 2;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "patch") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1173; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_arg1 = values[0];
    __pyx_v_arg2 = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("patch", 0, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1173; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynini._comp_patch.patch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_11_comp_patch_patch(__pyx_self, __pyx_v_arg1, __pyx_v_arg2, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_11_comp_patch_patch(PyObject *__pyx_self, PyObject *__pyx_v_arg1, PyObject *__pyx_v_arg2, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  struct __pyx_obj_6pynini___pyx_scope_struct_5__comp_patch *__pyx_cur_scope;
  struct __pyx_obj_6pynini___pyx_scope_struct_5__comp_patch *__pyx_outer_scope;
  struct __pyx_obj_6pynini_Fst *__pyx_v_lhs = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_v_rhs = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  struct __pyx_opt_args_6pynini__compile_or_copy_Fst __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("patch", 0);
  __pyx_outer_scope = (struct __pyx_obj_6pynini___pyx_scope_struct_5__comp_patch *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "pynini.pyx":1174
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 *     cdef Fst lhs = _compile_or_copy_Fst(arg1)             # <<<<<<<<<<<<<<
 *     cdef Fst rhs = _compile_or_copy_Fst(arg2, arc_type=lhs.arc_type)
 *     return fnc(lhs, rhs, *args, **kwargs)
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_arg1, 0, NULL)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_lhs = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":1175
 *   def patch(arg1, arg2, *args, **kwargs):
 *     cdef Fst lhs = _compile_or_copy_Fst(arg1)
 *     cdef Fst rhs = _compile_or_copy_Fst(arg2, arc_type=lhs.arc_type)             # <<<<<<<<<<<<<<
 *     return fnc(lhs, rhs, *args, **kwargs)
 *   return patch
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_lhs), __pyx_n_s_arc_type); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3.__pyx_n = 1;
  __pyx_t_3.arc_type = __pyx_t_1;
  __pyx_t_2 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_arg2, 0, &__pyx_t_3)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_rhs = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pynini.pyx":1176
 *     cdef Fst lhs = _compile_or_copy_Fst(arg1)
 *     cdef Fst rhs = _compile_or_copy_Fst(arg2, arc_type=lhs.arc_type)
 *     return fnc(lhs, rhs, *args, **kwargs)             # <<<<<<<<<<<<<<
 *   return patch
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_v_fnc)) { __Pyx_RaiseClosureNameError("fnc"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1176; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_lhs));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_lhs));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_lhs));
  __Pyx_INCREF(((PyObject *)__pyx_v_rhs));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_rhs));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_rhs));
  __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_v_args); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_cur_scope->__pyx_v_fnc, __pyx_t_1, __pyx_v_kwargs); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":1173
 * def _comp_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst lhs = _compile_or_copy_Fst(arg1)
 *     cdef Fst rhs = _compile_or_copy_Fst(arg2, arc_type=lhs.arc_type)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pynini._comp_patch.patch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_lhs);
  __Pyx_XDECREF((PyObject *)__pyx_v_rhs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1171
 * 
 * 
 * def _comp_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */

static PyObject *__pyx_pf_6pynini_22_comp_patch(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fnc) {
  struct __pyx_obj_6pynini___pyx_scope_struct_5__comp_patch *__pyx_cur_scope;
  PyObject *__pyx_v_patch = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_comp_patch", 0);
  __pyx_cur_scope = (struct __pyx_obj_6pynini___pyx_scope_struct_5__comp_patch *)__pyx_tp_new_6pynini___pyx_scope_struct_5__comp_patch(__pyx_ptype_6pynini___pyx_scope_struct_5__comp_patch, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_fnc = __pyx_v_fnc;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fnc);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fnc);

  /* "pynini.pyx":1172
 * 
 * def _comp_patch(fnc):
 *   @functools.wraps(fnc)             # <<<<<<<<<<<<<<
 *   def patch(arg1, arg2, *args, **kwargs):
 *     cdef Fst lhs = _compile_or_copy_Fst(arg1)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_functools); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_wraps); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_cur_scope->__pyx_v_fnc); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fnc);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fnc);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_cur_scope->__pyx_v_fnc);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pynini.pyx":1173
 * def _comp_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst lhs = _compile_or_copy_Fst(arg1)
 *     cdef Fst rhs = _compile_or_copy_Fst(arg2, arc_type=lhs.arc_type)
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6pynini_11_comp_patch_1patch, 0, __pyx_n_s_comp_patch_locals_patch, ((PyObject*)__pyx_cur_scope), __pyx_n_s_pynini, __pyx_d, ((PyObject *)__pyx_codeobj__35)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_patch = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pynini.pyx":1177
 *     cdef Fst rhs = _compile_or_copy_Fst(arg2, arc_type=lhs.arc_type)
 *     return fnc(lhs, rhs, *args, **kwargs)
 *   return patch             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_patch);
  __pyx_r = __pyx_v_patch;
  goto __pyx_L0;

  /* "pynini.pyx":1171
 * 
 * 
 * def _comp_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynini._comp_patch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_patch);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1187
 * 
 * 
 * def _comp_merge_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_25_comp_merge_patch(PyObject *__pyx_self, PyObject *__pyx_v_fnc); /*proto*/
static PyMethodDef __pyx_mdef_6pynini_25_comp_merge_patch = {"_comp_merge_patch", (PyCFunction)__pyx_pw_6pynini_25_comp_merge_patch, METH_O, 0};
static PyObject *__pyx_pw_6pynini_25_comp_merge_patch(PyObject *__pyx_self, PyObject *__pyx_v_fnc) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_comp_merge_patch (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_24_comp_merge_patch(__pyx_self, ((PyObject *)__pyx_v_fnc));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1189
 * def _comp_merge_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst lhs = _compile_or_copy_Fst(arg1)
 *     cdef Fst rhs = _compile_or_copy_Fst(arg2, arc_type=lhs.arc_type)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_17_comp_merge_patch_1patch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6pynini_17_comp_merge_patch_1patch = {"patch", (PyCFunction)__pyx_pw_6pynini_17_comp_merge_patch_1patch, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6pynini_17_comp_merge_patch_1patch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg1 = 0;
  PyObject *__pyx_v_arg2 = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("patch (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 2) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 2, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arg1,&__pyx_n_s_arg2,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arg1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arg2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("patch", 0, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1189; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 2) ? pos_args : 2;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "patch") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1189; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_arg1 = values[0];
    __pyx_v_arg2 = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("patch", 0, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1189; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynini._comp_merge_patch.patch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_17_comp_merge_patch_patch(__pyx_self, __pyx_v_arg1, __pyx_v_arg2, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_17_comp_merge_patch_patch(PyObject *__pyx_self, PyObject *__pyx_v_arg1, PyObject *__pyx_v_arg2, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  struct __pyx_obj_6pynini___pyx_scope_struct_6__comp_merge_patch *__pyx_cur_scope;
  struct __pyx_obj_6pynini___pyx_scope_struct_6__comp_merge_patch *__pyx_outer_scope;
  struct __pyx_obj_6pynini_Fst *__pyx_v_lhs = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_v_rhs = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  struct __pyx_opt_args_6pynini__compile_or_copy_Fst __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("patch", 0);
  __pyx_outer_scope = (struct __pyx_obj_6pynini___pyx_scope_struct_6__comp_merge_patch *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "pynini.pyx":1190
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 *     cdef Fst lhs = _compile_or_copy_Fst(arg1)             # <<<<<<<<<<<<<<
 *     cdef Fst rhs = _compile_or_copy_Fst(arg2, arc_type=lhs.arc_type)
 *     if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_arg1, 0, NULL)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_lhs = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":1191
 *   def patch(arg1, arg2, *args, **kwargs):
 *     cdef Fst lhs = _compile_or_copy_Fst(arg1)
 *     cdef Fst rhs = _compile_or_copy_Fst(arg2, arc_type=lhs.arc_type)             # <<<<<<<<<<<<<<
 *     if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 *                         MERGE_INPUT_AND_OUTPUT_SYMBOLS):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_lhs), __pyx_n_s_arc_type); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1191; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3.__pyx_n = 1;
  __pyx_t_3.arc_type = __pyx_t_1;
  __pyx_t_2 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_arg2, 0, &__pyx_t_3)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1191; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_rhs = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pynini.pyx":1192
 *     cdef Fst lhs = _compile_or_copy_Fst(arg1)
 *     cdef Fst rhs = _compile_or_copy_Fst(arg2, arc_type=lhs.arc_type)
 *     if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),             # <<<<<<<<<<<<<<
 *                         MERGE_INPUT_AND_OUTPUT_SYMBOLS):
 *       raise FstSymbolTableMergeError(
 */
  if (unlikely(((PyObject *)__pyx_v_lhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_mfst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (unlikely(((PyObject *)__pyx_v_rhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_mfst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pynini.pyx":1193
 *     cdef Fst rhs = _compile_or_copy_Fst(arg2, arc_type=lhs.arc_type)
 *     if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 *                         MERGE_INPUT_AND_OUTPUT_SYMBOLS):             # <<<<<<<<<<<<<<
 *       raise FstSymbolTableMergeError(
 *           "Unable to resolve symbol table conflict without relabeling")
 */
  __pyx_t_4 = ((!(fst::script::MergeSymbols(__pyx_v_lhs->__pyx_base._mfst.get(), __pyx_v_rhs->__pyx_base._mfst.get(), fst::MERGE_INPUT_AND_OUTPUT_SYMBOLS) != 0)) != 0);

  /* "pynini.pyx":1192
 *     cdef Fst lhs = _compile_or_copy_Fst(arg1)
 *     cdef Fst rhs = _compile_or_copy_Fst(arg2, arc_type=lhs.arc_type)
 *     if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),             # <<<<<<<<<<<<<<
 *                         MERGE_INPUT_AND_OUTPUT_SYMBOLS):
 *       raise FstSymbolTableMergeError(
 */
  if (__pyx_t_4) {

    /* "pynini.pyx":1194
 *     if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 *                         MERGE_INPUT_AND_OUTPUT_SYMBOLS):
 *       raise FstSymbolTableMergeError(             # <<<<<<<<<<<<<<
 *           "Unable to resolve symbol table conflict without relabeling")
 *     return fnc(lhs, rhs, *args, **kwargs)
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstSymbolTableMergeError); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pynini.pyx":1192
 *     cdef Fst lhs = _compile_or_copy_Fst(arg1)
 *     cdef Fst rhs = _compile_or_copy_Fst(arg2, arc_type=lhs.arc_type)
 *     if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),             # <<<<<<<<<<<<<<
 *                         MERGE_INPUT_AND_OUTPUT_SYMBOLS):
 *       raise FstSymbolTableMergeError(
 */
  }

  /* "pynini.pyx":1196
 *       raise FstSymbolTableMergeError(
 *           "Unable to resolve symbol table conflict without relabeling")
 *     return fnc(lhs, rhs, *args, **kwargs)             # <<<<<<<<<<<<<<
 *   return patch
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_v_fnc)) { __Pyx_RaiseClosureNameError("fnc"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1196; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_lhs));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_lhs));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_lhs));
  __Pyx_INCREF(((PyObject *)__pyx_v_rhs));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_rhs));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_rhs));
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_v_args); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_cur_scope->__pyx_v_fnc, __pyx_t_2, __pyx_v_kwargs); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":1189
 * def _comp_merge_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst lhs = _compile_or_copy_Fst(arg1)
 *     cdef Fst rhs = _compile_or_copy_Fst(arg2, arc_type=lhs.arc_type)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pynini._comp_merge_patch.patch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_lhs);
  __Pyx_XDECREF((PyObject *)__pyx_v_rhs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1187
 * 
 * 
 * def _comp_merge_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */

static PyObject *__pyx_pf_6pynini_24_comp_merge_patch(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fnc) {
  struct __pyx_obj_6pynini___pyx_scope_struct_6__comp_merge_patch *__pyx_cur_scope;
  PyObject *__pyx_v_patch = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_comp_merge_patch", 0);
  __pyx_cur_scope = (struct __pyx_obj_6pynini___pyx_scope_struct_6__comp_merge_patch *)__pyx_tp_new_6pynini___pyx_scope_struct_6__comp_merge_patch(__pyx_ptype_6pynini___pyx_scope_struct_6__comp_merge_patch, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_fnc = __pyx_v_fnc;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fnc);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fnc);

  /* "pynini.pyx":1188
 * 
 * def _comp_merge_patch(fnc):
 *   @functools.wraps(fnc)             # <<<<<<<<<<<<<<
 *   def patch(arg1, arg2, *args, **kwargs):
 *     cdef Fst lhs = _compile_or_copy_Fst(arg1)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_functools); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_wraps); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_cur_scope->__pyx_v_fnc); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fnc);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fnc);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_cur_scope->__pyx_v_fnc);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pynini.pyx":1189
 * def _comp_merge_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst lhs = _compile_or_copy_Fst(arg1)
 *     cdef Fst rhs = _compile_or_copy_Fst(arg2, arc_type=lhs.arc_type)
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6pynini_17_comp_merge_patch_1patch, 0, __pyx_n_s_comp_merge_patch_locals_patch, ((PyObject*)__pyx_cur_scope), __pyx_n_s_pynini, __pyx_d, ((PyObject *)__pyx_codeobj__38)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_patch = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pynini.pyx":1197
 *           "Unable to resolve symbol table conflict without relabeling")
 *     return fnc(lhs, rhs, *args, **kwargs)
 *   return patch             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_patch);
  __pyx_r = __pyx_v_patch;
  goto __pyx_L0;

  /* "pynini.pyx":1187
 * 
 * 
 * def _comp_merge_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynini._comp_merge_patch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_patch);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1204
 * 
 * 
 * def replace(root, *,             # <<<<<<<<<<<<<<
 *             call_arc_labeling=b"neither",
 *             return_arc_labeling=b"neither",
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_27replace(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pynini_26replace[] = "\n  replace(root, **replacements, call_arc_labeling=\"neither\",\n          return_arc_labeling=\"neither\", epsilon_on_replace=False,\n          return_label=0)\n\n  Constructively replaces arcs in an FST with other FST(s).\n\n  This operation performs the dynamic replacement of arcs in one FST with\n  other FSTs, allowing for the definition of FSTs analogous to RTNs. The output\n  FST is the result of recursively replacing each arc in all input FSTs that\n  matches some \"non-terminal\" with a corresponding FST. More precisely, an arc\n  from state s to state d with nonterminal output label n in an input FST is\n  replaced by redirecting this \"call\" arc to the initial state of a copy of the\n  the replacement FST and then adding \"return\" arcs from each final state of\n  the replacement FST to d in the input FST. If there are cyclic dependencies\n  among the replacement rules, the resulting FST does not have a finite\n  expansion and an exception will be raised.\n\n  Args:\n    root: The root FST.\n    **replacements: Keyword argument label/FST pairs to be replaced in\n       `root_fst`. For example, they keyword argument `DT=union(\"the\", \"a\")`\n       indicates that all instances of label \"DT\" should be replaced by the\n       union of \"the\" and \"a\".\n    call_arc_labeling: A string indicating which call arc labels should be\n        non-epsilon. One of: \"input\" (default), \"output\", \"both\", \"neither\".\n        This value is set to \"neither\" if epsilon_on_replace is True.\n    return_arc_labeling: A string indicating which return arc labels should be\n        non-epsilon. One of: \"input\", \"output\", \"both\", \"neither\" (default).\n        This value is set to \"neither\" if epsilon_on_replace is True.\n    epsilon_on_replace: Should call and return arcs be epsilon arcs? If True,\n        this effectively overrides call_arc_labeling and return_arc_labeling,\n        setting both to \"neither\".\n    return_label: The integer label for re""turn arcs.\n\n  Returns:\n    A replaced FST.\n\n  Raises:\n    KeyError: Nonterminal symbol not found.\n    FstOpError: Operation failed.\n\n  See also: `pdt_replace`.\n  ";
static PyMethodDef __pyx_mdef_6pynini_27replace = {"replace", (PyCFunction)__pyx_pw_6pynini_27replace, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pynini_26replace};
static PyObject *__pyx_pw_6pynini_27replace(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_root = 0;
  PyObject *__pyx_v_call_arc_labeling = 0;
  PyObject *__pyx_v_return_arc_labeling = 0;
  bool __pyx_v_epsilon_on_replace;
  __pyx_t_10basictypes_int64 __pyx_v_return_label;
  PyObject *__pyx_v_replacements = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("replace (wrapper)", 0);
  __pyx_v_replacements = PyDict_New(); if (unlikely(!__pyx_v_replacements)) return NULL;
  __Pyx_GOTREF(__pyx_v_replacements);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_root,&__pyx_n_s_call_arc_labeling,&__pyx_n_s_return_arc_labeling,&__pyx_n_s_epsilon_on_replace,&__pyx_n_s_return_label,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[1] = ((PyObject *)__pyx_n_b_neither);
    values[2] = ((PyObject *)__pyx_n_b_neither);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_root)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (kw_args > 0 && (kw_args <= 4)) {
        Py_ssize_t index;
        for (index = 1; index < 5 && kw_args > 0; index++) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, *__pyx_pyargnames[index]);
          if (value) { values[index] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_replacements, values, pos_args, "replace") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1204; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_root = values[0];
    __pyx_v_call_arc_labeling = values[1];
    __pyx_v_return_arc_labeling = values[2];
    if (values[3]) {
      __pyx_v_epsilon_on_replace = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_epsilon_on_replace == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1207; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {

      /* "pynini.pyx":1207
 *             call_arc_labeling=b"neither",
 *             return_arc_labeling=b"neither",
 *             bool epsilon_on_replace=False,             # <<<<<<<<<<<<<<
 *             int64 return_label=0,
 *             **replacements):
 */
      __pyx_v_epsilon_on_replace = ((bool)0);
    }
    if (values[4]) {
      __pyx_v_return_label = __Pyx_PyInt_As_int64_t(values[4]); if (unlikely((__pyx_v_return_label == (int64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1208; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_return_label = ((__pyx_t_10basictypes_int64)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("replace", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1204; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_replacements); __pyx_v_replacements = 0;
  __Pyx_AddTraceback("pynini.replace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_26replace(__pyx_self, __pyx_v_root, __pyx_v_call_arc_labeling, __pyx_v_return_arc_labeling, __pyx_v_epsilon_on_replace, __pyx_v_return_label, __pyx_v_replacements);

  /* "pynini.pyx":1204
 * 
 * 
 * def replace(root, *,             # <<<<<<<<<<<<<<
 *             call_arc_labeling=b"neither",
 *             return_arc_labeling=b"neither",
 */

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_replacements);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_26replace(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root, PyObject *__pyx_v_call_arc_labeling, PyObject *__pyx_v_return_arc_labeling, bool __pyx_v_epsilon_on_replace, __pyx_t_10basictypes_int64 __pyx_v_return_label, PyObject *__pyx_v_replacements) {
  struct __pyx_obj_6pynini_Fst *__pyx_v_root_fst = 0;
  std::string __pyx_v_arc_type;
  std::vector<__pyx_t_15pynini_includes_StringFstClassPair>  __pyx_v_pairs;
  PyObject *__pyx_v_replacement_set = NULL;
  std::string __pyx_v_nonterm;
  struct __pyx_obj_6pynini_Fst *__pyx_v_replacement = 0;
  enum fst::ReplaceLabelType __pyx_v_cal;
  enum fst::ReplaceLabelType __pyx_v_ral;
  std::unique_ptr<fst::script::ReplaceOptions>  __pyx_v_opts;
  struct __pyx_obj_6pynini_Fst *__pyx_v_result = 0;
  PyObject *__pyx_v_nt = NULL;
  PyObject *__pyx_v_rep = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  struct __pyx_opt_args_6pynini__compile_or_copy_Fst __pyx_t_11;
  PyObject *(*__pyx_t_12)(PyObject *);
  __pyx_t_15pynini_includes_StringFstClassPair __pyx_t_13;
  enum fst::ReplaceLabelType __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("replace", 0);

  /* "pynini.pyx":1254
 *   See also: `pdt_replace`.
 *   """
 *   cdef Fst root_fst = _compile_or_copy_Fst(root)             # <<<<<<<<<<<<<<
 *   cdef string arc_type = root_fst.arc_type
 *   cdef vector[StringFstClassPair] pairs
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_root, 0, NULL)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_root_fst = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":1255
 *   """
 *   cdef Fst root_fst = _compile_or_copy_Fst(root)
 *   cdef string arc_type = root_fst.arc_type             # <<<<<<<<<<<<<<
 *   cdef vector[StringFstClassPair] pairs
 *   # This has the pleasant effect of preventing Python from garbage-collecting
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_root_fst), __pyx_n_s_arc_type); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_arc_type = __pyx_t_2;

  /* "pynini.pyx":1260
 *   # these FSTs until we're ready.
 *   # TODO(kbg): Is there a better way?
 *   replacement_set = [(tostring(nt), _compile_or_copy_Fst(rep, arc_type)) for             # <<<<<<<<<<<<<<
 *                      (nt, rep) in replacements.iteritems()]
 *   cdef string nonterm
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = 0;

  /* "pynini.pyx":1261
 *   # TODO(kbg): Is there a better way?
 *   replacement_set = [(tostring(nt), _compile_or_copy_Fst(rep, arc_type)) for
 *                      (nt, rep) in replacements.iteritems()]             # <<<<<<<<<<<<<<
 *   cdef string nonterm
 *   cdef Fst replacement
 */
  __pyx_t_7 = __Pyx_dict_iterator(__pyx_v_replacements, 1, __pyx_n_s_iteritems, (&__pyx_t_5), (&__pyx_t_6)); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_3);
  __pyx_t_3 = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "pynini.pyx":1260
 *   # these FSTs until we're ready.
 *   # TODO(kbg): Is there a better way?
 *   replacement_set = [(tostring(nt), _compile_or_copy_Fst(rep, arc_type)) for             # <<<<<<<<<<<<<<
 *                      (nt, rep) in replacements.iteritems()]
 *   cdef string nonterm
 */
  while (1) {

    /* "pynini.pyx":1261
 *   # TODO(kbg): Is there a better way?
 *   replacement_set = [(tostring(nt), _compile_or_copy_Fst(rep, arc_type)) for
 *                      (nt, rep) in replacements.iteritems()]             # <<<<<<<<<<<<<<
 *   cdef string nonterm
 *   cdef Fst replacement
 */
    __pyx_t_9 = __Pyx_dict_iter_next(__pyx_t_3, __pyx_t_5, &__pyx_t_4, &__pyx_t_7, &__pyx_t_8, NULL, __pyx_t_6);
    if (unlikely(__pyx_t_9 == 0)) break;
    if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_XDECREF_SET(__pyx_v_nt, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_rep, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "pynini.pyx":1260
 *   # these FSTs until we're ready.
 *   # TODO(kbg): Is there a better way?
 *   replacement_set = [(tostring(nt), _compile_or_copy_Fst(rep, arc_type)) for             # <<<<<<<<<<<<<<
 *                      (nt, rep) in replacements.iteritems()]
 *   cdef string nonterm
 */
    __pyx_t_2 = __pyx_f_9pywrapfst_tostring(__pyx_v_nt, NULL); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_8 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_t_2); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_arc_type); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_11.__pyx_n = 1;
    __pyx_t_11.arc_type = __pyx_t_7;
    __pyx_t_10 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_rep, 0, &__pyx_t_11)); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_10);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_10);
    __pyx_t_8 = 0;
    __pyx_t_10 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_7))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_replacement_set = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":1264
 *   cdef string nonterm
 *   cdef Fst replacement
 *   for (nonterm, replacement) in replacement_set:             # <<<<<<<<<<<<<<
 *     pairs.push_back(StringFstClassPair(nonterm, replacement._fst.get()))
 *   cdef ReplaceLabelType cal = _get_replace_label_type(
 */
  __pyx_t_1 = __pyx_v_replacement_set; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
  for (;;) {
    if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
      PyObject* sequence = __pyx_t_3;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_10 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_10 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_10);
      #else
      __pyx_t_7 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_10 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      #endif
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_12 = Py_TYPE(__pyx_t_8)->tp_iternext;
      index = 0; __pyx_t_7 = __pyx_t_12(__pyx_t_8); if (unlikely(!__pyx_t_7)) goto __pyx_L7_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      index = 1; __pyx_t_10 = __pyx_t_12(__pyx_t_8); if (unlikely(!__pyx_t_10)) goto __pyx_L7_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_10);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_8), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_12 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L8_unpacking_done;
      __pyx_L7_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_12 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L8_unpacking_done:;
    }
    __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_7); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (!(likely(((__pyx_t_10) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_10, __pyx_ptype_6pynini_Fst))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_nonterm = __pyx_t_2;
    __Pyx_XDECREF_SET(__pyx_v_replacement, ((struct __pyx_obj_6pynini_Fst *)__pyx_t_10));
    __pyx_t_10 = 0;

    /* "pynini.pyx":1265
 *   cdef Fst replacement
 *   for (nonterm, replacement) in replacement_set:
 *     pairs.push_back(StringFstClassPair(nonterm, replacement._fst.get()))             # <<<<<<<<<<<<<<
 *   cdef ReplaceLabelType cal = _get_replace_label_type(
 *       tostring(call_arc_labeling), epsilon_on_replace)
 */
    if (unlikely(((PyObject *)__pyx_v_replacement) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_fst");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    try {
      __pyx_t_13 = __pyx_t_15pynini_includes_StringFstClassPair(__pyx_v_nonterm, __pyx_v_replacement->__pyx_base.__pyx_base._fst.get());
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    try {
      __pyx_v_pairs.push_back(__pyx_t_13);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "pynini.pyx":1264
 *   cdef string nonterm
 *   cdef Fst replacement
 *   for (nonterm, replacement) in replacement_set:             # <<<<<<<<<<<<<<
 *     pairs.push_back(StringFstClassPair(nonterm, replacement._fst.get()))
 *   cdef ReplaceLabelType cal = _get_replace_label_type(
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":1267
 *     pairs.push_back(StringFstClassPair(nonterm, replacement._fst.get()))
 *   cdef ReplaceLabelType cal = _get_replace_label_type(
 *       tostring(call_arc_labeling), epsilon_on_replace)             # <<<<<<<<<<<<<<
 *   cdef ReplaceLabelType ral = _get_replace_label_type(
 *       tostring(return_arc_labeling), epsilon_on_replace)
 */
  __pyx_t_2 = __pyx_f_9pywrapfst_tostring(__pyx_v_call_arc_labeling, NULL); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":1266
 *   for (nonterm, replacement) in replacement_set:
 *     pairs.push_back(StringFstClassPair(nonterm, replacement._fst.get()))
 *   cdef ReplaceLabelType cal = _get_replace_label_type(             # <<<<<<<<<<<<<<
 *       tostring(call_arc_labeling), epsilon_on_replace)
 *   cdef ReplaceLabelType ral = _get_replace_label_type(
 */
  __pyx_t_14 = __pyx_f_9pywrapfst__get_replace_label_type(__pyx_t_2, __pyx_v_epsilon_on_replace); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_cal = __pyx_t_14;

  /* "pynini.pyx":1269
 *       tostring(call_arc_labeling), epsilon_on_replace)
 *   cdef ReplaceLabelType ral = _get_replace_label_type(
 *       tostring(return_arc_labeling), epsilon_on_replace)             # <<<<<<<<<<<<<<
 *   cdef unique_ptr[ReplaceOptions] opts
 *   opts.reset(new ReplaceOptions(-1, cal, ral, return_label))
 */
  __pyx_t_2 = __pyx_f_9pywrapfst_tostring(__pyx_v_return_arc_labeling, NULL); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":1268
 *   cdef ReplaceLabelType cal = _get_replace_label_type(
 *       tostring(call_arc_labeling), epsilon_on_replace)
 *   cdef ReplaceLabelType ral = _get_replace_label_type(             # <<<<<<<<<<<<<<
 *       tostring(return_arc_labeling), epsilon_on_replace)
 *   cdef unique_ptr[ReplaceOptions] opts
 */
  __pyx_t_14 = __pyx_f_9pywrapfst__get_replace_label_type(__pyx_t_2, __pyx_v_epsilon_on_replace); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_ral = __pyx_t_14;

  /* "pynini.pyx":1271
 *       tostring(return_arc_labeling), epsilon_on_replace)
 *   cdef unique_ptr[ReplaceOptions] opts
 *   opts.reset(new ReplaceOptions(-1, cal, ral, return_label))             # <<<<<<<<<<<<<<
 *   cdef Fst result = Fst(arc_type)
 *   PyniniReplace(deref(root_fst._fst), pairs, result._mfst.get(), deref(opts))
 */
  __pyx_v_opts.reset(new fst::script::ReplaceOptions(-1, __pyx_v_cal, __pyx_v_ral, __pyx_v_return_label));

  /* "pynini.pyx":1272
 *   cdef unique_ptr[ReplaceOptions] opts
 *   opts.reset(new ReplaceOptions(-1, cal, ral, return_label))
 *   cdef Fst result = Fst(arc_type)             # <<<<<<<<<<<<<<
 *   PyniniReplace(deref(root_fst._fst), pairs, result._mfst.get(), deref(opts))
 *   result._check_pynini_op_error()
 */
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_arc_type); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":1273
 *   opts.reset(new ReplaceOptions(-1, cal, ral, return_label))
 *   cdef Fst result = Fst(arc_type)
 *   PyniniReplace(deref(root_fst._fst), pairs, result._mfst.get(), deref(opts))             # <<<<<<<<<<<<<<
 *   result._check_pynini_op_error()
 *   return result
 */
  if (unlikely(((PyObject *)__pyx_v_root_fst) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_fst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  fst::script::PyniniReplace((*__pyx_v_root_fst->__pyx_base.__pyx_base._fst), __pyx_v_pairs, __pyx_v_result->__pyx_base._mfst.get(), (*__pyx_v_opts));

  /* "pynini.pyx":1274
 *   cdef Fst result = Fst(arc_type)
 *   PyniniReplace(deref(root_fst._fst), pairs, result._mfst.get(), deref(opts))
 *   result._check_pynini_op_error()             # <<<<<<<<<<<<<<
 *   return result
 * 
 */
  ((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_result->__pyx_base.__pyx_base.__pyx_vtab)->_check_pynini_op_error(__pyx_v_result); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":1275
 *   PyniniReplace(deref(root_fst._fst), pairs, result._mfst.get(), deref(opts))
 *   result._check_pynini_op_error()
 *   return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "pynini.pyx":1204
 * 
 * 
 * def replace(root, *,             # <<<<<<<<<<<<<<
 *             call_arc_labeling=b"neither",
 *             return_arc_labeling=b"neither",
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("pynini.replace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_root_fst);
  __Pyx_XDECREF(__pyx_v_replacement_set);
  __Pyx_XDECREF((PyObject *)__pyx_v_replacement);
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_nt);
  __Pyx_XDECREF(__pyx_v_rep);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1278
 * 
 * 
 * def union(*args):             # <<<<<<<<<<<<<<
 *   """
 *   union(*args)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_29union(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pynini_28union[] = "\n  union(*args)\n\n  Computes the union (sum) of two or more FSTs.\n\n  This operation computes the union (sum) of two FSTs. If A transduces string\n  x to y with weight a and B transduces string w to v with weight b, then their\n  union transduces x to y with weight a and w to v with weight b.\n\n  Args:\n   *args: Two or more input FSTs.\n\n  Returns:\n    An Fst union.\n  ";
static PyMethodDef __pyx_mdef_6pynini_29union = {"union", (PyCFunction)__pyx_pw_6pynini_29union, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pynini_28union};
static PyObject *__pyx_pw_6pynini_29union(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("union (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "union", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_6pynini_28union(__pyx_self, __pyx_v_args);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_28union(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_args) {
  PyObject *__pyx_v_first = NULL;
  PyObject *__pyx_v_rest = NULL;
  struct __pyx_obj_6pynini_Fst *__pyx_v_lhs = 0;
  PyObject *__pyx_v_rhs = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("union", 0);

  /* "pynini.pyx":1294
 *     An Fst union.
 *   """
 *   (first, *rest) = args             # <<<<<<<<<<<<<<
 *   if len(args) < 1:
 *     raise FstArgError("Expected at least 2 positional arguments "
 */
  {
    Py_ssize_t index = -1;
    PyObject** temps[2] = {&__pyx_t_1};
    __pyx_t_2 = PyObject_GetIter(__pyx_v_args); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1294; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = Py_TYPE(__pyx_t_2)->tp_iternext;
    for (index=0; index < 1; index++) {
      PyObject* item = __pyx_t_3(__pyx_t_2); if (unlikely(!item)) goto __pyx_L3_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1294; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_L4_unpacking_done:;
  }
  __pyx_t_4 = PySequence_List(__pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1294; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_first = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_rest = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pynini.pyx":1295
 *   """
 *   (first, *rest) = args
 *   if len(args) < 1:             # <<<<<<<<<<<<<<
 *     raise FstArgError("Expected at least 2 positional arguments "
 *                          "({} given)".format(len(rest) + 1))
 */
  __pyx_t_5 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = ((__pyx_t_5 < 1) != 0);
  if (__pyx_t_6) {

    /* "pynini.pyx":1296
 *   (first, *rest) = args
 *   if len(args) < 1:
 *     raise FstArgError("Expected at least 2 positional arguments "             # <<<<<<<<<<<<<<
 *                          "({} given)".format(len(rest) + 1))
 *   cdef Fst lhs = _compile_or_copy_Fst(first)
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstArgError); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);

    /* "pynini.pyx":1297
 *   if len(args) < 1:
 *     raise FstArgError("Expected at least 2 positional arguments "
 *                          "({} given)".format(len(rest) + 1))             # <<<<<<<<<<<<<<
 *   cdef Fst lhs = _compile_or_copy_Fst(first)
 *   for rhs in rest:
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Expected_at_least_2_positional_a, __pyx_n_s_format); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = PyObject_Length(__pyx_v_rest); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_8 = PyInt_FromSsize_t((__pyx_t_5 + 1)); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    if (!__pyx_t_9) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9); __pyx_t_9 = NULL;
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_t_8);
      __pyx_t_8 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_10, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_7); __pyx_t_7 = NULL;
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_10, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pynini.pyx":1295
 *   """
 *   (first, *rest) = args
 *   if len(args) < 1:             # <<<<<<<<<<<<<<
 *     raise FstArgError("Expected at least 2 positional arguments "
 *                          "({} given)".format(len(rest) + 1))
 */
  }

  /* "pynini.pyx":1298
 *     raise FstArgError("Expected at least 2 positional arguments "
 *                          "({} given)".format(len(rest) + 1))
 *   cdef Fst lhs = _compile_or_copy_Fst(first)             # <<<<<<<<<<<<<<
 *   for rhs in rest:
 *     lhs.union(rhs)
 */
  __pyx_t_4 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_first, 0, NULL)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_lhs = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pynini.pyx":1299
 *                          "({} given)".format(len(rest) + 1))
 *   cdef Fst lhs = _compile_or_copy_Fst(first)
 *   for rhs in rest:             # <<<<<<<<<<<<<<
 *     lhs.union(rhs)
 *   return lhs
 */
  if (likely(PyList_CheckExact(__pyx_v_rest)) || PyTuple_CheckExact(__pyx_v_rest)) {
    __pyx_t_4 = __pyx_v_rest; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_11 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_rest); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_11 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_11)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_11(__pyx_t_4);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_rhs, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pynini.pyx":1300
 *   cdef Fst lhs = _compile_or_copy_Fst(first)
 *   for rhs in rest:
 *     lhs.union(rhs)             # <<<<<<<<<<<<<<
 *   return lhs
 * 
 */
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_lhs), __pyx_n_s_union); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_2 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_10))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_10);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_10, function);
      }
    }
    if (!__pyx_t_2) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_v_rhs); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_INCREF(__pyx_v_rhs);
      __Pyx_GIVEREF(__pyx_v_rhs);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v_rhs);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pynini.pyx":1299
 *                          "({} given)".format(len(rest) + 1))
 *   cdef Fst lhs = _compile_or_copy_Fst(first)
 *   for rhs in rest:             # <<<<<<<<<<<<<<
 *     lhs.union(rhs)
 *   return lhs
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pynini.pyx":1301
 *   for rhs in rest:
 *     lhs.union(rhs)
 *   return lhs             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_lhs));
  __pyx_r = ((PyObject *)__pyx_v_lhs);
  goto __pyx_L0;

  /* "pynini.pyx":1278
 * 
 * 
 * def union(*args):             # <<<<<<<<<<<<<<
 *   """
 *   union(*args)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("pynini.union", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_first);
  __Pyx_XDECREF(__pyx_v_rest);
  __Pyx_XDECREF((PyObject *)__pyx_v_lhs);
  __Pyx_XDECREF(__pyx_v_rhs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1325
 *   cdef vector[LabelPair] _parens
 * 
 *   def __repr__(self):             # <<<<<<<<<<<<<<
 *     return "<PdtParentheses at 0x{:x}>".format(id(self))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_14PdtParentheses_1__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pynini_14PdtParentheses_1__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_14PdtParentheses___repr__(((struct __pyx_obj_6pynini_PdtParentheses *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_14PdtParentheses___repr__(struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "pynini.pyx":1326
 * 
 *   def __repr__(self):
 *     return "<PdtParentheses at 0x{:x}>".format(id(self))             # <<<<<<<<<<<<<<
 * 
 *   def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_PdtParentheses_at_0x_x, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_id, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":1325
 *   cdef vector[LabelPair] _parens
 * 
 *   def __repr__(self):             # <<<<<<<<<<<<<<
 *     return "<PdtParentheses at 0x{:x}>".format(id(self))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynini.PdtParentheses.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1328
 *     return "<PdtParentheses at 0x{:x}>".format(id(self))
 * 
 *   def __len__(self):             # <<<<<<<<<<<<<<
 *     return self._parens.size()
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_6pynini_14PdtParentheses_3__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_6pynini_14PdtParentheses_3__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_14PdtParentheses_2__len__(((struct __pyx_obj_6pynini_PdtParentheses *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_6pynini_14PdtParentheses_2__len__(struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "pynini.pyx":1329
 * 
 *   def __len__(self):
 *     return self._parens.size()             # <<<<<<<<<<<<<<
 * 
 *   def __iter__(self):
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_parens");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_r = __pyx_v_self->_parens.size();
  goto __pyx_L0;

  /* "pynini.pyx":1328
 *     return "<PdtParentheses at 0x{:x}>".format(id(self))
 * 
 *   def __len__(self):             # <<<<<<<<<<<<<<
 *     return self._parens.size()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pynini.PdtParentheses.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6pynini_14PdtParentheses_6generator(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "pynini.pyx":1331
 *     return self._parens.size()
 * 
 *   def __iter__(self):             # <<<<<<<<<<<<<<
 *     cdef size_t i = 0
 *     for i in xrange(self._parens.size()):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_14PdtParentheses_5__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pynini_14PdtParentheses_5__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_14PdtParentheses_4__iter__(((struct __pyx_obj_6pynini_PdtParentheses *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_14PdtParentheses_4__iter__(struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_self) {
  struct __pyx_obj_6pynini___pyx_scope_struct_7___iter__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 0);
  __pyx_cur_scope = (struct __pyx_obj_6pynini___pyx_scope_struct_7___iter__ *)__pyx_tp_new_6pynini___pyx_scope_struct_7___iter__(__pyx_ptype_6pynini___pyx_scope_struct_7___iter__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6pynini_14PdtParentheses_6generator, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter, __pyx_n_s_PdtParentheses___iter); if (unlikely(!gen)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pynini.PdtParentheses.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6pynini_14PdtParentheses_6generator(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6pynini___pyx_scope_struct_7___iter__ *__pyx_cur_scope = ((struct __pyx_obj_6pynini___pyx_scope_struct_7___iter__ *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":1332
 * 
 *   def __iter__(self):
 *     cdef size_t i = 0             # <<<<<<<<<<<<<<
 *     for i in xrange(self._parens.size()):
 *       yield (self._parens[i].first, self._parens[i].second)
 */
  __pyx_cur_scope->__pyx_v_i = 0;

  /* "pynini.pyx":1333
 *   def __iter__(self):
 *     cdef size_t i = 0
 *     for i in xrange(self._parens.size()):             # <<<<<<<<<<<<<<
 *       yield (self._parens[i].first, self._parens[i].second)
 * 
 */
  if (unlikely(((PyObject *)__pyx_cur_scope->__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_parens");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __pyx_cur_scope->__pyx_v_self->_parens.size();
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_cur_scope->__pyx_v_i = __pyx_t_2;

    /* "pynini.pyx":1334
 *     cdef size_t i = 0
 *     for i in xrange(self._parens.size()):
 *       yield (self._parens[i].first, self._parens[i].second)             # <<<<<<<<<<<<<<
 * 
 *   cpdef PdtParentheses copy(self):
 */
    if (unlikely(((PyObject *)__pyx_cur_scope->__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_parens");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_3 = __Pyx_PyInt_From_int64_t((__pyx_cur_scope->__pyx_v_self->_parens[__pyx_cur_scope->__pyx_v_i]).first); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(((PyObject *)__pyx_cur_scope->__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_parens");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_4 = __Pyx_PyInt_From_int64_t((__pyx_cur_scope->__pyx_v_self->_parens[__pyx_cur_scope->__pyx_v_i]).second); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pynini.pyx":1331
 *     return self._parens.size()
 * 
 *   def __iter__(self):             # <<<<<<<<<<<<<<
 *     cdef size_t i = 0
 *     for i in xrange(self._parens.size()):
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1336
 *       yield (self._parens[i].first, self._parens[i].second)
 * 
 *   cpdef PdtParentheses copy(self):             # <<<<<<<<<<<<<<
 *     """
 *     copy(self)
 */

static PyObject *__pyx_pw_6pynini_14PdtParentheses_8copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static struct __pyx_obj_6pynini_PdtParentheses *__pyx_f_6pynini_14PdtParentheses_copy(struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_self, int __pyx_skip_dispatch) {
  struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_result = 0;
  struct __pyx_obj_6pynini_PdtParentheses *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  std::vector<__pyx_t_15pynini_includes_LabelPair>  __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_copy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_14PdtParentheses_8copy)) {
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_6pynini_PdtParentheses))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_r = ((struct __pyx_obj_6pynini_PdtParentheses *)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":1345
 *       A deep copy of the PdtParentheses object.
 *     """
 *     cpdef PdtParentheses result = PdtParentheses.__new__(PdtParentheses)             # <<<<<<<<<<<<<<
 *     result._parens = self._parens
 *     return result
 */
  __pyx_t_1 = __pyx_tp_new_6pynini_PdtParentheses(((PyTypeObject *)__pyx_ptype_6pynini_PdtParentheses), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_6pynini_PdtParentheses)))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_result = ((struct __pyx_obj_6pynini_PdtParentheses *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":1346
 *     """
 *     cpdef PdtParentheses result = PdtParentheses.__new__(PdtParentheses)
 *     result._parens = self._parens             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_parens");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_5 = __pyx_v_self->_parens;
  if (unlikely(((PyObject *)__pyx_v_result) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_parens");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_result->_parens = __pyx_t_5;

  /* "pynini.pyx":1347
 *     cpdef PdtParentheses result = PdtParentheses.__new__(PdtParentheses)
 *     result._parens = self._parens
 *     return result             # <<<<<<<<<<<<<<
 * 
 *   cpdef void add_pair(self, int64 push, int64 pop):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "pynini.pyx":1336
 *       yield (self._parens[i].first, self._parens[i].second)
 * 
 *   cpdef PdtParentheses copy(self):             # <<<<<<<<<<<<<<
 *     """
 *     copy(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynini.PdtParentheses.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_14PdtParentheses_8copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pynini_14PdtParentheses_7copy[] = "\n    copy(self)\n\n    Makes a copy of this PdtParentheses object.\n\n    Returns:\n      A deep copy of the PdtParentheses object.\n    ";
static PyObject *__pyx_pw_6pynini_14PdtParentheses_8copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_14PdtParentheses_7copy(((struct __pyx_obj_6pynini_PdtParentheses *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_14PdtParentheses_7copy(struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini_14PdtParentheses_copy(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.PdtParentheses.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1349
 *     return result
 * 
 *   cpdef void add_pair(self, int64 push, int64 pop):             # <<<<<<<<<<<<<<
 *     """
 *     add_pair(push, pop)
 */

static PyObject *__pyx_pw_6pynini_14PdtParentheses_10add_pair(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static void __pyx_f_6pynini_14PdtParentheses_add_pair(struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_self, __pyx_t_10basictypes_int64 __pyx_v_push, __pyx_t_10basictypes_int64 __pyx_v_pop, int __pyx_skip_dispatch) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  __pyx_t_15pynini_includes_LabelPair __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_pair", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_pair); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_14PdtParentheses_10add_pair)) {
      __pyx_t_3 = __Pyx_PyInt_From_int64_t(__pyx_v_push); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyInt_From_int64_t(__pyx_v_pop); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_5 = __pyx_t_1; __pyx_t_6 = NULL;
      __pyx_t_7 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_7 = 1;
        }
      }
      __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_6) {
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_4);
      __pyx_t_3 = 0;
      __pyx_t_4 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":1359
 *       pop: An FST arc label to be interpreted as a "pop" operation.
 *     """
 *     self._parens.push_back(LabelPair(push, pop))             # <<<<<<<<<<<<<<
 * 
 *   @classmethod
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_parens");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  try {
    __pyx_t_9 = __pyx_t_15pynini_includes_LabelPair(__pyx_v_push, __pyx_v_pop);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  try {
    __pyx_v_self->_parens.push_back(__pyx_t_9);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pynini.pyx":1349
 *     return result
 * 
 *   cpdef void add_pair(self, int64 push, int64 pop):             # <<<<<<<<<<<<<<
 *     """
 *     add_pair(push, pop)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_WriteUnraisable("pynini.PdtParentheses.add_pair", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_14PdtParentheses_10add_pair(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pynini_14PdtParentheses_9add_pair[] = "\n    add_pair(push, pop)\n\n    Adds a pair of parentheses to the set.\n\n    Args:\n      push: An FST arc label to be interpreted as a \"push\" operation.\n      pop: An FST arc label to be interpreted as a \"pop\" operation.\n    ";
static PyObject *__pyx_pw_6pynini_14PdtParentheses_10add_pair(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_10basictypes_int64 __pyx_v_push;
  __pyx_t_10basictypes_int64 __pyx_v_pop;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_pair (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_push,&__pyx_n_s_pop,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_push)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pop)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_pair", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1349; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_pair") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1349; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_push = __Pyx_PyInt_As_int64_t(values[0]); if (unlikely((__pyx_v_push == (int64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1349; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_pop = __Pyx_PyInt_As_int64_t(values[1]); if (unlikely((__pyx_v_pop == (int64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1349; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_pair", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1349; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.PdtParentheses.add_pair", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_14PdtParentheses_9add_pair(((struct __pyx_obj_6pynini_PdtParentheses *)__pyx_v_self), __pyx_v_push, __pyx_v_pop);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_14PdtParentheses_9add_pair(struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_self, __pyx_t_10basictypes_int64 __pyx_v_push, __pyx_t_10basictypes_int64 __pyx_v_pop) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_pair", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_f_6pynini_14PdtParentheses_add_pair(__pyx_v_self, __pyx_v_push, __pyx_v_pop, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.PdtParentheses.add_pair", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1362
 * 
 *   @classmethod
 *   def read(cls, filename):             # <<<<<<<<<<<<<<
 *     """
 *     PdtParentheses.read(filename)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_14PdtParentheses_12read(PyObject *__pyx_v_cls, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_6pynini_14PdtParentheses_11read[] = "\n    PdtParentheses.read(filename)\n\n    Reads parentheses pairs from a text file.\n\n    This class method creates a new PdtParentheses object from a pairs of\n    integer labels in a text file.\n\n    Args:\n      filename: The string location of the input file.\n\n    Returns:\n      A new PdtParentheses instance.\n\n    Raises:\n      FstIOError: Read failed.\n    ";
static PyObject *__pyx_pw_6pynini_14PdtParentheses_12read(PyObject *__pyx_v_cls, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_14PdtParentheses_11read(((PyTypeObject*)__pyx_v_cls), ((PyObject *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_14PdtParentheses_11read(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_filename) {
  struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read", 0);

  /* "pynini.pyx":1380
 *       FstIOError: Read failed.
 *     """
 *     cdef PdtParentheses result = PdtParentheses.__new__(PdtParentheses)             # <<<<<<<<<<<<<<
 *     if not ReadLabelPairs[int64](tostring(filename), addr(result._parens),
 *                                  False):
 */
  __pyx_t_1 = __pyx_tp_new_6pynini_PdtParentheses(((PyTypeObject *)__pyx_ptype_6pynini_PdtParentheses), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_6pynini_PdtParentheses)))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_result = ((struct __pyx_obj_6pynini_PdtParentheses *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":1381
 *     """
 *     cdef PdtParentheses result = PdtParentheses.__new__(PdtParentheses)
 *     if not ReadLabelPairs[int64](tostring(filename), addr(result._parens),             # <<<<<<<<<<<<<<
 *                                  False):
 *       raise FstIOError("Read failed: {!r}".format(filename))
 */
  __pyx_t_2 = __pyx_f_9pywrapfst_tostring(__pyx_v_filename, NULL); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(((PyObject *)__pyx_v_result) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_parens");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pynini.pyx":1382
 *     cdef PdtParentheses result = PdtParentheses.__new__(PdtParentheses)
 *     if not ReadLabelPairs[int64](tostring(filename), addr(result._parens),
 *                                  False):             # <<<<<<<<<<<<<<
 *       raise FstIOError("Read failed: {!r}".format(filename))
 *     return result
 */
  __pyx_t_3 = ((!(fst::ReadLabelPairs<__pyx_t_10basictypes_int64>(__pyx_t_2, (&__pyx_v_result->_parens), 0) != 0)) != 0);

  /* "pynini.pyx":1381
 *     """
 *     cdef PdtParentheses result = PdtParentheses.__new__(PdtParentheses)
 *     if not ReadLabelPairs[int64](tostring(filename), addr(result._parens),             # <<<<<<<<<<<<<<
 *                                  False):
 *       raise FstIOError("Read failed: {!r}".format(filename))
 */
  if (__pyx_t_3) {

    /* "pynini.pyx":1383
 *     if not ReadLabelPairs[int64](tostring(filename), addr(result._parens),
 *                                  False):
 *       raise FstIOError("Read failed: {!r}".format(filename))             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstIOError); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Read_failed_r, __pyx_n_s_format); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_filename); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
    } else {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
      __Pyx_INCREF(__pyx_v_filename);
      __Pyx_GIVEREF(__pyx_v_filename);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_v_filename);
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pynini.pyx":1381
 *     """
 *     cdef PdtParentheses result = PdtParentheses.__new__(PdtParentheses)
 *     if not ReadLabelPairs[int64](tostring(filename), addr(result._parens),             # <<<<<<<<<<<<<<
 *                                  False):
 *       raise FstIOError("Read failed: {!r}".format(filename))
 */
  }

  /* "pynini.pyx":1384
 *                                  False):
 *       raise FstIOError("Read failed: {!r}".format(filename))
 *     return result             # <<<<<<<<<<<<<<
 * 
 *   cpdef void write(self, filename) except *:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "pynini.pyx":1362
 * 
 *   @classmethod
 *   def read(cls, filename):             # <<<<<<<<<<<<<<
 *     """
 *     PdtParentheses.read(filename)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pynini.PdtParentheses.read", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1386
 *     return result
 * 
 *   cpdef void write(self, filename) except *:             # <<<<<<<<<<<<<<
 *     """
 *     write(filename)
 */

static PyObject *__pyx_pw_6pynini_14PdtParentheses_14write(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static void __pyx_f_6pynini_14PdtParentheses_write(struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_self, PyObject *__pyx_v_filename, int __pyx_skip_dispatch) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  std::string __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_write); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_14PdtParentheses_14write)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_filename); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(__pyx_v_filename);
        __Pyx_GIVEREF(__pyx_v_filename);
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_filename);
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":1400
 *       FstIOError: Write failed.
 *     """
 *     if not WriteLabelPairs[int64](tostring(filename), self._parens):             # <<<<<<<<<<<<<<
 *       raise FstIOError("Write failed: {!r}".format(filename))
 * 
 */
  __pyx_t_6 = __pyx_f_9pywrapfst_tostring(__pyx_v_filename, NULL); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_parens");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_7 = ((!(fst::WriteLabelPairs<__pyx_t_10basictypes_int64>(__pyx_t_6, __pyx_v_self->_parens) != 0)) != 0);
  if (__pyx_t_7) {

    /* "pynini.pyx":1401
 *     """
 *     if not WriteLabelPairs[int64](tostring(filename), self._parens):
 *       raise FstIOError("Write failed: {!r}".format(filename))             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstIOError); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Write_failed_r, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_filename); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_INCREF(__pyx_v_filename);
      __Pyx_GIVEREF(__pyx_v_filename);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_v_filename);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pynini.pyx":1400
 *       FstIOError: Write failed.
 *     """
 *     if not WriteLabelPairs[int64](tostring(filename), self._parens):             # <<<<<<<<<<<<<<
 *       raise FstIOError("Write failed: {!r}".format(filename))
 * 
 */
  }

  /* "pynini.pyx":1386
 *     return result
 * 
 *   cpdef void write(self, filename) except *:             # <<<<<<<<<<<<<<
 *     """
 *     write(filename)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pynini.PdtParentheses.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_14PdtParentheses_14write(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_6pynini_14PdtParentheses_13write[] = "\n    write(filename)\n\n    Writes parentheses pairs to text file.\n\n    This method writes the PdtParentheses object to a text file.\n\n    Args:\n      filename: The string location of the output file.\n\n    Raises:\n      FstIOError: Write failed.\n    ";
static PyObject *__pyx_pw_6pynini_14PdtParentheses_14write(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_14PdtParentheses_13write(((struct __pyx_obj_6pynini_PdtParentheses *)__pyx_v_self), ((PyObject *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_14PdtParentheses_13write(struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_f_6pynini_14PdtParentheses_write(__pyx_v_self, __pyx_v_filename, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __Pyx_void_to_None(NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.PdtParentheses.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1404
 * 
 * 
 * def pdt_compose(ifst1,             # <<<<<<<<<<<<<<
 *                 ifst2,
 *                 PdtParentheses parens,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_31pdt_compose(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pynini_30pdt_compose[] = "\n  pdt_compose(ifst1, ifst2, parens, cf=\"paren\", left_pdt=True)\n\n  Composes a PDT with an FST.\n\n  This operation composes a PDT with an FST. The input PDT is defined by the\n  combination of an FST and a PdtParentheses object specifying the stack\n  symbols. The caller should also specify whether the left-hand or the\n  right-hand FST argument is to be interpreted as a PDT.\n\n  Args:\n    ifst1: The left-hand-side input FST or PDT.\n    ifst2: The right-hand-side input FST or PDT.\n    parens: A PdtParentheses object specifying the input PDT's stack symbols.\n    cf: A string indicating the desired PDT composition filter; one of: \"paren\"\n        (keeps parentheses), \"expand\" (expands and removes parentheses),\n        \"expand_paren\" (expands and keeps parentheses).\n    left_pdt: If true, the first argument is interpreted as a PDT and the\n        second argument is interpreted as an FST; if false, the second\n        argument is interpreted as a PDT and the first argument is interpreted\n        as an FST.\n\n  Returns:\n    The FST component of an PDT produced by composition.\n\n  Raises:\n    FstOpError: Operation failed.\n    FstSymbolTableMergeError: Unable to resolve symbol table conflict\n        without relabeling.\n  ";
static PyMethodDef __pyx_mdef_6pynini_31pdt_compose = {"pdt_compose", (PyCFunction)__pyx_pw_6pynini_31pdt_compose, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pynini_30pdt_compose};
static PyObject *__pyx_pw_6pynini_31pdt_compose(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ifst1 = 0;
  PyObject *__pyx_v_ifst2 = 0;
  struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_parens = 0;
  PyObject *__pyx_v_cf = 0;
  bool __pyx_v_left_pdt;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pdt_compose (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ifst1,&__pyx_n_s_ifst2,&__pyx_n_s_parens,&__pyx_n_s_cf,&__pyx_n_s_left_pdt,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject *)__pyx_n_b_paren);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ifst1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ifst2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pdt_compose", 0, 3, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1404; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_parens)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pdt_compose", 0, 3, 5, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1404; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cf);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_left_pdt);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "pdt_compose") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1404; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_ifst1 = values[0];
    __pyx_v_ifst2 = values[1];
    __pyx_v_parens = ((struct __pyx_obj_6pynini_PdtParentheses *)values[2]);
    __pyx_v_cf = values[3];
    if (values[4]) {
      __pyx_v_left_pdt = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_left_pdt == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1408; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {

      /* "pynini.pyx":1408
 *                 PdtParentheses parens,
 *                 cf=b"paren",
 *                 bool left_pdt=True):             # <<<<<<<<<<<<<<
 *   """
 *   pdt_compose(ifst1, ifst2, parens, cf="paren", left_pdt=True)
 */
      __pyx_v_left_pdt = ((bool)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pdt_compose", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1404; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.pdt_compose", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parens), __pyx_ptype_6pynini_PdtParentheses, 1, "parens", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6pynini_30pdt_compose(__pyx_self, __pyx_v_ifst1, __pyx_v_ifst2, __pyx_v_parens, __pyx_v_cf, __pyx_v_left_pdt);

  /* "pynini.pyx":1404
 * 
 * 
 * def pdt_compose(ifst1,             # <<<<<<<<<<<<<<
 *                 ifst2,
 *                 PdtParentheses parens,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_30pdt_compose(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_ifst1, PyObject *__pyx_v_ifst2, struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_parens, PyObject *__pyx_v_cf, bool __pyx_v_left_pdt) {
  struct __pyx_obj_6pynini_Fst *__pyx_v_lhs = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_v_rhs = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_v_result = 0;
  enum fst::PdtComposeFilter __pyx_v_typed_cf;
  fst::PdtComposeOptions *__pyx_v_opts;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  struct __pyx_opt_args_6pynini__compile_or_copy_Fst __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  std::string __pyx_t_6;
  enum fst::PdtComposeFilter __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pdt_compose", 0);

  /* "pynini.pyx":1439
 *         without relabeling.
 *   """
 *   cdef Fst lhs = _compile_or_copy_Fst(ifst1)             # <<<<<<<<<<<<<<
 *   cdef Fst rhs = _compile_or_copy_Fst(ifst2, lhs.arc_type)
 *   lhs.arcsort(sort_type="olabel")
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_ifst1, 0, NULL)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_lhs = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":1440
 *   """
 *   cdef Fst lhs = _compile_or_copy_Fst(ifst1)
 *   cdef Fst rhs = _compile_or_copy_Fst(ifst2, lhs.arc_type)             # <<<<<<<<<<<<<<
 *   lhs.arcsort(sort_type="olabel")
 *   rhs.arcsort(sort_type="ilabel")
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_lhs), __pyx_n_s_arc_type); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3.__pyx_n = 1;
  __pyx_t_3.arc_type = __pyx_t_1;
  __pyx_t_2 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_ifst2, 0, &__pyx_t_3)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_rhs = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pynini.pyx":1441
 *   cdef Fst lhs = _compile_or_copy_Fst(ifst1)
 *   cdef Fst rhs = _compile_or_copy_Fst(ifst2, lhs.arc_type)
 *   lhs.arcsort(sort_type="olabel")             # <<<<<<<<<<<<<<
 *   rhs.arcsort(sort_type="ilabel")
 *   if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_lhs), __pyx_n_s_arcsort); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_sort_type, __pyx_n_s_olabel) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pynini.pyx":1442
 *   cdef Fst rhs = _compile_or_copy_Fst(ifst2, lhs.arc_type)
 *   lhs.arcsort(sort_type="olabel")
 *   rhs.arcsort(sort_type="ilabel")             # <<<<<<<<<<<<<<
 *   if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 *                       MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS):
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_rhs), __pyx_n_s_arcsort); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1442; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1442; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_sort_type, __pyx_n_s_ilabel) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1442; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1442; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":1443
 *   lhs.arcsort(sort_type="olabel")
 *   rhs.arcsort(sort_type="ilabel")
 *   if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),             # <<<<<<<<<<<<<<
 *                       MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS):
 *     raise FstSymbolTableMergeError(
 */
  if (unlikely(((PyObject *)__pyx_v_lhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_mfst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1443; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (unlikely(((PyObject *)__pyx_v_rhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_mfst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1443; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pynini.pyx":1444
 *   rhs.arcsort(sort_type="ilabel")
 *   if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 *                       MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS):             # <<<<<<<<<<<<<<
 *     raise FstSymbolTableMergeError(
 *         "Unable to resolve symbol table conflict without relabeling")
 */
  __pyx_t_5 = ((!(fst::script::MergeSymbols(__pyx_v_lhs->__pyx_base._mfst.get(), __pyx_v_rhs->__pyx_base._mfst.get(), fst::MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS) != 0)) != 0);

  /* "pynini.pyx":1443
 *   lhs.arcsort(sort_type="olabel")
 *   rhs.arcsort(sort_type="ilabel")
 *   if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),             # <<<<<<<<<<<<<<
 *                       MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS):
 *     raise FstSymbolTableMergeError(
 */
  if (__pyx_t_5) {

    /* "pynini.pyx":1445
 *   if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 *                       MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS):
 *     raise FstSymbolTableMergeError(             # <<<<<<<<<<<<<<
 *         "Unable to resolve symbol table conflict without relabeling")
 *   cdef Fst result = Fst(lhs.arc_type)
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstSymbolTableMergeError); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__39, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pynini.pyx":1443
 *   lhs.arcsort(sort_type="olabel")
 *   rhs.arcsort(sort_type="ilabel")
 *   if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),             # <<<<<<<<<<<<<<
 *                       MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS):
 *     raise FstSymbolTableMergeError(
 */
  }

  /* "pynini.pyx":1447
 *     raise FstSymbolTableMergeError(
 *         "Unable to resolve symbol table conflict without relabeling")
 *   cdef Fst result = Fst(lhs.arc_type)             # <<<<<<<<<<<<<<
 *   cdef PdtComposeFilter typed_cf = _get_pdt_compose_filter(tostring(cf))
 *   cdef PdtComposeOptions *opts = new PdtComposeOptions(True, typed_cf)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_lhs), __pyx_n_s_arc_type); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_result = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":1448
 *         "Unable to resolve symbol table conflict without relabeling")
 *   cdef Fst result = Fst(lhs.arc_type)
 *   cdef PdtComposeFilter typed_cf = _get_pdt_compose_filter(tostring(cf))             # <<<<<<<<<<<<<<
 *   cdef PdtComposeOptions *opts = new PdtComposeOptions(True, typed_cf)
 *   PdtCompose(deref(lhs._fst), deref(rhs._fst), parens._parens,
 */
  __pyx_t_6 = __pyx_f_9pywrapfst_tostring(__pyx_v_cf, NULL); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = __pyx_f_6pynini__get_pdt_compose_filter(__pyx_t_6); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_typed_cf = __pyx_t_7;

  /* "pynini.pyx":1449
 *   cdef Fst result = Fst(lhs.arc_type)
 *   cdef PdtComposeFilter typed_cf = _get_pdt_compose_filter(tostring(cf))
 *   cdef PdtComposeOptions *opts = new PdtComposeOptions(True, typed_cf)             # <<<<<<<<<<<<<<
 *   PdtCompose(deref(lhs._fst), deref(rhs._fst), parens._parens,
 *              result._mfst.get(), deref(opts), left_pdt)
 */
  __pyx_v_opts = new fst::PdtComposeOptions(1, __pyx_v_typed_cf);

  /* "pynini.pyx":1450
 *   cdef PdtComposeFilter typed_cf = _get_pdt_compose_filter(tostring(cf))
 *   cdef PdtComposeOptions *opts = new PdtComposeOptions(True, typed_cf)
 *   PdtCompose(deref(lhs._fst), deref(rhs._fst), parens._parens,             # <<<<<<<<<<<<<<
 *              result._mfst.get(), deref(opts), left_pdt)
 *   del opts
 */
  if (unlikely(((PyObject *)__pyx_v_lhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_fst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (unlikely(((PyObject *)__pyx_v_rhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_fst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (unlikely(((PyObject *)__pyx_v_parens) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_parens");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pynini.pyx":1451
 *   cdef PdtComposeOptions *opts = new PdtComposeOptions(True, typed_cf)
 *   PdtCompose(deref(lhs._fst), deref(rhs._fst), parens._parens,
 *              result._mfst.get(), deref(opts), left_pdt)             # <<<<<<<<<<<<<<
 *   del opts
 *   if not result.num_states:
 */
  fst::script::PdtCompose((*__pyx_v_lhs->__pyx_base.__pyx_base._fst), (*__pyx_v_rhs->__pyx_base.__pyx_base._fst), __pyx_v_parens->_parens, __pyx_v_result->__pyx_base._mfst.get(), (*__pyx_v_opts), __pyx_v_left_pdt);

  /* "pynini.pyx":1452
 *   PdtCompose(deref(lhs._fst), deref(rhs._fst), parens._parens,
 *              result._mfst.get(), deref(opts), left_pdt)
 *   del opts             # <<<<<<<<<<<<<<
 *   if not result.num_states:
 *     logging.warning("Composed PDT has no connected states")
 */
  delete __pyx_v_opts;

  /* "pynini.pyx":1453
 *              result._mfst.get(), deref(opts), left_pdt)
 *   del opts
 *   if not result.num_states:             # <<<<<<<<<<<<<<
 *     logging.warning("Composed PDT has no connected states")
 *   result._check_pynini_op_error()
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_result), __pyx_n_s_num_states); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1453; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1453; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_8 = ((!__pyx_t_5) != 0);
  if (__pyx_t_8) {

    /* "pynini.pyx":1454
 *   del opts
 *   if not result.num_states:
 *     logging.warning("Composed PDT has no connected states")             # <<<<<<<<<<<<<<
 *   result._check_pynini_op_error()
 *   # If the "expand" filter is selected, all parentheses have been mapped to
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_logging); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_warning); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__40, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pynini.pyx":1453
 *              result._mfst.get(), deref(opts), left_pdt)
 *   del opts
 *   if not result.num_states:             # <<<<<<<<<<<<<<
 *     logging.warning("Composed PDT has no connected states")
 *   result._check_pynini_op_error()
 */
  }

  /* "pynini.pyx":1455
 *   if not result.num_states:
 *     logging.warning("Composed PDT has no connected states")
 *   result._check_pynini_op_error()             # <<<<<<<<<<<<<<
 *   # If the "expand" filter is selected, all parentheses have been mapped to
 *   # epsilon. This conveniently removes the arcs that result.
 */
  ((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_result->__pyx_base.__pyx_base.__pyx_vtab)->_check_pynini_op_error(__pyx_v_result); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":1458
 *   # If the "expand" filter is selected, all parentheses have been mapped to
 *   # epsilon. This conveniently removes the arcs that result.
 *   if typed_cf == EXPAND_FILTER:             # <<<<<<<<<<<<<<
 *     result.rmepsilon()
 *   # Otherwise, we need to add the parentheses to the result.
 */
  __pyx_t_8 = ((__pyx_v_typed_cf == fst::EXPAND_FILTER) != 0);
  if (__pyx_t_8) {

    /* "pynini.pyx":1459
 *   # epsilon. This conveniently removes the arcs that result.
 *   if typed_cf == EXPAND_FILTER:
 *     result.rmepsilon()             # <<<<<<<<<<<<<<
 *   # Otherwise, we need to add the parentheses to the result.
 *   else:
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_result), __pyx_n_s_rmepsilon); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pynini.pyx":1458
 *   # If the "expand" filter is selected, all parentheses have been mapped to
 *   # epsilon. This conveniently removes the arcs that result.
 *   if typed_cf == EXPAND_FILTER:             # <<<<<<<<<<<<<<
 *     result.rmepsilon()
 *   # Otherwise, we need to add the parentheses to the result.
 */
    goto __pyx_L5;
  }

  /* "pynini.pyx":1462
 *   # Otherwise, we need to add the parentheses to the result.
 *   else:
 *     _add_parentheses_symbols(result._mfst.get(), parens._parens, left_pdt)             # <<<<<<<<<<<<<<
 *   return result
 * 
 */
  /*else*/ {
    if (unlikely(((PyObject *)__pyx_v_parens) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_parens");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_f_6pynini__add_parentheses_symbols(__pyx_v_result->__pyx_base._mfst.get(), __pyx_v_parens->_parens, __pyx_v_left_pdt); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L5:;

  /* "pynini.pyx":1463
 *   else:
 *     _add_parentheses_symbols(result._mfst.get(), parens._parens, left_pdt)
 *   return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "pynini.pyx":1404
 * 
 * 
 * def pdt_compose(ifst1,             # <<<<<<<<<<<<<<
 *                 ifst2,
 *                 PdtParentheses parens,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynini.pdt_compose", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_lhs);
  __Pyx_XDECREF((PyObject *)__pyx_v_rhs);
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1466
 * 
 * 
 * def pdt_expand(ipdt,             # <<<<<<<<<<<<<<
 *                PdtParentheses parens,
 *                bool connect=True,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_33pdt_expand(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pynini_32pdt_expand[] = "\n  pdt_expand(ipdt, parens, connect=True, keep_parentheses=False, weight=None)\n\n  Expands a bounded-stack PDT to an FST.\n\n  This operation converts a bounded-stack PDT into the equivalent FST. The\n  input PDT is defined by the combination of an FST and a PdtParentheses object\n  specifying the PDT stack symbols.\n\n  If the input PDT does not have a bounded stack, then it is impossible to\n  expand the PDT into an FST and this operation will not terminate.\n\n  Args:\n    ipdt: The FST component of the input PDT.\n    parens: A PdtParentheses object specifying the input PDT's stack symbols.\n    connect: Should the output FST be trimmed?\n    keep_parentheses: Should the output FST preserve parentheses arcs?\n    weight: A Weight or weight string indicating the desired weight threshold;\n        paths with weights below this threshold will be pruned. If omitted or\n        null, no paths are pruned.\n\n  Returns:\n    An FST produced by expanding the bounded-stack PDT.\n\n  Raises:\n    FstOpError: Operation failed.\n  ";
static PyMethodDef __pyx_mdef_6pynini_33pdt_expand = {"pdt_expand", (PyCFunction)__pyx_pw_6pynini_33pdt_expand, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pynini_32pdt_expand};
static PyObject *__pyx_pw_6pynini_33pdt_expand(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ipdt = 0;
  struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_parens = 0;
  bool __pyx_v_connect;
  bool __pyx_v_keep_parentheses;
  PyObject *__pyx_v_weight = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pdt_expand (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ipdt,&__pyx_n_s_parens,&__pyx_n_s_connect,&__pyx_n_s_keep_parentheses,&__pyx_n_s_weight,0};
    PyObject* values[5] = {0,0,0,0,0};

    /* "pynini.pyx":1470
 *                bool connect=True,
 *                bool keep_parentheses=False,
 *                weight=None):             # <<<<<<<<<<<<<<
 *   """
 *   pdt_expand(ipdt, parens, connect=True, keep_parentheses=False, weight=None)
 */
    values[4] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ipdt)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_parens)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pdt_expand", 0, 2, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1466; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_connect);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_keep_parentheses);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_weight);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "pdt_expand") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1466; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_ipdt = values[0];
    __pyx_v_parens = ((struct __pyx_obj_6pynini_PdtParentheses *)values[1]);
    if (values[2]) {
      __pyx_v_connect = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_connect == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1468; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {

      /* "pynini.pyx":1468
 * def pdt_expand(ipdt,
 *                PdtParentheses parens,
 *                bool connect=True,             # <<<<<<<<<<<<<<
 *                bool keep_parentheses=False,
 *                weight=None):
 */
      __pyx_v_connect = ((bool)1);
    }
    if (values[3]) {
      __pyx_v_keep_parentheses = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_keep_parentheses == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1469; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {

      /* "pynini.pyx":1469
 *                PdtParentheses parens,
 *                bool connect=True,
 *                bool keep_parentheses=False,             # <<<<<<<<<<<<<<
 *                weight=None):
 *   """
 */
      __pyx_v_keep_parentheses = ((bool)0);
    }
    __pyx_v_weight = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pdt_expand", 0, 2, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1466; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.pdt_expand", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parens), __pyx_ptype_6pynini_PdtParentheses, 1, "parens", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1467; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6pynini_32pdt_expand(__pyx_self, __pyx_v_ipdt, __pyx_v_parens, __pyx_v_connect, __pyx_v_keep_parentheses, __pyx_v_weight);

  /* "pynini.pyx":1466
 * 
 * 
 * def pdt_expand(ipdt,             # <<<<<<<<<<<<<<
 *                PdtParentheses parens,
 *                bool connect=True,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_32pdt_expand(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_ipdt, struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_parens, bool __pyx_v_connect, bool __pyx_v_keep_parentheses, PyObject *__pyx_v_weight) {
  struct __pyx_obj_6pynini_Fst *__pyx_v_pdt = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_v_result = 0;
  fst::script::WeightClass __pyx_v_wc;
  fst::script::PdtExpandOptions *__pyx_v_opts;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  std::string __pyx_t_3;
  fst::script::WeightClass __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pdt_expand", 0);

  /* "pynini.pyx":1498
 *     FstOpError: Operation failed.
 *   """
 *   cdef Fst pdt = _compile_or_copy_Fst(ipdt)             # <<<<<<<<<<<<<<
 *   cdef Fst result = Fst(pdt.arc_type)
 *   cdef WeightClass wc = _get_WeightClass_or_Zero(result.weight_type, weight)
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_ipdt, 0, NULL)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1498; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_pdt = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":1499
 *   """
 *   cdef Fst pdt = _compile_or_copy_Fst(ipdt)
 *   cdef Fst result = Fst(pdt.arc_type)             # <<<<<<<<<<<<<<
 *   cdef WeightClass wc = _get_WeightClass_or_Zero(result.weight_type, weight)
 *   cdef PdtExpandOptions *opts = new PdtExpandOptions(connect,
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_pdt), __pyx_n_s_arc_type); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1499; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1499; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1499; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_result = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":1500
 *   cdef Fst pdt = _compile_or_copy_Fst(ipdt)
 *   cdef Fst result = Fst(pdt.arc_type)
 *   cdef WeightClass wc = _get_WeightClass_or_Zero(result.weight_type, weight)             # <<<<<<<<<<<<<<
 *   cdef PdtExpandOptions *opts = new PdtExpandOptions(connect,
 *                                                      keep_parentheses, wc)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_result), __pyx_n_s_weight_type); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1500; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1500; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __pyx_f_9pywrapfst__get_WeightClass_or_Zero(__pyx_t_3, __pyx_v_weight); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1500; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_wc = __pyx_t_4;

  /* "pynini.pyx":1501
 *   cdef Fst result = Fst(pdt.arc_type)
 *   cdef WeightClass wc = _get_WeightClass_or_Zero(result.weight_type, weight)
 *   cdef PdtExpandOptions *opts = new PdtExpandOptions(connect,             # <<<<<<<<<<<<<<
 *                                                      keep_parentheses, wc)
 *   PdtExpand(deref(pdt._fst), parens._parens, result._mfst.get(), deref(opts))
 */
  __pyx_v_opts = new fst::script::PdtExpandOptions(__pyx_v_connect, __pyx_v_keep_parentheses, __pyx_v_wc);

  /* "pynini.pyx":1503
 *   cdef PdtExpandOptions *opts = new PdtExpandOptions(connect,
 *                                                      keep_parentheses, wc)
 *   PdtExpand(deref(pdt._fst), parens._parens, result._mfst.get(), deref(opts))             # <<<<<<<<<<<<<<
 *   del opts
 *   result._check_pynini_op_error()
 */
  if (unlikely(((PyObject *)__pyx_v_pdt) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_fst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1503; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (unlikely(((PyObject *)__pyx_v_parens) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_parens");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1503; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  fst::script::PdtExpand((*__pyx_v_pdt->__pyx_base.__pyx_base._fst), __pyx_v_parens->_parens, __pyx_v_result->__pyx_base._mfst.get(), (*__pyx_v_opts));

  /* "pynini.pyx":1504
 *                                                      keep_parentheses, wc)
 *   PdtExpand(deref(pdt._fst), parens._parens, result._mfst.get(), deref(opts))
 *   del opts             # <<<<<<<<<<<<<<
 *   result._check_pynini_op_error()
 *   return result
 */
  delete __pyx_v_opts;

  /* "pynini.pyx":1505
 *   PdtExpand(deref(pdt._fst), parens._parens, result._mfst.get(), deref(opts))
 *   del opts
 *   result._check_pynini_op_error()             # <<<<<<<<<<<<<<
 *   return result
 * 
 */
  ((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_result->__pyx_base.__pyx_base.__pyx_vtab)->_check_pynini_op_error(__pyx_v_result); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1505; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":1506
 *   del opts
 *   result._check_pynini_op_error()
 *   return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "pynini.pyx":1466
 * 
 * 
 * def pdt_expand(ipdt,             # <<<<<<<<<<<<<<
 *                PdtParentheses parens,
 *                bool connect=True,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pynini.pdt_expand", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_pdt);
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1509
 * 
 * 
 * def pdt_replace(root, *,             # <<<<<<<<<<<<<<
 *                 pdt_parser_type=b"left",
 *                 **replacements):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_35pdt_replace(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pynini_34pdt_replace[] = "\n  pdt_replace(root, pdt_parser_type=\"left\", **replacements)\n\n  Constructive replaces arcs in an FST with other FST(s), producing a PDT.\n\n  This operation performs the dynamic replacement of arcs in one FST with\n  another FST, allowing the definition of a PDT analogues to RTNs. The output\n  PDT, defined by the combination of an FST and a PdtParentheses object\n  specifying the PDT stack symbols, is the result of recursively replacing each\n  arc in an input FST that matches some \"non-terminal\" with a corresponding\n  FST, inserting parentheses where necessary. More precisely, an arc from\n  state s to state d with nonterminal output label n in an input FST is\n  replaced by redirecting this \"call\" arc to the initial state of a copy of the\n  replacement FST and then adding \"return\" arcs from each final state of the\n  replacement FST to d in the input FST. Unlike `replace`, this operation is\n  capable of handling cyclic dependencies among replacement rules, which is\n  accomplished by adding \"push\" stack symbols to \"call\" arcs and \"pop\" stack\n  symbols to \"return\" arcs.\n\n  Args:\n    root: The root FST.\n    pdt_parser_type: A string matching a known PdtParserType. One of: \"left\"\n        (default), \"left_sr\".\n    **replacements: Keyword argument label/FST pairs to be replaced in\n       `root_fst`. For example, the keyword argument `DT=union(\"the\", \"a\")`\n       indicates that all instances of label \"DT\" should be replaced by the\n       union of \"the\" and \"a\".\n\n  Returns:\n   An (Fst, PdtParentheses) pair defining a PDT resulting from PDT replacement.\n\n  Raises:\n    FstOpError: Operation failed.\n\n  See also: `replace`.\n  ";
static PyMethodDef __pyx_mdef_6pynini_35pdt_replace = {"pdt_replace", (PyCFunction)__pyx_pw_6pynini_35pdt_replace, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pynini_34pdt_replace};
static PyObject *__pyx_pw_6pynini_35pdt_replace(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_root = 0;
  PyObject *__pyx_v_pdt_parser_type = 0;
  PyObject *__pyx_v_replacements = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pdt_replace (wrapper)", 0);
  __pyx_v_replacements = PyDict_New(); if (unlikely(!__pyx_v_replacements)) return NULL;
  __Pyx_GOTREF(__pyx_v_replacements);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_root,&__pyx_n_s_pdt_parser_type,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)__pyx_n_b_left);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_root)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (kw_args == 1) {
        const Py_ssize_t index = 1;
        PyObject* value = PyDict_GetItem(__pyx_kwds, *__pyx_pyargnames[index]);
        if (value) { values[index] = value; kw_args--; }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_replacements, values, pos_args, "pdt_replace") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1509; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_root = values[0];
    __pyx_v_pdt_parser_type = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pdt_replace", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1509; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_replacements); __pyx_v_replacements = 0;
  __Pyx_AddTraceback("pynini.pdt_replace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_34pdt_replace(__pyx_self, __pyx_v_root, __pyx_v_pdt_parser_type, __pyx_v_replacements);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_replacements);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_34pdt_replace(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root, PyObject *__pyx_v_pdt_parser_type, PyObject *__pyx_v_replacements) {
  struct __pyx_obj_6pynini_Fst *__pyx_v_root_fst = 0;
  std::string __pyx_v_arc_type;
  std::vector<__pyx_t_15pynini_includes_StringFstClassPair>  __pyx_v_pairs;
  PyObject *__pyx_v_replacement_set = NULL;
  std::string __pyx_v_nonterm;
  struct __pyx_obj_6pynini_Fst *__pyx_v_replacement = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_v_result = 0;
  struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_parens = 0;
  PyObject *__pyx_v_nt = NULL;
  PyObject *__pyx_v_rep = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  struct __pyx_opt_args_6pynini__compile_or_copy_Fst __pyx_t_11;
  PyObject *(*__pyx_t_12)(PyObject *);
  __pyx_t_15pynini_includes_StringFstClassPair __pyx_t_13;
  enum fst::PdtParserType __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pdt_replace", 0);

  /* "pynini.pyx":1548
 *   See also: `replace`.
 *   """
 *   cdef Fst root_fst = _compile_or_copy_Fst(root)             # <<<<<<<<<<<<<<
 *   cdef string arc_type = root_fst.arc_type
 *   cdef vector[StringFstClassPair] pairs
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_root, 0, NULL)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1548; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_root_fst = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":1549
 *   """
 *   cdef Fst root_fst = _compile_or_copy_Fst(root)
 *   cdef string arc_type = root_fst.arc_type             # <<<<<<<<<<<<<<
 *   cdef vector[StringFstClassPair] pairs
 *   # This has the pleasant effect of preventing Python from garbage-collecting
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_root_fst), __pyx_n_s_arc_type); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_arc_type = __pyx_t_2;

  /* "pynini.pyx":1554
 *   # these FSTs until we're ready.
 *   # TODO(kbg): Is there a better way?
 *   replacement_set = [(tostring(nt), _compile_or_copy_Fst(rep, arc_type))             # <<<<<<<<<<<<<<
 *                      for (nt, rep) in replacements.iteritems()]
 *   cdef string nonterm
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pynini.pyx":1555
 *   # TODO(kbg): Is there a better way?
 *   replacement_set = [(tostring(nt), _compile_or_copy_Fst(rep, arc_type))
 *                      for (nt, rep) in replacements.iteritems()]             # <<<<<<<<<<<<<<
 *   cdef string nonterm
 *   cdef Fst replacement
 */
  __pyx_t_4 = 0;
  __pyx_t_7 = __Pyx_dict_iterator(__pyx_v_replacements, 1, __pyx_n_s_iteritems, (&__pyx_t_5), (&__pyx_t_6)); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1555; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_3);
  __pyx_t_3 = __pyx_t_7;
  __pyx_t_7 = 0;
  while (1) {
    __pyx_t_9 = __Pyx_dict_iter_next(__pyx_t_3, __pyx_t_5, &__pyx_t_4, &__pyx_t_7, &__pyx_t_8, NULL, __pyx_t_6);
    if (unlikely(__pyx_t_9 == 0)) break;
    if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1555; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_XDECREF_SET(__pyx_v_nt, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_rep, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "pynini.pyx":1554
 *   # these FSTs until we're ready.
 *   # TODO(kbg): Is there a better way?
 *   replacement_set = [(tostring(nt), _compile_or_copy_Fst(rep, arc_type))             # <<<<<<<<<<<<<<
 *                      for (nt, rep) in replacements.iteritems()]
 *   cdef string nonterm
 */
    __pyx_t_2 = __pyx_f_9pywrapfst_tostring(__pyx_v_nt, NULL); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_8 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_t_2); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_arc_type); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_11.__pyx_n = 1;
    __pyx_t_11.arc_type = __pyx_t_7;
    __pyx_t_10 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_rep, 0, &__pyx_t_11)); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_10);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_10);
    __pyx_t_8 = 0;
    __pyx_t_10 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_7))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_replacement_set = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":1558
 *   cdef string nonterm
 *   cdef Fst replacement
 *   for (nonterm, replacement) in replacement_set:             # <<<<<<<<<<<<<<
 *     pairs.push_back(StringFstClassPair(nonterm, replacement._fst.get()))
 *   cdef Fst result = Fst(arc_type)
 */
  __pyx_t_1 = __pyx_v_replacement_set; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
  for (;;) {
    if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1558; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1558; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
      PyObject* sequence = __pyx_t_3;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1558; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_10 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_10 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_10);
      #else
      __pyx_t_7 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1558; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_10 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1558; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      #endif
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1558; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_12 = Py_TYPE(__pyx_t_8)->tp_iternext;
      index = 0; __pyx_t_7 = __pyx_t_12(__pyx_t_8); if (unlikely(!__pyx_t_7)) goto __pyx_L7_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      index = 1; __pyx_t_10 = __pyx_t_12(__pyx_t_8); if (unlikely(!__pyx_t_10)) goto __pyx_L7_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_10);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_8), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1558; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_12 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L8_unpacking_done;
      __pyx_L7_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_12 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1558; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L8_unpacking_done:;
    }
    __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_7); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1558; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (!(likely(((__pyx_t_10) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_10, __pyx_ptype_6pynini_Fst))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1558; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_nonterm = __pyx_t_2;
    __Pyx_XDECREF_SET(__pyx_v_replacement, ((struct __pyx_obj_6pynini_Fst *)__pyx_t_10));
    __pyx_t_10 = 0;

    /* "pynini.pyx":1559
 *   cdef Fst replacement
 *   for (nonterm, replacement) in replacement_set:
 *     pairs.push_back(StringFstClassPair(nonterm, replacement._fst.get()))             # <<<<<<<<<<<<<<
 *   cdef Fst result = Fst(arc_type)
 *   cdef PdtParentheses parens = PdtParentheses()
 */
    if (unlikely(((PyObject *)__pyx_v_replacement) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_fst");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1559; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    try {
      __pyx_t_13 = __pyx_t_15pynini_includes_StringFstClassPair(__pyx_v_nonterm, __pyx_v_replacement->__pyx_base.__pyx_base._fst.get());
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1559; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    try {
      __pyx_v_pairs.push_back(__pyx_t_13);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1559; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "pynini.pyx":1558
 *   cdef string nonterm
 *   cdef Fst replacement
 *   for (nonterm, replacement) in replacement_set:             # <<<<<<<<<<<<<<
 *     pairs.push_back(StringFstClassPair(nonterm, replacement._fst.get()))
 *   cdef Fst result = Fst(arc_type)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":1560
 *   for (nonterm, replacement) in replacement_set:
 *     pairs.push_back(StringFstClassPair(nonterm, replacement._fst.get()))
 *   cdef Fst result = Fst(arc_type)             # <<<<<<<<<<<<<<
 *   cdef PdtParentheses parens = PdtParentheses()
 *   PyniniPdtReplace(deref(root_fst._fst), pairs, result._mfst.get(),
 */
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_arc_type); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1560; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1560; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1560; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":1561
 *     pairs.push_back(StringFstClassPair(nonterm, replacement._fst.get()))
 *   cdef Fst result = Fst(arc_type)
 *   cdef PdtParentheses parens = PdtParentheses()             # <<<<<<<<<<<<<<
 *   PyniniPdtReplace(deref(root_fst._fst), pairs, result._mfst.get(),
 *                    addr(parens._parens),
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6pynini_PdtParentheses), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1561; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_parens = ((struct __pyx_obj_6pynini_PdtParentheses *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":1562
 *   cdef Fst result = Fst(arc_type)
 *   cdef PdtParentheses parens = PdtParentheses()
 *   PyniniPdtReplace(deref(root_fst._fst), pairs, result._mfst.get(),             # <<<<<<<<<<<<<<
 *                    addr(parens._parens),
 *                    _get_pdt_parser_type(tostring(pdt_parser_type)))
 */
  if (unlikely(((PyObject *)__pyx_v_root_fst) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_fst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1562; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pynini.pyx":1564
 *   PyniniPdtReplace(deref(root_fst._fst), pairs, result._mfst.get(),
 *                    addr(parens._parens),
 *                    _get_pdt_parser_type(tostring(pdt_parser_type)))             # <<<<<<<<<<<<<<
 *   result._check_pynini_op_error()
 *   return (result, parens)
 */
  __pyx_t_2 = __pyx_f_9pywrapfst_tostring(__pyx_v_pdt_parser_type, NULL); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_14 = __pyx_f_6pynini__get_pdt_parser_type(__pyx_t_2); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":1562
 *   cdef Fst result = Fst(arc_type)
 *   cdef PdtParentheses parens = PdtParentheses()
 *   PyniniPdtReplace(deref(root_fst._fst), pairs, result._mfst.get(),             # <<<<<<<<<<<<<<
 *                    addr(parens._parens),
 *                    _get_pdt_parser_type(tostring(pdt_parser_type)))
 */
  fst::script::PyniniPdtReplace((*__pyx_v_root_fst->__pyx_base.__pyx_base._fst), __pyx_v_pairs, __pyx_v_result->__pyx_base._mfst.get(), (&__pyx_v_parens->_parens), __pyx_t_14);

  /* "pynini.pyx":1565
 *                    addr(parens._parens),
 *                    _get_pdt_parser_type(tostring(pdt_parser_type)))
 *   result._check_pynini_op_error()             # <<<<<<<<<<<<<<
 *   return (result, parens)
 * 
 */
  ((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_result->__pyx_base.__pyx_base.__pyx_vtab)->_check_pynini_op_error(__pyx_v_result); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1565; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":1566
 *                    _get_pdt_parser_type(tostring(pdt_parser_type)))
 *   result._check_pynini_op_error()
 *   return (result, parens)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1566; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_result));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_result));
  __Pyx_INCREF(((PyObject *)__pyx_v_parens));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_parens));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_parens));
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":1509
 * 
 * 
 * def pdt_replace(root, *,             # <<<<<<<<<<<<<<
 *                 pdt_parser_type=b"left",
 *                 **replacements):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("pynini.pdt_replace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_root_fst);
  __Pyx_XDECREF(__pyx_v_replacement_set);
  __Pyx_XDECREF((PyObject *)__pyx_v_replacement);
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XDECREF((PyObject *)__pyx_v_parens);
  __Pyx_XDECREF(__pyx_v_nt);
  __Pyx_XDECREF(__pyx_v_rep);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1569
 * 
 * 
 * def pdt_reverse(ipdt, PdtParentheses parens):             # <<<<<<<<<<<<<<
 *   """
 *   pdt_reverse(ipdt, parens)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_37pdt_reverse(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pynini_36pdt_reverse[] = "\n  pdt_reverse(ipdt, parens)\n\n  Reverses a PDT.\n\n  This operation reverses an PDT. The input PDT is defined by the combination\n  of an FST and a PdtParentheses object specifying the PDT stack symbols.\n\n  Args:\n    ipdt: The FST component of the input PDT.\n    parens: A PdtParentheses object specifying the input PDT's stack symbols.\n\n  Returns:\n    The FST component of a PDT resulting from reversing the input PDT.\n  ";
static PyMethodDef __pyx_mdef_6pynini_37pdt_reverse = {"pdt_reverse", (PyCFunction)__pyx_pw_6pynini_37pdt_reverse, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pynini_36pdt_reverse};
static PyObject *__pyx_pw_6pynini_37pdt_reverse(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ipdt = 0;
  struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_parens = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pdt_reverse (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ipdt,&__pyx_n_s_parens,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ipdt)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_parens)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pdt_reverse", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1569; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "pdt_reverse") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1569; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_ipdt = values[0];
    __pyx_v_parens = ((struct __pyx_obj_6pynini_PdtParentheses *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pdt_reverse", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1569; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.pdt_reverse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parens), __pyx_ptype_6pynini_PdtParentheses, 1, "parens", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1569; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6pynini_36pdt_reverse(__pyx_self, __pyx_v_ipdt, __pyx_v_parens);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_36pdt_reverse(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_ipdt, struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_parens) {
  struct __pyx_obj_6pynini_Fst *__pyx_v_pdt = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pdt_reverse", 0);

  /* "pynini.pyx":1585
 *     The FST component of a PDT resulting from reversing the input PDT.
 *   """
 *   cdef Fst pdt = _compile_or_copy_Fst(ipdt)             # <<<<<<<<<<<<<<
 *   cdef Fst result = Fst(pdt.arc_type)
 *   PdtReverse(deref(pdt._fst), parens._parens, result._mfst.get())
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_ipdt, 0, NULL)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1585; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_pdt = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":1586
 *   """
 *   cdef Fst pdt = _compile_or_copy_Fst(ipdt)
 *   cdef Fst result = Fst(pdt.arc_type)             # <<<<<<<<<<<<<<
 *   PdtReverse(deref(pdt._fst), parens._parens, result._mfst.get())
 *   result._check_pynini_op_error()
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_pdt), __pyx_n_s_arc_type); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1586; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1586; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1586; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_result = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":1587
 *   cdef Fst pdt = _compile_or_copy_Fst(ipdt)
 *   cdef Fst result = Fst(pdt.arc_type)
 *   PdtReverse(deref(pdt._fst), parens._parens, result._mfst.get())             # <<<<<<<<<<<<<<
 *   result._check_pynini_op_error()
 *   return result
 */
  if (unlikely(((PyObject *)__pyx_v_pdt) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_fst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (unlikely(((PyObject *)__pyx_v_parens) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_parens");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  fst::script::PdtReverse((*__pyx_v_pdt->__pyx_base.__pyx_base._fst), __pyx_v_parens->_parens, __pyx_v_result->__pyx_base._mfst.get());

  /* "pynini.pyx":1588
 *   cdef Fst result = Fst(pdt.arc_type)
 *   PdtReverse(deref(pdt._fst), parens._parens, result._mfst.get())
 *   result._check_pynini_op_error()             # <<<<<<<<<<<<<<
 *   return result
 * 
 */
  ((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_result->__pyx_base.__pyx_base.__pyx_vtab)->_check_pynini_op_error(__pyx_v_result); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1588; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":1589
 *   PdtReverse(deref(pdt._fst), parens._parens, result._mfst.get())
 *   result._check_pynini_op_error()
 *   return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "pynini.pyx":1569
 * 
 * 
 * def pdt_reverse(ipdt, PdtParentheses parens):             # <<<<<<<<<<<<<<
 *   """
 *   pdt_reverse(ipdt, parens)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pynini.pdt_reverse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_pdt);
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1592
 * 
 * 
 * def pdt_shortestpath(ipdt,             # <<<<<<<<<<<<<<
 *                      PdtParentheses parens,
 *                      qt=b"fifo",
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_39pdt_shortestpath(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pynini_38pdt_shortestpath[] = "\n  pdt_shortestpath(ipdt, parens, qt=\"fifo\", keep_parentheses=False,\n                   path_gc=True)\n\n  Computes the shortest path through a bounded-stack PDT.\n\n  This operation computes the shortest path through a PDT. The input PDT is\n  defined by the combination of an FST and a PdtParentheses object specifying\n  the PDT stack symbols.\n\n  Args:\n    ipdt: The FST component of an input PDT.\n    parens: A PdtParentheses object specifying the input PDT's stack symbols.\n    qt: A string matching a known queue type; one of: \"fifo\" (default), \"lifo\",\n        \"state\".\n    keep_parentheses: Should the output FST preserve parentheses arcs?\n    path_gc: Should shortest path data be garbage-collected?\n\n  Returns:\n    A string FST representing the shortest path.\n\n  Raises:\n    FstOpError: Operation failed.\n  ";
static PyMethodDef __pyx_mdef_6pynini_39pdt_shortestpath = {"pdt_shortestpath", (PyCFunction)__pyx_pw_6pynini_39pdt_shortestpath, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pynini_38pdt_shortestpath};
static PyObject *__pyx_pw_6pynini_39pdt_shortestpath(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ipdt = 0;
  struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_parens = 0;
  PyObject *__pyx_v_qt = 0;
  bool __pyx_v_keep_parentheses;
  bool __pyx_v_path_gc;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pdt_shortestpath (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ipdt,&__pyx_n_s_parens,&__pyx_n_s_qt,&__pyx_n_s_keep_parentheses,&__pyx_n_s_path_gc,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[2] = ((PyObject *)__pyx_n_b_fifo);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ipdt)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_parens)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pdt_shortestpath", 0, 2, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1592; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_qt);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_keep_parentheses);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_path_gc);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "pdt_shortestpath") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1592; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_ipdt = values[0];
    __pyx_v_parens = ((struct __pyx_obj_6pynini_PdtParentheses *)values[1]);
    __pyx_v_qt = values[2];
    if (values[3]) {
      __pyx_v_keep_parentheses = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_keep_parentheses == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1595; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {

      /* "pynini.pyx":1595
 *                      PdtParentheses parens,
 *                      qt=b"fifo",
 *                      bool keep_parentheses=False,             # <<<<<<<<<<<<<<
 *                      bool path_gc=True):
 *   """
 */
      __pyx_v_keep_parentheses = ((bool)0);
    }
    if (values[4]) {
      __pyx_v_path_gc = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_path_gc == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1596; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {

      /* "pynini.pyx":1596
 *                      qt=b"fifo",
 *                      bool keep_parentheses=False,
 *                      bool path_gc=True):             # <<<<<<<<<<<<<<
 *   """
 *   pdt_shortestpath(ipdt, parens, qt="fifo", keep_parentheses=False,
 */
      __pyx_v_path_gc = ((bool)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pdt_shortestpath", 0, 2, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1592; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.pdt_shortestpath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parens), __pyx_ptype_6pynini_PdtParentheses, 1, "parens", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1593; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6pynini_38pdt_shortestpath(__pyx_self, __pyx_v_ipdt, __pyx_v_parens, __pyx_v_qt, __pyx_v_keep_parentheses, __pyx_v_path_gc);

  /* "pynini.pyx":1592
 * 
 * 
 * def pdt_shortestpath(ipdt,             # <<<<<<<<<<<<<<
 *                      PdtParentheses parens,
 *                      qt=b"fifo",
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_38pdt_shortestpath(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_ipdt, struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_parens, PyObject *__pyx_v_qt, bool __pyx_v_keep_parentheses, bool __pyx_v_path_gc) {
  struct __pyx_obj_6pynini_Fst *__pyx_v_pdt = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_v_result = 0;
  std::unique_ptr<fst::script::PdtShortestPathOptions>  __pyx_v_opts;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  std::string __pyx_t_3;
  enum fst::QueueType __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pdt_shortestpath", 0);

  /* "pynini.pyx":1621
 *     FstOpError: Operation failed.
 *   """
 *   cdef Fst pdt = _compile_or_copy_Fst(ipdt)             # <<<<<<<<<<<<<<
 *   cdef Fst result = Fst(pdt.arc_type)
 *   cdef unique_ptr[PdtShortestPathOptions] opts
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_ipdt, 0, NULL)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1621; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_pdt = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":1622
 *   """
 *   cdef Fst pdt = _compile_or_copy_Fst(ipdt)
 *   cdef Fst result = Fst(pdt.arc_type)             # <<<<<<<<<<<<<<
 *   cdef unique_ptr[PdtShortestPathOptions] opts
 *   opts.reset(new PdtShortestPathOptions(
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_pdt), __pyx_n_s_arc_type); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1622; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1622; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1622; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_result = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":1625
 *   cdef unique_ptr[PdtShortestPathOptions] opts
 *   opts.reset(new PdtShortestPathOptions(
 *         _get_queue_type(tostring(qt)), keep_parentheses, path_gc))             # <<<<<<<<<<<<<<
 *   PdtShortestPath(deref(pdt._fst), parens._parens, result._mfst.get(),
 *                   deref(opts))
 */
  __pyx_t_3 = __pyx_f_9pywrapfst_tostring(__pyx_v_qt, NULL); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1625; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __pyx_f_9pywrapfst__get_queue_type(__pyx_t_3); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1625; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":1624
 *   cdef Fst result = Fst(pdt.arc_type)
 *   cdef unique_ptr[PdtShortestPathOptions] opts
 *   opts.reset(new PdtShortestPathOptions(             # <<<<<<<<<<<<<<
 *         _get_queue_type(tostring(qt)), keep_parentheses, path_gc))
 *   PdtShortestPath(deref(pdt._fst), parens._parens, result._mfst.get(),
 */
  __pyx_v_opts.reset(new fst::script::PdtShortestPathOptions(__pyx_t_4, __pyx_v_keep_parentheses, __pyx_v_path_gc));

  /* "pynini.pyx":1626
 *   opts.reset(new PdtShortestPathOptions(
 *         _get_queue_type(tostring(qt)), keep_parentheses, path_gc))
 *   PdtShortestPath(deref(pdt._fst), parens._parens, result._mfst.get(),             # <<<<<<<<<<<<<<
 *                   deref(opts))
 *   result._check_pynini_op_error()
 */
  if (unlikely(((PyObject *)__pyx_v_pdt) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_fst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1626; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (unlikely(((PyObject *)__pyx_v_parens) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_parens");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1626; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pynini.pyx":1627
 *         _get_queue_type(tostring(qt)), keep_parentheses, path_gc))
 *   PdtShortestPath(deref(pdt._fst), parens._parens, result._mfst.get(),
 *                   deref(opts))             # <<<<<<<<<<<<<<
 *   result._check_pynini_op_error()
 *   return result
 */
  fst::script::PdtShortestPath((*__pyx_v_pdt->__pyx_base.__pyx_base._fst), __pyx_v_parens->_parens, __pyx_v_result->__pyx_base._mfst.get(), (*__pyx_v_opts));

  /* "pynini.pyx":1628
 *   PdtShortestPath(deref(pdt._fst), parens._parens, result._mfst.get(),
 *                   deref(opts))
 *   result._check_pynini_op_error()             # <<<<<<<<<<<<<<
 *   return result
 * 
 */
  ((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_result->__pyx_base.__pyx_base.__pyx_vtab)->_check_pynini_op_error(__pyx_v_result); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1628; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":1629
 *                   deref(opts))
 *   result._check_pynini_op_error()
 *   return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "pynini.pyx":1592
 * 
 * 
 * def pdt_shortestpath(ipdt,             # <<<<<<<<<<<<<<
 *                      PdtParentheses parens,
 *                      qt=b"fifo",
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pynini.pdt_shortestpath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_pdt);
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1656
 *   cdef vector[int64] _assign
 * 
 *   def __repr__(self):             # <<<<<<<<<<<<<<
 *     return "<MPdtParentheses at 0x{:x}>".format(id(self))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_15MPdtParentheses_1__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pynini_15MPdtParentheses_1__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_15MPdtParentheses___repr__(((struct __pyx_obj_6pynini_MPdtParentheses *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_15MPdtParentheses___repr__(struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "pynini.pyx":1657
 * 
 *   def __repr__(self):
 *     return "<MPdtParentheses at 0x{:x}>".format(id(self))             # <<<<<<<<<<<<<<
 * 
 *   def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_MPdtParentheses_at_0x_x, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_id, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":1656
 *   cdef vector[int64] _assign
 * 
 *   def __repr__(self):             # <<<<<<<<<<<<<<
 *     return "<MPdtParentheses at 0x{:x}>".format(id(self))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynini.MPdtParentheses.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1659
 *     return "<MPdtParentheses at 0x{:x}>".format(id(self))
 * 
 *   def __len__(self):             # <<<<<<<<<<<<<<
 *     return self._parens.size()
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_6pynini_15MPdtParentheses_3__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_6pynini_15MPdtParentheses_3__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_15MPdtParentheses_2__len__(((struct __pyx_obj_6pynini_MPdtParentheses *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_6pynini_15MPdtParentheses_2__len__(struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "pynini.pyx":1660
 * 
 *   def __len__(self):
 *     return self._parens.size()             # <<<<<<<<<<<<<<
 * 
 *   def __iter__(self):
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_parens");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1660; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_r = __pyx_v_self->_parens.size();
  goto __pyx_L0;

  /* "pynini.pyx":1659
 *     return "<MPdtParentheses at 0x{:x}>".format(id(self))
 * 
 *   def __len__(self):             # <<<<<<<<<<<<<<
 *     return self._parens.size()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pynini.MPdtParentheses.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6pynini_15MPdtParentheses_6generator1(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "pynini.pyx":1662
 *     return self._parens.size()
 * 
 *   def __iter__(self):             # <<<<<<<<<<<<<<
 *     cdef size_t i = 0
 *     for i in xrange(self._parens.size()):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_15MPdtParentheses_5__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pynini_15MPdtParentheses_5__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_15MPdtParentheses_4__iter__(((struct __pyx_obj_6pynini_MPdtParentheses *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_15MPdtParentheses_4__iter__(struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_self) {
  struct __pyx_obj_6pynini___pyx_scope_struct_8___iter__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 0);
  __pyx_cur_scope = (struct __pyx_obj_6pynini___pyx_scope_struct_8___iter__ *)__pyx_tp_new_6pynini___pyx_scope_struct_8___iter__(__pyx_ptype_6pynini___pyx_scope_struct_8___iter__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6pynini_15MPdtParentheses_6generator1, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter, __pyx_n_s_MPdtParentheses___iter); if (unlikely(!gen)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pynini.MPdtParentheses.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6pynini_15MPdtParentheses_6generator1(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6pynini___pyx_scope_struct_8___iter__ *__pyx_cur_scope = ((struct __pyx_obj_6pynini___pyx_scope_struct_8___iter__ *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":1663
 * 
 *   def __iter__(self):
 *     cdef size_t i = 0             # <<<<<<<<<<<<<<
 *     for i in xrange(self._parens.size()):
 *       yield (self._parens[i].first, self._parens[i].second, self._assign[i])
 */
  __pyx_cur_scope->__pyx_v_i = 0;

  /* "pynini.pyx":1664
 *   def __iter__(self):
 *     cdef size_t i = 0
 *     for i in xrange(self._parens.size()):             # <<<<<<<<<<<<<<
 *       yield (self._parens[i].first, self._parens[i].second, self._assign[i])
 * 
 */
  if (unlikely(((PyObject *)__pyx_cur_scope->__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_parens");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1664; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __pyx_cur_scope->__pyx_v_self->_parens.size();
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_cur_scope->__pyx_v_i = __pyx_t_2;

    /* "pynini.pyx":1665
 *     cdef size_t i = 0
 *     for i in xrange(self._parens.size()):
 *       yield (self._parens[i].first, self._parens[i].second, self._assign[i])             # <<<<<<<<<<<<<<
 * 
 *   cpdef MPdtParentheses copy(self):
 */
    if (unlikely(((PyObject *)__pyx_cur_scope->__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_parens");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_3 = __Pyx_PyInt_From_int64_t((__pyx_cur_scope->__pyx_v_self->_parens[__pyx_cur_scope->__pyx_v_i]).first); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(((PyObject *)__pyx_cur_scope->__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_parens");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_4 = __Pyx_PyInt_From_int64_t((__pyx_cur_scope->__pyx_v_self->_parens[__pyx_cur_scope->__pyx_v_i]).second); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(((PyObject *)__pyx_cur_scope->__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_assign");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_5 = __Pyx_PyInt_From_int64_t((__pyx_cur_scope->__pyx_v_self->_assign[__pyx_cur_scope->__pyx_v_i])); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_5);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pynini.pyx":1662
 *     return self._parens.size()
 * 
 *   def __iter__(self):             # <<<<<<<<<<<<<<
 *     cdef size_t i = 0
 *     for i in xrange(self._parens.size()):
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1667
 *       yield (self._parens[i].first, self._parens[i].second, self._assign[i])
 * 
 *   cpdef MPdtParentheses copy(self):             # <<<<<<<<<<<<<<
 *     """
 *     copy(self)
 */

static PyObject *__pyx_pw_6pynini_15MPdtParentheses_8copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static struct __pyx_obj_6pynini_MPdtParentheses *__pyx_f_6pynini_15MPdtParentheses_copy(struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_self, int __pyx_skip_dispatch) {
  struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_result = 0;
  struct __pyx_obj_6pynini_MPdtParentheses *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  std::vector<__pyx_t_15pynini_includes_LabelPair>  __pyx_t_5;
  std::vector<__pyx_t_10basictypes_int64>  __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_copy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_15MPdtParentheses_8copy)) {
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_6pynini_MPdtParentheses))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_r = ((struct __pyx_obj_6pynini_MPdtParentheses *)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":1676
 *       A deep copy of the MPdtParentheses object.
 *     """
 *     cpdef MPdtParentheses result = MPdtParentheses.__new__(MPdtParentheses)             # <<<<<<<<<<<<<<
 *     result._parens = self._parens
 *     result._assign = self._assign
 */
  __pyx_t_1 = __pyx_tp_new_6pynini_MPdtParentheses(((PyTypeObject *)__pyx_ptype_6pynini_MPdtParentheses), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1676; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_6pynini_MPdtParentheses)))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1676; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_result = ((struct __pyx_obj_6pynini_MPdtParentheses *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":1677
 *     """
 *     cpdef MPdtParentheses result = MPdtParentheses.__new__(MPdtParentheses)
 *     result._parens = self._parens             # <<<<<<<<<<<<<<
 *     result._assign = self._assign
 *     return result
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_parens");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1677; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_5 = __pyx_v_self->_parens;
  if (unlikely(((PyObject *)__pyx_v_result) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_parens");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1677; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_result->_parens = __pyx_t_5;

  /* "pynini.pyx":1678
 *     cpdef MPdtParentheses result = MPdtParentheses.__new__(MPdtParentheses)
 *     result._parens = self._parens
 *     result._assign = self._assign             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_assign");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1678; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_6 = __pyx_v_self->_assign;
  if (unlikely(((PyObject *)__pyx_v_result) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_assign");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1678; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_result->_assign = __pyx_t_6;

  /* "pynini.pyx":1679
 *     result._parens = self._parens
 *     result._assign = self._assign
 *     return result             # <<<<<<<<<<<<<<
 * 
 *   cpdef void add_triple(self, int64 push, int64 pop, int64 assignment):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "pynini.pyx":1667
 *       yield (self._parens[i].first, self._parens[i].second, self._assign[i])
 * 
 *   cpdef MPdtParentheses copy(self):             # <<<<<<<<<<<<<<
 *     """
 *     copy(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynini.MPdtParentheses.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_15MPdtParentheses_8copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pynini_15MPdtParentheses_7copy[] = "\n    copy(self)\n\n    Makes a copy of this MPdtParentheses object.\n\n    Returns:\n      A deep copy of the MPdtParentheses object.\n    ";
static PyObject *__pyx_pw_6pynini_15MPdtParentheses_8copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_15MPdtParentheses_7copy(((struct __pyx_obj_6pynini_MPdtParentheses *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_15MPdtParentheses_7copy(struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini_15MPdtParentheses_copy(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.MPdtParentheses.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1681
 *     return result
 * 
 *   cpdef void add_triple(self, int64 push, int64 pop, int64 assignment):             # <<<<<<<<<<<<<<
 *     """
 *     add_triple(push, pop, assignment)
 */

static PyObject *__pyx_pw_6pynini_15MPdtParentheses_10add_triple(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static void __pyx_f_6pynini_15MPdtParentheses_add_triple(struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_self, __pyx_t_10basictypes_int64 __pyx_v_push, __pyx_t_10basictypes_int64 __pyx_v_pop, __pyx_t_10basictypes_int64 __pyx_v_assignment, int __pyx_skip_dispatch) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  __pyx_t_15pynini_includes_LabelPair __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_triple", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_triple); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1681; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_15MPdtParentheses_10add_triple)) {
      __pyx_t_3 = __Pyx_PyInt_From_int64_t(__pyx_v_push); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1681; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyInt_From_int64_t(__pyx_v_pop); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1681; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyInt_From_int64_t(__pyx_v_assignment); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1681; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_6 = __pyx_t_1; __pyx_t_7 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_8 = 1;
        }
      }
      __pyx_t_9 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1681; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_8, __pyx_t_5);
      __pyx_t_3 = 0;
      __pyx_t_4 = 0;
      __pyx_t_5 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1681; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":1694
 *           is assigned to.
 *     """
 *     self._parens.push_back(LabelPair(push, pop))             # <<<<<<<<<<<<<<
 *     self._assign.push_back(assignment)
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_parens");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  try {
    __pyx_t_10 = __pyx_t_15pynini_includes_LabelPair(__pyx_v_push, __pyx_v_pop);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  try {
    __pyx_v_self->_parens.push_back(__pyx_t_10);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pynini.pyx":1695
 *     """
 *     self._parens.push_back(LabelPair(push, pop))
 *     self._assign.push_back(assignment)             # <<<<<<<<<<<<<<
 * 
 *   @classmethod
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_assign");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1695; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  try {
    __pyx_v_self->_assign.push_back(__pyx_v_assignment);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1695; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pynini.pyx":1681
 *     return result
 * 
 *   cpdef void add_triple(self, int64 push, int64 pop, int64 assignment):             # <<<<<<<<<<<<<<
 *     """
 *     add_triple(push, pop, assignment)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_WriteUnraisable("pynini.MPdtParentheses.add_triple", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_15MPdtParentheses_10add_triple(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pynini_15MPdtParentheses_9add_triple[] = "\n    add_triple(push, pop, assignment)\n\n    Adds a triple of (left parenthesis, right parenthesis, stack assignment)\n    triples to the object.\n\n    Args:\n      push: An FST arc label to be interpreted as a \"push\" operation.\n      pop: An FST arc label to be interpreted as a \"pop\" operation.\n      assignment: An FST arc label indicating what stack the parentheses pair\n          is assigned to.\n    ";
static PyObject *__pyx_pw_6pynini_15MPdtParentheses_10add_triple(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_10basictypes_int64 __pyx_v_push;
  __pyx_t_10basictypes_int64 __pyx_v_pop;
  __pyx_t_10basictypes_int64 __pyx_v_assignment;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_triple (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_push,&__pyx_n_s_pop,&__pyx_n_s_assignment,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_push)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pop)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_triple", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1681; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_assignment)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_triple", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1681; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_triple") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1681; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_push = __Pyx_PyInt_As_int64_t(values[0]); if (unlikely((__pyx_v_push == (int64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1681; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_pop = __Pyx_PyInt_As_int64_t(values[1]); if (unlikely((__pyx_v_pop == (int64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1681; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_assignment = __Pyx_PyInt_As_int64_t(values[2]); if (unlikely((__pyx_v_assignment == (int64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1681; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_triple", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1681; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.MPdtParentheses.add_triple", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_15MPdtParentheses_9add_triple(((struct __pyx_obj_6pynini_MPdtParentheses *)__pyx_v_self), __pyx_v_push, __pyx_v_pop, __pyx_v_assignment);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_15MPdtParentheses_9add_triple(struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_self, __pyx_t_10basictypes_int64 __pyx_v_push, __pyx_t_10basictypes_int64 __pyx_v_pop, __pyx_t_10basictypes_int64 __pyx_v_assignment) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_triple", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_f_6pynini_15MPdtParentheses_add_triple(__pyx_v_self, __pyx_v_push, __pyx_v_pop, __pyx_v_assignment, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1681; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.MPdtParentheses.add_triple", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1698
 * 
 *   @classmethod
 *   def read(cls, filename):             # <<<<<<<<<<<<<<
 *     """
 *     MPdtParentheses.read(filename)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_15MPdtParentheses_12read(PyObject *__pyx_v_cls, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_6pynini_15MPdtParentheses_11read[] = "\n    MPdtParentheses.read(filename)\n\n    Reads parentheses/assignment triples from a text file.\n\n    This class method creates a new PdtParentheses object from a pairs of\n    integer labels in a text file.\n\n    Args:\n      filename: The string location of the input file.\n\n    Returns:\n      A new MPdtParentheses instance.\n\n    Raises:\n      FstIOError: Read failed.\n    ";
static PyObject *__pyx_pw_6pynini_15MPdtParentheses_12read(PyObject *__pyx_v_cls, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_15MPdtParentheses_11read(((PyTypeObject*)__pyx_v_cls), ((PyObject *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_15MPdtParentheses_11read(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_filename) {
  struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read", 0);

  /* "pynini.pyx":1716
 *       FstIOError: Read failed.
 *     """
 *     cdef MPdtParentheses result = MPdtParentheses.__new__(MPdtParentheses)             # <<<<<<<<<<<<<<
 *     if not ReadLabelTriples[int64](tostring(filename), addr(result._parens),
 *                                    addr(result._assign), False):
 */
  __pyx_t_1 = __pyx_tp_new_6pynini_MPdtParentheses(((PyTypeObject *)__pyx_ptype_6pynini_MPdtParentheses), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1716; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_6pynini_MPdtParentheses)))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1716; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_result = ((struct __pyx_obj_6pynini_MPdtParentheses *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":1717
 *     """
 *     cdef MPdtParentheses result = MPdtParentheses.__new__(MPdtParentheses)
 *     if not ReadLabelTriples[int64](tostring(filename), addr(result._parens),             # <<<<<<<<<<<<<<
 *                                    addr(result._assign), False):
 *       raise FstIOError("Read failed: {!r}".format(filename))
 */
  __pyx_t_2 = __pyx_f_9pywrapfst_tostring(__pyx_v_filename, NULL); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1717; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(((PyObject *)__pyx_v_result) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_parens");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1717; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pynini.pyx":1718
 *     cdef MPdtParentheses result = MPdtParentheses.__new__(MPdtParentheses)
 *     if not ReadLabelTriples[int64](tostring(filename), addr(result._parens),
 *                                    addr(result._assign), False):             # <<<<<<<<<<<<<<
 *       raise FstIOError("Read failed: {!r}".format(filename))
 *     return result
 */
  if (unlikely(((PyObject *)__pyx_v_result) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_assign");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1718; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pynini.pyx":1717
 *     """
 *     cdef MPdtParentheses result = MPdtParentheses.__new__(MPdtParentheses)
 *     if not ReadLabelTriples[int64](tostring(filename), addr(result._parens),             # <<<<<<<<<<<<<<
 *                                    addr(result._assign), False):
 *       raise FstIOError("Read failed: {!r}".format(filename))
 */
  __pyx_t_3 = ((!(fst::ReadLabelTriples<__pyx_t_10basictypes_int64>(__pyx_t_2, (&__pyx_v_result->_parens), (&__pyx_v_result->_assign), 0) != 0)) != 0);
  if (__pyx_t_3) {

    /* "pynini.pyx":1719
 *     if not ReadLabelTriples[int64](tostring(filename), addr(result._parens),
 *                                    addr(result._assign), False):
 *       raise FstIOError("Read failed: {!r}".format(filename))             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstIOError); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Read_failed_r, __pyx_n_s_format); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_filename); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
    } else {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
      __Pyx_INCREF(__pyx_v_filename);
      __Pyx_GIVEREF(__pyx_v_filename);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_v_filename);
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pynini.pyx":1717
 *     """
 *     cdef MPdtParentheses result = MPdtParentheses.__new__(MPdtParentheses)
 *     if not ReadLabelTriples[int64](tostring(filename), addr(result._parens),             # <<<<<<<<<<<<<<
 *                                    addr(result._assign), False):
 *       raise FstIOError("Read failed: {!r}".format(filename))
 */
  }

  /* "pynini.pyx":1720
 *                                    addr(result._assign), False):
 *       raise FstIOError("Read failed: {!r}".format(filename))
 *     return result             # <<<<<<<<<<<<<<
 * 
 *   cpdef void write(self, filename) except *:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "pynini.pyx":1698
 * 
 *   @classmethod
 *   def read(cls, filename):             # <<<<<<<<<<<<<<
 *     """
 *     MPdtParentheses.read(filename)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pynini.MPdtParentheses.read", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1722
 *     return result
 * 
 *   cpdef void write(self, filename) except *:             # <<<<<<<<<<<<<<
 *     """
 *     write(filename)
 */

static PyObject *__pyx_pw_6pynini_15MPdtParentheses_14write(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static void __pyx_f_6pynini_15MPdtParentheses_write(struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_self, PyObject *__pyx_v_filename, int __pyx_skip_dispatch) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  std::string __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_write); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1722; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_15MPdtParentheses_14write)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_filename); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1722; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1722; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(__pyx_v_filename);
        __Pyx_GIVEREF(__pyx_v_filename);
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_filename);
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1722; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":1736
 *       FstIOError: Write failed.
 *     """
 *     if not WriteLabelTriples[int64](tostring(filename), self._parens,             # <<<<<<<<<<<<<<
 *                                     self._assign):
 *       raise FstIOError("Write failed: {!r}".format(filename))
 */
  __pyx_t_6 = __pyx_f_9pywrapfst_tostring(__pyx_v_filename, NULL); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1736; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_parens");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1736; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pynini.pyx":1737
 *     """
 *     if not WriteLabelTriples[int64](tostring(filename), self._parens,
 *                                     self._assign):             # <<<<<<<<<<<<<<
 *       raise FstIOError("Write failed: {!r}".format(filename))
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_assign");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1737; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pynini.pyx":1736
 *       FstIOError: Write failed.
 *     """
 *     if not WriteLabelTriples[int64](tostring(filename), self._parens,             # <<<<<<<<<<<<<<
 *                                     self._assign):
 *       raise FstIOError("Write failed: {!r}".format(filename))
 */
  __pyx_t_7 = ((!(fst::WriteLabelTriples<__pyx_t_10basictypes_int64>(__pyx_t_6, __pyx_v_self->_parens, __pyx_v_self->_assign) != 0)) != 0);
  if (__pyx_t_7) {

    /* "pynini.pyx":1738
 *     if not WriteLabelTriples[int64](tostring(filename), self._parens,
 *                                     self._assign):
 *       raise FstIOError("Write failed: {!r}".format(filename))             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstIOError); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1738; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Write_failed_r, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1738; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_filename); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1738; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1738; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_INCREF(__pyx_v_filename);
      __Pyx_GIVEREF(__pyx_v_filename);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_v_filename);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1738; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1738; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1738; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1738; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1738; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pynini.pyx":1736
 *       FstIOError: Write failed.
 *     """
 *     if not WriteLabelTriples[int64](tostring(filename), self._parens,             # <<<<<<<<<<<<<<
 *                                     self._assign):
 *       raise FstIOError("Write failed: {!r}".format(filename))
 */
  }

  /* "pynini.pyx":1722
 *     return result
 * 
 *   cpdef void write(self, filename) except *:             # <<<<<<<<<<<<<<
 *     """
 *     write(filename)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pynini.MPdtParentheses.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_15MPdtParentheses_14write(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_6pynini_15MPdtParentheses_13write[] = "\n    write(filename)\n\n    Writes parentheses triples to text file.\n\n    This method writes the MPdtParentheses object to a text file.\n\n    Args:\n      filename: The string location of the output file.\n\n    Raises:\n      FstIOError: Write failed.\n    ";
static PyObject *__pyx_pw_6pynini_15MPdtParentheses_14write(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_15MPdtParentheses_13write(((struct __pyx_obj_6pynini_MPdtParentheses *)__pyx_v_self), ((PyObject *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_15MPdtParentheses_13write(struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_f_6pynini_15MPdtParentheses_write(__pyx_v_self, __pyx_v_filename, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1722; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __Pyx_void_to_None(NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1722; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.MPdtParentheses.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1741
 * 
 * 
 * cpdef Fst mpdt_compose(ifst1, ifst2, MPdtParentheses parens, cf=b"paren",             # <<<<<<<<<<<<<<
 *                        bool left_mpdt=True):
 *   """
 */

static PyObject *__pyx_pw_6pynini_41mpdt_compose(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static struct __pyx_obj_6pynini_Fst *__pyx_f_6pynini_mpdt_compose(PyObject *__pyx_v_ifst1, PyObject *__pyx_v_ifst2, struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_parens, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_6pynini_mpdt_compose *__pyx_optional_args) {
  PyObject *__pyx_v_cf = ((PyObject *)__pyx_n_b_paren);

  /* "pynini.pyx":1742
 * 
 * cpdef Fst mpdt_compose(ifst1, ifst2, MPdtParentheses parens, cf=b"paren",
 *                        bool left_mpdt=True):             # <<<<<<<<<<<<<<
 *   """
 *   mpdt_compose(ifst1, ifst2, parens, cf="paren", left_mpdt=True)
 */
  bool __pyx_v_left_mpdt = ((bool)1);
  struct __pyx_obj_6pynini_Fst *__pyx_v_lhs = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_v_rhs = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_v_result = 0;
  enum fst::PdtComposeFilter __pyx_v_typed_cf;
  fst::MPdtComposeOptions *__pyx_v_opts;
  struct __pyx_obj_6pynini_Fst *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  struct __pyx_opt_args_6pynini__compile_or_copy_Fst __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  std::string __pyx_t_6;
  enum fst::PdtComposeFilter __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mpdt_compose", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_cf = __pyx_optional_args->cf;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_left_mpdt = __pyx_optional_args->left_mpdt;
      }
    }
  }

  /* "pynini.pyx":1776
 *   See also: `compose`.
 *   """
 *   cdef Fst lhs = _compile_or_copy_Fst(ifst1)             # <<<<<<<<<<<<<<
 *   cdef Fst rhs = _compile_or_copy_Fst(ifst2, lhs.arc_type)
 *   lhs.arcsort(sort_type="olabel")
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_ifst1, 0, NULL)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1776; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_lhs = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":1777
 *   """
 *   cdef Fst lhs = _compile_or_copy_Fst(ifst1)
 *   cdef Fst rhs = _compile_or_copy_Fst(ifst2, lhs.arc_type)             # <<<<<<<<<<<<<<
 *   lhs.arcsort(sort_type="olabel")
 *   rhs.arcsort(sort_type="ilabel")
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_lhs), __pyx_n_s_arc_type); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1777; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3.__pyx_n = 1;
  __pyx_t_3.arc_type = __pyx_t_1;
  __pyx_t_2 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_ifst2, 0, &__pyx_t_3)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1777; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_rhs = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pynini.pyx":1778
 *   cdef Fst lhs = _compile_or_copy_Fst(ifst1)
 *   cdef Fst rhs = _compile_or_copy_Fst(ifst2, lhs.arc_type)
 *   lhs.arcsort(sort_type="olabel")             # <<<<<<<<<<<<<<
 *   rhs.arcsort(sort_type="ilabel")
 *   if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_lhs), __pyx_n_s_arcsort); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_sort_type, __pyx_n_s_olabel) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pynini.pyx":1779
 *   cdef Fst rhs = _compile_or_copy_Fst(ifst2, lhs.arc_type)
 *   lhs.arcsort(sort_type="olabel")
 *   rhs.arcsort(sort_type="ilabel")             # <<<<<<<<<<<<<<
 *   if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 *                       MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS):
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_rhs), __pyx_n_s_arcsort); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1779; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1779; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_sort_type, __pyx_n_s_ilabel) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1779; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1779; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":1780
 *   lhs.arcsort(sort_type="olabel")
 *   rhs.arcsort(sort_type="ilabel")
 *   if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),             # <<<<<<<<<<<<<<
 *                       MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS):
 *     raise FstSymbolTableMergeError(
 */
  if (unlikely(((PyObject *)__pyx_v_lhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_mfst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1780; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (unlikely(((PyObject *)__pyx_v_rhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_mfst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1780; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pynini.pyx":1781
 *   rhs.arcsort(sort_type="ilabel")
 *   if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 *                       MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS):             # <<<<<<<<<<<<<<
 *     raise FstSymbolTableMergeError(
 *         "Unable to resolve symbol table conflict without relabeling")
 */
  __pyx_t_5 = ((!(fst::script::MergeSymbols(__pyx_v_lhs->__pyx_base._mfst.get(), __pyx_v_rhs->__pyx_base._mfst.get(), fst::MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS) != 0)) != 0);

  /* "pynini.pyx":1780
 *   lhs.arcsort(sort_type="olabel")
 *   rhs.arcsort(sort_type="ilabel")
 *   if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),             # <<<<<<<<<<<<<<
 *                       MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS):
 *     raise FstSymbolTableMergeError(
 */
  if (__pyx_t_5) {

    /* "pynini.pyx":1782
 *   if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 *                       MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS):
 *     raise FstSymbolTableMergeError(             # <<<<<<<<<<<<<<
 *         "Unable to resolve symbol table conflict without relabeling")
 *   cdef Fst result = Fst(lhs.arc_type)
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstSymbolTableMergeError); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1782; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1782; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1782; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pynini.pyx":1780
 *   lhs.arcsort(sort_type="olabel")
 *   rhs.arcsort(sort_type="ilabel")
 *   if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),             # <<<<<<<<<<<<<<
 *                       MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS):
 *     raise FstSymbolTableMergeError(
 */
  }

  /* "pynini.pyx":1784
 *     raise FstSymbolTableMergeError(
 *         "Unable to resolve symbol table conflict without relabeling")
 *   cdef Fst result = Fst(lhs.arc_type)             # <<<<<<<<<<<<<<
 *   cdef PdtComposeFilter typed_cf = _get_pdt_compose_filter(tostring(cf))
 *   cdef MPdtComposeOptions *opts = new MPdtComposeOptions(True, typed_cf)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_lhs), __pyx_n_s_arc_type); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1784; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1784; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1784; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_result = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":1785
 *         "Unable to resolve symbol table conflict without relabeling")
 *   cdef Fst result = Fst(lhs.arc_type)
 *   cdef PdtComposeFilter typed_cf = _get_pdt_compose_filter(tostring(cf))             # <<<<<<<<<<<<<<
 *   cdef MPdtComposeOptions *opts = new MPdtComposeOptions(True, typed_cf)
 *   MPdtCompose(deref(lhs._fst), deref(rhs._fst), parens._parens,
 */
  __pyx_t_6 = __pyx_f_9pywrapfst_tostring(__pyx_v_cf, NULL); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = __pyx_f_6pynini__get_pdt_compose_filter(__pyx_t_6); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_typed_cf = __pyx_t_7;

  /* "pynini.pyx":1786
 *   cdef Fst result = Fst(lhs.arc_type)
 *   cdef PdtComposeFilter typed_cf = _get_pdt_compose_filter(tostring(cf))
 *   cdef MPdtComposeOptions *opts = new MPdtComposeOptions(True, typed_cf)             # <<<<<<<<<<<<<<
 *   MPdtCompose(deref(lhs._fst), deref(rhs._fst), parens._parens,
 *               parens._assign, result._mfst.get(), deref(opts), left_mpdt)
 */
  __pyx_v_opts = new fst::MPdtComposeOptions(1, __pyx_v_typed_cf);

  /* "pynini.pyx":1787
 *   cdef PdtComposeFilter typed_cf = _get_pdt_compose_filter(tostring(cf))
 *   cdef MPdtComposeOptions *opts = new MPdtComposeOptions(True, typed_cf)
 *   MPdtCompose(deref(lhs._fst), deref(rhs._fst), parens._parens,             # <<<<<<<<<<<<<<
 *               parens._assign, result._mfst.get(), deref(opts), left_mpdt)
 *   del opts
 */
  if (unlikely(((PyObject *)__pyx_v_lhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_fst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1787; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (unlikely(((PyObject *)__pyx_v_rhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_fst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1787; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (unlikely(((PyObject *)__pyx_v_parens) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_parens");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1787; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pynini.pyx":1788
 *   cdef MPdtComposeOptions *opts = new MPdtComposeOptions(True, typed_cf)
 *   MPdtCompose(deref(lhs._fst), deref(rhs._fst), parens._parens,
 *               parens._assign, result._mfst.get(), deref(opts), left_mpdt)             # <<<<<<<<<<<<<<
 *   del opts
 *   if not result.num_states:
 */
  if (unlikely(((PyObject *)__pyx_v_parens) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_assign");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1788; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pynini.pyx":1787
 *   cdef PdtComposeFilter typed_cf = _get_pdt_compose_filter(tostring(cf))
 *   cdef MPdtComposeOptions *opts = new MPdtComposeOptions(True, typed_cf)
 *   MPdtCompose(deref(lhs._fst), deref(rhs._fst), parens._parens,             # <<<<<<<<<<<<<<
 *               parens._assign, result._mfst.get(), deref(opts), left_mpdt)
 *   del opts
 */
  fst::script::MPdtCompose((*__pyx_v_lhs->__pyx_base.__pyx_base._fst), (*__pyx_v_rhs->__pyx_base.__pyx_base._fst), __pyx_v_parens->_parens, __pyx_v_parens->_assign, __pyx_v_result->__pyx_base._mfst.get(), (*__pyx_v_opts), __pyx_v_left_mpdt);

  /* "pynini.pyx":1789
 *   MPdtCompose(deref(lhs._fst), deref(rhs._fst), parens._parens,
 *               parens._assign, result._mfst.get(), deref(opts), left_mpdt)
 *   del opts             # <<<<<<<<<<<<<<
 *   if not result.num_states:
 *     logging.warning("Composed MPDT has no connected states")
 */
  delete __pyx_v_opts;

  /* "pynini.pyx":1790
 *               parens._assign, result._mfst.get(), deref(opts), left_mpdt)
 *   del opts
 *   if not result.num_states:             # <<<<<<<<<<<<<<
 *     logging.warning("Composed MPDT has no connected states")
 *   if result._fst.get().Properties(kError, True) == kError:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_result), __pyx_n_s_num_states); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1790; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1790; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_8 = ((!__pyx_t_5) != 0);
  if (__pyx_t_8) {

    /* "pynini.pyx":1791
 *   del opts
 *   if not result.num_states:
 *     logging.warning("Composed MPDT has no connected states")             # <<<<<<<<<<<<<<
 *   if result._fst.get().Properties(kError, True) == kError:
 *     raise FstOpError("Operation failed")
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_logging); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1791; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_warning); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1791; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__42, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1791; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pynini.pyx":1790
 *               parens._assign, result._mfst.get(), deref(opts), left_mpdt)
 *   del opts
 *   if not result.num_states:             # <<<<<<<<<<<<<<
 *     logging.warning("Composed MPDT has no connected states")
 *   if result._fst.get().Properties(kError, True) == kError:
 */
  }

  /* "pynini.pyx":1792
 *   if not result.num_states:
 *     logging.warning("Composed MPDT has no connected states")
 *   if result._fst.get().Properties(kError, True) == kError:             # <<<<<<<<<<<<<<
 *     raise FstOpError("Operation failed")
 *   # If the "expand" filter is selected, all parentheses have been mapped to
 */
  __pyx_t_8 = ((__pyx_v_result->__pyx_base.__pyx_base._fst.get()->Properties(fst::kError, 1) == fst::kError) != 0);
  if (__pyx_t_8) {

    /* "pynini.pyx":1793
 *     logging.warning("Composed MPDT has no connected states")
 *   if result._fst.get().Properties(kError, True) == kError:
 *     raise FstOpError("Operation failed")             # <<<<<<<<<<<<<<
 *   # If the "expand" filter is selected, all parentheses have been mapped to
 *   # epsilon. This conveniently removes the arcs that result.
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstOpError); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1793; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__43, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1793; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1793; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pynini.pyx":1792
 *   if not result.num_states:
 *     logging.warning("Composed MPDT has no connected states")
 *   if result._fst.get().Properties(kError, True) == kError:             # <<<<<<<<<<<<<<
 *     raise FstOpError("Operation failed")
 *   # If the "expand" filter is selected, all parentheses have been mapped to
 */
  }

  /* "pynini.pyx":1796
 *   # If the "expand" filter is selected, all parentheses have been mapped to
 *   # epsilon. This conveniently removes the arcs that result.
 *   if typed_cf == EXPAND_FILTER:             # <<<<<<<<<<<<<<
 *     result.rmepsilon()
 *   # Otherwise, we need to add the parentheses to the result.
 */
  __pyx_t_8 = ((__pyx_v_typed_cf == fst::EXPAND_FILTER) != 0);
  if (__pyx_t_8) {

    /* "pynini.pyx":1797
 *   # epsilon. This conveniently removes the arcs that result.
 *   if typed_cf == EXPAND_FILTER:
 *     result.rmepsilon()             # <<<<<<<<<<<<<<
 *   # Otherwise, we need to add the parentheses to the result.
 *   else:
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_result), __pyx_n_s_rmepsilon); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1797; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1797; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1797; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pynini.pyx":1796
 *   # If the "expand" filter is selected, all parentheses have been mapped to
 *   # epsilon. This conveniently removes the arcs that result.
 *   if typed_cf == EXPAND_FILTER:             # <<<<<<<<<<<<<<
 *     result.rmepsilon()
 *   # Otherwise, we need to add the parentheses to the result.
 */
    goto __pyx_L6;
  }

  /* "pynini.pyx":1800
 *   # Otherwise, we need to add the parentheses to the result.
 *   else:
 *     _add_parentheses_symbols(result._mfst.get(), parens._parens, left_mpdt)             # <<<<<<<<<<<<<<
 *   return result
 * 
 */
  /*else*/ {
    if (unlikely(((PyObject *)__pyx_v_parens) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_parens");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1800; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_f_6pynini__add_parentheses_symbols(__pyx_v_result->__pyx_base._mfst.get(), __pyx_v_parens->_parens, __pyx_v_left_mpdt); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1800; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L6:;

  /* "pynini.pyx":1801
 *   else:
 *     _add_parentheses_symbols(result._mfst.get(), parens._parens, left_mpdt)
 *   return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "pynini.pyx":1741
 * 
 * 
 * cpdef Fst mpdt_compose(ifst1, ifst2, MPdtParentheses parens, cf=b"paren",             # <<<<<<<<<<<<<<
 *                        bool left_mpdt=True):
 *   """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynini.mpdt_compose", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_lhs);
  __Pyx_XDECREF((PyObject *)__pyx_v_rhs);
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_41mpdt_compose(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pynini_40mpdt_compose[] = "\n  mpdt_compose(ifst1, ifst2, parens, cf=\"paren\", left_mpdt=True)\n\n  Composes a MPDT with an FST.\n\n  This operation composes a MPDT with an FST. The input MPDT is defined by the\n  combination of an FST and a MPdtParentheses object specifying the stack\n  symbols and assignments. The caller should also specify whether the left-hand\n  or the right-hand FST argument is to be interpreted as a MPDT.\n\n  Args:\n    ifst1: The left-hand-side input FST or MPDT.\n    ifst2: The right-hand-side input FST or MPDT.\n    parens: A MPdtParentheses object specifying the input MPDT's stack\n        operations and assignments.\n    cf: A string indicating the desired MPDT composition filter; one of: \"paren\"\n        (keeps parentheses), \"expand\" (expands and removes parentheses),\n        \"expand_paren\" (expands and keeps parentheses).\n    left_mpdt: If true, the first argument is interpreted as a MPDT and the\n        second argument is interpreted as an FST; if false, the second\n        argument is interpreted as a MPDT and the first argument is interpreted\n        as an FST.\n\n  Returns:\n    The FST component of an MPDT produced by composition.\n\n  Raises:\n    FstOpError: Operation failed.\n    FstSymbolTableMergeError: Unable to resolve symbol table conflict\n        without relabeling.\n\n  See also: `compose`.\n  ";
static PyObject *__pyx_pw_6pynini_41mpdt_compose(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ifst1 = 0;
  PyObject *__pyx_v_ifst2 = 0;
  struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_parens = 0;
  PyObject *__pyx_v_cf = 0;
  bool __pyx_v_left_mpdt;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mpdt_compose (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ifst1,&__pyx_n_s_ifst2,&__pyx_n_s_parens,&__pyx_n_s_cf,&__pyx_n_s_left_mpdt,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject *)__pyx_n_b_paren);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ifst1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ifst2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("mpdt_compose", 0, 3, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1741; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_parens)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("mpdt_compose", 0, 3, 5, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1741; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cf);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_left_mpdt);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "mpdt_compose") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1741; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_ifst1 = values[0];
    __pyx_v_ifst2 = values[1];
    __pyx_v_parens = ((struct __pyx_obj_6pynini_MPdtParentheses *)values[2]);
    __pyx_v_cf = values[3];
    if (values[4]) {
      __pyx_v_left_mpdt = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_left_mpdt == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1742; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {

      /* "pynini.pyx":1742
 * 
 * cpdef Fst mpdt_compose(ifst1, ifst2, MPdtParentheses parens, cf=b"paren",
 *                        bool left_mpdt=True):             # <<<<<<<<<<<<<<
 *   """
 *   mpdt_compose(ifst1, ifst2, parens, cf="paren", left_mpdt=True)
 */
      __pyx_v_left_mpdt = ((bool)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpdt_compose", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1741; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.mpdt_compose", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parens), __pyx_ptype_6pynini_MPdtParentheses, 1, "parens", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1741; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6pynini_40mpdt_compose(__pyx_self, __pyx_v_ifst1, __pyx_v_ifst2, __pyx_v_parens, __pyx_v_cf, __pyx_v_left_mpdt);

  /* "pynini.pyx":1741
 * 
 * 
 * cpdef Fst mpdt_compose(ifst1, ifst2, MPdtParentheses parens, cf=b"paren",             # <<<<<<<<<<<<<<
 *                        bool left_mpdt=True):
 *   """
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_40mpdt_compose(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_ifst1, PyObject *__pyx_v_ifst2, struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_parens, PyObject *__pyx_v_cf, bool __pyx_v_left_mpdt) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_6pynini_mpdt_compose __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mpdt_compose", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 2;
  __pyx_t_2.cf = __pyx_v_cf;
  __pyx_t_2.left_mpdt = __pyx_v_left_mpdt;
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini_mpdt_compose(__pyx_v_ifst1, __pyx_v_ifst2, __pyx_v_parens, 0, &__pyx_t_2)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1741; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.mpdt_compose", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1804
 * 
 * 
 * def mpdt_expand(impdt, MPdtParentheses parens, bool connect=True,             # <<<<<<<<<<<<<<
 *                 bool keep_parentheses=False):
 *   """
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_43mpdt_expand(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pynini_42mpdt_expand[] = "\n  mpdt_expand(impdt, parens, connect=True, keep_parentheses=False):\n\n  Expands a bounded-stack MPDT to an FST.\n\n  This operation converts a bounded-stack MPDT into the equivalent FST. The\n  input MPDT is defined by the combination of an FST and a MPdtParentheses\n  object specifying the MPDT stack symbols and assignments.\n\n  If the input MPDT does not have a bounded stack, then it is impossible to\n  expand the MPDT into an FST and this operation will not terminate.\n\n  Args:\n    impdt: The FST component of the input MPDT.\n    parens: A MPdtParentheses object specifying the input PDT's stack\n        symbols and assignments.\n    connect: Should the output FST be trimmed?\n    keep_parentheses: Should the output FST preserve parentheses arcs?\n\n  Returns:\n    An FST produced by expanding the bounded-stack MPDT.\n\n  Raises:\n    FstOpError: Operation failed.\n  ";
static PyMethodDef __pyx_mdef_6pynini_43mpdt_expand = {"mpdt_expand", (PyCFunction)__pyx_pw_6pynini_43mpdt_expand, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pynini_42mpdt_expand};
static PyObject *__pyx_pw_6pynini_43mpdt_expand(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_impdt = 0;
  struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_parens = 0;
  bool __pyx_v_connect;
  bool __pyx_v_keep_parentheses;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mpdt_expand (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_impdt,&__pyx_n_s_parens,&__pyx_n_s_connect,&__pyx_n_s_keep_parentheses,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_impdt)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_parens)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("mpdt_expand", 0, 2, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1804; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_connect);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_keep_parentheses);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "mpdt_expand") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1804; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_impdt = values[0];
    __pyx_v_parens = ((struct __pyx_obj_6pynini_MPdtParentheses *)values[1]);
    if (values[2]) {
      __pyx_v_connect = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_connect == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1804; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_connect = ((bool)1);
    }
    if (values[3]) {
      __pyx_v_keep_parentheses = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_keep_parentheses == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1805; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {

      /* "pynini.pyx":1805
 * 
 * def mpdt_expand(impdt, MPdtParentheses parens, bool connect=True,
 *                 bool keep_parentheses=False):             # <<<<<<<<<<<<<<
 *   """
 *   mpdt_expand(impdt, parens, connect=True, keep_parentheses=False):
 */
      __pyx_v_keep_parentheses = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpdt_expand", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1804; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.mpdt_expand", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parens), __pyx_ptype_6pynini_MPdtParentheses, 1, "parens", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1804; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6pynini_42mpdt_expand(__pyx_self, __pyx_v_impdt, __pyx_v_parens, __pyx_v_connect, __pyx_v_keep_parentheses);

  /* "pynini.pyx":1804
 * 
 * 
 * def mpdt_expand(impdt, MPdtParentheses parens, bool connect=True,             # <<<<<<<<<<<<<<
 *                 bool keep_parentheses=False):
 *   """
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_42mpdt_expand(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_impdt, struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_parens, bool __pyx_v_connect, bool __pyx_v_keep_parentheses) {
  struct __pyx_obj_6pynini_Fst *__pyx_v_mpdt = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_v_result = 0;
  fst::MPdtExpandOptions *__pyx_v_opts;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mpdt_expand", 0);

  /* "pynini.pyx":1831
 *     FstOpError: Operation failed.
 *   """
 *   cdef Fst mpdt = _compile_or_copy_Fst(impdt)             # <<<<<<<<<<<<<<
 *   cdef Fst result = Fst(mpdt.arc_type)
 *   cdef MPdtExpandOptions *opts = new MPdtExpandOptions(connect,
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_impdt, 0, NULL)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_mpdt = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":1832
 *   """
 *   cdef Fst mpdt = _compile_or_copy_Fst(impdt)
 *   cdef Fst result = Fst(mpdt.arc_type)             # <<<<<<<<<<<<<<
 *   cdef MPdtExpandOptions *opts = new MPdtExpandOptions(connect,
 *                                                        keep_parentheses)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_mpdt), __pyx_n_s_arc_type); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_result = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":1833
 *   cdef Fst mpdt = _compile_or_copy_Fst(impdt)
 *   cdef Fst result = Fst(mpdt.arc_type)
 *   cdef MPdtExpandOptions *opts = new MPdtExpandOptions(connect,             # <<<<<<<<<<<<<<
 *                                                        keep_parentheses)
 *   MPdtExpand(deref(mpdt._fst), parens._parens, parens._assign,
 */
  __pyx_v_opts = new fst::MPdtExpandOptions(__pyx_v_connect, __pyx_v_keep_parentheses);

  /* "pynini.pyx":1835
 *   cdef MPdtExpandOptions *opts = new MPdtExpandOptions(connect,
 *                                                        keep_parentheses)
 *   MPdtExpand(deref(mpdt._fst), parens._parens, parens._assign,             # <<<<<<<<<<<<<<
 *              result._mfst.get(), deref(opts))
 *   del opts
 */
  if (unlikely(((PyObject *)__pyx_v_mpdt) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_fst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (unlikely(((PyObject *)__pyx_v_parens) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_parens");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (unlikely(((PyObject *)__pyx_v_parens) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_assign");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pynini.pyx":1836
 *                                                        keep_parentheses)
 *   MPdtExpand(deref(mpdt._fst), parens._parens, parens._assign,
 *              result._mfst.get(), deref(opts))             # <<<<<<<<<<<<<<
 *   del opts
 *   result._check_pynini_op_error()
 */
  fst::script::MPdtExpand((*__pyx_v_mpdt->__pyx_base.__pyx_base._fst), __pyx_v_parens->_parens, __pyx_v_parens->_assign, __pyx_v_result->__pyx_base._mfst.get(), (*__pyx_v_opts));

  /* "pynini.pyx":1837
 *   MPdtExpand(deref(mpdt._fst), parens._parens, parens._assign,
 *              result._mfst.get(), deref(opts))
 *   del opts             # <<<<<<<<<<<<<<
 *   result._check_pynini_op_error()
 *   return result
 */
  delete __pyx_v_opts;

  /* "pynini.pyx":1838
 *              result._mfst.get(), deref(opts))
 *   del opts
 *   result._check_pynini_op_error()             # <<<<<<<<<<<<<<
 *   return result
 * 
 */
  ((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_result->__pyx_base.__pyx_base.__pyx_vtab)->_check_pynini_op_error(__pyx_v_result); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":1839
 *   del opts
 *   result._check_pynini_op_error()
 *   return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "pynini.pyx":1804
 * 
 * 
 * def mpdt_expand(impdt, MPdtParentheses parens, bool connect=True,             # <<<<<<<<<<<<<<
 *                 bool keep_parentheses=False):
 *   """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pynini.mpdt_expand", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mpdt);
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1842
 * 
 * 
 * def mpdt_reverse(impdt, MPdtParentheses parens):             # <<<<<<<<<<<<<<
 *   """
 *   mpdt_reverse(impdt, parens)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_45mpdt_reverse(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pynini_44mpdt_reverse[] = "\n  mpdt_reverse(impdt, parens)\n\n  Reverses a MPDT.\n\n  This operation reverses an MPDT. The input MPDT is defined by the combination\n  of an FST and a MPdtParentheses object specifying the MPDT stack symbols\n  and assignments. Unlike PDT reversal, which only modifies the FST component,\n  this operation also reverses the stack assignments. assignments.\n\n  Args:\n    impdt: The FST component of the input MPDT.\n    parens: A MPdtParentheses object specifying the input MPDT's stack symbols\n        and assignments.\n\n  Returns:\n    A (Fst, MPdtParentheses) pair specifying the reversed MPDT.\n  ";
static PyMethodDef __pyx_mdef_6pynini_45mpdt_reverse = {"mpdt_reverse", (PyCFunction)__pyx_pw_6pynini_45mpdt_reverse, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pynini_44mpdt_reverse};
static PyObject *__pyx_pw_6pynini_45mpdt_reverse(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_impdt = 0;
  struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_parens = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mpdt_reverse (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_impdt,&__pyx_n_s_parens,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_impdt)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_parens)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("mpdt_reverse", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1842; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "mpdt_reverse") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1842; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_impdt = values[0];
    __pyx_v_parens = ((struct __pyx_obj_6pynini_MPdtParentheses *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpdt_reverse", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1842; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.mpdt_reverse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parens), __pyx_ptype_6pynini_MPdtParentheses, 1, "parens", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6pynini_44mpdt_reverse(__pyx_self, __pyx_v_impdt, __pyx_v_parens);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_44mpdt_reverse(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_impdt, struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_parens) {
  struct __pyx_obj_6pynini_Fst *__pyx_v_mpdt = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_v_result_fst = 0;
  struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_result_parens = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mpdt_reverse", 0);

  /* "pynini.pyx":1861
 *     A (Fst, MPdtParentheses) pair specifying the reversed MPDT.
 *   """
 *   cdef Fst mpdt = _compile_or_copy_Fst(impdt)             # <<<<<<<<<<<<<<
 *   cdef Fst result_fst = Fst(mpdt.arc_type)
 *   cdef MPdtParentheses result_parens = parens.copy()
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_impdt, 0, NULL)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1861; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_mpdt = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":1862
 *   """
 *   cdef Fst mpdt = _compile_or_copy_Fst(impdt)
 *   cdef Fst result_fst = Fst(mpdt.arc_type)             # <<<<<<<<<<<<<<
 *   cdef MPdtParentheses result_parens = parens.copy()
 *   MPdtReverse(deref(mpdt._fst), result_parens._parens,
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_mpdt), __pyx_n_s_arc_type); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1862; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1862; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1862; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_result_fst = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":1863
 *   cdef Fst mpdt = _compile_or_copy_Fst(impdt)
 *   cdef Fst result_fst = Fst(mpdt.arc_type)
 *   cdef MPdtParentheses result_parens = parens.copy()             # <<<<<<<<<<<<<<
 *   MPdtReverse(deref(mpdt._fst), result_parens._parens,
 *               addr(result_parens._assign), result_fst._mfst.get())
 */
  if (unlikely(((PyObject *)__pyx_v_parens) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "copy");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1863; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_6pynini_MPdtParentheses *)__pyx_v_parens->__pyx_vtab)->copy(__pyx_v_parens, 0)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1863; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result_parens = ((struct __pyx_obj_6pynini_MPdtParentheses *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":1864
 *   cdef Fst result_fst = Fst(mpdt.arc_type)
 *   cdef MPdtParentheses result_parens = parens.copy()
 *   MPdtReverse(deref(mpdt._fst), result_parens._parens,             # <<<<<<<<<<<<<<
 *               addr(result_parens._assign), result_fst._mfst.get())
 *   result_fst._check_pynini_op_error()
 */
  if (unlikely(((PyObject *)__pyx_v_mpdt) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_fst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1864; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (unlikely(((PyObject *)__pyx_v_result_parens) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_parens");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1864; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pynini.pyx":1865
 *   cdef MPdtParentheses result_parens = parens.copy()
 *   MPdtReverse(deref(mpdt._fst), result_parens._parens,
 *               addr(result_parens._assign), result_fst._mfst.get())             # <<<<<<<<<<<<<<
 *   result_fst._check_pynini_op_error()
 *   return (result_fst, result_parens)
 */
  if (unlikely(((PyObject *)__pyx_v_result_parens) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_assign");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1865; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pynini.pyx":1864
 *   cdef Fst result_fst = Fst(mpdt.arc_type)
 *   cdef MPdtParentheses result_parens = parens.copy()
 *   MPdtReverse(deref(mpdt._fst), result_parens._parens,             # <<<<<<<<<<<<<<
 *               addr(result_parens._assign), result_fst._mfst.get())
 *   result_fst._check_pynini_op_error()
 */
  fst::script::MPdtReverse((*__pyx_v_mpdt->__pyx_base.__pyx_base._fst), __pyx_v_result_parens->_parens, (&__pyx_v_result_parens->_assign), __pyx_v_result_fst->__pyx_base._mfst.get());

  /* "pynini.pyx":1866
 *   MPdtReverse(deref(mpdt._fst), result_parens._parens,
 *               addr(result_parens._assign), result_fst._mfst.get())
 *   result_fst._check_pynini_op_error()             # <<<<<<<<<<<<<<
 *   return (result_fst, result_parens)
 * 
 */
  ((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_result_fst->__pyx_base.__pyx_base.__pyx_vtab)->_check_pynini_op_error(__pyx_v_result_fst); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1866; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":1867
 *               addr(result_parens._assign), result_fst._mfst.get())
 *   result_fst._check_pynini_op_error()
 *   return (result_fst, result_parens)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1867; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_result_fst));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_result_fst));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_result_fst));
  __Pyx_INCREF(((PyObject *)__pyx_v_result_parens));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_result_parens));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_result_parens));
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":1842
 * 
 * 
 * def mpdt_reverse(impdt, MPdtParentheses parens):             # <<<<<<<<<<<<<<
 *   """
 *   mpdt_reverse(impdt, parens)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pynini.mpdt_reverse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mpdt);
  __Pyx_XDECREF((PyObject *)__pyx_v_result_fst);
  __Pyx_XDECREF((PyObject *)__pyx_v_result_parens);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1908
 *   cdef unique_ptr[StringPathsClass] _paths
 * 
 *   def __repr__(self):             # <<<<<<<<<<<<<<
 *     return "<StringPaths at 0x{:x}>".format(id(self))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_11StringPaths_1__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pynini_11StringPaths_1__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_11StringPaths___repr__(((struct __pyx_obj_6pynini_StringPaths *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_11StringPaths___repr__(struct __pyx_obj_6pynini_StringPaths *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "pynini.pyx":1909
 * 
 *   def __repr__(self):
 *     return "<StringPaths at 0x{:x}>".format(id(self))             # <<<<<<<<<<<<<<
 * 
 *   def __init__(self, _Fst ifst, token_type=b"byte", _SymbolTable isymbols=None,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_StringPaths_at_0x_x, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1909; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1909; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_id, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1909; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1909; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1909; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1909; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":1908
 *   cdef unique_ptr[StringPathsClass] _paths
 * 
 *   def __repr__(self):             # <<<<<<<<<<<<<<
 *     return "<StringPaths at 0x{:x}>".format(id(self))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynini.StringPaths.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1911
 *     return "<StringPaths at 0x{:x}>".format(id(self))
 * 
 *   def __init__(self, _Fst ifst, token_type=b"byte", _SymbolTable isymbols=None,             # <<<<<<<<<<<<<<
 *                _SymbolTable osymbols=None):
 *     # Makes copy of the shared_ptr, potentially extending the FST's lifetime.
 */

/* Python wrapper */
static int __pyx_pw_6pynini_11StringPaths_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pynini_11StringPaths_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9pywrapfst__Fst *__pyx_v_ifst = 0;
  PyObject *__pyx_v_token_type = 0;
  struct __pyx_obj_9pywrapfst__SymbolTable *__pyx_v_isymbols = 0;
  struct __pyx_obj_9pywrapfst__SymbolTable *__pyx_v_osymbols = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ifst,&__pyx_n_s_token_type,&__pyx_n_s_isymbols,&__pyx_n_s_osymbols,0};
    PyObject* values[4] = {0,0,0,0};
    values[1] = ((PyObject *)__pyx_n_b_byte);
    values[2] = (PyObject *)((struct __pyx_obj_9pywrapfst__SymbolTable *)Py_None);

    /* "pynini.pyx":1912
 * 
 *   def __init__(self, _Fst ifst, token_type=b"byte", _SymbolTable isymbols=None,
 *                _SymbolTable osymbols=None):             # <<<<<<<<<<<<<<
 *     # Makes copy of the shared_ptr, potentially extending the FST's lifetime.
 *     self._fst = ifst._fst
 */
    values[3] = (PyObject *)((struct __pyx_obj_9pywrapfst__SymbolTable *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ifst)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_token_type);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isymbols);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_osymbols);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1911; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_ifst = ((struct __pyx_obj_9pywrapfst__Fst *)values[0]);
    __pyx_v_token_type = values[1];
    __pyx_v_isymbols = ((struct __pyx_obj_9pywrapfst__SymbolTable *)values[2]);
    __pyx_v_osymbols = ((struct __pyx_obj_9pywrapfst__SymbolTable *)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1911; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.StringPaths.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ifst), __pyx_ptype_9pywrapfst__Fst, 1, "ifst", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1911; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_isymbols), __pyx_ptype_9pywrapfst__SymbolTable, 1, "isymbols", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1911; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_osymbols), __pyx_ptype_9pywrapfst__SymbolTable, 1, "osymbols", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1912; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6pynini_11StringPaths_2__init__(((struct __pyx_obj_6pynini_StringPaths *)__pyx_v_self), __pyx_v_ifst, __pyx_v_token_type, __pyx_v_isymbols, __pyx_v_osymbols);

  /* "pynini.pyx":1911
 *     return "<StringPaths at 0x{:x}>".format(id(self))
 * 
 *   def __init__(self, _Fst ifst, token_type=b"byte", _SymbolTable isymbols=None,             # <<<<<<<<<<<<<<
 *                _SymbolTable osymbols=None):
 *     # Makes copy of the shared_ptr, potentially extending the FST's lifetime.
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pynini_11StringPaths_2__init__(struct __pyx_obj_6pynini_StringPaths *__pyx_v_self, struct __pyx_obj_9pywrapfst__Fst *__pyx_v_ifst, PyObject *__pyx_v_token_type, struct __pyx_obj_9pywrapfst__SymbolTable *__pyx_v_isymbols, struct __pyx_obj_9pywrapfst__SymbolTable *__pyx_v_osymbols) {
  enum fst::TokenType __pyx_v_tt;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<fst::script::FstClass>  __pyx_t_1;
  std::string __pyx_t_2;
  enum fst::TokenType __pyx_t_3;
  int __pyx_t_4;
  __pyx_t_9pywrapfst_SymbolTable_ptr __pyx_t_5;
  __pyx_t_9pywrapfst_SymbolTable_ptr __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pynini.pyx":1914
 *                _SymbolTable osymbols=None):
 *     # Makes copy of the shared_ptr, potentially extending the FST's lifetime.
 *     self._fst = ifst._fst             # <<<<<<<<<<<<<<
 *     cdef TokenType tt = _get_token_type(tostring(token_type))
 *     if tt == SYMBOL:
 */
  if (unlikely(((PyObject *)__pyx_v_ifst) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_fst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1914; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __pyx_v_ifst->_fst;
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_fst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1914; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_self->_fst = __pyx_t_1;

  /* "pynini.pyx":1915
 *     # Makes copy of the shared_ptr, potentially extending the FST's lifetime.
 *     self._fst = ifst._fst
 *     cdef TokenType tt = _get_token_type(tostring(token_type))             # <<<<<<<<<<<<<<
 *     if tt == SYMBOL:
 *       # FST-referenced symbol tables have the same lifetime as the FST itself.
 */
  __pyx_t_2 = __pyx_f_9pywrapfst_tostring(__pyx_v_token_type, NULL); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1915; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __pyx_f_6pynini__get_token_type(__pyx_t_2); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1915; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_tt = __pyx_t_3;

  /* "pynini.pyx":1916
 *     self._fst = ifst._fst
 *     cdef TokenType tt = _get_token_type(tostring(token_type))
 *     if tt == SYMBOL:             # <<<<<<<<<<<<<<
 *       # FST-referenced symbol tables have the same lifetime as the FST itself.
 *       self._paths.reset(new StringPathsClass(deref(self._fst), tt,
 */
  __pyx_t_4 = ((__pyx_v_tt == fst::SYMBOL) != 0);
  if (__pyx_t_4) {

    /* "pynini.pyx":1918
 *     if tt == SYMBOL:
 *       # FST-referenced symbol tables have the same lifetime as the FST itself.
 *       self._paths.reset(new StringPathsClass(deref(self._fst), tt,             # <<<<<<<<<<<<<<
 *           (<SymbolTable_ptr> NULL) if isymbols is None else isymbols._table,
 *           (<SymbolTable_ptr> NULL) if osymbols is None else osymbols._table))
 */
    if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_paths");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1918; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_fst");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1918; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "pynini.pyx":1919
 *       # FST-referenced symbol tables have the same lifetime as the FST itself.
 *       self._paths.reset(new StringPathsClass(deref(self._fst), tt,
 *           (<SymbolTable_ptr> NULL) if isymbols is None else isymbols._table,             # <<<<<<<<<<<<<<
 *           (<SymbolTable_ptr> NULL) if osymbols is None else osymbols._table))
 *     else:
 */
    __pyx_t_4 = (((PyObject *)__pyx_v_isymbols) == Py_None);
    if ((__pyx_t_4 != 0)) {
      __pyx_t_5 = ((__pyx_t_9pywrapfst_SymbolTable_ptr)NULL);
    } else {
      if (unlikely(((PyObject *)__pyx_v_isymbols) == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_table");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1919; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_5 = __pyx_v_isymbols->_table;
    }

    /* "pynini.pyx":1920
 *       self._paths.reset(new StringPathsClass(deref(self._fst), tt,
 *           (<SymbolTable_ptr> NULL) if isymbols is None else isymbols._table,
 *           (<SymbolTable_ptr> NULL) if osymbols is None else osymbols._table))             # <<<<<<<<<<<<<<
 *     else:
 *       self._paths.reset(new StringPathsClass(deref(self._fst), tt, NULL, NULL))
 */
    __pyx_t_4 = (((PyObject *)__pyx_v_osymbols) == Py_None);
    if ((__pyx_t_4 != 0)) {
      __pyx_t_6 = ((__pyx_t_9pywrapfst_SymbolTable_ptr)NULL);
    } else {
      if (unlikely(((PyObject *)__pyx_v_osymbols) == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_table");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1920; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_6 = __pyx_v_osymbols->_table;
    }

    /* "pynini.pyx":1918
 *     if tt == SYMBOL:
 *       # FST-referenced symbol tables have the same lifetime as the FST itself.
 *       self._paths.reset(new StringPathsClass(deref(self._fst), tt,             # <<<<<<<<<<<<<<
 *           (<SymbolTable_ptr> NULL) if isymbols is None else isymbols._table,
 *           (<SymbolTable_ptr> NULL) if osymbols is None else osymbols._table))
 */
    __pyx_v_self->_paths.reset(new fst::script::StringPathsClass((*__pyx_v_self->_fst), __pyx_v_tt, __pyx_t_5, __pyx_t_6));

    /* "pynini.pyx":1916
 *     self._fst = ifst._fst
 *     cdef TokenType tt = _get_token_type(tostring(token_type))
 *     if tt == SYMBOL:             # <<<<<<<<<<<<<<
 *       # FST-referenced symbol tables have the same lifetime as the FST itself.
 *       self._paths.reset(new StringPathsClass(deref(self._fst), tt,
 */
    goto __pyx_L3;
  }

  /* "pynini.pyx":1922
 *           (<SymbolTable_ptr> NULL) if osymbols is None else osymbols._table))
 *     else:
 *       self._paths.reset(new StringPathsClass(deref(self._fst), tt, NULL, NULL))             # <<<<<<<<<<<<<<
 *     if self._paths.get().Error():
 *       raise FstArgError("FST is not acyclic")
 */
  /*else*/ {
    if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_paths");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_fst");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v_self->_paths.reset(new fst::script::StringPathsClass((*__pyx_v_self->_fst), __pyx_v_tt, NULL, NULL));
  }
  __pyx_L3:;

  /* "pynini.pyx":1923
 *     else:
 *       self._paths.reset(new StringPathsClass(deref(self._fst), tt, NULL, NULL))
 *     if self._paths.get().Error():             # <<<<<<<<<<<<<<
 *       raise FstArgError("FST is not acyclic")
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_paths");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1923; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_4 = (__pyx_v_self->_paths.get()->Error() != 0);
  if (__pyx_t_4) {

    /* "pynini.pyx":1924
 *       self._paths.reset(new StringPathsClass(deref(self._fst), tt, NULL, NULL))
 *     if self._paths.get().Error():
 *       raise FstArgError("FST is not acyclic")             # <<<<<<<<<<<<<<
 * 
 *   # This just registers this class as a possible iterator.
 */
    __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstArgError); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1924; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__44, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1924; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_Raise(__pyx_t_8, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1924; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pynini.pyx":1923
 *     else:
 *       self._paths.reset(new StringPathsClass(deref(self._fst), tt, NULL, NULL))
 *     if self._paths.get().Error():             # <<<<<<<<<<<<<<
 *       raise FstArgError("FST is not acyclic")
 * 
 */
  }

  /* "pynini.pyx":1911
 *     return "<StringPaths at 0x{:x}>".format(id(self))
 * 
 *   def __init__(self, _Fst ifst, token_type=b"byte", _SymbolTable isymbols=None,             # <<<<<<<<<<<<<<
 *                _SymbolTable osymbols=None):
 *     # Makes copy of the shared_ptr, potentially extending the FST's lifetime.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pynini.StringPaths.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1927
 * 
 *   # This just registers this class as a possible iterator.
 *   def __iter__(self):             # <<<<<<<<<<<<<<
 *     return self
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_11StringPaths_5__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pynini_11StringPaths_5__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_11StringPaths_4__iter__(((struct __pyx_obj_6pynini_StringPaths *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_11StringPaths_4__iter__(struct __pyx_obj_6pynini_StringPaths *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "pynini.pyx":1928
 *   # This just registers this class as a possible iterator.
 *   def __iter__(self):
 *     return self             # <<<<<<<<<<<<<<
 * 
 *   # Magic method used to get a Pythonic API out of the C++ API.
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pynini.pyx":1927
 * 
 *   # This just registers this class as a possible iterator.
 *   def __iter__(self):             # <<<<<<<<<<<<<<
 *     return self
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1931
 * 
 *   # Magic method used to get a Pythonic API out of the C++ API.
 *   def __next__(self):             # <<<<<<<<<<<<<<
 *     if self.done():
 *       raise StopIteration
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_11StringPaths_7__next__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pynini_11StringPaths_7__next__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__next__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_11StringPaths_6__next__(((struct __pyx_obj_6pynini_StringPaths *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_11StringPaths_6__next__(struct __pyx_obj_6pynini_StringPaths *__pyx_v_self) {
  std::string __pyx_v_istring;
  std::string __pyx_v_ostring;
  struct __pyx_obj_9pywrapfst_Weight *__pyx_v_weight = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__next__", 0);

  /* "pynini.pyx":1932
 *   # Magic method used to get a Pythonic API out of the C++ API.
 *   def __next__(self):
 *     if self.done():             # <<<<<<<<<<<<<<
 *       raise StopIteration
 *     cdef string istring = self.istring()
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "done");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1932; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = (((struct __pyx_vtabstruct_6pynini_StringPaths *)__pyx_v_self->__pyx_vtab)->done(__pyx_v_self, 0) != 0);
  if (__pyx_t_1) {

    /* "pynini.pyx":1933
 *   def __next__(self):
 *     if self.done():
 *       raise StopIteration             # <<<<<<<<<<<<<<
 *     cdef string istring = self.istring()
 *     cdef string ostring = self.ostring()
 */
    __Pyx_Raise(__pyx_builtin_StopIteration, 0, 0, 0);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1933; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pynini.pyx":1932
 *   # Magic method used to get a Pythonic API out of the C++ API.
 *   def __next__(self):
 *     if self.done():             # <<<<<<<<<<<<<<
 *       raise StopIteration
 *     cdef string istring = self.istring()
 */
  }

  /* "pynini.pyx":1934
 *     if self.done():
 *       raise StopIteration
 *     cdef string istring = self.istring()             # <<<<<<<<<<<<<<
 *     cdef string ostring = self.ostring()
 *     cdef _Weight weight = self.weight()
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "istring");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1934; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_istring = ((struct __pyx_vtabstruct_6pynini_StringPaths *)__pyx_v_self->__pyx_vtab)->istring(__pyx_v_self, 0);

  /* "pynini.pyx":1935
 *       raise StopIteration
 *     cdef string istring = self.istring()
 *     cdef string ostring = self.ostring()             # <<<<<<<<<<<<<<
 *     cdef _Weight weight = self.weight()
 *     self.next()
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "ostring");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1935; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_ostring = ((struct __pyx_vtabstruct_6pynini_StringPaths *)__pyx_v_self->__pyx_vtab)->ostring(__pyx_v_self, 0);

  /* "pynini.pyx":1936
 *     cdef string istring = self.istring()
 *     cdef string ostring = self.ostring()
 *     cdef _Weight weight = self.weight()             # <<<<<<<<<<<<<<
 *     self.next()
 *     return (istring, ostring, weight)
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "weight");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1936; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_6pynini_StringPaths *)__pyx_v_self->__pyx_vtab)->weight(__pyx_v_self, 0)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1936; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_weight = ((struct __pyx_obj_9pywrapfst_Weight *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pynini.pyx":1937
 *     cdef string ostring = self.ostring()
 *     cdef _Weight weight = self.weight()
 *     self.next()             # <<<<<<<<<<<<<<
 *     return (istring, ostring, weight)
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "next");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1937; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  ((struct __pyx_vtabstruct_6pynini_StringPaths *)__pyx_v_self->__pyx_vtab)->next(__pyx_v_self, 0);

  /* "pynini.pyx":1938
 *     cdef _Weight weight = self.weight()
 *     self.next()
 *     return (istring, ostring, weight)             # <<<<<<<<<<<<<<
 * 
 *   cpdef bool done(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_istring); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1938; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_ostring); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1938; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1938; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_weight));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_weight));
  PyTuple_SET_ITEM(__pyx_t_4, 2, ((PyObject *)__pyx_v_weight));
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":1931
 * 
 *   # Magic method used to get a Pythonic API out of the C++ API.
 *   def __next__(self):             # <<<<<<<<<<<<<<
 *     if self.done():
 *       raise StopIteration
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynini.StringPaths.__next__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_weight);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1940
 *     return (istring, ostring, weight)
 * 
 *   cpdef bool done(self):             # <<<<<<<<<<<<<<
 *     """"
 *     done(self)
 */

static PyObject *__pyx_pw_6pynini_11StringPaths_9done(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static bool __pyx_f_6pynini_11StringPaths_done(struct __pyx_obj_6pynini_StringPaths *__pyx_v_self, int __pyx_skip_dispatch) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("done", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_done); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1940; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_11StringPaths_9done)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1940; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1940; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1940; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":1952
 *       True if the iterator is exhausted, False otherwise.
 *     """
 *     return self._paths.get().Done()             # <<<<<<<<<<<<<<
 * 
 *   cpdef bool error(self):
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_paths");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1952; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_r = __pyx_v_self->_paths.get()->Done();
  goto __pyx_L0;

  /* "pynini.pyx":1940
 *     return (istring, ostring, weight)
 * 
 *   cpdef bool done(self):             # <<<<<<<<<<<<<<
 *     """"
 *     done(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("pynini.StringPaths.done", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_11StringPaths_9done(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pynini_11StringPaths_8done[] = "\"\n    done(self)\n\n    Indicates whether the iterator is exhausted or not.\n\n    This method is provided for compatibility with the C++ API only; most users\n    should use the Pythonic API.\n\n    Returns:\n      True if the iterator is exhausted, False otherwise.\n    ";
static PyObject *__pyx_pw_6pynini_11StringPaths_9done(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("done (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_11StringPaths_8done(((struct __pyx_obj_6pynini_StringPaths *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_11StringPaths_8done(struct __pyx_obj_6pynini_StringPaths *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("done", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_6pynini_11StringPaths_done(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1940; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.StringPaths.done", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1954
 *     return self._paths.get().Done()
 * 
 *   cpdef bool error(self):             # <<<<<<<<<<<<<<
 *     """
 *     error(self)
 */

static PyObject *__pyx_pw_6pynini_11StringPaths_11error(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static bool __pyx_f_6pynini_11StringPaths_error(struct __pyx_obj_6pynini_StringPaths *__pyx_v_self, int __pyx_skip_dispatch) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("error", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_error); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1954; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_11StringPaths_11error)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1954; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1954; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1954; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":1963
 *       True if the StringPaths is in an errorful state, False otherwise.
 *     """
 *     return self._paths.get().Error()             # <<<<<<<<<<<<<<
 * 
 *   cpdef void reset(self):
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_paths");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1963; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_r = __pyx_v_self->_paths.get()->Error();
  goto __pyx_L0;

  /* "pynini.pyx":1954
 *     return self._paths.get().Done()
 * 
 *   cpdef bool error(self):             # <<<<<<<<<<<<<<
 *     """
 *     error(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("pynini.StringPaths.error", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_11StringPaths_11error(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pynini_11StringPaths_10error[] = "\n    error(self)\n\n    Indicates whether the StringPaths has encountered an error.\n\n    Returns:\n      True if the StringPaths is in an errorful state, False otherwise.\n    ";
static PyObject *__pyx_pw_6pynini_11StringPaths_11error(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("error (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_11StringPaths_10error(((struct __pyx_obj_6pynini_StringPaths *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_11StringPaths_10error(struct __pyx_obj_6pynini_StringPaths *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("error", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_6pynini_11StringPaths_error(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1954; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.StringPaths.error", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1965
 *     return self._paths.get().Error()
 * 
 *   cpdef void reset(self):             # <<<<<<<<<<<<<<
 *     """
 *     reset(self)
 */

static PyObject *__pyx_pw_6pynini_11StringPaths_13reset(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static void __pyx_f_6pynini_11StringPaths_reset(struct __pyx_obj_6pynini_StringPaths *__pyx_v_self, int __pyx_skip_dispatch) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("reset", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_reset); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1965; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_11StringPaths_13reset)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1965; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1965; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":1974
 *     should use the Pythonic API.
 *     """
 *     self._paths.get().Reset()             # <<<<<<<<<<<<<<
 * 
 *   cpdef void next(self):
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_paths");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1974; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_self->_paths.get()->Reset();

  /* "pynini.pyx":1965
 *     return self._paths.get().Error()
 * 
 *   cpdef void reset(self):             # <<<<<<<<<<<<<<
 *     """
 *     reset(self)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("pynini.StringPaths.reset", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_11StringPaths_13reset(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pynini_11StringPaths_12reset[] = "\n    reset(self)\n\n    Resets the iterator to the initial position.\n\n    This method is provided for compatibility with the C++ API only; most users\n    should use the Pythonic API.\n    ";
static PyObject *__pyx_pw_6pynini_11StringPaths_13reset(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reset (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_11StringPaths_12reset(((struct __pyx_obj_6pynini_StringPaths *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_11StringPaths_12reset(struct __pyx_obj_6pynini_StringPaths *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("reset", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_f_6pynini_11StringPaths_reset(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1965; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.StringPaths.reset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1976
 *     self._paths.get().Reset()
 * 
 *   cpdef void next(self):             # <<<<<<<<<<<<<<
 *     """
 *     next(self)
 */

static PyObject *__pyx_pw_6pynini_11StringPaths_15next(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static void __pyx_f_6pynini_11StringPaths_next(struct __pyx_obj_6pynini_StringPaths *__pyx_v_self, int __pyx_skip_dispatch) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("next", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_next); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1976; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_11StringPaths_15next)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1976; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1976; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":1985
 *     should use the Pythonic API.
 *     """
 *     self._paths.get().Next()             # <<<<<<<<<<<<<<
 * 
 *   cpdef string istring(self):
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_paths");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1985; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_self->_paths.get()->Next();

  /* "pynini.pyx":1976
 *     self._paths.get().Reset()
 * 
 *   cpdef void next(self):             # <<<<<<<<<<<<<<
 *     """
 *     next(self)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("pynini.StringPaths.next", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_11StringPaths_15next(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pynini_11StringPaths_14next[] = "\n    next(self)\n\n    Advances the iterator.\n\n    This method is provided for compatibility with the C++ API only; most users\n    should use the Pythonic API.\n    ";
static PyObject *__pyx_pw_6pynini_11StringPaths_15next(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("next (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_11StringPaths_14next(((struct __pyx_obj_6pynini_StringPaths *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_11StringPaths_14next(struct __pyx_obj_6pynini_StringPaths *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("next", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_f_6pynini_11StringPaths_next(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1976; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.StringPaths.next", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1987
 *     self._paths.get().Next()
 * 
 *   cpdef string istring(self):             # <<<<<<<<<<<<<<
 *     """
 *     istring(self)
 */

static PyObject *__pyx_pw_6pynini_11StringPaths_17istring(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static std::string __pyx_f_6pynini_11StringPaths_istring(struct __pyx_obj_6pynini_StringPaths *__pyx_v_self, int __pyx_skip_dispatch) {
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("istring", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_istring); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1987; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_11StringPaths_17istring)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1987; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1987; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1987; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":1999
 *       The path's input string.
 *     """
 *     return self._paths.get().IString()             # <<<<<<<<<<<<<<
 * 
 *   cpdef string ostring(self):
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_paths");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1999; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_r = __pyx_v_self->_paths.get()->IString();
  goto __pyx_L0;

  /* "pynini.pyx":1987
 *     self._paths.get().Next()
 * 
 *   cpdef string istring(self):             # <<<<<<<<<<<<<<
 *     """
 *     istring(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("pynini.StringPaths.istring", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_11StringPaths_17istring(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pynini_11StringPaths_16istring[] = "\n    istring(self)\n\n    Returns the current path's input string.\n\n    This method is provided for compatibility with the C++ API only; most users\n    should use the Pythonic API.\n\n    Returns:\n      The path's input string.\n    ";
static PyObject *__pyx_pw_6pynini_11StringPaths_17istring(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("istring (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_11StringPaths_16istring(((struct __pyx_obj_6pynini_StringPaths *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_11StringPaths_16istring(struct __pyx_obj_6pynini_StringPaths *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("istring", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_f_6pynini_11StringPaths_istring(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1987; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.StringPaths.istring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2001
 *     return self._paths.get().IString()
 * 
 *   cpdef string ostring(self):             # <<<<<<<<<<<<<<
 *     """
 *     ostring(self)
 */

static PyObject *__pyx_pw_6pynini_11StringPaths_19ostring(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static std::string __pyx_f_6pynini_11StringPaths_ostring(struct __pyx_obj_6pynini_StringPaths *__pyx_v_self, int __pyx_skip_dispatch) {
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("ostring", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ostring); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2001; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_11StringPaths_19ostring)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2001; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2001; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2001; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":2013
 *       The path's output string.
 *     """
 *     return self._paths.get().OString()             # <<<<<<<<<<<<<<
 * 
 *   cpdef _Weight weight(self):
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_paths");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2013; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_r = __pyx_v_self->_paths.get()->OString();
  goto __pyx_L0;

  /* "pynini.pyx":2001
 *     return self._paths.get().IString()
 * 
 *   cpdef string ostring(self):             # <<<<<<<<<<<<<<
 *     """
 *     ostring(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("pynini.StringPaths.ostring", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_11StringPaths_19ostring(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pynini_11StringPaths_18ostring[] = "\n    ostring(self)\n\n    Returns the current path's output string.\n\n    This method is provided for compatibility with the C++ API only; most users\n    should use the Pythonic API.\n\n    Returns:\n      The path's output string.\n    ";
static PyObject *__pyx_pw_6pynini_11StringPaths_19ostring(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ostring (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_11StringPaths_18ostring(((struct __pyx_obj_6pynini_StringPaths *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_11StringPaths_18ostring(struct __pyx_obj_6pynini_StringPaths *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("ostring", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_f_6pynini_11StringPaths_ostring(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2001; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.StringPaths.ostring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2015
 *     return self._paths.get().OString()
 * 
 *   cpdef _Weight weight(self):             # <<<<<<<<<<<<<<
 *     """
 *     weight(self)
 */

static PyObject *__pyx_pw_6pynini_11StringPaths_21weight(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static struct __pyx_obj_9pywrapfst_Weight *__pyx_f_6pynini_11StringPaths_weight(struct __pyx_obj_6pynini_StringPaths *__pyx_v_self, int __pyx_skip_dispatch) {
  struct __pyx_obj_9pywrapfst_Weight *__pyx_v_weight = 0;
  struct __pyx_obj_9pywrapfst_Weight *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("weight", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_weight); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2015; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_11StringPaths_21weight)) {
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2015; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2015; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_9pywrapfst_Weight))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2015; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_r = ((struct __pyx_obj_9pywrapfst_Weight *)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":2027
 *       The path's Weight.
 *     """
 *     cdef _Weight weight = _Weight.__new__(_Weight)             # <<<<<<<<<<<<<<
 *     weight._weight.reset(new WeightClass(self._paths.get().Weight()))
 *     return weight
 */
  __pyx_t_1 = __Pyx_tp_new(((PyObject *)__pyx_ptype_9pywrapfst_Weight), __pyx_empty_tuple); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2027; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9pywrapfst_Weight)))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2027; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_weight = ((struct __pyx_obj_9pywrapfst_Weight *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":2028
 *     """
 *     cdef _Weight weight = _Weight.__new__(_Weight)
 *     weight._weight.reset(new WeightClass(self._paths.get().Weight()))             # <<<<<<<<<<<<<<
 *     return weight
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_weight) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_weight");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2028; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_paths");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2028; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_weight->_weight.reset(new fst::script::WeightClass(__pyx_v_self->_paths.get()->Weight()));

  /* "pynini.pyx":2029
 *     cdef _Weight weight = _Weight.__new__(_Weight)
 *     weight._weight.reset(new WeightClass(self._paths.get().Weight()))
 *     return weight             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_weight));
  __pyx_r = __pyx_v_weight;
  goto __pyx_L0;

  /* "pynini.pyx":2015
 *     return self._paths.get().OString()
 * 
 *   cpdef _Weight weight(self):             # <<<<<<<<<<<<<<
 *     """
 *     weight(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynini.StringPaths.weight", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_weight);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_11StringPaths_21weight(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pynini_11StringPaths_20weight[] = "\n    weight(self)\n\n    Returns the current path's total weight.\n\n    This method is provided for compatibility with the C++ API only; most users\n    should use the Pythonic API.\n\n    Returns:\n      The path's Weight.\n    ";
static PyObject *__pyx_pw_6pynini_11StringPaths_21weight(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("weight (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_11StringPaths_20weight(((struct __pyx_obj_6pynini_StringPaths *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_11StringPaths_20weight(struct __pyx_obj_6pynini_StringPaths *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("weight", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini_11StringPaths_weight(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2015; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.StringPaths.weight", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2069
 *   # Instances holds either a FarReader or a FarWriter, a boolean indicating
 * 
 *   def __init__(self, filename, mode=b"r", arc_type=b"standard",             # <<<<<<<<<<<<<<
 *                far_type=b"default"):
 *     self._name = tostring(filename)
 */

/* Python wrapper */
static int __pyx_pw_6pynini_3Far_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pynini_3Far_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_mode = 0;
  PyObject *__pyx_v_arc_type = 0;
  PyObject *__pyx_v_far_type = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_mode,&__pyx_n_s_arc_type,&__pyx_n_s_far_type,0};
    PyObject* values[4] = {0,0,0,0};
    values[1] = ((PyObject *)__pyx_n_b_r);
    values[2] = ((PyObject *)__pyx_n_b_standard);
    values[3] = ((PyObject *)__pyx_n_b_default);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mode);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arc_type);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_far_type);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2069; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = values[0];
    __pyx_v_mode = values[1];
    __pyx_v_arc_type = values[2];
    __pyx_v_far_type = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2069; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.Far.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_3Far___init__(((struct __pyx_obj_6pynini_Far *)__pyx_v_self), __pyx_v_filename, __pyx_v_mode, __pyx_v_arc_type, __pyx_v_far_type);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pynini_3Far___init__(struct __pyx_obj_6pynini_Far *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_mode, PyObject *__pyx_v_arc_type, PyObject *__pyx_v_far_type) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pynini.pyx":2071
 *   def __init__(self, filename, mode=b"r", arc_type=b"standard",
 *                far_type=b"default"):
 *     self._name = tostring(filename)             # <<<<<<<<<<<<<<
 *     self._mode = tostring(mode)[0]
 *     if self._mode == b"r":
 */
  __pyx_t_1 = __pyx_f_9pywrapfst_tostring(__pyx_v_filename, NULL); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2071; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_name");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2071; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_self->_name = __pyx_t_1;

  /* "pynini.pyx":2072
 *                far_type=b"default"):
 *     self._name = tostring(filename)
 *     self._mode = tostring(mode)[0]             # <<<<<<<<<<<<<<
 *     if self._mode == b"r":
 *       self._reader = FarReader.open(self._name)
 */
  __pyx_t_1 = __pyx_f_9pywrapfst_tostring(__pyx_v_mode, NULL); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2072; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_mode");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2072; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_self->_mode = (__pyx_t_1[0]);

  /* "pynini.pyx":2073
 *     self._name = tostring(filename)
 *     self._mode = tostring(mode)[0]
 *     if self._mode == b"r":             # <<<<<<<<<<<<<<
 *       self._reader = FarReader.open(self._name)
 *     elif self._mode == b"w":
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_mode");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2073; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = ((__pyx_v_self->_mode == 'r') != 0);
  if (__pyx_t_2) {

    /* "pynini.pyx":2074
 *     self._mode = tostring(mode)[0]
 *     if self._mode == b"r":
 *       self._reader = FarReader.open(self._name)             # <<<<<<<<<<<<<<
 *     elif self._mode == b"w":
 *       self._writer = FarWriter.create(self._name, arc_type=arc_type,
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9pywrapfst_FarReader), __pyx_n_s_open); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2074; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_name");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2074; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_5 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->_name); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2074; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2074; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2074; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2074; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_9pywrapfst_FarReader))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2074; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_reader");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2074; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_v_self->_reader);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->_reader));
    __pyx_v_self->_reader = ((struct __pyx_obj_9pywrapfst_FarReader *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pynini.pyx":2073
 *     self._name = tostring(filename)
 *     self._mode = tostring(mode)[0]
 *     if self._mode == b"r":             # <<<<<<<<<<<<<<
 *       self._reader = FarReader.open(self._name)
 *     elif self._mode == b"w":
 */
    goto __pyx_L3;
  }

  /* "pynini.pyx":2075
 *     if self._mode == b"r":
 *       self._reader = FarReader.open(self._name)
 *     elif self._mode == b"w":             # <<<<<<<<<<<<<<
 *       self._writer = FarWriter.create(self._name, arc_type=arc_type,
 *                                       far_type=far_type)
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_mode");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2075; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = ((__pyx_v_self->_mode == 'w') != 0);
  if (__pyx_t_2) {

    /* "pynini.pyx":2076
 *       self._reader = FarReader.open(self._name)
 *     elif self._mode == b"w":
 *       self._writer = FarWriter.create(self._name, arc_type=arc_type,             # <<<<<<<<<<<<<<
 *                                       far_type=far_type)
 *     else:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9pywrapfst_FarWriter), __pyx_n_s_create); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2076; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_name");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2076; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_4 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->_name); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2076; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2076; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2076; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_arc_type, __pyx_v_arc_type) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2076; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pynini.pyx":2077
 *     elif self._mode == b"w":
 *       self._writer = FarWriter.create(self._name, arc_type=arc_type,
 *                                       far_type=far_type)             # <<<<<<<<<<<<<<
 *     else:
 *       raise FstArgError("Unknown mode: {!r}".format(mode))
 */
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_far_type, __pyx_v_far_type) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2076; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pynini.pyx":2076
 *       self._reader = FarReader.open(self._name)
 *     elif self._mode == b"w":
 *       self._writer = FarWriter.create(self._name, arc_type=arc_type,             # <<<<<<<<<<<<<<
 *                                       far_type=far_type)
 *     else:
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, __pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2076; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_9pywrapfst_FarWriter))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2076; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_writer");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2076; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __Pyx_GIVEREF(__pyx_t_5);
    __Pyx_GOTREF(__pyx_v_self->_writer);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->_writer));
    __pyx_v_self->_writer = ((struct __pyx_obj_9pywrapfst_FarWriter *)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "pynini.pyx":2075
 *     if self._mode == b"r":
 *       self._reader = FarReader.open(self._name)
 *     elif self._mode == b"w":             # <<<<<<<<<<<<<<
 *       self._writer = FarWriter.create(self._name, arc_type=arc_type,
 *                                       far_type=far_type)
 */
    goto __pyx_L3;
  }

  /* "pynini.pyx":2079
 *                                       far_type=far_type)
 *     else:
 *       raise FstArgError("Unknown mode: {!r}".format(mode))             # <<<<<<<<<<<<<<
 * 
 *   def __repr__(self):
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstArgError); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2079; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Unknown_mode_r, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2079; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_mode); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2079; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
    } else {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2079; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_INCREF(__pyx_v_mode);
      __Pyx_GIVEREF(__pyx_v_mode);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_v_mode);
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2079; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_3) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_7); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2079; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2079; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2079; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2079; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "pynini.pyx":2069
 *   # Instances holds either a FarReader or a FarWriter, a boolean indicating
 * 
 *   def __init__(self, filename, mode=b"r", arc_type=b"standard",             # <<<<<<<<<<<<<<
 *                far_type=b"default"):
 *     self._name = tostring(filename)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pynini.Far.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2081
 *       raise FstArgError("Unknown mode: {!r}".format(mode))
 * 
 *   def __repr__(self):             # <<<<<<<<<<<<<<
 *     return "<{} Far {!r}, mode '{:c}' at 0x{:x}>".format(self.far_type,
 *                                                          self._name,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Far_3__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pynini_3Far_3__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Far_2__repr__(((struct __pyx_obj_6pynini_Far *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Far_2__repr__(struct __pyx_obj_6pynini_Far *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "pynini.pyx":2082
 * 
 *   def __repr__(self):
 *     return "<{} Far {!r}, mode '{:c}' at 0x{:x}>".format(self.far_type,             # <<<<<<<<<<<<<<
 *                                                          self._name,
 *                                                          self._mode,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Far_r_mode_c_at_0x_x, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2082; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_far_type); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2082; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);

  /* "pynini.pyx":2083
 *   def __repr__(self):
 *     return "<{} Far {!r}, mode '{:c}' at 0x{:x}>".format(self.far_type,
 *                                                          self._name,             # <<<<<<<<<<<<<<
 *                                                          self._mode,
 *                                                          id(self))
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_name");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2083; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_4 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->_name); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2083; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);

  /* "pynini.pyx":2084
 *     return "<{} Far {!r}, mode '{:c}' at 0x{:x}>".format(self.far_type,
 *                                                          self._name,
 *                                                          self._mode,             # <<<<<<<<<<<<<<
 *                                                          id(self))
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_mode");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2084; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_5 = __Pyx_PyInt_From_char(__pyx_v_self->_mode); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2084; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);

  /* "pynini.pyx":2085
 *                                                          self._name,
 *                                                          self._mode,
 *                                                          id(self))             # <<<<<<<<<<<<<<
 * 
 *   cdef void _check_mode(self, char mode) except *:
 */
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2085; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_6, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_id, __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2085; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_8 = 1;
    }
  }
  __pyx_t_9 = PyTuple_New(4+__pyx_t_8); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2082; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  if (__pyx_t_6) {
    __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_6); __pyx_t_6 = NULL;
  }
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_8, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_9, 3+__pyx_t_8, __pyx_t_7);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_7 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2082; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":2081
 *       raise FstArgError("Unknown mode: {!r}".format(mode))
 * 
 *   def __repr__(self):             # <<<<<<<<<<<<<<
 *     return "<{} Far {!r}, mode '{:c}' at 0x{:x}>".format(self.far_type,
 *                                                          self._name,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pynini.Far.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2087
 *                                                          id(self))
 * 
 *   cdef void _check_mode(self, char mode) except *:             # <<<<<<<<<<<<<<
 *     if not self._mode == mode:
 *       raise FstOpError("Cannot invoke method in current mode: '{:c}'".format(
 */

static void __pyx_f_6pynini_3Far__check_mode(struct __pyx_obj_6pynini_Far *__pyx_v_self, char __pyx_v_mode) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_check_mode", 0);

  /* "pynini.pyx":2088
 * 
 *   cdef void _check_mode(self, char mode) except *:
 *     if not self._mode == mode:             # <<<<<<<<<<<<<<
 *       raise FstOpError("Cannot invoke method in current mode: '{:c}'".format(
 *                        self._mode))
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_mode");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2088; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = ((!((__pyx_v_self->_mode == __pyx_v_mode) != 0)) != 0);
  if (__pyx_t_1) {

    /* "pynini.pyx":2089
 *   cdef void _check_mode(self, char mode) except *:
 *     if not self._mode == mode:
 *       raise FstOpError("Cannot invoke method in current mode: '{:c}'".format(             # <<<<<<<<<<<<<<
 *                        self._mode))
 * 
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstOpError); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2089; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Cannot_invoke_method_in_current, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2089; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);

    /* "pynini.pyx":2090
 *     if not self._mode == mode:
 *       raise FstOpError("Cannot invoke method in current mode: '{:c}'".format(
 *                        self._mode))             # <<<<<<<<<<<<<<
 * 
 *   cdef void _check_not_mode(self, char mode) except *:
 */
    if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_mode");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2090; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_6 = __Pyx_PyInt_From_char(__pyx_v_self->_mode); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2090; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2089; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2089; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2089; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2089; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2089; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2089; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2089; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pynini.pyx":2088
 * 
 *   cdef void _check_mode(self, char mode) except *:
 *     if not self._mode == mode:             # <<<<<<<<<<<<<<
 *       raise FstOpError("Cannot invoke method in current mode: '{:c}'".format(
 *                        self._mode))
 */
  }

  /* "pynini.pyx":2087
 *                                                          id(self))
 * 
 *   cdef void _check_mode(self, char mode) except *:             # <<<<<<<<<<<<<<
 *     if not self._mode == mode:
 *       raise FstOpError("Cannot invoke method in current mode: '{:c}'".format(
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pynini.Far._check_mode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "pynini.pyx":2092
 *                        self._mode))
 * 
 *   cdef void _check_not_mode(self, char mode) except *:             # <<<<<<<<<<<<<<
 *     if self._mode == mode:
 *       raise FstOpError("Cannot invoke method in current mode: '{:c}'".format(
 */

static void __pyx_f_6pynini_3Far__check_not_mode(struct __pyx_obj_6pynini_Far *__pyx_v_self, char __pyx_v_mode) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_check_not_mode", 0);

  /* "pynini.pyx":2093
 * 
 *   cdef void _check_not_mode(self, char mode) except *:
 *     if self._mode == mode:             # <<<<<<<<<<<<<<
 *       raise FstOpError("Cannot invoke method in current mode: '{:c}'".format(
 *                        self._mode))
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_mode");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2093; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = ((__pyx_v_self->_mode == __pyx_v_mode) != 0);
  if (__pyx_t_1) {

    /* "pynini.pyx":2094
 *   cdef void _check_not_mode(self, char mode) except *:
 *     if self._mode == mode:
 *       raise FstOpError("Cannot invoke method in current mode: '{:c}'".format(             # <<<<<<<<<<<<<<
 *                        self._mode))
 * 
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstOpError); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2094; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Cannot_invoke_method_in_current, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2094; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);

    /* "pynini.pyx":2095
 *     if self._mode == mode:
 *       raise FstOpError("Cannot invoke method in current mode: '{:c}'".format(
 *                        self._mode))             # <<<<<<<<<<<<<<
 * 
 *   # API shared between FarReader and FarWriter.
 */
    if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_mode");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2095; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_6 = __Pyx_PyInt_From_char(__pyx_v_self->_mode); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2095; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2094; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2094; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2094; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2094; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2094; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2094; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2094; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pynini.pyx":2093
 * 
 *   cdef void _check_not_mode(self, char mode) except *:
 *     if self._mode == mode:             # <<<<<<<<<<<<<<
 *       raise FstOpError("Cannot invoke method in current mode: '{:c}'".format(
 *                        self._mode))
 */
  }

  /* "pynini.pyx":2092
 *                        self._mode))
 * 
 *   cdef void _check_not_mode(self, char mode) except *:             # <<<<<<<<<<<<<<
 *     if self._mode == mode:
 *       raise FstOpError("Cannot invoke method in current mode: '{:c}'".format(
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pynini.Far._check_not_mode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "pynini.pyx":2099
 *   # API shared between FarReader and FarWriter.
 * 
 *   cpdef bool error(self) except *:             # <<<<<<<<<<<<<<
 *     """
 *     error(self)
 */

static PyObject *__pyx_pw_6pynini_3Far_5error(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static bool __pyx_f_6pynini_3Far_error(struct __pyx_obj_6pynini_Far *__pyx_v_self, int __pyx_skip_dispatch) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("error", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_error); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2099; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_3Far_5error)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2099; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2099; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2099; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":2108
 *       True if the FAR is in an errorful state, False otherwise.
 *     """
 *     self._check_not_mode(b"c")             # <<<<<<<<<<<<<<
 *     return self._reader.error() if self._mode == b"r" else self._writer.error()
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_check_not_mode");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  ((struct __pyx_vtabstruct_6pynini_Far *)__pyx_v_self->__pyx_vtab)->_check_not_mode(__pyx_v_self, 'c'); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":2109
 *     """
 *     self._check_not_mode(b"c")
 *     return self._reader.error() if self._mode == b"r" else self._writer.error()             # <<<<<<<<<<<<<<
 * 
 *   @property
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_mode");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (((__pyx_v_self->_mode == 'r') != 0)) {
    if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_reader");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    if (unlikely(((PyObject *)__pyx_v_self->_reader) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "error");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_5 = ((struct __pyx_vtabstruct_9pywrapfst_FarReader *)__pyx_v_self->_reader->__pyx_vtab)->error(__pyx_v_self->_reader, 0);
  } else {
    if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_writer");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    if (unlikely(((PyObject *)__pyx_v_self->_writer) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "error");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_5 = ((struct __pyx_vtabstruct_9pywrapfst_FarWriter *)__pyx_v_self->_writer->__pyx_vtab)->error(__pyx_v_self->_writer, 0);
  }
  __pyx_r = __pyx_t_5;
  goto __pyx_L0;

  /* "pynini.pyx":2099
 *   # API shared between FarReader and FarWriter.
 * 
 *   cpdef bool error(self) except *:             # <<<<<<<<<<<<<<
 *     """
 *     error(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynini.Far.error", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Far_5error(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pynini_3Far_4error[] = "\n    error(self)\n\n    Indicates whether the FAR has encountered an error.\n\n    Returns:\n      True if the FAR is in an errorful state, False otherwise.\n    ";
static PyObject *__pyx_pw_6pynini_3Far_5error(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("error (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Far_4error(((struct __pyx_obj_6pynini_Far *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Far_4error(struct __pyx_obj_6pynini_Far *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("error", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pynini_3Far_error(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2099; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2099; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pynini.Far.error", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2112
 * 
 *   @property
 *   def arc_type(self):             # <<<<<<<<<<<<<<
 *     self._check_not_mode(b"c")
 *     return (self._reader._arc_type() if self._mode == b"r" else
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Far_7arc_type(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6pynini_3Far_7arc_type(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("arc_type (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Far_6arc_type(((struct __pyx_obj_6pynini_Far *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Far_6arc_type(struct __pyx_obj_6pynini_Far *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("arc_type", 0);

  /* "pynini.pyx":2113
 *   @property
 *   def arc_type(self):
 *     self._check_not_mode(b"c")             # <<<<<<<<<<<<<<
 *     return (self._reader._arc_type() if self._mode == b"r" else
 *             self._writer._arc_type())
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_check_not_mode");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  ((struct __pyx_vtabstruct_6pynini_Far *)__pyx_v_self->__pyx_vtab)->_check_not_mode(__pyx_v_self, 'c'); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":2114
 *   def arc_type(self):
 *     self._check_not_mode(b"c")
 *     return (self._reader._arc_type() if self._mode == b"r" else             # <<<<<<<<<<<<<<
 *             self._writer._arc_type())
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_mode");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (((__pyx_v_self->_mode == 'r') != 0)) {
    if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_reader");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    if (unlikely(((PyObject *)__pyx_v_self->_reader) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_arc_type");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(((struct __pyx_vtabstruct_9pywrapfst_FarReader *)__pyx_v_self->_reader->__pyx_vtab)->_arc_type(__pyx_v_self->_reader)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  } else {

    /* "pynini.pyx":2115
 *     self._check_not_mode(b"c")
 *     return (self._reader._arc_type() if self._mode == b"r" else
 *             self._writer._arc_type())             # <<<<<<<<<<<<<<
 * 
 *   @property
 */
    if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_writer");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    if (unlikely(((PyObject *)__pyx_v_self->_writer) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_arc_type");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(((struct __pyx_vtabstruct_9pywrapfst_FarWriter *)__pyx_v_self->_writer->__pyx_vtab)->_arc_type(__pyx_v_self->_writer)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":2112
 * 
 *   @property
 *   def arc_type(self):             # <<<<<<<<<<<<<<
 *     self._check_not_mode(b"c")
 *     return (self._reader._arc_type() if self._mode == b"r" else
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pynini.Far.arc_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2118
 * 
 *   @property
 *   def closed(self):             # <<<<<<<<<<<<<<
 *     return self._mode == b"c"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Far_9closed(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6pynini_3Far_9closed(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("closed (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Far_8closed(((struct __pyx_obj_6pynini_Far *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Far_8closed(struct __pyx_obj_6pynini_Far *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("closed", 0);

  /* "pynini.pyx":2119
 *   @property
 *   def closed(self):
 *     return self._mode == b"c"             # <<<<<<<<<<<<<<
 * 
 *   @property
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_mode");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->_mode == 'c')); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":2118
 * 
 *   @property
 *   def closed(self):             # <<<<<<<<<<<<<<
 *     return self._mode == b"c"
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.Far.closed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2122
 * 
 *   @property
 *   def far_type(self):             # <<<<<<<<<<<<<<
 *     if self._mode == b"r":
 *       return self._reader._far_type()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Far_11far_type(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6pynini_3Far_11far_type(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("far_type (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Far_10far_type(((struct __pyx_obj_6pynini_Far *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Far_10far_type(struct __pyx_obj_6pynini_Far *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("far_type", 0);

  /* "pynini.pyx":2123
 *   @property
 *   def far_type(self):
 *     if self._mode == b"r":             # <<<<<<<<<<<<<<
 *       return self._reader._far_type()
 *     elif self._mode == b"w":
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_mode");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = ((__pyx_v_self->_mode == 'r') != 0);
  if (__pyx_t_1) {

    /* "pynini.pyx":2124
 *   def far_type(self):
 *     if self._mode == b"r":
 *       return self._reader._far_type()             # <<<<<<<<<<<<<<
 *     elif self._mode == b"w":
 *       return self._writer._far_type()
 */
    __Pyx_XDECREF(__pyx_r);
    if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_reader");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    if (unlikely(((PyObject *)__pyx_v_self->_reader) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_far_type");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(((struct __pyx_vtabstruct_9pywrapfst_FarReader *)__pyx_v_self->_reader->__pyx_vtab)->_far_type(__pyx_v_self->_reader)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pynini.pyx":2123
 *   @property
 *   def far_type(self):
 *     if self._mode == b"r":             # <<<<<<<<<<<<<<
 *       return self._reader._far_type()
 *     elif self._mode == b"w":
 */
  }

  /* "pynini.pyx":2125
 *     if self._mode == b"r":
 *       return self._reader._far_type()
 *     elif self._mode == b"w":             # <<<<<<<<<<<<<<
 *       return self._writer._far_type()
 *     else:
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_mode");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = ((__pyx_v_self->_mode == 'w') != 0);
  if (__pyx_t_1) {

    /* "pynini.pyx":2126
 *       return self._reader._far_type()
 *     elif self._mode == b"w":
 *       return self._writer._far_type()             # <<<<<<<<<<<<<<
 *     else:
 *       return "closed"
 */
    __Pyx_XDECREF(__pyx_r);
    if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_writer");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    if (unlikely(((PyObject *)__pyx_v_self->_writer) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_far_type");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(((struct __pyx_vtabstruct_9pywrapfst_FarWriter *)__pyx_v_self->_writer->__pyx_vtab)->_far_type(__pyx_v_self->_writer)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pynini.pyx":2125
 *     if self._mode == b"r":
 *       return self._reader._far_type()
 *     elif self._mode == b"w":             # <<<<<<<<<<<<<<
 *       return self._writer._far_type()
 *     else:
 */
  }

  /* "pynini.pyx":2128
 *       return self._writer._far_type()
 *     else:
 *       return "closed"             # <<<<<<<<<<<<<<
 * 
 *   @property
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_closed);
    __pyx_r = __pyx_n_s_closed;
    goto __pyx_L0;
  }

  /* "pynini.pyx":2122
 * 
 *   @property
 *   def far_type(self):             # <<<<<<<<<<<<<<
 *     if self._mode == b"r":
 *       return self._reader._far_type()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pynini.Far.far_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2131
 * 
 *   @property
 *   def mode(self):             # <<<<<<<<<<<<<<
 *     return "{:c}".format(self._mode)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Far_13mode(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6pynini_3Far_13mode(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mode (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Far_12mode(((struct __pyx_obj_6pynini_Far *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Far_12mode(struct __pyx_obj_6pynini_Far *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mode", 0);

  /* "pynini.pyx":2132
 *   @property
 *   def mode(self):
 *     return "{:c}".format(self._mode)             # <<<<<<<<<<<<<<
 * 
 *   @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_c, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_mode");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_3 = __Pyx_PyInt_From_char(__pyx_v_self->_mode); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":2131
 * 
 *   @property
 *   def mode(self):             # <<<<<<<<<<<<<<
 *     return "{:c}".format(self._mode)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynini.Far.mode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2135
 * 
 *   @property
 *   def name(self):             # <<<<<<<<<<<<<<
 *     return self._name
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Far_15name(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6pynini_3Far_15name(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("name (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Far_14name(((struct __pyx_obj_6pynini_Far *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Far_14name(struct __pyx_obj_6pynini_Far *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("name", 0);

  /* "pynini.pyx":2136
 *   @property
 *   def name(self):
 *     return self._name             # <<<<<<<<<<<<<<
 * 
 *   # FarReader API.
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_name");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->_name); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":2135
 * 
 *   @property
 *   def name(self):             # <<<<<<<<<<<<<<
 *     return self._name
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.Far.name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2141
 * 
 *   # This just registers this class as a possible iterator.
 *   def __iter__(self):             # <<<<<<<<<<<<<<
 *     return self
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Far_17__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pynini_3Far_17__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Far_16__iter__(((struct __pyx_obj_6pynini_Far *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Far_16__iter__(struct __pyx_obj_6pynini_Far *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "pynini.pyx":2142
 *   # This just registers this class as a possible iterator.
 *   def __iter__(self):
 *     return self             # <<<<<<<<<<<<<<
 * 
 *   def __next__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pynini.pyx":2141
 * 
 *   # This just registers this class as a possible iterator.
 *   def __iter__(self):             # <<<<<<<<<<<<<<
 *     return self
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2144
 *     return self
 * 
 *   def __next__(self):             # <<<<<<<<<<<<<<
 *     self._check_mode(b"r")
 *     (key, mfst) = next(self._reader)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Far_19__next__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pynini_3Far_19__next__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__next__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Far_18__next__(((struct __pyx_obj_6pynini_Far *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Far_18__next__(struct __pyx_obj_6pynini_Far *__pyx_v_self) {
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_mfst = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__next__", 0);

  /* "pynini.pyx":2145
 * 
 *   def __next__(self):
 *     self._check_mode(b"r")             # <<<<<<<<<<<<<<
 *     (key, mfst) = next(self._reader)
 *     return (key, _init_Fst_from_MutableFst(mfst))
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_check_mode");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  ((struct __pyx_vtabstruct_6pynini_Far *)__pyx_v_self->__pyx_vtab)->_check_mode(__pyx_v_self, 'r'); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":2146
 *   def __next__(self):
 *     self._check_mode(b"r")
 *     (key, mfst) = next(self._reader)             # <<<<<<<<<<<<<<
 *     return (key, _init_Fst_from_MutableFst(mfst))
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_reader");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = ((PyObject *)__pyx_v_self->_reader);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyIter_Next(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
    PyObject* sequence = __pyx_t_2;
    #if CYTHON_COMPILING_IN_CPYTHON
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    #if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_3 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_4), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_key = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_mfst = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pynini.pyx":2147
 *     self._check_mode(b"r")
 *     (key, mfst) = next(self._reader)
 *     return (key, _init_Fst_from_MutableFst(mfst))             # <<<<<<<<<<<<<<
 * 
 *   cpdef bool find(self, key) except *:
 */
  __Pyx_XDECREF(__pyx_r);
  if (!(likely(((__pyx_v_mfst) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_mfst, __pyx_ptype_9pywrapfst__MutableFst))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((PyObject *)__pyx_f_6pynini__init_Fst_from_MutableFst(((struct __pyx_obj_9pywrapfst__MutableFst *)__pyx_v_mfst))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_key);
  __Pyx_GIVEREF(__pyx_v_key);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_key);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":2144
 *     return self
 * 
 *   def __next__(self):             # <<<<<<<<<<<<<<
 *     self._check_mode(b"r")
 *     (key, mfst) = next(self._reader)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynini.Far.__next__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_mfst);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2149
 *     return (key, _init_Fst_from_MutableFst(mfst))
 * 
 *   cpdef bool find(self, key) except *:             # <<<<<<<<<<<<<<
 *     """
 *     find(self, key)
 */

static PyObject *__pyx_pw_6pynini_3Far_21find(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static bool __pyx_f_6pynini_3Far_find(struct __pyx_obj_6pynini_Far *__pyx_v_self, PyObject *__pyx_v_key, int __pyx_skip_dispatch) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  bool __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("find", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_find); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_3Far_21find)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_key); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(__pyx_v_key);
        __Pyx_GIVEREF(__pyx_v_key);
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_key);
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_6 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_6;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":2168
 *       FstOpError: Cannot invoke method in current mode.
 *     """
 *     self._check_mode(b"r")             # <<<<<<<<<<<<<<
 *     return self._reader.find(key)
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_check_mode");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  ((struct __pyx_vtabstruct_6pynini_Far *)__pyx_v_self->__pyx_vtab)->_check_mode(__pyx_v_self, 'r'); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":2169
 *     """
 *     self._check_mode(b"r")
 *     return self._reader.find(key)             # <<<<<<<<<<<<<<
 * 
 *   def get_fst(self):
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_reader");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (unlikely(((PyObject *)__pyx_v_self->_reader) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "find");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_r = ((struct __pyx_vtabstruct_9pywrapfst_FarReader *)__pyx_v_self->_reader->__pyx_vtab)->find(__pyx_v_self->_reader, __pyx_v_key, 0);
  goto __pyx_L0;

  /* "pynini.pyx":2149
 *     return (key, _init_Fst_from_MutableFst(mfst))
 * 
 *   cpdef bool find(self, key) except *:             # <<<<<<<<<<<<<<
 *     """
 *     find(self, key)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynini.Far.find", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Far_21find(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static char __pyx_doc_6pynini_3Far_20find[] = "\n    find(self, key)\n\n    Sets the current position to the first entry greater than or equal to the\n    key (a string) and indicates whether or not a match was found.\n\n    This method is provided for compatibility with the C++ API only; most users\n    should use the Pythonic API.\n\n    Args:\n      key: A string key.\n\n    Returns:\n      True if the key was found, False otherwise.\n\n    Raises:\n      FstOpError: Cannot invoke method in current mode.\n    ";
static PyObject *__pyx_pw_6pynini_3Far_21find(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("find (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Far_20find(((struct __pyx_obj_6pynini_Far *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Far_20find(struct __pyx_obj_6pynini_Far *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("find", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pynini_3Far_find(__pyx_v_self, __pyx_v_key, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pynini.Far.find", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2171
 *     return self._reader.find(key)
 * 
 *   def get_fst(self):             # <<<<<<<<<<<<<<
 *     """
 *     get_fst(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Far_23get_fst(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pynini_3Far_22get_fst[] = "\n    get_fst(self)\n\n    Returns the FST at the current position.\n\n    This method is provided for compatibility with the C++ API only; most users\n    should use the Pythonic API.\n\n    Returns:\n      A copy of the FST at the current position.\n\n    Raises:\n      FstOpError: Cannot invoke method in current mode.\n    ";
static PyObject *__pyx_pw_6pynini_3Far_23get_fst(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_fst (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Far_22get_fst(((struct __pyx_obj_6pynini_Far *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Far_22get_fst(struct __pyx_obj_6pynini_Far *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_fst", 0);

  /* "pynini.pyx":2186
 *       FstOpError: Cannot invoke method in current mode.
 *     """
 *     self._check_mode(b"r")             # <<<<<<<<<<<<<<
 *     return _init_Fst_from_MutableFst(self._reader.get_fst())
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_check_mode");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  ((struct __pyx_vtabstruct_6pynini_Far *)__pyx_v_self->__pyx_vtab)->_check_mode(__pyx_v_self, 'r'); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":2187
 *     """
 *     self._check_mode(b"r")
 *     return _init_Fst_from_MutableFst(self._reader.get_fst())             # <<<<<<<<<<<<<<
 * 
 *   cpdef string get_key(self) except *:
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_reader");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (unlikely(((PyObject *)__pyx_v_self->_reader) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get_fst");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_9pywrapfst_FarReader *)__pyx_v_self->_reader->__pyx_vtab)->get_fst(__pyx_v_self->_reader, 0)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9pywrapfst__MutableFst))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((PyObject *)__pyx_f_6pynini__init_Fst_from_MutableFst(((struct __pyx_obj_9pywrapfst__MutableFst *)__pyx_t_1))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":2171
 *     return self._reader.find(key)
 * 
 *   def get_fst(self):             # <<<<<<<<<<<<<<
 *     """
 *     get_fst(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pynini.Far.get_fst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2189
 *     return _init_Fst_from_MutableFst(self._reader.get_fst())
 * 
 *   cpdef string get_key(self) except *:             # <<<<<<<<<<<<<<
 *     """
 *     get_key(self)
 */

static PyObject *__pyx_pw_6pynini_3Far_25get_key(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static std::string __pyx_f_6pynini_3Far_get_key(struct __pyx_obj_6pynini_Far *__pyx_v_self, int __pyx_skip_dispatch) {
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_key", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_key); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_3Far_25get_key)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":2204
 *       FstOpError: Cannot invoke method in current mode.
 *     """
 *     self._check_mode(b"r")             # <<<<<<<<<<<<<<
 *     return self._reader.get_key()
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_check_mode");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  ((struct __pyx_vtabstruct_6pynini_Far *)__pyx_v_self->__pyx_vtab)->_check_mode(__pyx_v_self, 'r'); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":2205
 *     """
 *     self._check_mode(b"r")
 *     return self._reader.get_key()             # <<<<<<<<<<<<<<
 * 
 *   cpdef void next(self) except *:
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_reader");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (unlikely(((PyObject *)__pyx_v_self->_reader) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get_key");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_r = ((struct __pyx_vtabstruct_9pywrapfst_FarReader *)__pyx_v_self->_reader->__pyx_vtab)->get_key(__pyx_v_self->_reader, 0);
  goto __pyx_L0;

  /* "pynini.pyx":2189
 *     return _init_Fst_from_MutableFst(self._reader.get_fst())
 * 
 *   cpdef string get_key(self) except *:             # <<<<<<<<<<<<<<
 *     """
 *     get_key(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynini.Far.get_key", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Far_25get_key(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pynini_3Far_24get_key[] = "\n    get_key(self)\n\n    Returns the string key at the current position.\n\n    This method is provided for compatibility with the C++ API only; most users\n    should use the Pythonic API.\n\n    Returns:\n      The string key at the current position.\n\n    Raises:\n      FstOpError: Cannot invoke method in current mode.\n    ";
static PyObject *__pyx_pw_6pynini_3Far_25get_key(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_key (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Far_24get_key(((struct __pyx_obj_6pynini_Far *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Far_24get_key(struct __pyx_obj_6pynini_Far *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_key", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pynini_3Far_get_key(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pynini.Far.get_key", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2207
 *     return self._reader.get_key()
 * 
 *   cpdef void next(self) except *:             # <<<<<<<<<<<<<<
 *     """
 *     next(self)
 */

static PyObject *__pyx_pw_6pynini_3Far_27next(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static void __pyx_f_6pynini_3Far_next(struct __pyx_obj_6pynini_Far *__pyx_v_self, int __pyx_skip_dispatch) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("next", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_next); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_3Far_27next)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":2219
 *       FstOpError: Cannot invoke method in current mode.
 *     """
 *     self._check_mode(b"r")             # <<<<<<<<<<<<<<
 *     self._reader.next()
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_check_mode");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  ((struct __pyx_vtabstruct_6pynini_Far *)__pyx_v_self->__pyx_vtab)->_check_mode(__pyx_v_self, 'r'); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":2220
 *     """
 *     self._check_mode(b"r")
 *     self._reader.next()             # <<<<<<<<<<<<<<
 * 
 *   cpdef void reset(self) except *:
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_reader");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (unlikely(((PyObject *)__pyx_v_self->_reader) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "next");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  ((struct __pyx_vtabstruct_9pywrapfst_FarReader *)__pyx_v_self->_reader->__pyx_vtab)->next(__pyx_v_self->_reader, 0);

  /* "pynini.pyx":2207
 *     return self._reader.get_key()
 * 
 *   cpdef void next(self) except *:             # <<<<<<<<<<<<<<
 *     """
 *     next(self)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynini.Far.next", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Far_27next(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pynini_3Far_26next[] = "\n    next(self)\n\n    Advances the iterator.\n\n    This method is provided for compatibility with the C++ API only; most users\n    should use the Pythonic API.\n\n    Raises:\n      FstOpError: Cannot invoke method in current mode.\n    ";
static PyObject *__pyx_pw_6pynini_3Far_27next(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("next (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Far_26next(((struct __pyx_obj_6pynini_Far *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Far_26next(struct __pyx_obj_6pynini_Far *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("next", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_f_6pynini_3Far_next(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __Pyx_void_to_None(NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.Far.next", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2222
 *     self._reader.next()
 * 
 *   cpdef void reset(self) except *:             # <<<<<<<<<<<<<<
 *     """
 *     reset(self)
 */

static PyObject *__pyx_pw_6pynini_3Far_29reset(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static void __pyx_f_6pynini_3Far_reset(struct __pyx_obj_6pynini_Far *__pyx_v_self, int __pyx_skip_dispatch) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("reset", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_reset); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_3Far_29reset)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":2234
 *       FstOpError: Cannot invoke method in current mode.
 *     """
 *     self._check_mode(b"r")             # <<<<<<<<<<<<<<
 *     self._reader.reset()
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_check_mode");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  ((struct __pyx_vtabstruct_6pynini_Far *)__pyx_v_self->__pyx_vtab)->_check_mode(__pyx_v_self, 'r'); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":2235
 *     """
 *     self._check_mode(b"r")
 *     self._reader.reset()             # <<<<<<<<<<<<<<
 * 
 *   def __getitem__(self, key):
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_reader");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (unlikely(((PyObject *)__pyx_v_self->_reader) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "reset");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  ((struct __pyx_vtabstruct_9pywrapfst_FarReader *)__pyx_v_self->_reader->__pyx_vtab)->reset(__pyx_v_self->_reader, 0);

  /* "pynini.pyx":2222
 *     self._reader.next()
 * 
 *   cpdef void reset(self) except *:             # <<<<<<<<<<<<<<
 *     """
 *     reset(self)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynini.Far.reset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Far_29reset(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pynini_3Far_28reset[] = "\n    reset(self)\n\n    Resets the iterator to the initial position.\n\n    This method is provided for compatibility with the C++ API only; most users\n    should use the Pythonic API.\n\n    Raises:\n      FstOpError: Cannot invoke method in current mode.\n    ";
static PyObject *__pyx_pw_6pynini_3Far_29reset(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reset (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Far_28reset(((struct __pyx_obj_6pynini_Far *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Far_28reset(struct __pyx_obj_6pynini_Far *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("reset", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_f_6pynini_3Far_reset(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __Pyx_void_to_None(NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.Far.reset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2237
 *     self._reader.reset()
 * 
 *   def __getitem__(self, key):             # <<<<<<<<<<<<<<
 *     if not self.find(key):
 *       raise KeyError(key)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Far_31__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static PyObject *__pyx_pw_6pynini_3Far_31__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Far_30__getitem__(((struct __pyx_obj_6pynini_Far *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Far_30__getitem__(struct __pyx_obj_6pynini_Far *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pynini.pyx":2238
 * 
 *   def __getitem__(self, key):
 *     if not self.find(key):             # <<<<<<<<<<<<<<
 *       raise KeyError(key)
 *     return self.get_fst()
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "find");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = ((struct __pyx_vtabstruct_6pynini_Far *)__pyx_v_self->__pyx_vtab)->find(__pyx_v_self, __pyx_v_key, 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "pynini.pyx":2239
 *   def __getitem__(self, key):
 *     if not self.find(key):
 *       raise KeyError(key)             # <<<<<<<<<<<<<<
 *     return self.get_fst()
 * 
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_key);
    __Pyx_GIVEREF(__pyx_v_key);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_key);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_KeyError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "pynini.pyx":2238
 * 
 *   def __getitem__(self, key):
 *     if not self.find(key):             # <<<<<<<<<<<<<<
 *       raise KeyError(key)
 *     return self.get_fst()
 */
  }

  /* "pynini.pyx":2240
 *     if not self.find(key):
 *       raise KeyError(key)
 *     return self.get_fst()             # <<<<<<<<<<<<<<
 * 
 *   # FarWriter API.
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_fst); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":2237
 *     self._reader.reset()
 * 
 *   def __getitem__(self, key):             # <<<<<<<<<<<<<<
 *     if not self.find(key):
 *       raise KeyError(key)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynini.Far.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2244
 *   # FarWriter API.
 * 
 *   cpdef void add(self, key, Fst fst) except *:             # <<<<<<<<<<<<<<
 *     """
 *     add(self, key, fst)
 */

static PyObject *__pyx_pw_6pynini_3Far_33add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static void __pyx_f_6pynini_3Far_add(struct __pyx_obj_6pynini_Far *__pyx_v_self, PyObject *__pyx_v_key, struct __pyx_obj_6pynini_Fst *__pyx_v_fst, int __pyx_skip_dispatch) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_3Far_33add)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      __pyx_t_5 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_5 = 1;
        }
      }
      __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_INCREF(__pyx_v_key);
      __Pyx_GIVEREF(__pyx_v_key);
      PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_key);
      __Pyx_INCREF(((PyObject *)__pyx_v_fst));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_fst));
      PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, ((PyObject *)__pyx_v_fst));
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":2264
 *       FstOpError: Incompatible or invalid arc type.
 *     """
 *     self._check_mode(b"w")             # <<<<<<<<<<<<<<
 *     self._writer.add(key, fst)
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_check_mode");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  ((struct __pyx_vtabstruct_6pynini_Far *)__pyx_v_self->__pyx_vtab)->_check_mode(__pyx_v_self, 'w'); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":2265
 *     """
 *     self._check_mode(b"w")
 *     self._writer.add(key, fst)             # <<<<<<<<<<<<<<
 * 
 *   def __setitem__(self, key, Fst fst):
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_writer");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (unlikely(((PyObject *)__pyx_v_self->_writer) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "add");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  ((struct __pyx_vtabstruct_9pywrapfst_FarWriter *)__pyx_v_self->_writer->__pyx_vtab)->add(__pyx_v_self->_writer, __pyx_v_key, ((struct __pyx_obj_9pywrapfst__Fst *)__pyx_v_fst), 0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":2244
 *   # FarWriter API.
 * 
 *   cpdef void add(self, key, Fst fst) except *:             # <<<<<<<<<<<<<<
 *     """
 *     add(self, key, fst)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pynini.Far.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Far_33add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pynini_3Far_32add[] = "\n    add(self, key, fst)\n\n    Adds an FST to the FAR (when open for writing)\n\n    This methods adds an FST to the FAR which can be retrieved with the\n    specified string key.\n\n    This method is provided for compatibility with the C++ API only; most users\n    should use the Pythonic API.\n\n    Args:\n      key: The string used to key the input FST.\n      fst: The FST to write to the FAR.\n\n    Raises:\n      FstOpError: Cannot invoke method in current mode.\n      FstOpError: Incompatible or invalid arc type.\n    ";
static PyObject *__pyx_pw_6pynini_3Far_33add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_key = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_v_fst = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,&__pyx_n_s_fst,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_key)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fst)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2244; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2244; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_key = values[0];
    __pyx_v_fst = ((struct __pyx_obj_6pynini_Fst *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2244; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.Far.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fst), __pyx_ptype_6pynini_Fst, 1, "fst", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6pynini_3Far_32add(((struct __pyx_obj_6pynini_Far *)__pyx_v_self), __pyx_v_key, __pyx_v_fst);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Far_32add(struct __pyx_obj_6pynini_Far *__pyx_v_self, PyObject *__pyx_v_key, struct __pyx_obj_6pynini_Fst *__pyx_v_fst) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_f_6pynini_3Far_add(__pyx_v_self, __pyx_v_key, __pyx_v_fst, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __Pyx_void_to_None(NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.Far.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2267
 *     self._writer.add(key, fst)
 * 
 *   def __setitem__(self, key, Fst fst):             # <<<<<<<<<<<<<<
 *     self._check_mode(b"w")
 *     self._writer[key] = fst
 */

/* Python wrapper */
static int __pyx_pw_6pynini_3Far_35__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_fst); /*proto*/
static int __pyx_pw_6pynini_3Far_35__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_fst) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fst), __pyx_ptype_6pynini_Fst, 1, "fst", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6pynini_3Far_34__setitem__(((struct __pyx_obj_6pynini_Far *)__pyx_v_self), ((PyObject *)__pyx_v_key), ((struct __pyx_obj_6pynini_Fst *)__pyx_v_fst));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pynini_3Far_34__setitem__(struct __pyx_obj_6pynini_Far *__pyx_v_self, PyObject *__pyx_v_key, struct __pyx_obj_6pynini_Fst *__pyx_v_fst) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "pynini.pyx":2268
 * 
 *   def __setitem__(self, key, Fst fst):
 *     self._check_mode(b"w")             # <<<<<<<<<<<<<<
 *     self._writer[key] = fst
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_check_mode");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  ((struct __pyx_vtabstruct_6pynini_Far *)__pyx_v_self->__pyx_vtab)->_check_mode(__pyx_v_self, 'w'); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":2269
 *   def __setitem__(self, key, Fst fst):
 *     self._check_mode(b"w")
 *     self._writer[key] = fst             # <<<<<<<<<<<<<<
 * 
 *   cpdef void close(self) except *:
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_writer");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (unlikely(((PyObject *)__pyx_v_self->_writer) == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_self->_writer), __pyx_v_key, ((PyObject *)__pyx_v_fst)) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":2267
 *     self._writer.add(key, fst)
 * 
 *   def __setitem__(self, key, Fst fst):             # <<<<<<<<<<<<<<
 *     self._check_mode(b"w")
 *     self._writer[key] = fst
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pynini.Far.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2271
 *     self._writer[key] = fst
 * 
 *   cpdef void close(self) except *:             # <<<<<<<<<<<<<<
 *     """
 *     close(sel)
 */

static PyObject *__pyx_pw_6pynini_3Far_37close(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static void __pyx_f_6pynini_3Far_close(struct __pyx_obj_6pynini_Far *__pyx_v_self, int __pyx_skip_dispatch) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("close", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_close); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_3Far_37close)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":2280
 *       FstOpError: Cannot invoke method in current mode.
 *     """
 *     self._check_mode(b"w")             # <<<<<<<<<<<<<<
 *     self._writer._close()
 *     self._mode = b"c"
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_check_mode");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  ((struct __pyx_vtabstruct_6pynini_Far *)__pyx_v_self->__pyx_vtab)->_check_mode(__pyx_v_self, 'w'); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":2281
 *     """
 *     self._check_mode(b"w")
 *     self._writer._close()             # <<<<<<<<<<<<<<
 *     self._mode = b"c"
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_writer");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (unlikely(((PyObject *)__pyx_v_self->_writer) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_close");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  ((struct __pyx_vtabstruct_9pywrapfst_FarWriter *)__pyx_v_self->_writer->__pyx_vtab)->_close(__pyx_v_self->_writer);

  /* "pynini.pyx":2282
 *     self._check_mode(b"w")
 *     self._writer._close()
 *     self._mode = b"c"             # <<<<<<<<<<<<<<
 * 
 *   # Adds support for use as a PEP-343 context manager.
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_mode");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_self->_mode = 'c';

  /* "pynini.pyx":2271
 *     self._writer[key] = fst
 * 
 *   cpdef void close(self) except *:             # <<<<<<<<<<<<<<
 *     """
 *     close(sel)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynini.Far.close", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Far_37close(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pynini_3Far_36close[] = "\n    close(sel)\n\n    Closes the FAR and flushes to disk (when open for writing).\n\n    Raises:\n      FstOpError: Cannot invoke method in current mode.\n    ";
static PyObject *__pyx_pw_6pynini_3Far_37close(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("close (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Far_36close(((struct __pyx_obj_6pynini_Far *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Far_36close(struct __pyx_obj_6pynini_Far *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("close", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_f_6pynini_3Far_close(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __Pyx_void_to_None(NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.Far.close", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2286
 *   # Adds support for use as a PEP-343 context manager.
 * 
 *   def __enter__(self):             # <<<<<<<<<<<<<<
 *     return self
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Far_39__enter__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6pynini_3Far_39__enter__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__enter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Far_38__enter__(((struct __pyx_obj_6pynini_Far *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Far_38__enter__(struct __pyx_obj_6pynini_Far *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__enter__", 0);

  /* "pynini.pyx":2287
 * 
 *   def __enter__(self):
 *     return self             # <<<<<<<<<<<<<<
 * 
 *   def __exit__(self, exc, value, tb):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pynini.pyx":2286
 *   # Adds support for use as a PEP-343 context manager.
 * 
 *   def __enter__(self):             # <<<<<<<<<<<<<<
 *     return self
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2289
 *     return self
 * 
 *   def __exit__(self, exc, value, tb):             # <<<<<<<<<<<<<<
 *     if self._mode == b"w":
 *       self._writer._close()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Far_41__exit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6pynini_3Far_41__exit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_exc = 0;
  CYTHON_UNUSED PyObject *__pyx_v_value = 0;
  CYTHON_UNUSED PyObject *__pyx_v_tb = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__exit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_exc,&__pyx_n_s_value,&__pyx_n_s_tb,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_exc)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2289; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2289; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__exit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2289; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_exc = values[0];
    __pyx_v_value = values[1];
    __pyx_v_tb = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2289; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.Far.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_3Far_40__exit__(((struct __pyx_obj_6pynini_Far *)__pyx_v_self), __pyx_v_exc, __pyx_v_value, __pyx_v_tb);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Far_40__exit__(struct __pyx_obj_6pynini_Far *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_exc, CYTHON_UNUSED PyObject *__pyx_v_value, CYTHON_UNUSED PyObject *__pyx_v_tb) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__exit__", 0);

  /* "pynini.pyx":2290
 * 
 *   def __exit__(self, exc, value, tb):
 *     if self._mode == b"w":             # <<<<<<<<<<<<<<
 *       self._writer._close()
 *       self._mode = b"c"
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_mode");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = ((__pyx_v_self->_mode == 'w') != 0);
  if (__pyx_t_1) {

    /* "pynini.pyx":2291
 *   def __exit__(self, exc, value, tb):
 *     if self._mode == b"w":
 *       self._writer._close()             # <<<<<<<<<<<<<<
 *       self._mode = b"c"
 * 
 */
    if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_writer");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    if (unlikely(((PyObject *)__pyx_v_self->_writer) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_close");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    ((struct __pyx_vtabstruct_9pywrapfst_FarWriter *)__pyx_v_self->_writer->__pyx_vtab)->_close(__pyx_v_self->_writer);

    /* "pynini.pyx":2292
 *     if self._mode == b"w":
 *       self._writer._close()
 *       self._mode = b"c"             # <<<<<<<<<<<<<<
 * 
 * 
 */
    if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "_mode");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v_self->_mode = 'c';

    /* "pynini.pyx":2290
 * 
 *   def __exit__(self, exc, value, tb):
 *     if self._mode == b"w":             # <<<<<<<<<<<<<<
 *       self._writer._close()
 *       self._mode = b"c"
 */
  }

  /* "pynini.pyx":2289
 *     return self
 * 
 *   def __exit__(self, exc, value, tb):             # <<<<<<<<<<<<<<
 *     if self._mode == b"w":
 *       self._writer._close()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pynini.Far.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2403
 * 
 * 
 * def _copy_patch(fnc):             # <<<<<<<<<<<<<<
 *   # The junk in the `functools.wraps` decorator is due to a long-standing bug
 *   # in Python 2.7 (https://bugs.python.org/issue3445).
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_47_copy_patch(PyObject *__pyx_self, PyObject *__pyx_v_fnc); /*proto*/
static PyMethodDef __pyx_mdef_6pynini_47_copy_patch = {"_copy_patch", (PyCFunction)__pyx_pw_6pynini_47_copy_patch, METH_O, 0};
static PyObject *__pyx_pw_6pynini_47_copy_patch(PyObject *__pyx_self, PyObject *__pyx_v_fnc) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_copy_patch (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_46_copy_patch(__pyx_self, ((PyObject *)__pyx_v_fnc));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2407
 *   # in Python 2.7 (https://bugs.python.org/issue3445).
 *   @functools.wraps(fnc, ("__name__", "__doc__"))
 *   def patch(arg1, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst result = _compile_or_copy_Fst(arg1)
 *     fnc(result, *args, **kwargs)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_11_copy_patch_1patch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6pynini_11_copy_patch_1patch = {"patch", (PyCFunction)__pyx_pw_6pynini_11_copy_patch_1patch, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6pynini_11_copy_patch_1patch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg1 = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("patch (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arg1,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arg1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "patch") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2407; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_arg1 = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("patch", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2407; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynini._copy_patch.patch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_11_copy_patch_patch(__pyx_self, __pyx_v_arg1, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_11_copy_patch_patch(PyObject *__pyx_self, PyObject *__pyx_v_arg1, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  struct __pyx_obj_6pynini___pyx_scope_struct_9__copy_patch *__pyx_cur_scope;
  struct __pyx_obj_6pynini___pyx_scope_struct_9__copy_patch *__pyx_outer_scope;
  struct __pyx_obj_6pynini_Fst *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("patch", 0);
  __pyx_outer_scope = (struct __pyx_obj_6pynini___pyx_scope_struct_9__copy_patch *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "pynini.pyx":2408
 *   @functools.wraps(fnc, ("__name__", "__doc__"))
 *   def patch(arg1, *args, **kwargs):
 *     cdef Fst result = _compile_or_copy_Fst(arg1)             # <<<<<<<<<<<<<<
 *     fnc(result, *args, **kwargs)
 *     return result
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_arg1, 0, NULL)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2408; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":2409
 *   def patch(arg1, *args, **kwargs):
 *     cdef Fst result = _compile_or_copy_Fst(arg1)
 *     fnc(result, *args, **kwargs)             # <<<<<<<<<<<<<<
 *     return result
 *   return patch
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_fnc)) { __Pyx_RaiseClosureNameError("fnc"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2409; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2409; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_result));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_result));
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_v_args); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2409; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_cur_scope->__pyx_v_fnc, __pyx_t_2, __pyx_v_kwargs); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2409; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2410
 *     cdef Fst result = _compile_or_copy_Fst(arg1)
 *     fnc(result, *args, **kwargs)
 *     return result             # <<<<<<<<<<<<<<
 *   return patch
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "pynini.pyx":2407
 *   # in Python 2.7 (https://bugs.python.org/issue3445).
 *   @functools.wraps(fnc, ("__name__", "__doc__"))
 *   def patch(arg1, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst result = _compile_or_copy_Fst(arg1)
 *     fnc(result, *args, **kwargs)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pynini._copy_patch.patch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2403
 * 
 * 
 * def _copy_patch(fnc):             # <<<<<<<<<<<<<<
 *   # The junk in the `functools.wraps` decorator is due to a long-standing bug
 *   # in Python 2.7 (https://bugs.python.org/issue3445).
 */

static PyObject *__pyx_pf_6pynini_46_copy_patch(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fnc) {
  struct __pyx_obj_6pynini___pyx_scope_struct_9__copy_patch *__pyx_cur_scope;
  PyObject *__pyx_v_patch = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_copy_patch", 0);
  __pyx_cur_scope = (struct __pyx_obj_6pynini___pyx_scope_struct_9__copy_patch *)__pyx_tp_new_6pynini___pyx_scope_struct_9__copy_patch(__pyx_ptype_6pynini___pyx_scope_struct_9__copy_patch, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_fnc = __pyx_v_fnc;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fnc);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fnc);

  /* "pynini.pyx":2406
 *   # The junk in the `functools.wraps` decorator is due to a long-standing bug
 *   # in Python 2.7 (https://bugs.python.org/issue3445).
 *   @functools.wraps(fnc, ("__name__", "__doc__"))             # <<<<<<<<<<<<<<
 *   def patch(arg1, *args, **kwargs):
 *     cdef Fst result = _compile_or_copy_Fst(arg1)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_functools); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_wraps); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_5 = 1;
    }
  }
  __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  if (__pyx_t_3) {
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3); __pyx_t_3 = NULL;
  }
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fnc);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fnc);
  PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_cur_scope->__pyx_v_fnc);
  __Pyx_INCREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);
  PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_tuple__45);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pynini.pyx":2407
 *   # in Python 2.7 (https://bugs.python.org/issue3445).
 *   @functools.wraps(fnc, ("__name__", "__doc__"))
 *   def patch(arg1, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst result = _compile_or_copy_Fst(arg1)
 *     fnc(result, *args, **kwargs)
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6pynini_11_copy_patch_1patch, 0, __pyx_n_s_copy_patch_locals_patch, ((PyObject*)__pyx_cur_scope), __pyx_n_s_pynini, __pyx_d, ((PyObject *)__pyx_codeobj__47)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2407; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6); __pyx_t_6 = NULL;
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_patch = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pynini.pyx":2411
 *     fnc(result, *args, **kwargs)
 *     return result
 *   return patch             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_patch);
  __pyx_r = __pyx_v_patch;
  goto __pyx_L0;

  /* "pynini.pyx":2403
 * 
 * 
 * def _copy_patch(fnc):             # <<<<<<<<<<<<<<
 *   # The junk in the `functools.wraps` decorator is due to a long-standing bug
 *   # in Python 2.7 (https://bugs.python.org/issue3445).
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pynini._copy_patch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_patch);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_6pynini_Fst __pyx_vtable_6pynini_Fst;

static PyObject *__pyx_tp_new_6pynini_Fst(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6pynini_Fst *p;
  PyObject *o = __pyx_ptype_9pywrapfst__MutableFst->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6pynini_Fst *)o);
  p->__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9pywrapfst__Fst*)__pyx_vtabptr_6pynini_Fst;
  return o;
}

static void __pyx_tp_dealloc_6pynini_Fst(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  if (likely(__pyx_ptype_9pywrapfst__MutableFst)) __pyx_ptype_9pywrapfst__MutableFst->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_6pynini_Fst);
}

static PyMethodDef __pyx_methods_6pynini_Fst[] = {
  {"read", (PyCFunction)__pyx_pw_6pynini_3Fst_3read, METH_O, __pyx_doc_6pynini_3Fst_2read},
  {"paths", (PyCFunction)__pyx_pw_6pynini_3Fst_5paths, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pynini_3Fst_4paths},
  {"stringify", (PyCFunction)__pyx_pw_6pynini_3Fst_7stringify, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pynini_3Fst_6stringify},
  {"copy", (PyCFunction)__pyx_pw_6pynini_3Fst_9copy, METH_NOARGS, __pyx_doc_6pynini_3Fst_8copy},
  {"closure", (PyCFunction)__pyx_pw_6pynini_3Fst_11closure, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pynini_3Fst_10closure},
  {"plus", (PyCFunction)__pyx_pw_6pynini_3Fst_13plus, METH_NOARGS, __pyx_doc_6pynini_3Fst_12plus},
  {"ques", (PyCFunction)__pyx_pw_6pynini_3Fst_15ques, METH_NOARGS, __pyx_doc_6pynini_3Fst_14ques},
  {"star", (PyCFunction)__pyx_pw_6pynini_3Fst_17star, METH_NOARGS, __pyx_doc_6pynini_3Fst_16star},
  {"concat", (PyCFunction)__pyx_pw_6pynini_3Fst_19concat, METH_O, __pyx_doc_6pynini_3Fst_18concat},
  {"optimize", (PyCFunction)__pyx_pw_6pynini_3Fst_21optimize, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pynini_3Fst_20optimize},
  {"union", (PyCFunction)__pyx_pw_6pynini_3Fst_23union, METH_O, __pyx_doc_6pynini_3Fst_22union},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Fst = {
  __pyx_pw_6pynini_3Fst_27__add__, /*nb_add*/
  __pyx_pw_6pynini_3Fst_29__sub__, /*nb_subtract*/
  __pyx_pw_6pynini_3Fst_31__mul__, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  __pyx_pw_6pynini_3Fst_33__or__, /*nb_or*/
  #if PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  0, /*nb_index*/
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_matrix_multiply*/
  #endif
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_inplace_matrix_multiply*/
  #endif
};

static PyTypeObject __pyx_type_6pynini_Fst = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynini.Fst", /*tp_name*/
  sizeof(struct __pyx_obj_6pynini_Fst), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pynini_Fst, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_Fst, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n  Fst(arc_type=\"standard\")\n\n  Pynini finite-state transducer class.\n\n  This class wraps a mutable FST and exposes all destructive methods.\n\n  Attributes:\n    arc_type: A string indicating the arc type.\n    fst_type: A string indicating the FST (container) type.\n    input_symbols: The input symbol table, or None if none is set.\n    num_states: The number of states.\n    output_symbols: The output symbol table, or None if none is set.\n    start: The integer state ID for the start state.\n    weight_type: A string indicating the weight type.\n  ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_pw_6pynini_3Fst_25__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pynini_Fst, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6pynini_3Fst_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pynini_Fst, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_6pynini_PdtParentheses __pyx_vtable_6pynini_PdtParentheses;

static PyObject *__pyx_tp_new_6pynini_PdtParentheses(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6pynini_PdtParentheses *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6pynini_PdtParentheses *)o);
  p->__pyx_vtab = __pyx_vtabptr_6pynini_PdtParentheses;
  new((void*)&(p->_parens)) std::vector<__pyx_t_15pynini_includes_LabelPair> ();
  return o;
}

static void __pyx_tp_dealloc_6pynini_PdtParentheses(PyObject *o) {
  struct __pyx_obj_6pynini_PdtParentheses *p = (struct __pyx_obj_6pynini_PdtParentheses *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(&p->_parens);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6pynini_PdtParentheses[] = {
  {"copy", (PyCFunction)__pyx_pw_6pynini_14PdtParentheses_8copy, METH_NOARGS, __pyx_doc_6pynini_14PdtParentheses_7copy},
  {"add_pair", (PyCFunction)__pyx_pw_6pynini_14PdtParentheses_10add_pair, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pynini_14PdtParentheses_9add_pair},
  {"read", (PyCFunction)__pyx_pw_6pynini_14PdtParentheses_12read, METH_O, __pyx_doc_6pynini_14PdtParentheses_11read},
  {"write", (PyCFunction)__pyx_pw_6pynini_14PdtParentheses_14write, METH_O, __pyx_doc_6pynini_14PdtParentheses_13write},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_PdtParentheses = {
  __pyx_pw_6pynini_14PdtParentheses_3__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_PdtParentheses = {
  __pyx_pw_6pynini_14PdtParentheses_3__len__, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6pynini_PdtParentheses = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynini.PdtParentheses", /*tp_name*/
  sizeof(struct __pyx_obj_6pynini_PdtParentheses), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pynini_PdtParentheses, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6pynini_14PdtParentheses_1__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_PdtParentheses, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_PdtParentheses, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n  PdtParentheses()\n\n  Pushdown transducer parentheses class.\n\n  This class wraps a vector of pairs of FST arc labels in which the first\n  label is interpreted as a \"push\" stack operation and the second represents\n  the corresponding \"pop\" operation. When efficiency is desired, the push and\n  pop indices should be contiguous.\n\n  A PDT is expressed as an (Fst, PdtParentheses) pair for the purposes of all\n  supported PDT operations.\n  ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_6pynini_14PdtParentheses_5__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pynini_PdtParentheses, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pynini_PdtParentheses, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_6pynini_MPdtParentheses __pyx_vtable_6pynini_MPdtParentheses;

static PyObject *__pyx_tp_new_6pynini_MPdtParentheses(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6pynini_MPdtParentheses *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6pynini_MPdtParentheses *)o);
  p->__pyx_vtab = __pyx_vtabptr_6pynini_MPdtParentheses;
  new((void*)&(p->_parens)) std::vector<__pyx_t_15pynini_includes_LabelPair> ();
  new((void*)&(p->_assign)) std::vector<__pyx_t_10basictypes_int64> ();
  return o;
}

static void __pyx_tp_dealloc_6pynini_MPdtParentheses(PyObject *o) {
  struct __pyx_obj_6pynini_MPdtParentheses *p = (struct __pyx_obj_6pynini_MPdtParentheses *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(&p->_parens);
  __Pyx_call_destructor(&p->_assign);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6pynini_MPdtParentheses[] = {
  {"copy", (PyCFunction)__pyx_pw_6pynini_15MPdtParentheses_8copy, METH_NOARGS, __pyx_doc_6pynini_15MPdtParentheses_7copy},
  {"add_triple", (PyCFunction)__pyx_pw_6pynini_15MPdtParentheses_10add_triple, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pynini_15MPdtParentheses_9add_triple},
  {"read", (PyCFunction)__pyx_pw_6pynini_15MPdtParentheses_12read, METH_O, __pyx_doc_6pynini_15MPdtParentheses_11read},
  {"write", (PyCFunction)__pyx_pw_6pynini_15MPdtParentheses_14write, METH_O, __pyx_doc_6pynini_15MPdtParentheses_13write},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_MPdtParentheses = {
  __pyx_pw_6pynini_15MPdtParentheses_3__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_MPdtParentheses = {
  __pyx_pw_6pynini_15MPdtParentheses_3__len__, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6pynini_MPdtParentheses = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynini.MPdtParentheses", /*tp_name*/
  sizeof(struct __pyx_obj_6pynini_MPdtParentheses), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pynini_MPdtParentheses, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6pynini_15MPdtParentheses_1__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_MPdtParentheses, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_MPdtParentheses, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n  MPdtParentheses()\n\n  Multi-pushdown transducer parentheses class.\n\n  This class wraps a vector of pairs of FST arc labels in which the first\n  label is interpreted as a \"push\" stack operation and the second represents\n  the corresponding \"pop\" operation, and an equally sized vector which assigns\n  each pair to a stack. The library currently only permits two stacks (numbered\n  1 and 2) to be used.\n\n  A MPDT is expressed as an (Fst, MPdtParentheses) pair for the purposes of all\n  supported MPDT operations.\n  ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_6pynini_15MPdtParentheses_5__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pynini_MPdtParentheses, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pynini_MPdtParentheses, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_6pynini_StringPaths __pyx_vtable_6pynini_StringPaths;

static PyObject *__pyx_tp_new_6pynini_StringPaths(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6pynini_StringPaths *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6pynini_StringPaths *)o);
  p->__pyx_vtab = __pyx_vtabptr_6pynini_StringPaths;
  new((void*)&(p->_fst)) std::shared_ptr<fst::script::FstClass> ();
  new((void*)&(p->_paths)) std::unique_ptr<fst::script::StringPathsClass> ();
  return o;
}

static void __pyx_tp_dealloc_6pynini_StringPaths(PyObject *o) {
  struct __pyx_obj_6pynini_StringPaths *p = (struct __pyx_obj_6pynini_StringPaths *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(&p->_fst);
  __Pyx_call_destructor(&p->_paths);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6pynini_StringPaths[] = {
  {"__next__", (PyCFunction)__pyx_pw_6pynini_11StringPaths_7__next__, METH_NOARGS|METH_COEXIST, 0},
  {"done", (PyCFunction)__pyx_pw_6pynini_11StringPaths_9done, METH_NOARGS, __pyx_doc_6pynini_11StringPaths_8done},
  {"error", (PyCFunction)__pyx_pw_6pynini_11StringPaths_11error, METH_NOARGS, __pyx_doc_6pynini_11StringPaths_10error},
  {"reset", (PyCFunction)__pyx_pw_6pynini_11StringPaths_13reset, METH_NOARGS, __pyx_doc_6pynini_11StringPaths_12reset},
  {"next", (PyCFunction)__pyx_pw_6pynini_11StringPaths_15next, METH_NOARGS, __pyx_doc_6pynini_11StringPaths_14next},
  {"istring", (PyCFunction)__pyx_pw_6pynini_11StringPaths_17istring, METH_NOARGS, __pyx_doc_6pynini_11StringPaths_16istring},
  {"ostring", (PyCFunction)__pyx_pw_6pynini_11StringPaths_19ostring, METH_NOARGS, __pyx_doc_6pynini_11StringPaths_18ostring},
  {"weight", (PyCFunction)__pyx_pw_6pynini_11StringPaths_21weight, METH_NOARGS, __pyx_doc_6pynini_11StringPaths_20weight},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6pynini_StringPaths = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynini.StringPaths", /*tp_name*/
  sizeof(struct __pyx_obj_6pynini_StringPaths), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pynini_StringPaths, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6pynini_11StringPaths_1__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n  StringPaths(fst, token_type=\"byte\", isymbols=None, osymbols=None)\n\n  Iterator for string paths in acyclic FST.\n\n  This class provides an iterator over all paths (represented as pairs of\n  strings and an associated path weight) through an acyclic FST. This\n  operation is only feasible when the FST is acyclic. Depending on the\n  requested token type, the arc labels along the input and output sides of a\n  path are interpreted as UTF-8-encoded Unicode strings, raw bytes, or a\n  concatenation of string labels from a symbol table. This class is normally\n  created by invoking the `paths` method of `Fst`.\n\n  Note that this class is an iterator over all paths at the time of creation and\n  the iterator will not be affected by any mutations to the argument FST or\n  input symbol tables.\n\n  Args:\n    token_type: A string indicating how arcs labels are to be interpreted as\n        strings; (interprets arc labels as UTF-8 encoded Unicode strings),\n        \"byte\" (interprets arc labels as byte strings), \"symbol\" (interprets\n        arc labels according to the provided symbol tables).\n    isymbols: Input symbol table (ignored unless token_type is \"symbol\")\n    osymbols: Output symbol table (ignored unless token_type is \"symbol\")\n\n  Raises:\n    FstArgError: Unknown token type.\n    FstArgError: FST is not acyclic.\n  ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_6pynini_11StringPaths_5__iter__, /*tp_iter*/
  __pyx_pw_6pynini_11StringPaths_7__next__, /*tp_iternext*/
  __pyx_methods_6pynini_StringPaths, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6pynini_11StringPaths_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pynini_StringPaths, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_6pynini_Far __pyx_vtable_6pynini_Far;

static PyObject *__pyx_tp_new_6pynini_Far(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6pynini_Far *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6pynini_Far *)o);
  p->__pyx_vtab = __pyx_vtabptr_6pynini_Far;
  new((void*)&(p->_name)) std::string();
  p->_reader = ((struct __pyx_obj_9pywrapfst_FarReader *)Py_None); Py_INCREF(Py_None);
  p->_writer = ((struct __pyx_obj_9pywrapfst_FarWriter *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_6pynini_Far(PyObject *o) {
  struct __pyx_obj_6pynini_Far *p = (struct __pyx_obj_6pynini_Far *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(&p->_name);
  Py_CLEAR(p->_reader);
  Py_CLEAR(p->_writer);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6pynini_Far(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pynini_Far *p = (struct __pyx_obj_6pynini_Far *)o;
  if (p->_reader) {
    e = (*v)(((PyObject*)p->_reader), a); if (e) return e;
  }
  if (p->_writer) {
    e = (*v)(((PyObject*)p->_writer), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6pynini_Far(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6pynini_Far *p = (struct __pyx_obj_6pynini_Far *)o;
  tmp = ((PyObject*)p->_reader);
  p->_reader = ((struct __pyx_obj_9pywrapfst_FarReader *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_writer);
  p->_writer = ((struct __pyx_obj_9pywrapfst_FarWriter *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_6pynini_Far(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_6pynini_Far(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_pw_6pynini_3Far_35__setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyMethodDef __pyx_methods_6pynini_Far[] = {
  {"error", (PyCFunction)__pyx_pw_6pynini_3Far_5error, METH_NOARGS, __pyx_doc_6pynini_3Far_4error},
  {"arc_type", (PyCFunction)__pyx_pw_6pynini_3Far_7arc_type, METH_NOARGS, 0},
  {"closed", (PyCFunction)__pyx_pw_6pynini_3Far_9closed, METH_NOARGS, 0},
  {"far_type", (PyCFunction)__pyx_pw_6pynini_3Far_11far_type, METH_NOARGS, 0},
  {"mode", (PyCFunction)__pyx_pw_6pynini_3Far_13mode, METH_NOARGS, 0},
  {"name", (PyCFunction)__pyx_pw_6pynini_3Far_15name, METH_NOARGS, 0},
  {"__next__", (PyCFunction)__pyx_pw_6pynini_3Far_19__next__, METH_NOARGS|METH_COEXIST, 0},
  {"find", (PyCFunction)__pyx_pw_6pynini_3Far_21find, METH_O, __pyx_doc_6pynini_3Far_20find},
  {"get_fst", (PyCFunction)__pyx_pw_6pynini_3Far_23get_fst, METH_NOARGS, __pyx_doc_6pynini_3Far_22get_fst},
  {"get_key", (PyCFunction)__pyx_pw_6pynini_3Far_25get_key, METH_NOARGS, __pyx_doc_6pynini_3Far_24get_key},
  {"next", (PyCFunction)__pyx_pw_6pynini_3Far_27next, METH_NOARGS, __pyx_doc_6pynini_3Far_26next},
  {"reset", (PyCFunction)__pyx_pw_6pynini_3Far_29reset, METH_NOARGS, __pyx_doc_6pynini_3Far_28reset},
  {"add", (PyCFunction)__pyx_pw_6pynini_3Far_33add, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pynini_3Far_32add},
  {"close", (PyCFunction)__pyx_pw_6pynini_3Far_37close, METH_NOARGS, __pyx_doc_6pynini_3Far_36close},
  {"__enter__", (PyCFunction)__pyx_pw_6pynini_3Far_39__enter__, METH_NOARGS, 0},
  {"__exit__", (PyCFunction)__pyx_pw_6pynini_3Far_41__exit__, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_Far = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_6pynini_Far, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Far = {
  0, /*mp_length*/
  __pyx_pw_6pynini_3Far_31__getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_6pynini_Far, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6pynini_Far = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynini.Far", /*tp_name*/
  sizeof(struct __pyx_obj_6pynini_Far), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pynini_Far, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6pynini_3Far_3__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_Far, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Far, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n  Far(filename, mode=\"r\", arc_type=\"standard\", far_type=\"default\")\n\n  Pynini FAR (\"Fst ARchive\") object.\n\n  This class is used to either read FSTs from or write FSTs to a FAR. When\n  opening a FAR for writing, the user may also specify the desired arc type\n  and FAR type.\n\n  Args:\n    filename: A string indicating the filename.\n    mode: FAR IO mode; one of: \"r\" (open for reading), \"w\" (open for writing).\n    arc_type: Desired arc type; this is ignored if the FAR is opened for\n        reading.\n    far_type: Desired FAR type; this is ignored if the FAR is opened for\n        reading.\n\n  Attributes:\n    arc_type: A string indicating the arc type.\n    fst_type: A string indicating the FST (container) type.\n    mode: A string indicating whether the FAR is open for reading (\"r\") or\n        writing (\"w\").\n    name: A string indicating the filename.\n  ", /*tp_doc*/
  __pyx_tp_traverse_6pynini_Far, /*tp_traverse*/
  __pyx_tp_clear_6pynini_Far, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_6pynini_3Far_17__iter__, /*tp_iter*/
  __pyx_pw_6pynini_3Far_19__next__, /*tp_iternext*/
  __pyx_methods_6pynini_Far, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6pynini_3Far_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pynini_Far, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6pynini___pyx_scope_struct___1arg_patch *__pyx_freelist_6pynini___pyx_scope_struct___1arg_patch[8];
static int __pyx_freecount_6pynini___pyx_scope_struct___1arg_patch = 0;

static PyObject *__pyx_tp_new_6pynini___pyx_scope_struct___1arg_patch(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6pynini___pyx_scope_struct___1arg_patch > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6pynini___pyx_scope_struct___1arg_patch)))) {
    o = (PyObject*)__pyx_freelist_6pynini___pyx_scope_struct___1arg_patch[--__pyx_freecount_6pynini___pyx_scope_struct___1arg_patch];
    memset(o, 0, sizeof(struct __pyx_obj_6pynini___pyx_scope_struct___1arg_patch));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pynini___pyx_scope_struct___1arg_patch(PyObject *o) {
  struct __pyx_obj_6pynini___pyx_scope_struct___1arg_patch *p = (struct __pyx_obj_6pynini___pyx_scope_struct___1arg_patch *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_fnc);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6pynini___pyx_scope_struct___1arg_patch < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6pynini___pyx_scope_struct___1arg_patch)))) {
    __pyx_freelist_6pynini___pyx_scope_struct___1arg_patch[__pyx_freecount_6pynini___pyx_scope_struct___1arg_patch++] = ((struct __pyx_obj_6pynini___pyx_scope_struct___1arg_patch *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6pynini___pyx_scope_struct___1arg_patch(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pynini___pyx_scope_struct___1arg_patch *p = (struct __pyx_obj_6pynini___pyx_scope_struct___1arg_patch *)o;
  if (p->__pyx_v_fnc) {
    e = (*v)(p->__pyx_v_fnc, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6pynini___pyx_scope_struct___1arg_patch(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6pynini___pyx_scope_struct___1arg_patch *p = (struct __pyx_obj_6pynini___pyx_scope_struct___1arg_patch *)o;
  tmp = ((PyObject*)p->__pyx_v_fnc);
  p->__pyx_v_fnc = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6pynini___pyx_scope_struct___1arg_patch = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynini.__pyx_scope_struct___1arg_patch", /*tp_name*/
  sizeof(struct __pyx_obj_6pynini___pyx_scope_struct___1arg_patch), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pynini___pyx_scope_struct___1arg_patch, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pynini___pyx_scope_struct___1arg_patch, /*tp_traverse*/
  __pyx_tp_clear_6pynini___pyx_scope_struct___1arg_patch, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pynini___pyx_scope_struct___1arg_patch, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6pynini___pyx_scope_struct_1__shortestdistance_patch *__pyx_freelist_6pynini___pyx_scope_struct_1__shortestdistance_patch[8];
static int __pyx_freecount_6pynini___pyx_scope_struct_1__shortestdistance_patch = 0;

static PyObject *__pyx_tp_new_6pynini___pyx_scope_struct_1__shortestdistance_patch(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6pynini___pyx_scope_struct_1__shortestdistance_patch > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_1__shortestdistance_patch)))) {
    o = (PyObject*)__pyx_freelist_6pynini___pyx_scope_struct_1__shortestdistance_patch[--__pyx_freecount_6pynini___pyx_scope_struct_1__shortestdistance_patch];
    memset(o, 0, sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_1__shortestdistance_patch));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pynini___pyx_scope_struct_1__shortestdistance_patch(PyObject *o) {
  struct __pyx_obj_6pynini___pyx_scope_struct_1__shortestdistance_patch *p = (struct __pyx_obj_6pynini___pyx_scope_struct_1__shortestdistance_patch *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_fnc);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6pynini___pyx_scope_struct_1__shortestdistance_patch < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_1__shortestdistance_patch)))) {
    __pyx_freelist_6pynini___pyx_scope_struct_1__shortestdistance_patch[__pyx_freecount_6pynini___pyx_scope_struct_1__shortestdistance_patch++] = ((struct __pyx_obj_6pynini___pyx_scope_struct_1__shortestdistance_patch *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6pynini___pyx_scope_struct_1__shortestdistance_patch(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pynini___pyx_scope_struct_1__shortestdistance_patch *p = (struct __pyx_obj_6pynini___pyx_scope_struct_1__shortestdistance_patch *)o;
  if (p->__pyx_v_fnc) {
    e = (*v)(p->__pyx_v_fnc, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6pynini___pyx_scope_struct_1__shortestdistance_patch(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6pynini___pyx_scope_struct_1__shortestdistance_patch *p = (struct __pyx_obj_6pynini___pyx_scope_struct_1__shortestdistance_patch *)o;
  tmp = ((PyObject*)p->__pyx_v_fnc);
  p->__pyx_v_fnc = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6pynini___pyx_scope_struct_1__shortestdistance_patch = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynini.__pyx_scope_struct_1__shortestdistance_patch", /*tp_name*/
  sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_1__shortestdistance_patch), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pynini___pyx_scope_struct_1__shortestdistance_patch, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pynini___pyx_scope_struct_1__shortestdistance_patch, /*tp_traverse*/
  __pyx_tp_clear_6pynini___pyx_scope_struct_1__shortestdistance_patch, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pynini___pyx_scope_struct_1__shortestdistance_patch, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6pynini___pyx_scope_struct_2__compose_patch *__pyx_freelist_6pynini___pyx_scope_struct_2__compose_patch[8];
static int __pyx_freecount_6pynini___pyx_scope_struct_2__compose_patch = 0;

static PyObject *__pyx_tp_new_6pynini___pyx_scope_struct_2__compose_patch(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6pynini___pyx_scope_struct_2__compose_patch > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_2__compose_patch)))) {
    o = (PyObject*)__pyx_freelist_6pynini___pyx_scope_struct_2__compose_patch[--__pyx_freecount_6pynini___pyx_scope_struct_2__compose_patch];
    memset(o, 0, sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_2__compose_patch));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pynini___pyx_scope_struct_2__compose_patch(PyObject *o) {
  struct __pyx_obj_6pynini___pyx_scope_struct_2__compose_patch *p = (struct __pyx_obj_6pynini___pyx_scope_struct_2__compose_patch *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_fnc);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6pynini___pyx_scope_struct_2__compose_patch < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_2__compose_patch)))) {
    __pyx_freelist_6pynini___pyx_scope_struct_2__compose_patch[__pyx_freecount_6pynini___pyx_scope_struct_2__compose_patch++] = ((struct __pyx_obj_6pynini___pyx_scope_struct_2__compose_patch *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6pynini___pyx_scope_struct_2__compose_patch(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pynini___pyx_scope_struct_2__compose_patch *p = (struct __pyx_obj_6pynini___pyx_scope_struct_2__compose_patch *)o;
  if (p->__pyx_v_fnc) {
    e = (*v)(p->__pyx_v_fnc, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6pynini___pyx_scope_struct_2__compose_patch(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6pynini___pyx_scope_struct_2__compose_patch *p = (struct __pyx_obj_6pynini___pyx_scope_struct_2__compose_patch *)o;
  tmp = ((PyObject*)p->__pyx_v_fnc);
  p->__pyx_v_fnc = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6pynini___pyx_scope_struct_2__compose_patch = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynini.__pyx_scope_struct_2__compose_patch", /*tp_name*/
  sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_2__compose_patch), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pynini___pyx_scope_struct_2__compose_patch, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pynini___pyx_scope_struct_2__compose_patch, /*tp_traverse*/
  __pyx_tp_clear_6pynini___pyx_scope_struct_2__compose_patch, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pynini___pyx_scope_struct_2__compose_patch, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6pynini___pyx_scope_struct_3__difference_patch *__pyx_freelist_6pynini___pyx_scope_struct_3__difference_patch[8];
static int __pyx_freecount_6pynini___pyx_scope_struct_3__difference_patch = 0;

static PyObject *__pyx_tp_new_6pynini___pyx_scope_struct_3__difference_patch(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6pynini___pyx_scope_struct_3__difference_patch > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_3__difference_patch)))) {
    o = (PyObject*)__pyx_freelist_6pynini___pyx_scope_struct_3__difference_patch[--__pyx_freecount_6pynini___pyx_scope_struct_3__difference_patch];
    memset(o, 0, sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_3__difference_patch));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pynini___pyx_scope_struct_3__difference_patch(PyObject *o) {
  struct __pyx_obj_6pynini___pyx_scope_struct_3__difference_patch *p = (struct __pyx_obj_6pynini___pyx_scope_struct_3__difference_patch *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_fnc);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6pynini___pyx_scope_struct_3__difference_patch < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_3__difference_patch)))) {
    __pyx_freelist_6pynini___pyx_scope_struct_3__difference_patch[__pyx_freecount_6pynini___pyx_scope_struct_3__difference_patch++] = ((struct __pyx_obj_6pynini___pyx_scope_struct_3__difference_patch *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6pynini___pyx_scope_struct_3__difference_patch(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pynini___pyx_scope_struct_3__difference_patch *p = (struct __pyx_obj_6pynini___pyx_scope_struct_3__difference_patch *)o;
  if (p->__pyx_v_fnc) {
    e = (*v)(p->__pyx_v_fnc, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6pynini___pyx_scope_struct_3__difference_patch(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6pynini___pyx_scope_struct_3__difference_patch *p = (struct __pyx_obj_6pynini___pyx_scope_struct_3__difference_patch *)o;
  tmp = ((PyObject*)p->__pyx_v_fnc);
  p->__pyx_v_fnc = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6pynini___pyx_scope_struct_3__difference_patch = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynini.__pyx_scope_struct_3__difference_patch", /*tp_name*/
  sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_3__difference_patch), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pynini___pyx_scope_struct_3__difference_patch, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pynini___pyx_scope_struct_3__difference_patch, /*tp_traverse*/
  __pyx_tp_clear_6pynini___pyx_scope_struct_3__difference_patch, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pynini___pyx_scope_struct_3__difference_patch, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6pynini___pyx_scope_struct_4__intersect_patch *__pyx_freelist_6pynini___pyx_scope_struct_4__intersect_patch[8];
static int __pyx_freecount_6pynini___pyx_scope_struct_4__intersect_patch = 0;

static PyObject *__pyx_tp_new_6pynini___pyx_scope_struct_4__intersect_patch(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6pynini___pyx_scope_struct_4__intersect_patch > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_4__intersect_patch)))) {
    o = (PyObject*)__pyx_freelist_6pynini___pyx_scope_struct_4__intersect_patch[--__pyx_freecount_6pynini___pyx_scope_struct_4__intersect_patch];
    memset(o, 0, sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_4__intersect_patch));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pynini___pyx_scope_struct_4__intersect_patch(PyObject *o) {
  struct __pyx_obj_6pynini___pyx_scope_struct_4__intersect_patch *p = (struct __pyx_obj_6pynini___pyx_scope_struct_4__intersect_patch *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_fnc);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6pynini___pyx_scope_struct_4__intersect_patch < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_4__intersect_patch)))) {
    __pyx_freelist_6pynini___pyx_scope_struct_4__intersect_patch[__pyx_freecount_6pynini___pyx_scope_struct_4__intersect_patch++] = ((struct __pyx_obj_6pynini___pyx_scope_struct_4__intersect_patch *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6pynini___pyx_scope_struct_4__intersect_patch(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pynini___pyx_scope_struct_4__intersect_patch *p = (struct __pyx_obj_6pynini___pyx_scope_struct_4__intersect_patch *)o;
  if (p->__pyx_v_fnc) {
    e = (*v)(p->__pyx_v_fnc, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6pynini___pyx_scope_struct_4__intersect_patch(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6pynini___pyx_scope_struct_4__intersect_patch *p = (struct __pyx_obj_6pynini___pyx_scope_struct_4__intersect_patch *)o;
  tmp = ((PyObject*)p->__pyx_v_fnc);
  p->__pyx_v_fnc = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6pynini___pyx_scope_struct_4__intersect_patch = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynini.__pyx_scope_struct_4__intersect_patch", /*tp_name*/
  sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_4__intersect_patch), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pynini___pyx_scope_struct_4__intersect_patch, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pynini___pyx_scope_struct_4__intersect_patch, /*tp_traverse*/
  __pyx_tp_clear_6pynini___pyx_scope_struct_4__intersect_patch, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pynini___pyx_scope_struct_4__intersect_patch, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6pynini___pyx_scope_struct_5__comp_patch *__pyx_freelist_6pynini___pyx_scope_struct_5__comp_patch[8];
static int __pyx_freecount_6pynini___pyx_scope_struct_5__comp_patch = 0;

static PyObject *__pyx_tp_new_6pynini___pyx_scope_struct_5__comp_patch(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6pynini___pyx_scope_struct_5__comp_patch > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_5__comp_patch)))) {
    o = (PyObject*)__pyx_freelist_6pynini___pyx_scope_struct_5__comp_patch[--__pyx_freecount_6pynini___pyx_scope_struct_5__comp_patch];
    memset(o, 0, sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_5__comp_patch));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pynini___pyx_scope_struct_5__comp_patch(PyObject *o) {
  struct __pyx_obj_6pynini___pyx_scope_struct_5__comp_patch *p = (struct __pyx_obj_6pynini___pyx_scope_struct_5__comp_patch *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_fnc);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6pynini___pyx_scope_struct_5__comp_patch < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_5__comp_patch)))) {
    __pyx_freelist_6pynini___pyx_scope_struct_5__comp_patch[__pyx_freecount_6pynini___pyx_scope_struct_5__comp_patch++] = ((struct __pyx_obj_6pynini___pyx_scope_struct_5__comp_patch *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6pynini___pyx_scope_struct_5__comp_patch(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pynini___pyx_scope_struct_5__comp_patch *p = (struct __pyx_obj_6pynini___pyx_scope_struct_5__comp_patch *)o;
  if (p->__pyx_v_fnc) {
    e = (*v)(p->__pyx_v_fnc, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6pynini___pyx_scope_struct_5__comp_patch(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6pynini___pyx_scope_struct_5__comp_patch *p = (struct __pyx_obj_6pynini___pyx_scope_struct_5__comp_patch *)o;
  tmp = ((PyObject*)p->__pyx_v_fnc);
  p->__pyx_v_fnc = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6pynini___pyx_scope_struct_5__comp_patch = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynini.__pyx_scope_struct_5__comp_patch", /*tp_name*/
  sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_5__comp_patch), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pynini___pyx_scope_struct_5__comp_patch, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pynini___pyx_scope_struct_5__comp_patch, /*tp_traverse*/
  __pyx_tp_clear_6pynini___pyx_scope_struct_5__comp_patch, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pynini___pyx_scope_struct_5__comp_patch, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6pynini___pyx_scope_struct_6__comp_merge_patch *__pyx_freelist_6pynini___pyx_scope_struct_6__comp_merge_patch[8];
static int __pyx_freecount_6pynini___pyx_scope_struct_6__comp_merge_patch = 0;

static PyObject *__pyx_tp_new_6pynini___pyx_scope_struct_6__comp_merge_patch(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6pynini___pyx_scope_struct_6__comp_merge_patch > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_6__comp_merge_patch)))) {
    o = (PyObject*)__pyx_freelist_6pynini___pyx_scope_struct_6__comp_merge_patch[--__pyx_freecount_6pynini___pyx_scope_struct_6__comp_merge_patch];
    memset(o, 0, sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_6__comp_merge_patch));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pynini___pyx_scope_struct_6__comp_merge_patch(PyObject *o) {
  struct __pyx_obj_6pynini___pyx_scope_struct_6__comp_merge_patch *p = (struct __pyx_obj_6pynini___pyx_scope_struct_6__comp_merge_patch *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_fnc);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6pynini___pyx_scope_struct_6__comp_merge_patch < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_6__comp_merge_patch)))) {
    __pyx_freelist_6pynini___pyx_scope_struct_6__comp_merge_patch[__pyx_freecount_6pynini___pyx_scope_struct_6__comp_merge_patch++] = ((struct __pyx_obj_6pynini___pyx_scope_struct_6__comp_merge_patch *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6pynini___pyx_scope_struct_6__comp_merge_patch(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pynini___pyx_scope_struct_6__comp_merge_patch *p = (struct __pyx_obj_6pynini___pyx_scope_struct_6__comp_merge_patch *)o;
  if (p->__pyx_v_fnc) {
    e = (*v)(p->__pyx_v_fnc, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6pynini___pyx_scope_struct_6__comp_merge_patch(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6pynini___pyx_scope_struct_6__comp_merge_patch *p = (struct __pyx_obj_6pynini___pyx_scope_struct_6__comp_merge_patch *)o;
  tmp = ((PyObject*)p->__pyx_v_fnc);
  p->__pyx_v_fnc = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6pynini___pyx_scope_struct_6__comp_merge_patch = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynini.__pyx_scope_struct_6__comp_merge_patch", /*tp_name*/
  sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_6__comp_merge_patch), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pynini___pyx_scope_struct_6__comp_merge_patch, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pynini___pyx_scope_struct_6__comp_merge_patch, /*tp_traverse*/
  __pyx_tp_clear_6pynini___pyx_scope_struct_6__comp_merge_patch, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pynini___pyx_scope_struct_6__comp_merge_patch, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6pynini___pyx_scope_struct_7___iter__ *__pyx_freelist_6pynini___pyx_scope_struct_7___iter__[8];
static int __pyx_freecount_6pynini___pyx_scope_struct_7___iter__ = 0;

static PyObject *__pyx_tp_new_6pynini___pyx_scope_struct_7___iter__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6pynini___pyx_scope_struct_7___iter__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_7___iter__)))) {
    o = (PyObject*)__pyx_freelist_6pynini___pyx_scope_struct_7___iter__[--__pyx_freecount_6pynini___pyx_scope_struct_7___iter__];
    memset(o, 0, sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_7___iter__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pynini___pyx_scope_struct_7___iter__(PyObject *o) {
  struct __pyx_obj_6pynini___pyx_scope_struct_7___iter__ *p = (struct __pyx_obj_6pynini___pyx_scope_struct_7___iter__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6pynini___pyx_scope_struct_7___iter__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_7___iter__)))) {
    __pyx_freelist_6pynini___pyx_scope_struct_7___iter__[__pyx_freecount_6pynini___pyx_scope_struct_7___iter__++] = ((struct __pyx_obj_6pynini___pyx_scope_struct_7___iter__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6pynini___pyx_scope_struct_7___iter__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pynini___pyx_scope_struct_7___iter__ *p = (struct __pyx_obj_6pynini___pyx_scope_struct_7___iter__ *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject*)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6pynini___pyx_scope_struct_7___iter__(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6pynini___pyx_scope_struct_7___iter__ *p = (struct __pyx_obj_6pynini___pyx_scope_struct_7___iter__ *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_6pynini_PdtParentheses *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6pynini___pyx_scope_struct_7___iter__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynini.__pyx_scope_struct_7___iter__", /*tp_name*/
  sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_7___iter__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pynini___pyx_scope_struct_7___iter__, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pynini___pyx_scope_struct_7___iter__, /*tp_traverse*/
  __pyx_tp_clear_6pynini___pyx_scope_struct_7___iter__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pynini___pyx_scope_struct_7___iter__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6pynini___pyx_scope_struct_8___iter__ *__pyx_freelist_6pynini___pyx_scope_struct_8___iter__[8];
static int __pyx_freecount_6pynini___pyx_scope_struct_8___iter__ = 0;

static PyObject *__pyx_tp_new_6pynini___pyx_scope_struct_8___iter__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6pynini___pyx_scope_struct_8___iter__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_8___iter__)))) {
    o = (PyObject*)__pyx_freelist_6pynini___pyx_scope_struct_8___iter__[--__pyx_freecount_6pynini___pyx_scope_struct_8___iter__];
    memset(o, 0, sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_8___iter__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pynini___pyx_scope_struct_8___iter__(PyObject *o) {
  struct __pyx_obj_6pynini___pyx_scope_struct_8___iter__ *p = (struct __pyx_obj_6pynini___pyx_scope_struct_8___iter__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6pynini___pyx_scope_struct_8___iter__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_8___iter__)))) {
    __pyx_freelist_6pynini___pyx_scope_struct_8___iter__[__pyx_freecount_6pynini___pyx_scope_struct_8___iter__++] = ((struct __pyx_obj_6pynini___pyx_scope_struct_8___iter__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6pynini___pyx_scope_struct_8___iter__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pynini___pyx_scope_struct_8___iter__ *p = (struct __pyx_obj_6pynini___pyx_scope_struct_8___iter__ *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject*)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6pynini___pyx_scope_struct_8___iter__(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6pynini___pyx_scope_struct_8___iter__ *p = (struct __pyx_obj_6pynini___pyx_scope_struct_8___iter__ *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_6pynini_MPdtParentheses *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6pynini___pyx_scope_struct_8___iter__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynini.__pyx_scope_struct_8___iter__", /*tp_name*/
  sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_8___iter__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pynini___pyx_scope_struct_8___iter__, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pynini___pyx_scope_struct_8___iter__, /*tp_traverse*/
  __pyx_tp_clear_6pynini___pyx_scope_struct_8___iter__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pynini___pyx_scope_struct_8___iter__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6pynini___pyx_scope_struct_9__copy_patch *__pyx_freelist_6pynini___pyx_scope_struct_9__copy_patch[8];
static int __pyx_freecount_6pynini___pyx_scope_struct_9__copy_patch = 0;

static PyObject *__pyx_tp_new_6pynini___pyx_scope_struct_9__copy_patch(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6pynini___pyx_scope_struct_9__copy_patch > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_9__copy_patch)))) {
    o = (PyObject*)__pyx_freelist_6pynini___pyx_scope_struct_9__copy_patch[--__pyx_freecount_6pynini___pyx_scope_struct_9__copy_patch];
    memset(o, 0, sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_9__copy_patch));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pynini___pyx_scope_struct_9__copy_patch(PyObject *o) {
  struct __pyx_obj_6pynini___pyx_scope_struct_9__copy_patch *p = (struct __pyx_obj_6pynini___pyx_scope_struct_9__copy_patch *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_fnc);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6pynini___pyx_scope_struct_9__copy_patch < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_9__copy_patch)))) {
    __pyx_freelist_6pynini___pyx_scope_struct_9__copy_patch[__pyx_freecount_6pynini___pyx_scope_struct_9__copy_patch++] = ((struct __pyx_obj_6pynini___pyx_scope_struct_9__copy_patch *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6pynini___pyx_scope_struct_9__copy_patch(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pynini___pyx_scope_struct_9__copy_patch *p = (struct __pyx_obj_6pynini___pyx_scope_struct_9__copy_patch *)o;
  if (p->__pyx_v_fnc) {
    e = (*v)(p->__pyx_v_fnc, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6pynini___pyx_scope_struct_9__copy_patch(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6pynini___pyx_scope_struct_9__copy_patch *p = (struct __pyx_obj_6pynini___pyx_scope_struct_9__copy_patch *)o;
  tmp = ((PyObject*)p->__pyx_v_fnc);
  p->__pyx_v_fnc = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6pynini___pyx_scope_struct_9__copy_patch = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynini.__pyx_scope_struct_9__copy_patch", /*tp_name*/
  sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_9__copy_patch), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pynini___pyx_scope_struct_9__copy_patch, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pynini___pyx_scope_struct_9__copy_patch, /*tp_traverse*/
  __pyx_tp_clear_6pynini___pyx_scope_struct_9__copy_patch, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pynini___pyx_scope_struct_9__copy_patch, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {"_compile_or_copy_Fst", (PyCFunction)__pyx_pw_6pynini_1_compile_or_copy_Fst, METH_VARARGS|METH_KEYWORDS, 0},
  {"acceptor", (PyCFunction)__pyx_pw_6pynini_3acceptor, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pynini_2acceptor},
  {"transducer", (PyCFunction)__pyx_pw_6pynini_5transducer, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pynini_4transducer},
  {"cdrewrite", (PyCFunction)__pyx_pw_6pynini_7cdrewrite, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pynini_6cdrewrite},
  {"mpdt_compose", (PyCFunction)__pyx_pw_6pynini_41mpdt_compose, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pynini_40mpdt_compose},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "pynini",
    __pyx_k_Pynini_finite_state_grammar_comp, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_1arg_patch, __pyx_k_1arg_patch, sizeof(__pyx_k_1arg_patch), 0, 0, 1, 1},
  {&__pyx_n_s_1arg_patch_locals_patch, __pyx_k_1arg_patch_locals_patch, sizeof(__pyx_k_1arg_patch_locals_patch), 0, 0, 1, 1},
  {&__pyx_n_s_ACCEPTOR, __pyx_k_ACCEPTOR, sizeof(__pyx_k_ACCEPTOR), 0, 0, 1, 1},
  {&__pyx_n_s_ACCESSIBLE, __pyx_k_ACCESSIBLE, sizeof(__pyx_k_ACCESSIBLE), 0, 0, 1, 1},
  {&__pyx_n_s_ACYCLIC, __pyx_k_ACYCLIC, sizeof(__pyx_k_ACYCLIC), 0, 0, 1, 1},
  {&__pyx_n_s_ADD_ARC_PROPERTIES, __pyx_k_ADD_ARC_PROPERTIES, sizeof(__pyx_k_ADD_ARC_PROPERTIES), 0, 0, 1, 1},
  {&__pyx_n_s_ADD_STATE_PROPERTIES, __pyx_k_ADD_STATE_PROPERTIES, sizeof(__pyx_k_ADD_STATE_PROPERTIES), 0, 0, 1, 1},
  {&__pyx_n_s_ADD_SUPERFINAL_PROPERTIES, __pyx_k_ADD_SUPERFINAL_PROPERTIES, sizeof(__pyx_k_ADD_SUPERFINAL_PROPERTIES), 0, 0, 1, 1},
  {&__pyx_n_s_ARC_SORT_PROPERTIES, __pyx_k_ARC_SORT_PROPERTIES, sizeof(__pyx_k_ARC_SORT_PROPERTIES), 0, 0, 1, 1},
  {&__pyx_n_s_Arc, __pyx_k_Arc, sizeof(__pyx_k_Arc), 0, 0, 1, 1},
  {&__pyx_n_s_ArcIterator, __pyx_k_ArcIterator, sizeof(__pyx_k_ArcIterator), 0, 0, 1, 1},
  {&__pyx_n_s_BINARY_PROPERTIES, __pyx_k_BINARY_PROPERTIES, sizeof(__pyx_k_BINARY_PROPERTIES), 0, 0, 1, 1},
  {&__pyx_kp_s_Bytestring_compilation_failed, __pyx_k_Bytestring_compilation_failed, sizeof(__pyx_k_Bytestring_compilation_failed), 0, 0, 1, 0},
  {&__pyx_n_s_COACCESSIBLE, __pyx_k_COACCESSIBLE, sizeof(__pyx_k_COACCESSIBLE), 0, 0, 1, 1},
  {&__pyx_n_s_COPY_PROPERTIES, __pyx_k_COPY_PROPERTIES, sizeof(__pyx_k_COPY_PROPERTIES), 0, 0, 1, 1},
  {&__pyx_n_s_CYCLIC, __pyx_k_CYCLIC, sizeof(__pyx_k_CYCLIC), 0, 0, 1, 1},
  {&__pyx_kp_s_Cannot_invoke_method_in_current, __pyx_k_Cannot_invoke_method_in_current, sizeof(__pyx_k_Cannot_invoke_method_in_current), 0, 0, 1, 0},
  {&__pyx_kp_s_Compiled_rewrite_rule_has_no_con, __pyx_k_Compiled_rewrite_rule_has_no_con, sizeof(__pyx_k_Compiled_rewrite_rule_has_no_con), 0, 0, 1, 0},
  {&__pyx_kp_s_Composed_FST_has_no_connected_st, __pyx_k_Composed_FST_has_no_connected_st, sizeof(__pyx_k_Composed_FST_has_no_connected_st), 0, 0, 1, 0},
  {&__pyx_kp_s_Composed_MPDT_has_no_connected_s, __pyx_k_Composed_MPDT_has_no_connected_s, sizeof(__pyx_k_Composed_MPDT_has_no_connected_s), 0, 0, 1, 0},
  {&__pyx_kp_s_Composed_PDT_has_no_connected_st, __pyx_k_Composed_PDT_has_no_connected_st, sizeof(__pyx_k_Composed_PDT_has_no_connected_st), 0, 0, 1, 0},
  {&__pyx_n_s_DELETE_ARC_PROPERTIES, __pyx_k_DELETE_ARC_PROPERTIES, sizeof(__pyx_k_DELETE_ARC_PROPERTIES), 0, 0, 1, 1},
  {&__pyx_n_s_DELETE_STATE_PROPERTIES, __pyx_k_DELETE_STATE_PROPERTIES, sizeof(__pyx_k_DELETE_STATE_PROPERTIES), 0, 0, 1, 1},
  {&__pyx_n_s_EPSILONS, __pyx_k_EPSILONS, sizeof(__pyx_k_EPSILONS), 0, 0, 1, 1},
  {&__pyx_n_s_ERROR, __pyx_k_ERROR, sizeof(__pyx_k_ERROR), 0, 0, 1, 1},
  {&__pyx_n_s_EXPANDED, __pyx_k_EXPANDED, sizeof(__pyx_k_EXPANDED), 0, 0, 1, 1},
  {&__pyx_n_s_EXTRINSIC_PROPERTIES, __pyx_k_EXTRINSIC_PROPERTIES, sizeof(__pyx_k_EXTRINSIC_PROPERTIES), 0, 0, 1, 1},
  {&__pyx_n_s_EncodeMapper, __pyx_k_EncodeMapper, sizeof(__pyx_k_EncodeMapper), 0, 0, 1, 1},
  {&__pyx_kp_s_Expected_at_least_2_positional_a, __pyx_k_Expected_at_least_2_positional_a, sizeof(__pyx_k_Expected_at_least_2_positional_a), 0, 0, 1, 0},
  {&__pyx_kp_s_Expecting_acceptor_or_string_arg, __pyx_k_Expecting_acceptor_or_string_arg, sizeof(__pyx_k_Expecting_acceptor_or_string_arg), 0, 0, 1, 0},
  {&__pyx_n_s_FST_PROPERTIES, __pyx_k_FST_PROPERTIES, sizeof(__pyx_k_FST_PROPERTIES), 0, 0, 1, 1},
  {&__pyx_kp_s_FST_is_not_a_string, __pyx_k_FST_is_not_a_string, sizeof(__pyx_k_FST_is_not_a_string), 0, 0, 1, 0},
  {&__pyx_kp_s_FST_is_not_acyclic, __pyx_k_FST_is_not_acyclic, sizeof(__pyx_k_FST_is_not_acyclic), 0, 0, 1, 0},
  {&__pyx_kp_s_Far_r_mode_c_at_0x_x, __pyx_k_Far_r_mode_c_at_0x_x, sizeof(__pyx_k_Far_r_mode_c_at_0x_x), 0, 0, 1, 0},
  {&__pyx_n_s_FstArgError, __pyx_k_FstArgError, sizeof(__pyx_k_FstArgError), 0, 0, 1, 1},
  {&__pyx_n_s_FstBadWeightError, __pyx_k_FstBadWeightError, sizeof(__pyx_k_FstBadWeightError), 0, 0, 1, 1},
  {&__pyx_n_s_FstDeletedConstructorError, __pyx_k_FstDeletedConstructorError, sizeof(__pyx_k_FstDeletedConstructorError), 0, 0, 1, 1},
  {&__pyx_n_s_FstIOError, __pyx_k_FstIOError, sizeof(__pyx_k_FstIOError), 0, 0, 1, 1},
  {&__pyx_n_s_FstIndexError, __pyx_k_FstIndexError, sizeof(__pyx_k_FstIndexError), 0, 0, 1, 1},
  {&__pyx_n_s_FstOpError, __pyx_k_FstOpError, sizeof(__pyx_k_FstOpError), 0, 0, 1, 1},
  {&__pyx_n_s_FstStringCompilationError, __pyx_k_FstStringCompilationError, sizeof(__pyx_k_FstStringCompilationError), 0, 0, 1, 1},
  {&__pyx_n_s_FstSymbolTableMergeError, __pyx_k_FstSymbolTableMergeError, sizeof(__pyx_k_FstSymbolTableMergeError), 0, 0, 1, 1},
  {&__pyx_n_s_FstUnknownWeightTypeError, __pyx_k_FstUnknownWeightTypeError, sizeof(__pyx_k_FstUnknownWeightTypeError), 0, 0, 1, 1},
  {&__pyx_n_s_INITIAL_ACYCLIC, __pyx_k_INITIAL_ACYCLIC, sizeof(__pyx_k_INITIAL_ACYCLIC), 0, 0, 1, 1},
  {&__pyx_n_s_INITIAL_CYCLIC, __pyx_k_INITIAL_CYCLIC, sizeof(__pyx_k_INITIAL_CYCLIC), 0, 0, 1, 1},
  {&__pyx_n_s_INTRINSIC_PROPERTIES, __pyx_k_INTRINSIC_PROPERTIES, sizeof(__pyx_k_INTRINSIC_PROPERTIES), 0, 0, 1, 1},
  {&__pyx_n_s_I_DETERMINISTIC, __pyx_k_I_DETERMINISTIC, sizeof(__pyx_k_I_DETERMINISTIC), 0, 0, 1, 1},
  {&__pyx_n_s_I_EPSILONS, __pyx_k_I_EPSILONS, sizeof(__pyx_k_I_EPSILONS), 0, 0, 1, 1},
  {&__pyx_n_s_I_LABEL_INVARIANT_PROPERTIES, __pyx_k_I_LABEL_INVARIANT_PROPERTIES, sizeof(__pyx_k_I_LABEL_INVARIANT_PROPERTIES), 0, 0, 1, 1},
  {&__pyx_n_s_I_LABEL_SORTED, __pyx_k_I_LABEL_SORTED, sizeof(__pyx_k_I_LABEL_SORTED), 0, 0, 1, 1},
  {&__pyx_n_s_KeyError, __pyx_k_KeyError, sizeof(__pyx_k_KeyError), 0, 0, 1, 1},
  {&__pyx_n_s_MPdtParentheses___iter, __pyx_k_MPdtParentheses___iter, sizeof(__pyx_k_MPdtParentheses___iter), 0, 0, 1, 1},
  {&__pyx_kp_s_MPdtParentheses_at_0x_x, __pyx_k_MPdtParentheses_at_0x_x, sizeof(__pyx_k_MPdtParentheses_at_0x_x), 0, 0, 1, 0},
  {&__pyx_n_s_MUTABLE, __pyx_k_MUTABLE, sizeof(__pyx_k_MUTABLE), 0, 0, 1, 1},
  {&__pyx_kp_s_Mappings_must_be_of_length_1_or, __pyx_k_Mappings_must_be_of_length_1_or, sizeof(__pyx_k_Mappings_must_be_of_length_1_or), 0, 0, 1, 0},
  {&__pyx_n_s_MutableArcIterator, __pyx_k_MutableArcIterator, sizeof(__pyx_k_MutableArcIterator), 0, 0, 1, 1},
  {&__pyx_n_s_NEG_TRINARY_PROPERTIES, __pyx_k_NEG_TRINARY_PROPERTIES, sizeof(__pyx_k_NEG_TRINARY_PROPERTIES), 0, 0, 1, 1},
  {&__pyx_n_s_NON_I_DETERMINISTIC, __pyx_k_NON_I_DETERMINISTIC, sizeof(__pyx_k_NON_I_DETERMINISTIC), 0, 0, 1, 1},
  {&__pyx_n_s_NON_O_DETERMINISTIC, __pyx_k_NON_O_DETERMINISTIC, sizeof(__pyx_k_NON_O_DETERMINISTIC), 0, 0, 1, 1},
  {&__pyx_n_s_NOT_ACCEPTOR, __pyx_k_NOT_ACCEPTOR, sizeof(__pyx_k_NOT_ACCEPTOR), 0, 0, 1, 1},
  {&__pyx_n_s_NOT_ACCESSIBLE, __pyx_k_NOT_ACCESSIBLE, sizeof(__pyx_k_NOT_ACCESSIBLE), 0, 0, 1, 1},
  {&__pyx_n_s_NOT_COACCESSIBLE, __pyx_k_NOT_COACCESSIBLE, sizeof(__pyx_k_NOT_COACCESSIBLE), 0, 0, 1, 1},
  {&__pyx_n_s_NOT_I_LABEL_SORTED, __pyx_k_NOT_I_LABEL_SORTED, sizeof(__pyx_k_NOT_I_LABEL_SORTED), 0, 0, 1, 1},
  {&__pyx_n_s_NOT_O_LABEL_SORTED, __pyx_k_NOT_O_LABEL_SORTED, sizeof(__pyx_k_NOT_O_LABEL_SORTED), 0, 0, 1, 1},
  {&__pyx_n_s_NOT_STRING, __pyx_k_NOT_STRING, sizeof(__pyx_k_NOT_STRING), 0, 0, 1, 1},
  {&__pyx_n_s_NOT_TOP_SORTED, __pyx_k_NOT_TOP_SORTED, sizeof(__pyx_k_NOT_TOP_SORTED), 0, 0, 1, 1},
  {&__pyx_n_s_NO_EPSILONS, __pyx_k_NO_EPSILONS, sizeof(__pyx_k_NO_EPSILONS), 0, 0, 1, 1},
  {&__pyx_n_s_NO_I_EPSILONS, __pyx_k_NO_I_EPSILONS, sizeof(__pyx_k_NO_I_EPSILONS), 0, 0, 1, 1},
  {&__pyx_n_s_NO_O_EPSILONS, __pyx_k_NO_O_EPSILONS, sizeof(__pyx_k_NO_O_EPSILONS), 0, 0, 1, 1},
  {&__pyx_n_s_NULL_PROPERTIES, __pyx_k_NULL_PROPERTIES, sizeof(__pyx_k_NULL_PROPERTIES), 0, 0, 1, 1},
  {&__pyx_n_s_NotImplementedError, __pyx_k_NotImplementedError, sizeof(__pyx_k_NotImplementedError), 0, 0, 1, 1},
  {&__pyx_n_s_O_DETERMINISTIC, __pyx_k_O_DETERMINISTIC, sizeof(__pyx_k_O_DETERMINISTIC), 0, 0, 1, 1},
  {&__pyx_n_s_O_EPSILONS, __pyx_k_O_EPSILONS, sizeof(__pyx_k_O_EPSILONS), 0, 0, 1, 1},
  {&__pyx_n_s_O_LABEL_INVARIANT_PROPERTIES, __pyx_k_O_LABEL_INVARIANT_PROPERTIES, sizeof(__pyx_k_O_LABEL_INVARIANT_PROPERTIES), 0, 0, 1, 1},
  {&__pyx_n_s_O_LABEL_SORTED, __pyx_k_O_LABEL_SORTED, sizeof(__pyx_k_O_LABEL_SORTED), 0, 0, 1, 1},
  {&__pyx_kp_s_Operation_failed, __pyx_k_Operation_failed, sizeof(__pyx_k_Operation_failed), 0, 0, 1, 0},
  {&__pyx_kp_s_Operator_not_implemented, __pyx_k_Operator_not_implemented, sizeof(__pyx_k_Operator_not_implemented), 0, 0, 1, 0},
  {&__pyx_n_s_POS_TRINARY_PROPERTIES, __pyx_k_POS_TRINARY_PROPERTIES, sizeof(__pyx_k_POS_TRINARY_PROPERTIES), 0, 0, 1, 1},
  {&__pyx_n_s_PdtParentheses___iter, __pyx_k_PdtParentheses___iter, sizeof(__pyx_k_PdtParentheses___iter), 0, 0, 1, 1},
  {&__pyx_kp_s_PdtParentheses_at_0x_x, __pyx_k_PdtParentheses_at_0x_x, sizeof(__pyx_k_PdtParentheses_at_0x_x), 0, 0, 1, 0},
  {&__pyx_n_s_RM_SUPERFINAL_PROPERTIES, __pyx_k_RM_SUPERFINAL_PROPERTIES, sizeof(__pyx_k_RM_SUPERFINAL_PROPERTIES), 0, 0, 1, 1},
  {&__pyx_kp_s_Read_failed, __pyx_k_Read_failed, sizeof(__pyx_k_Read_failed), 0, 0, 1, 0},
  {&__pyx_kp_s_Read_failed_r, __pyx_k_Read_failed_r, sizeof(__pyx_k_Read_failed_r), 0, 0, 1, 0},
  {&__pyx_n_s_SET_ARC_PROPERTIES, __pyx_k_SET_ARC_PROPERTIES, sizeof(__pyx_k_SET_ARC_PROPERTIES), 0, 0, 1, 1},
  {&__pyx_n_s_SET_FINAL_PROPERTIES, __pyx_k_SET_FINAL_PROPERTIES, sizeof(__pyx_k_SET_FINAL_PROPERTIES), 0, 0, 1, 1},
  {&__pyx_n_s_SET_START_PROPERTIES, __pyx_k_SET_START_PROPERTIES, sizeof(__pyx_k_SET_START_PROPERTIES), 0, 0, 1, 1},
  {&__pyx_n_s_STATE_SORT_PROPERTIES, __pyx_k_STATE_SORT_PROPERTIES, sizeof(__pyx_k_STATE_SORT_PROPERTIES), 0, 0, 1, 1},
  {&__pyx_n_s_STRING, __pyx_k_STRING, sizeof(__pyx_k_STRING), 0, 0, 1, 1},
  {&__pyx_n_s_StateIterator, __pyx_k_StateIterator, sizeof(__pyx_k_StateIterator), 0, 0, 1, 1},
  {&__pyx_n_s_StopIteration, __pyx_k_StopIteration, sizeof(__pyx_k_StopIteration), 0, 0, 1, 1},
  {&__pyx_kp_s_StringPaths_at_0x_x, __pyx_k_StringPaths_at_0x_x, sizeof(__pyx_k_StringPaths_at_0x_x), 0, 0, 1, 0},
  {&__pyx_kp_s_String_map_compilation_failed, __pyx_k_String_map_compilation_failed, sizeof(__pyx_k_String_map_compilation_failed), 0, 0, 1, 0},
  {&__pyx_n_s_SymbolTable, __pyx_k_SymbolTable, sizeof(__pyx_k_SymbolTable), 0, 0, 1, 1},
  {&__pyx_n_s_SymbolTableIterator, __pyx_k_SymbolTableIterator, sizeof(__pyx_k_SymbolTableIterator), 0, 0, 1, 1},
  {&__pyx_n_s_SymbolTable_2, __pyx_k_SymbolTable_2, sizeof(__pyx_k_SymbolTable_2), 0, 0, 1, 1},
  {&__pyx_kp_s_Symbol_string_compilation_failed, __pyx_k_Symbol_string_compilation_failed, sizeof(__pyx_k_Symbol_string_compilation_failed), 0, 0, 1, 0},
  {&__pyx_n_s_TOP_SORTED, __pyx_k_TOP_SORTED, sizeof(__pyx_k_TOP_SORTED), 0, 0, 1, 1},
  {&__pyx_n_s_TRINARY_PROPERTIES, __pyx_k_TRINARY_PROPERTIES, sizeof(__pyx_k_TRINARY_PROPERTIES), 0, 0, 1, 1},
  {&__pyx_n_s_UNWEIGHTED, __pyx_k_UNWEIGHTED, sizeof(__pyx_k_UNWEIGHTED), 0, 0, 1, 1},
  {&__pyx_n_s_UNWEIGHTED_CYCLES, __pyx_k_UNWEIGHTED_CYCLES, sizeof(__pyx_k_UNWEIGHTED_CYCLES), 0, 0, 1, 1},
  {&__pyx_kp_s_UTF8_string_compilation_failed, __pyx_k_UTF8_string_compilation_failed, sizeof(__pyx_k_UTF8_string_compilation_failed), 0, 0, 1, 0},
  {&__pyx_kp_s_Unable_to_resolve_parentheses_sy, __pyx_k_Unable_to_resolve_parentheses_sy, sizeof(__pyx_k_Unable_to_resolve_parentheses_sy), 0, 0, 1, 0},
  {&__pyx_kp_s_Unable_to_resolve_symbol_table_c, __pyx_k_Unable_to_resolve_symbol_table_c, sizeof(__pyx_k_Unable_to_resolve_symbol_table_c), 0, 0, 1, 0},
  {&__pyx_n_s_UnicodeDecodeError, __pyx_k_UnicodeDecodeError, sizeof(__pyx_k_UnicodeDecodeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Unknown_PDT_compose_filter_type, __pyx_k_Unknown_PDT_compose_filter_type, sizeof(__pyx_k_Unknown_PDT_compose_filter_type), 0, 0, 1, 0},
  {&__pyx_kp_s_Unknown_PDT_parser_type_r, __pyx_k_Unknown_PDT_parser_type_r, sizeof(__pyx_k_Unknown_PDT_parser_type_r), 0, 0, 1, 0},
  {&__pyx_kp_s_Unknown_arc_type_r, __pyx_k_Unknown_arc_type_r, sizeof(__pyx_k_Unknown_arc_type_r), 0, 0, 1, 0},
  {&__pyx_kp_s_Unknown_mode_r, __pyx_k_Unknown_mode_r, sizeof(__pyx_k_Unknown_mode_r), 0, 0, 1, 0},
  {&__pyx_kp_s_Unknown_rewrite_direction_type_r, __pyx_k_Unknown_rewrite_direction_type_r, sizeof(__pyx_k_Unknown_rewrite_direction_type_r), 0, 0, 1, 0},
  {&__pyx_kp_s_Unknown_rewrite_mode_type_r, __pyx_k_Unknown_rewrite_mode_type_r, sizeof(__pyx_k_Unknown_rewrite_mode_type_r), 0, 0, 1, 0},
  {&__pyx_kp_s_Unknown_token_type_r, __pyx_k_Unknown_token_type_r, sizeof(__pyx_k_Unknown_token_type_r), 0, 0, 1, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_WEIGHTED, __pyx_k_WEIGHTED, sizeof(__pyx_k_WEIGHTED), 0, 0, 1, 1},
  {&__pyx_n_s_WEIGHTED_CYCLES, __pyx_k_WEIGHTED_CYCLES, sizeof(__pyx_k_WEIGHTED_CYCLES), 0, 0, 1, 1},
  {&__pyx_n_s_WEIGHT_INVARIANT_PROPERTIES, __pyx_k_WEIGHT_INVARIANT_PROPERTIES, sizeof(__pyx_k_WEIGHT_INVARIANT_PROPERTIES), 0, 0, 1, 1},
  {&__pyx_n_s_Weight, __pyx_k_Weight, sizeof(__pyx_k_Weight), 0, 0, 1, 1},
  {&__pyx_kp_s_Write_failed_r, __pyx_k_Write_failed_r, sizeof(__pyx_k_Write_failed_r), 0, 0, 1, 0},
  {&__pyx_n_s_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 0, 1, 1},
  {&__pyx_n_s_acceptor, __pyx_k_acceptor, sizeof(__pyx_k_acceptor), 0, 0, 1, 1},
  {&__pyx_n_s_add, __pyx_k_add, sizeof(__pyx_k_add), 0, 0, 1, 1},
  {&__pyx_n_s_add_pair, __pyx_k_add_pair, sizeof(__pyx_k_add_pair), 0, 0, 1, 1},
  {&__pyx_n_s_add_triple, __pyx_k_add_triple, sizeof(__pyx_k_add_triple), 0, 0, 1, 1},
  {&__pyx_n_s_arc_type, __pyx_k_arc_type, sizeof(__pyx_k_arc_type), 0, 0, 1, 1},
  {&__pyx_n_s_arcmap, __pyx_k_arcmap, sizeof(__pyx_k_arcmap), 0, 0, 1, 1},
  {&__pyx_n_s_arcsort, __pyx_k_arcsort, sizeof(__pyx_k_arcsort), 0, 0, 1, 1},
  {&__pyx_n_s_arg, __pyx_k_arg, sizeof(__pyx_k_arg), 0, 0, 1, 1},
  {&__pyx_n_s_arg1, __pyx_k_arg1, sizeof(__pyx_k_arg1), 0, 0, 1, 1},
  {&__pyx_n_s_arg2, __pyx_k_arg2, sizeof(__pyx_k_arg2), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_assignment, __pyx_k_assignment, sizeof(__pyx_k_assignment), 0, 0, 1, 1},
  {&__pyx_n_s_astring, __pyx_k_astring, sizeof(__pyx_k_astring), 0, 0, 1, 1},
  {&__pyx_n_b_byte, __pyx_k_byte, sizeof(__pyx_k_byte), 0, 0, 0, 1},
  {&__pyx_kp_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 0},
  {&__pyx_n_s_cal, __pyx_k_cal, sizeof(__pyx_k_cal), 0, 0, 1, 1},
  {&__pyx_n_s_call_arc_labeling, __pyx_k_call_arc_labeling, sizeof(__pyx_k_call_arc_labeling), 0, 0, 1, 1},
  {&__pyx_n_s_cf, __pyx_k_cf, sizeof(__pyx_k_cf), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_closed, __pyx_k_closed, sizeof(__pyx_k_closed), 0, 0, 1, 1},
  {&__pyx_n_s_closure, __pyx_k_closure, sizeof(__pyx_k_closure), 0, 0, 1, 1},
  {&__pyx_n_s_comp_merge_patch, __pyx_k_comp_merge_patch, sizeof(__pyx_k_comp_merge_patch), 0, 0, 1, 1},
  {&__pyx_n_s_comp_merge_patch_locals_patch, __pyx_k_comp_merge_patch_locals_patch, sizeof(__pyx_k_comp_merge_patch_locals_patch), 0, 0, 1, 1},
  {&__pyx_n_s_comp_patch, __pyx_k_comp_patch, sizeof(__pyx_k_comp_patch), 0, 0, 1, 1},
  {&__pyx_n_s_comp_patch_locals_patch, __pyx_k_comp_patch_locals_patch, sizeof(__pyx_k_comp_patch_locals_patch), 0, 0, 1, 1},
  {&__pyx_n_s_compose, __pyx_k_compose, sizeof(__pyx_k_compose), 0, 0, 1, 1},
  {&__pyx_n_s_compose_patch, __pyx_k_compose_patch, sizeof(__pyx_k_compose_patch), 0, 0, 1, 1},
  {&__pyx_n_s_compose_patch_locals_patch, __pyx_k_compose_patch_locals_patch, sizeof(__pyx_k_compose_patch_locals_patch), 0, 0, 1, 1},
  {&__pyx_n_s_compute_props, __pyx_k_compute_props, sizeof(__pyx_k_compute_props), 0, 0, 1, 1},
  {&__pyx_n_s_concat, __pyx_k_concat, sizeof(__pyx_k_concat), 0, 0, 1, 1},
  {&__pyx_n_s_connect, __pyx_k_connect, sizeof(__pyx_k_connect), 0, 0, 1, 1},
  {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
  {&__pyx_n_s_copy_patch, __pyx_k_copy_patch, sizeof(__pyx_k_copy_patch), 0, 0, 1, 1},
  {&__pyx_n_s_copy_patch_locals_patch, __pyx_k_copy_patch_locals_patch, sizeof(__pyx_k_copy_patch_locals_patch), 0, 0, 1, 1},
  {&__pyx_n_s_create, __pyx_k_create, sizeof(__pyx_k_create), 0, 0, 1, 1},
  {&__pyx_n_s_decode, __pyx_k_decode, sizeof(__pyx_k_decode), 0, 0, 1, 1},
  {&__pyx_n_b_default, __pyx_k_default, sizeof(__pyx_k_default), 0, 0, 0, 1},
  {&__pyx_n_s_determinize, __pyx_k_determinize, sizeof(__pyx_k_determinize), 0, 0, 1, 1},
  {&__pyx_n_s_difference, __pyx_k_difference, sizeof(__pyx_k_difference), 0, 0, 1, 1},
  {&__pyx_n_s_difference_patch, __pyx_k_difference_patch, sizeof(__pyx_k_difference_patch), 0, 0, 1, 1},
  {&__pyx_n_s_difference_patch_locals_patch, __pyx_k_difference_patch_locals_patch, sizeof(__pyx_k_difference_patch_locals_patch), 0, 0, 1, 1},
  {&__pyx_n_s_direction, __pyx_k_direction, sizeof(__pyx_k_direction), 0, 0, 1, 1},
  {&__pyx_n_s_disambiguate, __pyx_k_disambiguate, sizeof(__pyx_k_disambiguate), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_done, __pyx_k_done, sizeof(__pyx_k_done), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_epsilon_on_replace, __pyx_k_epsilon_on_replace, sizeof(__pyx_k_epsilon_on_replace), 0, 0, 1, 1},
  {&__pyx_n_s_epsnormalize, __pyx_k_epsnormalize, sizeof(__pyx_k_epsnormalize), 0, 0, 1, 1},
  {&__pyx_n_s_equal, __pyx_k_equal, sizeof(__pyx_k_equal), 0, 0, 1, 1},
  {&__pyx_n_s_equivalent, __pyx_k_equivalent, sizeof(__pyx_k_equivalent), 0, 0, 1, 1},
  {&__pyx_n_s_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
  {&__pyx_n_s_exc, __pyx_k_exc, sizeof(__pyx_k_exc), 0, 0, 1, 1},
  {&__pyx_n_s_far_type, __pyx_k_far_type, sizeof(__pyx_k_far_type), 0, 0, 1, 1},
  {&__pyx_n_b_fifo, __pyx_k_fifo, sizeof(__pyx_k_fifo), 0, 0, 0, 1},
  {&__pyx_n_s_filename, __pyx_k_filename, sizeof(__pyx_k_filename), 0, 0, 1, 1},
  {&__pyx_n_s_find, __pyx_k_find, sizeof(__pyx_k_find), 0, 0, 1, 1},
  {&__pyx_n_s_first, __pyx_k_first, sizeof(__pyx_k_first), 0, 0, 1, 1},
  {&__pyx_n_s_fnc, __pyx_k_fnc, sizeof(__pyx_k_fnc), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_fst, __pyx_k_fst, sizeof(__pyx_k_fst), 0, 0, 1, 1},
  {&__pyx_n_s_functools, __pyx_k_functools, sizeof(__pyx_k_functools), 0, 0, 1, 1},
  {&__pyx_n_s_get_fst, __pyx_k_get_fst, sizeof(__pyx_k_get_fst), 0, 0, 1, 1},
  {&__pyx_n_s_get_key, __pyx_k_get_key, sizeof(__pyx_k_get_key), 0, 0, 1, 1},
  {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
  {&__pyx_n_s_ifst, __pyx_k_ifst, sizeof(__pyx_k_ifst), 0, 0, 1, 1},
  {&__pyx_n_s_ifst1, __pyx_k_ifst1, sizeof(__pyx_k_ifst1), 0, 0, 1, 1},
  {&__pyx_n_s_ifst2, __pyx_k_ifst2, sizeof(__pyx_k_ifst2), 0, 0, 1, 1},
  {&__pyx_n_s_ilabel, __pyx_k_ilabel, sizeof(__pyx_k_ilabel), 0, 0, 1, 1},
  {&__pyx_n_s_impdt, __pyx_k_impdt, sizeof(__pyx_k_impdt), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_input_token_type, __pyx_k_input_token_type, sizeof(__pyx_k_input_token_type), 0, 0, 1, 1},
  {&__pyx_n_s_intersect, __pyx_k_intersect, sizeof(__pyx_k_intersect), 0, 0, 1, 1},
  {&__pyx_n_s_intersect_patch, __pyx_k_intersect_patch, sizeof(__pyx_k_intersect_patch), 0, 0, 1, 1},
  {&__pyx_n_s_intersect_patch_locals_patch, __pyx_k_intersect_patch_locals_patch, sizeof(__pyx_k_intersect_patch_locals_patch), 0, 0, 1, 1},
  {&__pyx_n_s_invert, __pyx_k_invert, sizeof(__pyx_k_invert), 0, 0, 1, 1},
  {&__pyx_n_s_ipdt, __pyx_k_ipdt, sizeof(__pyx_k_ipdt), 0, 0, 1, 1},
  {&__pyx_n_s_isomorphic, __pyx_k_isomorphic, sizeof(__pyx_k_isomorphic), 0, 0, 1, 1},
  {&__pyx_n_s_istring, __pyx_k_istring, sizeof(__pyx_k_istring), 0, 0, 1, 1},
  {&__pyx_n_s_isymbols, __pyx_k_isymbols, sizeof(__pyx_k_isymbols), 0, 0, 1, 1},
  {&__pyx_n_s_isyms, __pyx_k_isyms, sizeof(__pyx_k_isyms), 0, 0, 1, 1},
  {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {&__pyx_n_s_iter, __pyx_k_iter, sizeof(__pyx_k_iter), 0, 0, 1, 1},
  {&__pyx_n_s_iteritems, __pyx_k_iteritems, sizeof(__pyx_k_iteritems), 0, 0, 1, 1},
  {&__pyx_n_s_itype, __pyx_k_itype, sizeof(__pyx_k_itype), 0, 0, 1, 1},
  {&__pyx_n_s_keep_parentheses, __pyx_k_keep_parentheses, sizeof(__pyx_k_keep_parentheses), 0, 0, 1, 1},
  {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {&__pyx_n_s_kwargs, __pyx_k_kwargs, sizeof(__pyx_k_kwargs), 0, 0, 1, 1},
  {&__pyx_n_s_lambda, __pyx_k_lambda, sizeof(__pyx_k_lambda), 0, 0, 1, 1},
  {&__pyx_n_b_left, __pyx_k_left, sizeof(__pyx_k_left), 0, 0, 0, 1},
  {&__pyx_n_s_left_mpdt, __pyx_k_left_mpdt, sizeof(__pyx_k_left_mpdt), 0, 0, 1, 1},
  {&__pyx_n_s_left_pdt, __pyx_k_left_pdt, sizeof(__pyx_k_left_pdt), 0, 0, 1, 1},
  {&__pyx_n_s_lhs, __pyx_k_lhs, sizeof(__pyx_k_lhs), 0, 0, 1, 1},
  {&__pyx_n_s_logging, __pyx_k_logging, sizeof(__pyx_k_logging), 0, 0, 1, 1},
  {&__pyx_n_s_lower, __pyx_k_lower, sizeof(__pyx_k_lower), 0, 0, 1, 1},
  {&__pyx_n_b_ltr, __pyx_k_ltr, sizeof(__pyx_k_ltr), 0, 0, 0, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_minimize, __pyx_k_minimize, sizeof(__pyx_k_minimize), 0, 0, 1, 1},
  {&__pyx_n_s_mode, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_mpdt, __pyx_k_mpdt, sizeof(__pyx_k_mpdt), 0, 0, 1, 1},
  {&__pyx_n_s_mpdt_expand, __pyx_k_mpdt_expand, sizeof(__pyx_k_mpdt_expand), 0, 0, 1, 1},
  {&__pyx_n_s_mpdt_reverse, __pyx_k_mpdt_reverse, sizeof(__pyx_k_mpdt_reverse), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_b_neither, __pyx_k_neither, sizeof(__pyx_k_neither), 0, 0, 0, 1},
  {&__pyx_n_s_new_pairs, __pyx_k_new_pairs, sizeof(__pyx_k_new_pairs), 0, 0, 1, 1},
  {&__pyx_n_s_next, __pyx_k_next, sizeof(__pyx_k_next), 0, 0, 1, 1},
  {&__pyx_n_s_nonterm, __pyx_k_nonterm, sizeof(__pyx_k_nonterm), 0, 0, 1, 1},
  {&__pyx_n_s_nt, __pyx_k_nt, sizeof(__pyx_k_nt), 0, 0, 1, 1},
  {&__pyx_n_s_num_states, __pyx_k_num_states, sizeof(__pyx_k_num_states), 0, 0, 1, 1},
  {&__pyx_n_b_obl, __pyx_k_obl, sizeof(__pyx_k_obl), 0, 0, 0, 1},
  {&__pyx_n_s_olabel, __pyx_k_olabel, sizeof(__pyx_k_olabel), 0, 0, 1, 1},
  {&__pyx_n_s_open, __pyx_k_open, sizeof(__pyx_k_open), 0, 0, 1, 1},
  {&__pyx_n_b_opt, __pyx_k_opt, sizeof(__pyx_k_opt), 0, 0, 0, 1},
  {&__pyx_n_s_optimize, __pyx_k_optimize, sizeof(__pyx_k_optimize), 0, 0, 1, 1},
  {&__pyx_n_s_opts, __pyx_k_opts, sizeof(__pyx_k_opts), 0, 0, 1, 1},
  {&__pyx_n_s_ostring, __pyx_k_ostring, sizeof(__pyx_k_ostring), 0, 0, 1, 1},
  {&__pyx_n_s_osymbols, __pyx_k_osymbols, sizeof(__pyx_k_osymbols), 0, 0, 1, 1},
  {&__pyx_n_s_osyms, __pyx_k_osyms, sizeof(__pyx_k_osyms), 0, 0, 1, 1},
  {&__pyx_n_s_otype, __pyx_k_otype, sizeof(__pyx_k_otype), 0, 0, 1, 1},
  {&__pyx_n_s_output_token_type, __pyx_k_output_token_type, sizeof(__pyx_k_output_token_type), 0, 0, 1, 1},
  {&__pyx_n_s_pair, __pyx_k_pair, sizeof(__pyx_k_pair), 0, 0, 1, 1},
  {&__pyx_n_s_pairs, __pyx_k_pairs, sizeof(__pyx_k_pairs), 0, 0, 1, 1},
  {&__pyx_n_b_paren, __pyx_k_paren, sizeof(__pyx_k_paren), 0, 0, 0, 1},
  {&__pyx_n_s_parens, __pyx_k_parens, sizeof(__pyx_k_parens), 0, 0, 1, 1},
  {&__pyx_n_s_patch, __pyx_k_patch, sizeof(__pyx_k_patch), 0, 0, 1, 1},
  {&__pyx_n_s_path_gc, __pyx_k_path_gc, sizeof(__pyx_k_path_gc), 0, 0, 1, 1},
  {&__pyx_n_s_paths, __pyx_k_paths, sizeof(__pyx_k_paths), 0, 0, 1, 1},
  {&__pyx_n_s_pdt, __pyx_k_pdt, sizeof(__pyx_k_pdt), 0, 0, 1, 1},
  {&__pyx_n_s_pdt_compose, __pyx_k_pdt_compose, sizeof(__pyx_k_pdt_compose), 0, 0, 1, 1},
  {&__pyx_n_s_pdt_expand, __pyx_k_pdt_expand, sizeof(__pyx_k_pdt_expand), 0, 0, 1, 1},
  {&__pyx_n_s_pdt_parser_type, __pyx_k_pdt_parser_type, sizeof(__pyx_k_pdt_parser_type), 0, 0, 1, 1},
  {&__pyx_n_s_pdt_replace, __pyx_k_pdt_replace, sizeof(__pyx_k_pdt_replace), 0, 0, 1, 1},
  {&__pyx_n_s_pdt_reverse, __pyx_k_pdt_reverse, sizeof(__pyx_k_pdt_reverse), 0, 0, 1, 1},
  {&__pyx_n_s_pdt_shortestpath, __pyx_k_pdt_shortestpath, sizeof(__pyx_k_pdt_shortestpath), 0, 0, 1, 1},
  {&__pyx_n_s_plus, __pyx_k_plus, sizeof(__pyx_k_plus), 0, 0, 1, 1},
  {&__pyx_n_s_pop, __pyx_k_pop, sizeof(__pyx_k_pop), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_project, __pyx_k_project, sizeof(__pyx_k_project), 0, 0, 1, 1},
  {&__pyx_n_s_property, __pyx_k_property, sizeof(__pyx_k_property), 0, 0, 1, 1},
  {&__pyx_n_s_prune, __pyx_k_prune, sizeof(__pyx_k_prune), 0, 0, 1, 1},
  {&__pyx_n_s_push, __pyx_k_push, sizeof(__pyx_k_push), 0, 0, 1, 1},
  {&__pyx_n_s_pynini, __pyx_k_pynini, sizeof(__pyx_k_pynini), 0, 0, 1, 1},
  {&__pyx_n_s_pywrapfst, __pyx_k_pywrapfst, sizeof(__pyx_k_pywrapfst), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_qt, __pyx_k_qt, sizeof(__pyx_k_qt), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_ques, __pyx_k_ques, sizeof(__pyx_k_ques), 0, 0, 1, 1},
  {&__pyx_n_b_r, __pyx_k_r, sizeof(__pyx_k_r), 0, 0, 0, 1},
  {&__pyx_n_s_ral, __pyx_k_ral, sizeof(__pyx_k_ral), 0, 0, 1, 1},
  {&__pyx_n_s_randequivalent, __pyx_k_randequivalent, sizeof(__pyx_k_randequivalent), 0, 0, 1, 1},
  {&__pyx_n_s_randgen, __pyx_k_randgen, sizeof(__pyx_k_randgen), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_read, __pyx_k_read, sizeof(__pyx_k_read), 0, 0, 1, 1},
  {&__pyx_n_s_relabel_pairs, __pyx_k_relabel_pairs, sizeof(__pyx_k_relabel_pairs), 0, 0, 1, 1},
  {&__pyx_n_s_relabel_tables, __pyx_k_relabel_tables, sizeof(__pyx_k_relabel_tables), 0, 0, 1, 1},
  {&__pyx_n_s_rep, __pyx_k_rep, sizeof(__pyx_k_rep), 0, 0, 1, 1},
  {&__pyx_n_s_replace, __pyx_k_replace, sizeof(__pyx_k_replace), 0, 0, 1, 1},
  {&__pyx_n_s_replacement, __pyx_k_replacement, sizeof(__pyx_k_replacement), 0, 0, 1, 1},
  {&__pyx_n_s_replacement_set, __pyx_k_replacement_set, sizeof(__pyx_k_replacement_set), 0, 0, 1, 1},
  {&__pyx_n_s_replacements, __pyx_k_replacements, sizeof(__pyx_k_replacements), 0, 0, 1, 1},
  {&__pyx_n_s_reset, __pyx_k_reset, sizeof(__pyx_k_reset), 0, 0, 1, 1},
  {&__pyx_n_s_rest, __pyx_k_rest, sizeof(__pyx_k_rest), 0, 0, 1, 1},
  {&__pyx_n_s_result, __pyx_k_result, sizeof(__pyx_k_result), 0, 0, 1, 1},
  {&__pyx_n_s_result_fst, __pyx_k_result_fst, sizeof(__pyx_k_result_fst), 0, 0, 1, 1},
  {&__pyx_n_s_result_parens, __pyx_k_result_parens, sizeof(__pyx_k_result_parens), 0, 0, 1, 1},
  {&__pyx_n_s_return_arc_labeling, __pyx_k_return_arc_labeling, sizeof(__pyx_k_return_arc_labeling), 0, 0, 1, 1},
  {&__pyx_n_s_return_label, __pyx_k_return_label, sizeof(__pyx_k_return_label), 0, 0, 1, 1},
  {&__pyx_n_s_reverse, __pyx_k_reverse, sizeof(__pyx_k_reverse), 0, 0, 1, 1},
  {&__pyx_n_s_reweight, __pyx_k_reweight, sizeof(__pyx_k_reweight), 0, 0, 1, 1},
  {&__pyx_n_s_rho, __pyx_k_rho, sizeof(__pyx_k_rho), 0, 0, 1, 1},
  {&__pyx_n_s_rhs, __pyx_k_rhs, sizeof(__pyx_k_rhs), 0, 0, 1, 1},
  {&__pyx_n_s_rmepsilon, __pyx_k_rmepsilon, sizeof(__pyx_k_rmepsilon), 0, 0, 1, 1},
  {&__pyx_n_s_root, __pyx_k_root, sizeof(__pyx_k_root), 0, 0, 1, 1},
  {&__pyx_n_s_root_fst, __pyx_k_root_fst, sizeof(__pyx_k_root_fst), 0, 0, 1, 1},
  {&__pyx_n_b_rtl, __pyx_k_rtl, sizeof(__pyx_k_rtl), 0, 0, 0, 1},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_shortestdistance, __pyx_k_shortestdistance, sizeof(__pyx_k_shortestdistance), 0, 0, 1, 1},
  {&__pyx_n_s_shortestdistance_patch, __pyx_k_shortestdistance_patch, sizeof(__pyx_k_shortestdistance_patch), 0, 0, 1, 1},
  {&__pyx_n_s_shortestdistance_patch_locals_p, __pyx_k_shortestdistance_patch_locals_p, sizeof(__pyx_k_shortestdistance_patch_locals_p), 0, 0, 1, 1},
  {&__pyx_n_s_shortestpath, __pyx_k_shortestpath, sizeof(__pyx_k_shortestpath), 0, 0, 1, 1},
  {&__pyx_n_s_sigma_star, __pyx_k_sigma_star, sizeof(__pyx_k_sigma_star), 0, 0, 1, 1},
  {&__pyx_n_b_sim, __pyx_k_sim, sizeof(__pyx_k_sim), 0, 0, 0, 1},
  {&__pyx_n_s_sort_type, __pyx_k_sort_type, sizeof(__pyx_k_sort_type), 0, 0, 1, 1},
  {&__pyx_n_b_standard, __pyx_k_standard, sizeof(__pyx_k_standard), 0, 0, 0, 1},
  {&__pyx_n_s_star, __pyx_k_star, sizeof(__pyx_k_star), 0, 0, 1, 1},
  {&__pyx_n_s_statemap, __pyx_k_statemap, sizeof(__pyx_k_statemap), 0, 0, 1, 1},
  {&__pyx_n_s_string, __pyx_k_string, sizeof(__pyx_k_string), 0, 0, 1, 1},
  {&__pyx_n_s_string_file, __pyx_k_string_file, sizeof(__pyx_k_string_file), 0, 0, 1, 1},
  {&__pyx_n_s_string_map, __pyx_k_string_map, sizeof(__pyx_k_string_map), 0, 0, 1, 1},
  {&__pyx_n_s_stringify, __pyx_k_stringify, sizeof(__pyx_k_stringify), 0, 0, 1, 1},
  {&__pyx_n_s_success, __pyx_k_success, sizeof(__pyx_k_success), 0, 0, 1, 1},
  {&__pyx_n_s_super, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
  {&__pyx_n_b_symbol, __pyx_k_symbol, sizeof(__pyx_k_symbol), 0, 0, 0, 1},
  {&__pyx_n_s_synchronize, __pyx_k_synchronize, sizeof(__pyx_k_synchronize), 0, 0, 1, 1},
  {&__pyx_n_s_t, __pyx_k_t, sizeof(__pyx_k_t), 0, 0, 1, 1},
  {&__pyx_n_s_tau, __pyx_k_tau, sizeof(__pyx_k_tau), 0, 0, 1, 1},
  {&__pyx_n_s_tb, __pyx_k_tb, sizeof(__pyx_k_tb), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_token_type, __pyx_k_token_type, sizeof(__pyx_k_token_type), 0, 0, 1, 1},
  {&__pyx_n_s_topsort, __pyx_k_topsort, sizeof(__pyx_k_topsort), 0, 0, 1, 1},
  {&__pyx_n_s_transducer, __pyx_k_transducer, sizeof(__pyx_k_transducer), 0, 0, 1, 1},
  {&__pyx_n_s_typed_cf, __pyx_k_typed_cf, sizeof(__pyx_k_typed_cf), 0, 0, 1, 1},
  {&__pyx_n_s_u, __pyx_k_u, sizeof(__pyx_k_u), 0, 0, 1, 1},
  {&__pyx_n_s_union, __pyx_k_union, sizeof(__pyx_k_union), 0, 0, 1, 1},
  {&__pyx_n_s_upper, __pyx_k_upper, sizeof(__pyx_k_upper), 0, 0, 1, 1},
  {&__pyx_kp_s_usr_local_google_home_kbg_src_p, __pyx_k_usr_local_google_home_kbg_src_p, sizeof(__pyx_k_usr_local_google_home_kbg_src_p), 0, 0, 1, 0},
  {&__pyx_n_b_utf8, __pyx_k_utf8, sizeof(__pyx_k_utf8), 0, 0, 0, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_b_vector, __pyx_k_vector, sizeof(__pyx_k_vector), 0, 0, 0, 1},
  {&__pyx_n_s_warning, __pyx_k_warning, sizeof(__pyx_k_warning), 0, 0, 1, 1},
  {&__pyx_n_s_wc, __pyx_k_wc, sizeof(__pyx_k_wc), 0, 0, 1, 1},
  {&__pyx_n_s_weight, __pyx_k_weight, sizeof(__pyx_k_weight), 0, 0, 1, 1},
  {&__pyx_n_s_weight_type, __pyx_k_weight_type, sizeof(__pyx_k_weight_type), 0, 0, 1, 1},
  {&__pyx_n_s_wraps, __pyx_k_wraps, sizeof(__pyx_k_wraps), 0, 0, 1, 1},
  {&__pyx_n_s_write, __pyx_k_write, sizeof(__pyx_k_write), 0, 0, 1, 1},
  {&__pyx_n_s_xrange, __pyx_k_xrange, sizeof(__pyx_k_xrange), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_property = __Pyx_GetBuiltinName(__pyx_n_s_property); if (!__pyx_builtin_property) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_xrange) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #else
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_xrange); if (!__pyx_builtin_xrange) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  __pyx_builtin_KeyError = __Pyx_GetBuiltinName(__pyx_n_s_KeyError); if (!__pyx_builtin_KeyError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_super = __Pyx_GetBuiltinName(__pyx_n_s_super); if (!__pyx_builtin_super) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_NotImplementedError = __Pyx_GetBuiltinName(__pyx_n_s_NotImplementedError); if (!__pyx_builtin_NotImplementedError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 680; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_UnicodeDecodeError = __Pyx_GetBuiltinName(__pyx_n_s_UnicodeDecodeError); if (!__pyx_builtin_UnicodeDecodeError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 781; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_id = __Pyx_GetBuiltinName(__pyx_n_s_id); if (!__pyx_builtin_id) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_StopIteration = __Pyx_GetBuiltinName(__pyx_n_s_StopIteration); if (!__pyx_builtin_StopIteration) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1933; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "pynini.pyx":302
 *       raise KeyError(label)
 *     if label != sink_syms.AddSymbol(symbol, label):
 *       raise FstSymbolTableMergeError(             # <<<<<<<<<<<<<<
 *           "Unable to resolve parentheses symbol table conflict")
 *     label = parens[i].second
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_Unable_to_resolve_parentheses_sy); if (unlikely(!__pyx_tuple__2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "pynini.pyx":309
 *       raise KeyError(label)
 *     if label != sink_syms.AddSymbol(symbol, label):
 *       raise FstSymbolTableMergeError(             # <<<<<<<<<<<<<<
 *           "Unable to resolve parentheses symbol table conflict")
 * 
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_Unable_to_resolve_parentheses_sy); if (unlikely(!__pyx_tuple__3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "pynini.pyx":370
 *   cdef void _check_pynini_op_error(self) except *:
 *     if self._fst.get().Properties(kError, True) == kError:
 *       raise FstOpError("Operation failed")             # <<<<<<<<<<<<<<
 * 
 *   cpdef StringPaths paths(self,
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_Operation_failed); if (unlikely(!__pyx_tuple__4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "pynini.pyx":458
 *     if not PyniniStringify(deref(self._fst), tt,
 *                            self._fst.get().OutputSymbols(), addr(result)):
 *       raise FstArgError("FST is not a string")             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_FST_is_not_a_string); if (unlikely(!__pyx_tuple__5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "pynini.pyx":592
 *     if not MergeSymbols(self._mfst.get(), rhs._mfst.get(),
 *                         MERGE_INPUT_AND_OUTPUT_SYMBOLS):
 *       raise FstSymbolTableMergeError(             # <<<<<<<<<<<<<<
 *           "Unable to resolve symbol table conflict without relabeling")
 *     self._concat(rhs)
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_Unable_to_resolve_symbol_table_c); if (unlikely(!__pyx_tuple__6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "pynini.pyx":664
 *     if not MergeSymbols(self._mfst.get(), rhs._mfst.get(),
 *                         MERGE_INPUT_AND_OUTPUT_SYMBOLS):
 *       raise FstSymbolTableMergeError(             # <<<<<<<<<<<<<<
 *           "Unable to resolve symbol table conflict without relabeling")
 *     self._union(rhs)
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_Unable_to_resolve_symbol_table_c); if (unlikely(!__pyx_tuple__7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 664; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "pynini.pyx":775
 *     if token_type == b"byte":
 *       if not CompileBracketedByteString(_astring, wc, result._mfst.get()):
 *         raise FstStringCompilationError("Bytestring compilation failed")             # <<<<<<<<<<<<<<
 *     elif token_type == b"utf8":
 *       if not CompileBracketedUTF8String(_astring, wc, result._mfst.get()):
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_Bytestring_compilation_failed); if (unlikely(!__pyx_tuple__8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 775; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "pynini.pyx":778
 *     elif token_type == b"utf8":
 *       if not CompileBracketedUTF8String(_astring, wc, result._mfst.get()):
 *         raise FstStringCompilationError("UTF8 string compilation failed")             # <<<<<<<<<<<<<<
 *     else:
 *       raise FstArgError("Unknown token type: {!r}".format(token_type))
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_UTF8_string_compilation_failed); if (unlikely(!__pyx_tuple__9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "pynini.pyx":785
 *       syms = (<SymbolTable_ptr> (<_SymbolTable> token_type)._table)
 *       if not CompileSymbolString(_astring, wc, deref(syms), result._mfst.get()):
 *         raise FstStringCompilationError("Symbol string compilation failed")             # <<<<<<<<<<<<<<
 *     else:
 *       raise
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_Symbol_string_compilation_failed); if (unlikely(!__pyx_tuple__10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "pynini.pyx":846
 *     upper = istring
 *   if upper._fst.get().Properties(kAcceptor, True) != kAcceptor:
 *     logging.warning("Expecting acceptor or string argument, got a transducer")             # <<<<<<<<<<<<<<
 *   # Sets up lower language, and passes weight.
 *   if not isinstance(ostring, Fst):
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_Expecting_acceptor_or_string_arg); if (unlikely(!__pyx_tuple__11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 846; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "pynini.pyx":854
 *     lower = ostring
 *     if lower._fst.get().Properties(kAcceptor, True) != kAcceptor:
 *       logging.warning("Expecting acceptor or string argument, got a transducer")             # <<<<<<<<<<<<<<
 *   # Actually computes cross-product.
 *   CrossProduct(deref(upper._fst), deref(lower._fst), result._mfst.get())
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_Expecting_acceptor_or_string_arg); if (unlikely(!__pyx_tuple__12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 854; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "pynini.pyx":930
 *   result._check_pynini_op_error()
 *   if not result.num_states:
 *     logging.warning("Compiled rewrite rule has no connected states")             # <<<<<<<<<<<<<<
 *   return result
 * 
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_Compiled_rewrite_rule_has_no_con); if (unlikely(!__pyx_tuple__13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 930; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "pynini.pyx":984
 *   if not StringFile(tostring(filename), itype, otype, result._mfst.get(),
 *                     isyms, osyms):
 *     raise FstIOError("Read failed")             # <<<<<<<<<<<<<<
 *   return result
 * 
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_Read_failed); if (unlikely(!__pyx_tuple__14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 984; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "pynini.pyx":1052
 *         new_pairs.get().push_back(StringPair(string, string))
 *       else:
 *         raise FstArgError("Mappings must be of length 1 or 2")             # <<<<<<<<<<<<<<
 *     else:
 *       string = tostring(pair)
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_Mappings_must_be_of_length_1_or); if (unlikely(!__pyx_tuple__15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1052; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "pynini.pyx":1059
 *                                 result._mfst.get(), isyms, osyms)
 *   if not success:
 *     raise FstArgError("String map compilation failed")             # <<<<<<<<<<<<<<
 *   return result
 * 
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_String_map_compilation_failed); if (unlikely(!__pyx_tuple__16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1059; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "pynini.pyx":1068
 * def _1arg_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst fst = _compile_or_copy_Fst(arg)
 *     return _init_Fst_from_MutableFst(fnc(fst, *args, **kwargs))
 */
  __pyx_tuple__17 = PyTuple_Pack(4, __pyx_n_s_arg, __pyx_n_s_args, __pyx_n_s_kwargs, __pyx_n_s_fst); if (unlikely(!__pyx_tuple__17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1068; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);
  __pyx_codeobj__18 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, CO_VARARGS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__17, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_usr_local_google_home_kbg_src_p, __pyx_n_s_patch, 1068, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1068; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":1090
 * def _shortestdistance_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst fst = _compile_or_copy_Fst(arg)
 *     return fnc(fst, *args, **kwargs)
 */
  __pyx_tuple__19 = PyTuple_Pack(4, __pyx_n_s_arg, __pyx_n_s_args, __pyx_n_s_kwargs, __pyx_n_s_fst); if (unlikely(!__pyx_tuple__19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1090; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);
  __pyx_codeobj__20 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, CO_VARARGS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_usr_local_google_home_kbg_src_p, __pyx_n_s_patch, 1090, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1090; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":1111
 *     if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 *                         MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS):
 *       raise FstSymbolTableMergeError(             # <<<<<<<<<<<<<<
 *            "Unable to resolve symbol table conflict without relabeling")
 *     lhs.arcsort(sort_type="olabel")
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_s_Unable_to_resolve_symbol_table_c); if (unlikely(!__pyx_tuple__21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "pynini.pyx":1117
 *     lhs = _init_Fst_from_MutableFst(fnc(lhs, rhs, *args, **kwargs))
 *     if not lhs.num_states:
 *       logging.warning("Composed FST has no connected states")             # <<<<<<<<<<<<<<
 *     return lhs
 *   return patch
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_s_Composed_FST_has_no_connected_st); if (unlikely(!__pyx_tuple__22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "pynini.pyx":1106
 * def _compose_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst lhs = _compile_or_copy_Fst(arg1)
 *     cdef Fst rhs = _compile_or_copy_Fst(arg2, arc_type=lhs.arc_type)
 */
  __pyx_tuple__23 = PyTuple_Pack(6, __pyx_n_s_arg1, __pyx_n_s_arg2, __pyx_n_s_args, __pyx_n_s_kwargs, __pyx_n_s_lhs, __pyx_n_s_rhs); if (unlikely(!__pyx_tuple__23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);
  __pyx_codeobj__24 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, CO_VARARGS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__23, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_usr_local_google_home_kbg_src_p, __pyx_n_s_patch, 1106, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":1132
 *     if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 *                         MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS):
 *       raise FstSymbolTableMergeError(             # <<<<<<<<<<<<<<
 *           "Unable to resolve symbol table conflict without relabeling")
 *     if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_s_Unable_to_resolve_symbol_table_c); if (unlikely(!__pyx_tuple__25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "pynini.pyx":1136
 *     if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 *                         MERGE_INPUT_AND_OUTPUT_SYMBOLS):
 *       raise FstSymbolTableMergeError(             # <<<<<<<<<<<<<<
 *           "Unable to resolve symbol table conflict without relabeling")
 *     # Following Thrax, we do what we can to make rhs epsilon-free and
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_kp_s_Unable_to_resolve_symbol_table_c); if (unlikely(!__pyx_tuple__26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "pynini.pyx":1140
 *     # Following Thrax, we do what we can to make rhs epsilon-free and
 *     # deterministic.
 *     rhs.optimize(True)             # <<<<<<<<<<<<<<
 *     return _init_Fst_from_MutableFst(fnc(lhs, rhs, *args, **kwargs))
 *   return patch
 */
  __pyx_tuple__27 = PyTuple_Pack(1, Py_True); if (unlikely(!__pyx_tuple__27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "pynini.pyx":1127
 * def _difference_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst lhs = _compile_or_copy_Fst(arg1)
 *     cdef Fst rhs = _compile_or_copy_Fst(arg2, arc_type=lhs.arc_type)
 */
  __pyx_tuple__28 = PyTuple_Pack(6, __pyx_n_s_arg1, __pyx_n_s_arg2, __pyx_n_s_args, __pyx_n_s_kwargs, __pyx_n_s_lhs, __pyx_n_s_rhs); if (unlikely(!__pyx_tuple__28)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);
  __pyx_codeobj__29 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, CO_VARARGS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_usr_local_google_home_kbg_src_p, __pyx_n_s_patch, 1127, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__29)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":1155
 *     if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 *                         MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS):
 *       raise FstSymbolTableMergeError(             # <<<<<<<<<<<<<<
 *           "Unable to resolve symbol table conflict without relabeling")
 *     if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_s_Unable_to_resolve_symbol_table_c); if (unlikely(!__pyx_tuple__30)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "pynini.pyx":1159
 *     if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 *                         MERGE_INPUT_AND_OUTPUT_SYMBOLS):
 *       raise FstSymbolTableMergeError(             # <<<<<<<<<<<<<<
 *           "Unable to resolve symbol table conflict without relabeling")
 *     return _init_Fst_from_MutableFst(fnc(lhs, rhs, *args, **kwargs))
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_s_Unable_to_resolve_symbol_table_c); if (unlikely(!__pyx_tuple__31)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "pynini.pyx":1150
 * def _intersect_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst lhs = _compile_or_copy_Fst(arg1)
 *     cdef Fst rhs = _compile_or_copy_Fst(arg2, arc_type=lhs.arc_type)
 */
  __pyx_tuple__32 = PyTuple_Pack(6, __pyx_n_s_arg1, __pyx_n_s_arg2, __pyx_n_s_args, __pyx_n_s_kwargs, __pyx_n_s_lhs, __pyx_n_s_rhs); if (unlikely(!__pyx_tuple__32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);
  __pyx_codeobj__33 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, CO_VARARGS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__32, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_usr_local_google_home_kbg_src_p, __pyx_n_s_patch, 1150, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__33)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":1173
 * def _comp_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst lhs = _compile_or_copy_Fst(arg1)
 *     cdef Fst rhs = _compile_or_copy_Fst(arg2, arc_type=lhs.arc_type)
 */
  __pyx_tuple__34 = PyTuple_Pack(6, __pyx_n_s_arg1, __pyx_n_s_arg2, __pyx_n_s_args, __pyx_n_s_kwargs, __pyx_n_s_lhs, __pyx_n_s_rhs); if (unlikely(!__pyx_tuple__34)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);
  __pyx_codeobj__35 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, CO_VARARGS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_usr_local_google_home_kbg_src_p, __pyx_n_s_patch, 1173, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__35)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":1194
 *     if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 *                         MERGE_INPUT_AND_OUTPUT_SYMBOLS):
 *       raise FstSymbolTableMergeError(             # <<<<<<<<<<<<<<
 *           "Unable to resolve symbol table conflict without relabeling")
 *     return fnc(lhs, rhs, *args, **kwargs)
 */
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_kp_s_Unable_to_resolve_symbol_table_c); if (unlikely(!__pyx_tuple__36)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "pynini.pyx":1189
 * def _comp_merge_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst lhs = _compile_or_copy_Fst(arg1)
 *     cdef Fst rhs = _compile_or_copy_Fst(arg2, arc_type=lhs.arc_type)
 */
  __pyx_tuple__37 = PyTuple_Pack(6, __pyx_n_s_arg1, __pyx_n_s_arg2, __pyx_n_s_args, __pyx_n_s_kwargs, __pyx_n_s_lhs, __pyx_n_s_rhs); if (unlikely(!__pyx_tuple__37)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);
  __pyx_codeobj__38 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, CO_VARARGS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_usr_local_google_home_kbg_src_p, __pyx_n_s_patch, 1189, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__38)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":1445
 *   if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 *                       MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS):
 *     raise FstSymbolTableMergeError(             # <<<<<<<<<<<<<<
 *         "Unable to resolve symbol table conflict without relabeling")
 *   cdef Fst result = Fst(lhs.arc_type)
 */
  __pyx_tuple__39 = PyTuple_Pack(1, __pyx_kp_s_Unable_to_resolve_symbol_table_c); if (unlikely(!__pyx_tuple__39)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "pynini.pyx":1454
 *   del opts
 *   if not result.num_states:
 *     logging.warning("Composed PDT has no connected states")             # <<<<<<<<<<<<<<
 *   result._check_pynini_op_error()
 *   # If the "expand" filter is selected, all parentheses have been mapped to
 */
  __pyx_tuple__40 = PyTuple_Pack(1, __pyx_kp_s_Composed_PDT_has_no_connected_st); if (unlikely(!__pyx_tuple__40)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);

  /* "pynini.pyx":1782
 *   if not MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 *                       MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS):
 *     raise FstSymbolTableMergeError(             # <<<<<<<<<<<<<<
 *         "Unable to resolve symbol table conflict without relabeling")
 *   cdef Fst result = Fst(lhs.arc_type)
 */
  __pyx_tuple__41 = PyTuple_Pack(1, __pyx_kp_s_Unable_to_resolve_symbol_table_c); if (unlikely(!__pyx_tuple__41)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1782; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "pynini.pyx":1791
 *   del opts
 *   if not result.num_states:
 *     logging.warning("Composed MPDT has no connected states")             # <<<<<<<<<<<<<<
 *   if result._fst.get().Properties(kError, True) == kError:
 *     raise FstOpError("Operation failed")
 */
  __pyx_tuple__42 = PyTuple_Pack(1, __pyx_kp_s_Composed_MPDT_has_no_connected_s); if (unlikely(!__pyx_tuple__42)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1791; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);

  /* "pynini.pyx":1793
 *     logging.warning("Composed MPDT has no connected states")
 *   if result._fst.get().Properties(kError, True) == kError:
 *     raise FstOpError("Operation failed")             # <<<<<<<<<<<<<<
 *   # If the "expand" filter is selected, all parentheses have been mapped to
 *   # epsilon. This conveniently removes the arcs that result.
 */
  __pyx_tuple__43 = PyTuple_Pack(1, __pyx_kp_s_Operation_failed); if (unlikely(!__pyx_tuple__43)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1793; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);

  /* "pynini.pyx":1924
 *       self._paths.reset(new StringPathsClass(deref(self._fst), tt, NULL, NULL))
 *     if self._paths.get().Error():
 *       raise FstArgError("FST is not acyclic")             # <<<<<<<<<<<<<<
 * 
 *   # This just registers this class as a possible iterator.
 */
  __pyx_tuple__44 = PyTuple_Pack(1, __pyx_kp_s_FST_is_not_acyclic); if (unlikely(!__pyx_tuple__44)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1924; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);

  /* "pynini.pyx":2406
 *   # The junk in the `functools.wraps` decorator is due to a long-standing bug
 *   # in Python 2.7 (https://bugs.python.org/issue3445).
 *   @functools.wraps(fnc, ("__name__", "__doc__"))             # <<<<<<<<<<<<<<
 *   def patch(arg1, *args, **kwargs):
 *     cdef Fst result = _compile_or_copy_Fst(arg1)
 */
  __pyx_tuple__45 = PyTuple_Pack(2, __pyx_n_s_name, __pyx_n_s_doc); if (unlikely(!__pyx_tuple__45)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);

  /* "pynini.pyx":2407
 *   # in Python 2.7 (https://bugs.python.org/issue3445).
 *   @functools.wraps(fnc, ("__name__", "__doc__"))
 *   def patch(arg1, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst result = _compile_or_copy_Fst(arg1)
 *     fnc(result, *args, **kwargs)
 */
  __pyx_tuple__46 = PyTuple_Pack(4, __pyx_n_s_arg1, __pyx_n_s_args, __pyx_n_s_kwargs, __pyx_n_s_result); if (unlikely(!__pyx_tuple__46)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2407; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);
  __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, CO_VARARGS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__46, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_usr_local_google_home_kbg_src_p, __pyx_n_s_patch, 2407, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2407; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":934
 * 
 * 
 * def string_file(filename,             # <<<<<<<<<<<<<<
 *                 arc_type=b"standard",
 *                 input_token_type=b"byte",
 */
  __pyx_tuple__48 = PyTuple_Pack(9, __pyx_n_s_filename, __pyx_n_s_arc_type, __pyx_n_s_input_token_type, __pyx_n_s_output_token_type, __pyx_n_s_itype, __pyx_n_s_otype, __pyx_n_s_isyms, __pyx_n_s_osyms, __pyx_n_s_result); if (unlikely(!__pyx_tuple__48)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 934; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);
  __pyx_codeobj__49 = (PyObject*)__Pyx_PyCode_New(4, 0, 9, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__48, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_usr_local_google_home_kbg_src_p, __pyx_n_s_string_file, 934, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__49)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 934; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":988
 * 
 * 
 * def string_map(pairs,             # <<<<<<<<<<<<<<
 *                arc_type=b"standard",
 *                input_token_type=b"byte",
 */
  __pyx_tuple__50 = PyTuple_Pack(13, __pyx_n_s_pairs, __pyx_n_s_arc_type, __pyx_n_s_input_token_type, __pyx_n_s_output_token_type, __pyx_n_s_itype, __pyx_n_s_otype, __pyx_n_s_isyms, __pyx_n_s_osyms, __pyx_n_s_result, __pyx_n_s_new_pairs, __pyx_n_s_pair, __pyx_n_s_string, __pyx_n_s_success); if (unlikely(!__pyx_tuple__50)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 988; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);
  __pyx_codeobj__51 = (PyObject*)__Pyx_PyCode_New(4, 0, 13, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__50, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_usr_local_google_home_kbg_src_p, __pyx_n_s_string_map, 988, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__51)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 988; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":1066
 * 
 * 
 * def _1arg_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg, *args, **kwargs):
 */
  __pyx_tuple__52 = PyTuple_Pack(3, __pyx_n_s_fnc, __pyx_n_s_patch, __pyx_n_s_patch); if (unlikely(!__pyx_tuple__52)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1066; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);
  __pyx_codeobj__53 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__52, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_usr_local_google_home_kbg_src_p, __pyx_n_s_1arg_patch, 1066, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__53)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1066; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":1088
 * 
 * 
 * def _shortestdistance_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg, *args, **kwargs):
 */
  __pyx_tuple__54 = PyTuple_Pack(3, __pyx_n_s_fnc, __pyx_n_s_patch, __pyx_n_s_patch); if (unlikely(!__pyx_tuple__54)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1088; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);
  __pyx_codeobj__55 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__54, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_usr_local_google_home_kbg_src_p, __pyx_n_s_shortestdistance_patch, 1088, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__55)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1088; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":1104
 * 
 * 
 * def _compose_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */
  __pyx_tuple__56 = PyTuple_Pack(3, __pyx_n_s_fnc, __pyx_n_s_patch, __pyx_n_s_patch); if (unlikely(!__pyx_tuple__56)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);
  __pyx_codeobj__57 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__56, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_usr_local_google_home_kbg_src_p, __pyx_n_s_compose_patch, 1104, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__57)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":1125
 * 
 * 
 * def _difference_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */
  __pyx_tuple__58 = PyTuple_Pack(3, __pyx_n_s_fnc, __pyx_n_s_patch, __pyx_n_s_patch); if (unlikely(!__pyx_tuple__58)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);
  __pyx_codeobj__59 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__58, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_usr_local_google_home_kbg_src_p, __pyx_n_s_difference_patch, 1125, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__59)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":1148
 * 
 * 
 * def _intersect_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */
  __pyx_tuple__60 = PyTuple_Pack(3, __pyx_n_s_fnc, __pyx_n_s_patch, __pyx_n_s_patch); if (unlikely(!__pyx_tuple__60)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);
  __pyx_codeobj__61 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__60, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_usr_local_google_home_kbg_src_p, __pyx_n_s_intersect_patch, 1148, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__61)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":1171
 * 
 * 
 * def _comp_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */
  __pyx_tuple__62 = PyTuple_Pack(3, __pyx_n_s_fnc, __pyx_n_s_patch, __pyx_n_s_patch); if (unlikely(!__pyx_tuple__62)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);
  __pyx_codeobj__63 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__62, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_usr_local_google_home_kbg_src_p, __pyx_n_s_comp_patch, 1171, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__63)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":1187
 * 
 * 
 * def _comp_merge_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */
  __pyx_tuple__64 = PyTuple_Pack(3, __pyx_n_s_fnc, __pyx_n_s_patch, __pyx_n_s_patch); if (unlikely(!__pyx_tuple__64)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);
  __pyx_codeobj__65 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__64, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_usr_local_google_home_kbg_src_p, __pyx_n_s_comp_merge_patch, 1187, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__65)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":1204
 * 
 * 
 * def replace(root, *,             # <<<<<<<<<<<<<<
 *             call_arc_labeling=b"neither",
 *             return_arc_labeling=b"neither",
 */
  __pyx_tuple__66 = PyTuple_Pack(18, __pyx_n_s_root, __pyx_n_s_call_arc_labeling, __pyx_n_s_return_arc_labeling, __pyx_n_s_epsilon_on_replace, __pyx_n_s_return_label, __pyx_n_s_replacements, __pyx_n_s_root_fst, __pyx_n_s_arc_type, __pyx_n_s_pairs, __pyx_n_s_replacement_set, __pyx_n_s_nonterm, __pyx_n_s_replacement, __pyx_n_s_cal, __pyx_n_s_ral, __pyx_n_s_opts, __pyx_n_s_result, __pyx_n_s_nt, __pyx_n_s_rep); if (unlikely(!__pyx_tuple__66)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);
  __pyx_codeobj__67 = (PyObject*)__Pyx_PyCode_New(1, 4, 18, 0, CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__66, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_usr_local_google_home_kbg_src_p, __pyx_n_s_replace, 1204, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__67)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":1278
 * 
 * 
 * def union(*args):             # <<<<<<<<<<<<<<
 *   """
 *   union(*args)
 */
  __pyx_tuple__68 = PyTuple_Pack(5, __pyx_n_s_args, __pyx_n_s_first, __pyx_n_s_rest, __pyx_n_s_lhs, __pyx_n_s_rhs); if (unlikely(!__pyx_tuple__68)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__68);
  __Pyx_GIVEREF(__pyx_tuple__68);
  __pyx_codeobj__69 = (PyObject*)__Pyx_PyCode_New(0, 0, 5, 0, CO_VARARGS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__68, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_usr_local_google_home_kbg_src_p, __pyx_n_s_union, 1278, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__69)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":1404
 * 
 * 
 * def pdt_compose(ifst1,             # <<<<<<<<<<<<<<
 *                 ifst2,
 *                 PdtParentheses parens,
 */
  __pyx_tuple__70 = PyTuple_Pack(10, __pyx_n_s_ifst1, __pyx_n_s_ifst2, __pyx_n_s_parens, __pyx_n_s_cf, __pyx_n_s_left_pdt, __pyx_n_s_lhs, __pyx_n_s_rhs, __pyx_n_s_result, __pyx_n_s_typed_cf, __pyx_n_s_opts); if (unlikely(!__pyx_tuple__70)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);
  __pyx_codeobj__71 = (PyObject*)__Pyx_PyCode_New(5, 0, 10, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__70, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_usr_local_google_home_kbg_src_p, __pyx_n_s_pdt_compose, 1404, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__71)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":1466
 * 
 * 
 * def pdt_expand(ipdt,             # <<<<<<<<<<<<<<
 *                PdtParentheses parens,
 *                bool connect=True,
 */
  __pyx_tuple__72 = PyTuple_Pack(9, __pyx_n_s_ipdt, __pyx_n_s_parens, __pyx_n_s_connect, __pyx_n_s_keep_parentheses, __pyx_n_s_weight, __pyx_n_s_pdt, __pyx_n_s_result, __pyx_n_s_wc, __pyx_n_s_opts); if (unlikely(!__pyx_tuple__72)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);
  __pyx_codeobj__73 = (PyObject*)__Pyx_PyCode_New(5, 0, 9, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__72, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_usr_local_google_home_kbg_src_p, __pyx_n_s_pdt_expand, 1466, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__73)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":1509
 * 
 * 
 * def pdt_replace(root, *,             # <<<<<<<<<<<<<<
 *                 pdt_parser_type=b"left",
 *                 **replacements):
 */
  __pyx_tuple__74 = PyTuple_Pack(13, __pyx_n_s_root, __pyx_n_s_pdt_parser_type, __pyx_n_s_replacements, __pyx_n_s_root_fst, __pyx_n_s_arc_type, __pyx_n_s_pairs, __pyx_n_s_replacement_set, __pyx_n_s_nonterm, __pyx_n_s_replacement, __pyx_n_s_result, __pyx_n_s_parens, __pyx_n_s_nt, __pyx_n_s_rep); if (unlikely(!__pyx_tuple__74)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1509; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__74);
  __Pyx_GIVEREF(__pyx_tuple__74);
  __pyx_codeobj__75 = (PyObject*)__Pyx_PyCode_New(1, 1, 13, 0, CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__74, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_usr_local_google_home_kbg_src_p, __pyx_n_s_pdt_replace, 1509, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__75)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1509; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":1569
 * 
 * 
 * def pdt_reverse(ipdt, PdtParentheses parens):             # <<<<<<<<<<<<<<
 *   """
 *   pdt_reverse(ipdt, parens)
 */
  __pyx_tuple__76 = PyTuple_Pack(4, __pyx_n_s_ipdt, __pyx_n_s_parens, __pyx_n_s_pdt, __pyx_n_s_result); if (unlikely(!__pyx_tuple__76)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1569; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__76);
  __Pyx_GIVEREF(__pyx_tuple__76);
  __pyx_codeobj__77 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__76, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_usr_local_google_home_kbg_src_p, __pyx_n_s_pdt_reverse, 1569, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__77)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1569; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":1592
 * 
 * 
 * def pdt_shortestpath(ipdt,             # <<<<<<<<<<<<<<
 *                      PdtParentheses parens,
 *                      qt=b"fifo",
 */
  __pyx_tuple__78 = PyTuple_Pack(8, __pyx_n_s_ipdt, __pyx_n_s_parens, __pyx_n_s_qt, __pyx_n_s_keep_parentheses, __pyx_n_s_path_gc, __pyx_n_s_pdt, __pyx_n_s_result, __pyx_n_s_opts); if (unlikely(!__pyx_tuple__78)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__78);
  __Pyx_GIVEREF(__pyx_tuple__78);
  __pyx_codeobj__79 = (PyObject*)__Pyx_PyCode_New(5, 0, 8, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__78, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_usr_local_google_home_kbg_src_p, __pyx_n_s_pdt_shortestpath, 1592, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__79)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":1804
 * 
 * 
 * def mpdt_expand(impdt, MPdtParentheses parens, bool connect=True,             # <<<<<<<<<<<<<<
 *                 bool keep_parentheses=False):
 *   """
 */
  __pyx_tuple__80 = PyTuple_Pack(7, __pyx_n_s_impdt, __pyx_n_s_parens, __pyx_n_s_connect, __pyx_n_s_keep_parentheses, __pyx_n_s_mpdt, __pyx_n_s_result, __pyx_n_s_opts); if (unlikely(!__pyx_tuple__80)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1804; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__80);
  __Pyx_GIVEREF(__pyx_tuple__80);
  __pyx_codeobj__81 = (PyObject*)__Pyx_PyCode_New(4, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__80, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_usr_local_google_home_kbg_src_p, __pyx_n_s_mpdt_expand, 1804, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__81)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1804; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":1842
 * 
 * 
 * def mpdt_reverse(impdt, MPdtParentheses parens):             # <<<<<<<<<<<<<<
 *   """
 *   mpdt_reverse(impdt, parens)
 */
  __pyx_tuple__82 = PyTuple_Pack(5, __pyx_n_s_impdt, __pyx_n_s_parens, __pyx_n_s_mpdt, __pyx_n_s_result_fst, __pyx_n_s_result_parens); if (unlikely(!__pyx_tuple__82)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__82);
  __Pyx_GIVEREF(__pyx_tuple__82);
  __pyx_codeobj__83 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__82, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_usr_local_google_home_kbg_src_p, __pyx_n_s_mpdt_reverse, 1842, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__83)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pynini.pyx":2403
 * 
 * 
 * def _copy_patch(fnc):             # <<<<<<<<<<<<<<
 *   # The junk in the `functools.wraps` decorator is due to a long-standing bug
 *   # in Python 2.7 (https://bugs.python.org/issue3445).
 */
  __pyx_tuple__84 = PyTuple_Pack(3, __pyx_n_s_fnc, __pyx_n_s_patch, __pyx_n_s_patch); if (unlikely(!__pyx_tuple__84)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__84);
  __Pyx_GIVEREF(__pyx_tuple__84);
  __pyx_codeobj__85 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__84, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_usr_local_google_home_kbg_src_p, __pyx_n_s_copy_patch, 2403, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__85)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initpynini(void); /*proto*/
PyMODINIT_FUNC initpynini(void)
#else
PyMODINIT_FUNC PyInit_pynini(void); /*proto*/
PyMODINIT_FUNC PyInit_pynini(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_pynini(void)", 0);
  if (__Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("pynini", __pyx_methods, __pyx_k_Pynini_finite_state_grammar_comp, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_pynini) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "pynini")) {
      if (unlikely(PyDict_SetItemString(modules, "pynini", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_ptype_9pywrapfst__MutableFst = __Pyx_ImportType("pywrapfst", "_MutableFst", sizeof(struct __pyx_obj_9pywrapfst__MutableFst), 1); if (unlikely(!__pyx_ptype_9pywrapfst__MutableFst)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_9pywrapfst__MutableFst = (struct __pyx_vtabstruct_9pywrapfst__MutableFst*)__Pyx_GetVtable(__pyx_ptype_9pywrapfst__MutableFst->tp_dict); if (unlikely(!__pyx_vtabptr_9pywrapfst__MutableFst)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_6pynini_Fst = &__pyx_vtable_6pynini_Fst;
  __pyx_vtable_6pynini_Fst.__pyx_base = *__pyx_vtabptr_9pywrapfst__MutableFst;
  __pyx_vtable_6pynini_Fst.__pyx_base.__pyx_base.copy = (struct __pyx_obj_9pywrapfst__Fst *(*)(struct __pyx_obj_9pywrapfst__Fst *, int __pyx_skip_dispatch))__pyx_f_6pynini_3Fst_copy__pyx_wrap_1;
  __pyx_vtable_6pynini_Fst._check_pynini_op_error = (void (*)(struct __pyx_obj_6pynini_Fst *))__pyx_f_6pynini_3Fst__check_pynini_op_error;
  __pyx_vtable_6pynini_Fst.paths = (struct __pyx_obj_6pynini_StringPaths *(*)(struct __pyx_obj_6pynini_Fst *, int __pyx_skip_dispatch, struct __pyx_opt_args_6pynini_3Fst_paths *__pyx_optional_args))__pyx_f_6pynini_3Fst_paths;
  __pyx_vtable_6pynini_Fst.stringify = (std::string (*)(struct __pyx_obj_6pynini_Fst *, int __pyx_skip_dispatch, struct __pyx_opt_args_6pynini_3Fst_stringify *__pyx_optional_args))__pyx_f_6pynini_3Fst_stringify;
  __pyx_vtable_6pynini_Fst.copy = (struct __pyx_obj_6pynini_Fst *(*)(struct __pyx_obj_6pynini_Fst *, int __pyx_skip_dispatch))__pyx_f_6pynini_3Fst_copy;
  __pyx_vtable_6pynini_Fst._optimize = (void (*)(struct __pyx_obj_6pynini_Fst *, struct __pyx_opt_args_6pynini_3Fst__optimize *__pyx_optional_args))__pyx_f_6pynini_3Fst__optimize;
  __pyx_type_6pynini_Fst.tp_base = __pyx_ptype_9pywrapfst__MutableFst;
  if (PyType_Ready(&__pyx_type_6pynini_Fst) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6pynini_Fst.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_6pynini_Fst.tp_dict, __pyx_vtabptr_6pynini_Fst) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "Fst", (PyObject *)&__pyx_type_6pynini_Fst) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6pynini_Fst = &__pyx_type_6pynini_Fst;
  __pyx_vtabptr_6pynini_PdtParentheses = &__pyx_vtable_6pynini_PdtParentheses;
  __pyx_vtable_6pynini_PdtParentheses.copy = (struct __pyx_obj_6pynini_PdtParentheses *(*)(struct __pyx_obj_6pynini_PdtParentheses *, int __pyx_skip_dispatch))__pyx_f_6pynini_14PdtParentheses_copy;
  __pyx_vtable_6pynini_PdtParentheses.add_pair = (void (*)(struct __pyx_obj_6pynini_PdtParentheses *, __pyx_t_10basictypes_int64, __pyx_t_10basictypes_int64, int __pyx_skip_dispatch))__pyx_f_6pynini_14PdtParentheses_add_pair;
  __pyx_vtable_6pynini_PdtParentheses.write = (void (*)(struct __pyx_obj_6pynini_PdtParentheses *, PyObject *, int __pyx_skip_dispatch))__pyx_f_6pynini_14PdtParentheses_write;
  if (PyType_Ready(&__pyx_type_6pynini_PdtParentheses) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6pynini_PdtParentheses.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_6pynini_PdtParentheses.tp_dict, __pyx_vtabptr_6pynini_PdtParentheses) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "PdtParentheses", (PyObject *)&__pyx_type_6pynini_PdtParentheses) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6pynini_PdtParentheses = &__pyx_type_6pynini_PdtParentheses;
  __pyx_vtabptr_6pynini_MPdtParentheses = &__pyx_vtable_6pynini_MPdtParentheses;
  __pyx_vtable_6pynini_MPdtParentheses.copy = (struct __pyx_obj_6pynini_MPdtParentheses *(*)(struct __pyx_obj_6pynini_MPdtParentheses *, int __pyx_skip_dispatch))__pyx_f_6pynini_15MPdtParentheses_copy;
  __pyx_vtable_6pynini_MPdtParentheses.add_triple = (void (*)(struct __pyx_obj_6pynini_MPdtParentheses *, __pyx_t_10basictypes_int64, __pyx_t_10basictypes_int64, __pyx_t_10basictypes_int64, int __pyx_skip_dispatch))__pyx_f_6pynini_15MPdtParentheses_add_triple;
  __pyx_vtable_6pynini_MPdtParentheses.write = (void (*)(struct __pyx_obj_6pynini_MPdtParentheses *, PyObject *, int __pyx_skip_dispatch))__pyx_f_6pynini_15MPdtParentheses_write;
  if (PyType_Ready(&__pyx_type_6pynini_MPdtParentheses) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1636; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6pynini_MPdtParentheses.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_6pynini_MPdtParentheses.tp_dict, __pyx_vtabptr_6pynini_MPdtParentheses) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1636; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "MPdtParentheses", (PyObject *)&__pyx_type_6pynini_MPdtParentheses) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1636; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6pynini_MPdtParentheses = &__pyx_type_6pynini_MPdtParentheses;
  __pyx_vtabptr_6pynini_StringPaths = &__pyx_vtable_6pynini_StringPaths;
  __pyx_vtable_6pynini_StringPaths.done = (bool (*)(struct __pyx_obj_6pynini_StringPaths *, int __pyx_skip_dispatch))__pyx_f_6pynini_11StringPaths_done;
  __pyx_vtable_6pynini_StringPaths.error = (bool (*)(struct __pyx_obj_6pynini_StringPaths *, int __pyx_skip_dispatch))__pyx_f_6pynini_11StringPaths_error;
  __pyx_vtable_6pynini_StringPaths.reset = (void (*)(struct __pyx_obj_6pynini_StringPaths *, int __pyx_skip_dispatch))__pyx_f_6pynini_11StringPaths_reset;
  __pyx_vtable_6pynini_StringPaths.next = (void (*)(struct __pyx_obj_6pynini_StringPaths *, int __pyx_skip_dispatch))__pyx_f_6pynini_11StringPaths_next;
  __pyx_vtable_6pynini_StringPaths.istring = (std::string (*)(struct __pyx_obj_6pynini_StringPaths *, int __pyx_skip_dispatch))__pyx_f_6pynini_11StringPaths_istring;
  __pyx_vtable_6pynini_StringPaths.ostring = (std::string (*)(struct __pyx_obj_6pynini_StringPaths *, int __pyx_skip_dispatch))__pyx_f_6pynini_11StringPaths_ostring;
  __pyx_vtable_6pynini_StringPaths.weight = (struct __pyx_obj_9pywrapfst_Weight *(*)(struct __pyx_obj_6pynini_StringPaths *, int __pyx_skip_dispatch))__pyx_f_6pynini_11StringPaths_weight;
  if (PyType_Ready(&__pyx_type_6pynini_StringPaths) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1873; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6pynini_StringPaths.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_6pynini_StringPaths.tp_dict, __pyx_vtabptr_6pynini_StringPaths) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1873; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "StringPaths", (PyObject *)&__pyx_type_6pynini_StringPaths) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1873; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6pynini_StringPaths = &__pyx_type_6pynini_StringPaths;
  __pyx_vtabptr_6pynini_Far = &__pyx_vtable_6pynini_Far;
  __pyx_vtable_6pynini_Far._check_mode = (void (*)(struct __pyx_obj_6pynini_Far *, char))__pyx_f_6pynini_3Far__check_mode;
  __pyx_vtable_6pynini_Far._check_not_mode = (void (*)(struct __pyx_obj_6pynini_Far *, char))__pyx_f_6pynini_3Far__check_not_mode;
  __pyx_vtable_6pynini_Far.error = (bool (*)(struct __pyx_obj_6pynini_Far *, int __pyx_skip_dispatch))__pyx_f_6pynini_3Far_error;
  __pyx_vtable_6pynini_Far.find = (bool (*)(struct __pyx_obj_6pynini_Far *, PyObject *, int __pyx_skip_dispatch))__pyx_f_6pynini_3Far_find;
  __pyx_vtable_6pynini_Far.get_key = (std::string (*)(struct __pyx_obj_6pynini_Far *, int __pyx_skip_dispatch))__pyx_f_6pynini_3Far_get_key;
  __pyx_vtable_6pynini_Far.next = (void (*)(struct __pyx_obj_6pynini_Far *, int __pyx_skip_dispatch))__pyx_f_6pynini_3Far_next;
  __pyx_vtable_6pynini_Far.reset = (void (*)(struct __pyx_obj_6pynini_Far *, int __pyx_skip_dispatch))__pyx_f_6pynini_3Far_reset;
  __pyx_vtable_6pynini_Far.add = (void (*)(struct __pyx_obj_6pynini_Far *, PyObject *, struct __pyx_obj_6pynini_Fst *, int __pyx_skip_dispatch))__pyx_f_6pynini_3Far_add;
  __pyx_vtable_6pynini_Far.close = (void (*)(struct __pyx_obj_6pynini_Far *, int __pyx_skip_dispatch))__pyx_f_6pynini_3Far_close;
  if (PyType_Ready(&__pyx_type_6pynini_Far) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2035; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6pynini_Far.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_6pynini_Far.tp_dict, __pyx_vtabptr_6pynini_Far) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2035; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "Far", (PyObject *)&__pyx_type_6pynini_Far) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2035; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6pynini_Far = &__pyx_type_6pynini_Far;
  if (PyType_Ready(&__pyx_type_6pynini___pyx_scope_struct___1arg_patch) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1066; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6pynini___pyx_scope_struct___1arg_patch.tp_print = 0;
  __pyx_ptype_6pynini___pyx_scope_struct___1arg_patch = &__pyx_type_6pynini___pyx_scope_struct___1arg_patch;
  if (PyType_Ready(&__pyx_type_6pynini___pyx_scope_struct_1__shortestdistance_patch) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1088; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6pynini___pyx_scope_struct_1__shortestdistance_patch.tp_print = 0;
  __pyx_ptype_6pynini___pyx_scope_struct_1__shortestdistance_patch = &__pyx_type_6pynini___pyx_scope_struct_1__shortestdistance_patch;
  if (PyType_Ready(&__pyx_type_6pynini___pyx_scope_struct_2__compose_patch) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6pynini___pyx_scope_struct_2__compose_patch.tp_print = 0;
  __pyx_ptype_6pynini___pyx_scope_struct_2__compose_patch = &__pyx_type_6pynini___pyx_scope_struct_2__compose_patch;
  if (PyType_Ready(&__pyx_type_6pynini___pyx_scope_struct_3__difference_patch) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6pynini___pyx_scope_struct_3__difference_patch.tp_print = 0;
  __pyx_ptype_6pynini___pyx_scope_struct_3__difference_patch = &__pyx_type_6pynini___pyx_scope_struct_3__difference_patch;
  if (PyType_Ready(&__pyx_type_6pynini___pyx_scope_struct_4__intersect_patch) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6pynini___pyx_scope_struct_4__intersect_patch.tp_print = 0;
  __pyx_ptype_6pynini___pyx_scope_struct_4__intersect_patch = &__pyx_type_6pynini___pyx_scope_struct_4__intersect_patch;
  if (PyType_Ready(&__pyx_type_6pynini___pyx_scope_struct_5__comp_patch) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6pynini___pyx_scope_struct_5__comp_patch.tp_print = 0;
  __pyx_ptype_6pynini___pyx_scope_struct_5__comp_patch = &__pyx_type_6pynini___pyx_scope_struct_5__comp_patch;
  if (PyType_Ready(&__pyx_type_6pynini___pyx_scope_struct_6__comp_merge_patch) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6pynini___pyx_scope_struct_6__comp_merge_patch.tp_print = 0;
  __pyx_ptype_6pynini___pyx_scope_struct_6__comp_merge_patch = &__pyx_type_6pynini___pyx_scope_struct_6__comp_merge_patch;
  if (PyType_Ready(&__pyx_type_6pynini___pyx_scope_struct_7___iter__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6pynini___pyx_scope_struct_7___iter__.tp_print = 0;
  __pyx_ptype_6pynini___pyx_scope_struct_7___iter__ = &__pyx_type_6pynini___pyx_scope_struct_7___iter__;
  if (PyType_Ready(&__pyx_type_6pynini___pyx_scope_struct_8___iter__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6pynini___pyx_scope_struct_8___iter__.tp_print = 0;
  __pyx_ptype_6pynini___pyx_scope_struct_8___iter__ = &__pyx_type_6pynini___pyx_scope_struct_8___iter__;
  if (PyType_Ready(&__pyx_type_6pynini___pyx_scope_struct_9__copy_patch) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6pynini___pyx_scope_struct_9__copy_patch.tp_print = 0;
  __pyx_ptype_6pynini___pyx_scope_struct_9__copy_patch = &__pyx_type_6pynini___pyx_scope_struct_9__copy_patch;
  /*--- Type import code ---*/
  __pyx_ptype_9pywrapfst_Weight = __Pyx_ImportType("pywrapfst", "Weight", sizeof(struct __pyx_obj_9pywrapfst_Weight), 1); if (unlikely(!__pyx_ptype_9pywrapfst_Weight)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_9pywrapfst_Weight = (struct __pyx_vtabstruct_9pywrapfst_Weight*)__Pyx_GetVtable(__pyx_ptype_9pywrapfst_Weight->tp_dict); if (unlikely(!__pyx_vtabptr_9pywrapfst_Weight)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9pywrapfst__SymbolTable = __Pyx_ImportType("pywrapfst", "_SymbolTable", sizeof(struct __pyx_obj_9pywrapfst__SymbolTable), 1); if (unlikely(!__pyx_ptype_9pywrapfst__SymbolTable)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_9pywrapfst__SymbolTable = (struct __pyx_vtabstruct_9pywrapfst__SymbolTable*)__Pyx_GetVtable(__pyx_ptype_9pywrapfst__SymbolTable->tp_dict); if (unlikely(!__pyx_vtabptr_9pywrapfst__SymbolTable)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9pywrapfst__EncodeMapperSymbolTable = __Pyx_ImportType("pywrapfst", "_EncodeMapperSymbolTable", sizeof(struct __pyx_obj_9pywrapfst__EncodeMapperSymbolTable), 1); if (unlikely(!__pyx_ptype_9pywrapfst__EncodeMapperSymbolTable)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_9pywrapfst__EncodeMapperSymbolTable = (struct __pyx_vtabstruct_9pywrapfst__EncodeMapperSymbolTable*)__Pyx_GetVtable(__pyx_ptype_9pywrapfst__EncodeMapperSymbolTable->tp_dict); if (unlikely(!__pyx_vtabptr_9pywrapfst__EncodeMapperSymbolTable)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9pywrapfst__FstSymbolTable = __Pyx_ImportType("pywrapfst", "_FstSymbolTable", sizeof(struct __pyx_obj_9pywrapfst__FstSymbolTable), 1); if (unlikely(!__pyx_ptype_9pywrapfst__FstSymbolTable)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_9pywrapfst__FstSymbolTable = (struct __pyx_vtabstruct_9pywrapfst__FstSymbolTable*)__Pyx_GetVtable(__pyx_ptype_9pywrapfst__FstSymbolTable->tp_dict); if (unlikely(!__pyx_vtabptr_9pywrapfst__FstSymbolTable)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9pywrapfst__MutableSymbolTable = __Pyx_ImportType("pywrapfst", "_MutableSymbolTable", sizeof(struct __pyx_obj_9pywrapfst__MutableSymbolTable), 1); if (unlikely(!__pyx_ptype_9pywrapfst__MutableSymbolTable)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_9pywrapfst__MutableSymbolTable = (struct __pyx_vtabstruct_9pywrapfst__MutableSymbolTable*)__Pyx_GetVtable(__pyx_ptype_9pywrapfst__MutableSymbolTable->tp_dict); if (unlikely(!__pyx_vtabptr_9pywrapfst__MutableSymbolTable)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9pywrapfst__MutableFstSymbolTable = __Pyx_ImportType("pywrapfst", "_MutableFstSymbolTable", sizeof(struct __pyx_obj_9pywrapfst__MutableFstSymbolTable), 1); if (unlikely(!__pyx_ptype_9pywrapfst__MutableFstSymbolTable)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_9pywrapfst__MutableFstSymbolTable = (struct __pyx_vtabstruct_9pywrapfst__MutableFstSymbolTable*)__Pyx_GetVtable(__pyx_ptype_9pywrapfst__MutableFstSymbolTable->tp_dict); if (unlikely(!__pyx_vtabptr_9pywrapfst__MutableFstSymbolTable)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9pywrapfst_SymbolTable = __Pyx_ImportType("pywrapfst", "SymbolTable", sizeof(struct __pyx_obj_9pywrapfst_SymbolTable), 1); if (unlikely(!__pyx_ptype_9pywrapfst_SymbolTable)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_9pywrapfst_SymbolTable = (struct __pyx_vtabstruct_9pywrapfst_SymbolTable*)__Pyx_GetVtable(__pyx_ptype_9pywrapfst_SymbolTable->tp_dict); if (unlikely(!__pyx_vtabptr_9pywrapfst_SymbolTable)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9pywrapfst_SymbolTableIterator = __Pyx_ImportType("pywrapfst", "SymbolTableIterator", sizeof(struct __pyx_obj_9pywrapfst_SymbolTableIterator), 1); if (unlikely(!__pyx_ptype_9pywrapfst_SymbolTableIterator)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_9pywrapfst_SymbolTableIterator = (struct __pyx_vtabstruct_9pywrapfst_SymbolTableIterator*)__Pyx_GetVtable(__pyx_ptype_9pywrapfst_SymbolTableIterator->tp_dict); if (unlikely(!__pyx_vtabptr_9pywrapfst_SymbolTableIterator)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9pywrapfst_EncodeMapper = __Pyx_ImportType("pywrapfst", "EncodeMapper", sizeof(struct __pyx_obj_9pywrapfst_EncodeMapper), 1); if (unlikely(!__pyx_ptype_9pywrapfst_EncodeMapper)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_9pywrapfst_EncodeMapper = (struct __pyx_vtabstruct_9pywrapfst_EncodeMapper*)__Pyx_GetVtable(__pyx_ptype_9pywrapfst_EncodeMapper->tp_dict); if (unlikely(!__pyx_vtabptr_9pywrapfst_EncodeMapper)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9pywrapfst__Fst = __Pyx_ImportType("pywrapfst", "_Fst", sizeof(struct __pyx_obj_9pywrapfst__Fst), 1); if (unlikely(!__pyx_ptype_9pywrapfst__Fst)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_9pywrapfst__Fst = (struct __pyx_vtabstruct_9pywrapfst__Fst*)__Pyx_GetVtable(__pyx_ptype_9pywrapfst__Fst->tp_dict); if (unlikely(!__pyx_vtabptr_9pywrapfst__Fst)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9pywrapfst_Arc = __Pyx_ImportType("pywrapfst", "Arc", sizeof(struct __pyx_obj_9pywrapfst_Arc), 1); if (unlikely(!__pyx_ptype_9pywrapfst_Arc)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_9pywrapfst_Arc = (struct __pyx_vtabstruct_9pywrapfst_Arc*)__Pyx_GetVtable(__pyx_ptype_9pywrapfst_Arc->tp_dict); if (unlikely(!__pyx_vtabptr_9pywrapfst_Arc)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9pywrapfst_ArcIterator = __Pyx_ImportType("pywrapfst", "ArcIterator", sizeof(struct __pyx_obj_9pywrapfst_ArcIterator), 1); if (unlikely(!__pyx_ptype_9pywrapfst_ArcIterator)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_9pywrapfst_ArcIterator = (struct __pyx_vtabstruct_9pywrapfst_ArcIterator*)__Pyx_GetVtable(__pyx_ptype_9pywrapfst_ArcIterator->tp_dict); if (unlikely(!__pyx_vtabptr_9pywrapfst_ArcIterator)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9pywrapfst_MutableArcIterator = __Pyx_ImportType("pywrapfst", "MutableArcIterator", sizeof(struct __pyx_obj_9pywrapfst_MutableArcIterator), 1); if (unlikely(!__pyx_ptype_9pywrapfst_MutableArcIterator)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_9pywrapfst_MutableArcIterator = (struct __pyx_vtabstruct_9pywrapfst_MutableArcIterator*)__Pyx_GetVtable(__pyx_ptype_9pywrapfst_MutableArcIterator->tp_dict); if (unlikely(!__pyx_vtabptr_9pywrapfst_MutableArcIterator)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9pywrapfst_StateIterator = __Pyx_ImportType("pywrapfst", "StateIterator", sizeof(struct __pyx_obj_9pywrapfst_StateIterator), 1); if (unlikely(!__pyx_ptype_9pywrapfst_StateIterator)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_9pywrapfst_StateIterator = (struct __pyx_vtabstruct_9pywrapfst_StateIterator*)__Pyx_GetVtable(__pyx_ptype_9pywrapfst_StateIterator->tp_dict); if (unlikely(!__pyx_vtabptr_9pywrapfst_StateIterator)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9pywrapfst_Compiler = __Pyx_ImportType("pywrapfst", "Compiler", sizeof(struct __pyx_obj_9pywrapfst_Compiler), 1); if (unlikely(!__pyx_ptype_9pywrapfst_Compiler)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 492; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_9pywrapfst_Compiler = (struct __pyx_vtabstruct_9pywrapfst_Compiler*)__Pyx_GetVtable(__pyx_ptype_9pywrapfst_Compiler->tp_dict); if (unlikely(!__pyx_vtabptr_9pywrapfst_Compiler)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 492; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9pywrapfst_FarReader = __Pyx_ImportType("pywrapfst", "FarReader", sizeof(struct __pyx_obj_9pywrapfst_FarReader), 1); if (unlikely(!__pyx_ptype_9pywrapfst_FarReader)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 513; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_9pywrapfst_FarReader = (struct __pyx_vtabstruct_9pywrapfst_FarReader*)__Pyx_GetVtable(__pyx_ptype_9pywrapfst_FarReader->tp_dict); if (unlikely(!__pyx_vtabptr_9pywrapfst_FarReader)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 513; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9pywrapfst_FarWriter = __Pyx_ImportType("pywrapfst", "FarWriter", sizeof(struct __pyx_obj_9pywrapfst_FarWriter), 1); if (unlikely(!__pyx_ptype_9pywrapfst_FarWriter)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_9pywrapfst_FarWriter = (struct __pyx_vtabstruct_9pywrapfst_FarWriter*)__Pyx_GetVtable(__pyx_ptype_9pywrapfst_FarWriter->tp_dict); if (unlikely(!__pyx_vtabptr_9pywrapfst_FarWriter)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  __pyx_t_1 = __Pyx_ImportModule("pywrapfst"); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_1, "tostring", (void (**)(void))&__pyx_f_9pywrapfst_tostring, "std::string (PyObject *, struct __pyx_opt_args_9pywrapfst_tostring *__pyx_optional_args)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_1, "_get_queue_type", (void (**)(void))&__pyx_f_9pywrapfst__get_queue_type, "enum fst::QueueType (std::string)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_1, "_get_replace_label_type", (void (**)(void))&__pyx_f_9pywrapfst__get_replace_label_type, "enum fst::ReplaceLabelType (std::string, bool)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_1, "_get_WeightClass_or_One", (void (**)(void))&__pyx_f_9pywrapfst__get_WeightClass_or_One, "fst::script::WeightClass (std::string const &, PyObject *)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_1, "_get_WeightClass_or_Zero", (void (**)(void))&__pyx_f_9pywrapfst__get_WeightClass_or_Zero, "fst::script::WeightClass (std::string const &, PyObject *)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_1, "_read_Fst", (void (**)(void))&__pyx_f_9pywrapfst__read_Fst, "struct __pyx_obj_9pywrapfst__Fst *(PyObject *, struct __pyx_opt_args_9pywrapfst__read_Fst *__pyx_optional_args)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif

  /* "pynini.pyx":159
 * 
 * 
 * import functools             # <<<<<<<<<<<<<<
 * 
 * from pywrapfst import FstArgError
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_functools, 0, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_functools, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":161
 * import functools
 * 
 * from pywrapfst import FstArgError             # <<<<<<<<<<<<<<
 * from pywrapfst import FstIOError
 * from pywrapfst import FstOpError
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_FstArgError);
  __Pyx_GIVEREF(__pyx_n_s_FstArgError);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_FstArgError);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_FstArgError); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FstArgError, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":162
 * 
 * from pywrapfst import FstArgError
 * from pywrapfst import FstIOError             # <<<<<<<<<<<<<<
 * from pywrapfst import FstOpError
 * 
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_FstIOError);
  __Pyx_GIVEREF(__pyx_n_s_FstIOError);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_FstIOError);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_FstIOError); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FstIOError, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":163
 * from pywrapfst import FstArgError
 * from pywrapfst import FstIOError
 * from pywrapfst import FstOpError             # <<<<<<<<<<<<<<
 * 
 * import pywrapfst
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_FstOpError);
  __Pyx_GIVEREF(__pyx_n_s_FstOpError);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_FstOpError);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_FstOpError); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FstOpError, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":165
 * from pywrapfst import FstOpError
 * 
 * import pywrapfst             # <<<<<<<<<<<<<<
 * 
 * import logging
 */
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, 0, -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pywrapfst, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":167
 * import pywrapfst
 * 
 * import logging             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_logging, 0, -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_logging, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":173
 * 
 * 
 * cdef uint64 kAcceptorAndString = kAcceptor | kString             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_6pynini_kAcceptorAndString = (fst::kAcceptor | fst::kString);

  /* "pynini.pyx":179
 * 
 * 
 * class FstStringCompilationError(FstArgError, ValueError):             # <<<<<<<<<<<<<<
 * 
 *   pass
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstArgError); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_INCREF(__pyx_builtin_ValueError);
  __Pyx_GIVEREF(__pyx_builtin_ValueError);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_builtin_ValueError);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_Py3MetaclassPrepare(__pyx_t_3, __pyx_t_2, __pyx_n_s_FstStringCompilationError, __pyx_n_s_FstStringCompilationError, (PyObject *) NULL, __pyx_n_s_pynini, (PyObject *) NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_Py3ClassCreate(__pyx_t_3, __pyx_n_s_FstStringCompilationError, __pyx_t_2, __pyx_t_4, NULL, 0, 1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FstStringCompilationError, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":184
 * 
 * 
 * class FstSymbolTableMergeError(FstOpError, ValueError):             # <<<<<<<<<<<<<<
 * 
 *   pass
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstOpError); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_INCREF(__pyx_builtin_ValueError);
  __Pyx_GIVEREF(__pyx_builtin_ValueError);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_builtin_ValueError);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_3, __pyx_n_s_FstSymbolTableMergeError, __pyx_n_s_FstSymbolTableMergeError, (PyObject *) NULL, __pyx_n_s_pynini, (PyObject *) NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_FstSymbolTableMergeError, __pyx_t_3, __pyx_t_4, NULL, 0, 1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FstSymbolTableMergeError, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":347
 * 
 *   @classmethod
 *   def read(cls, filename):             # <<<<<<<<<<<<<<
 *     """
 *     Fst.read(filename)
 */
  __pyx_t_3 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pynini_Fst, __pyx_n_s_read); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);

  /* "pynini.pyx":346
 *                                      FstClass](self._fst)
 * 
 *   @classmethod             # <<<<<<<<<<<<<<
 *   def read(cls, filename):
 *     """
 */
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pynini_Fst->tp_dict, __pyx_n_s_read, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pynini_Fst);

  /* "pynini.pyx":524
 * 
 *   @property
 *   def plus(self):             # <<<<<<<<<<<<<<
 *     """
 *     Constructively computes +-closure.
 */
  __pyx_t_2 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pynini_Fst, __pyx_n_s_plus); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 524; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pynini.pyx":523
 *     return self
 * 
 *   @property             # <<<<<<<<<<<<<<
 *   def plus(self):
 *     """
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pynini_Fst->tp_dict, __pyx_n_s_plus, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 524; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pynini_Fst);

  /* "pynini.pyx":539
 * 
 *   @property
 *   def ques(self):             # <<<<<<<<<<<<<<
 *     """
 *     Constructively computes ?-closure.
 */
  __pyx_t_2 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pynini_Fst, __pyx_n_s_ques); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pynini.pyx":538
 *     return result
 * 
 *   @property             # <<<<<<<<<<<<<<
 *   def ques(self):
 *     """
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pynini_Fst->tp_dict, __pyx_n_s_ques, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pynini_Fst);

  /* "pynini.pyx":554
 * 
 *   @property
 *   def star(self):             # <<<<<<<<<<<<<<
 *     """
 *     Constructively computes *-closure.
 */
  __pyx_t_2 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pynini_Fst, __pyx_n_s_star); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pynini.pyx":553
 *     return result
 * 
 *   @property             # <<<<<<<<<<<<<<
 *   def star(self):
 *     """
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 553; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 553; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pynini_Fst->tp_dict, __pyx_n_s_star, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pynini_Fst);

  /* "pynini.pyx":934
 * 
 * 
 * def string_file(filename,             # <<<<<<<<<<<<<<
 *                 arc_type=b"standard",
 *                 input_token_type=b"byte",
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6pynini_9string_file, NULL, __pyx_n_s_pynini); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 934; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_string_file, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 934; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":988
 * 
 * 
 * def string_map(pairs,             # <<<<<<<<<<<<<<
 *                arc_type=b"standard",
 *                input_token_type=b"byte",
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6pynini_11string_map, NULL, __pyx_n_s_pynini); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 988; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_string_map, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 988; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":1066
 * 
 * 
 * def _1arg_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg, *args, **kwargs):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6pynini_13_1arg_patch, NULL, __pyx_n_s_pynini); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1066; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_1arg_patch, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1066; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":1074
 * 
 * 
 * arcmap = _1arg_patch(pywrapfst.arcmap)             # <<<<<<<<<<<<<<
 * determinize = _1arg_patch(pywrapfst.determinize)
 * disambiguate = _1arg_patch(pywrapfst.disambiguate)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_1arg_patch); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1074; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1074; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_arcmap); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1074; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1074; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1074; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1074; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_arcmap, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1074; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":1075
 * 
 * arcmap = _1arg_patch(pywrapfst.arcmap)
 * determinize = _1arg_patch(pywrapfst.determinize)             # <<<<<<<<<<<<<<
 * disambiguate = _1arg_patch(pywrapfst.disambiguate)
 * epsnormalize = _1arg_patch(pywrapfst.epsnormalize)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_1arg_patch); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1075; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1075; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_determinize); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1075; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1075; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1075; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6); __pyx_t_6 = NULL;
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1075; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_determinize, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1075; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":1076
 * arcmap = _1arg_patch(pywrapfst.arcmap)
 * determinize = _1arg_patch(pywrapfst.determinize)
 * disambiguate = _1arg_patch(pywrapfst.disambiguate)             # <<<<<<<<<<<<<<
 * epsnormalize = _1arg_patch(pywrapfst.epsnormalize)
 * prune = _1arg_patch(pywrapfst.prune)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_1arg_patch); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1076; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1076; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_disambiguate); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1076; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1076; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1076; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1076; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_disambiguate, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1076; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":1077
 * determinize = _1arg_patch(pywrapfst.determinize)
 * disambiguate = _1arg_patch(pywrapfst.disambiguate)
 * epsnormalize = _1arg_patch(pywrapfst.epsnormalize)             # <<<<<<<<<<<<<<
 * prune = _1arg_patch(pywrapfst.prune)
 * push = _1arg_patch(pywrapfst.push)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_1arg_patch); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1077; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1077; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_epsnormalize); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1077; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1077; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1077; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6); __pyx_t_6 = NULL;
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1077; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_epsnormalize, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1077; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":1078
 * disambiguate = _1arg_patch(pywrapfst.disambiguate)
 * epsnormalize = _1arg_patch(pywrapfst.epsnormalize)
 * prune = _1arg_patch(pywrapfst.prune)             # <<<<<<<<<<<<<<
 * push = _1arg_patch(pywrapfst.push)
 * randgen = _1arg_patch(pywrapfst.randgen)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_1arg_patch); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1078; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1078; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_prune); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1078; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1078; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1078; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1078; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_prune, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1078; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":1079
 * epsnormalize = _1arg_patch(pywrapfst.epsnormalize)
 * prune = _1arg_patch(pywrapfst.prune)
 * push = _1arg_patch(pywrapfst.push)             # <<<<<<<<<<<<<<
 * randgen = _1arg_patch(pywrapfst.randgen)
 * reverse = _1arg_patch(pywrapfst.reverse)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_1arg_patch); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1079; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1079; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_push); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1079; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1079; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1079; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6); __pyx_t_6 = NULL;
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1079; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_push, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1079; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":1080
 * prune = _1arg_patch(pywrapfst.prune)
 * push = _1arg_patch(pywrapfst.push)
 * randgen = _1arg_patch(pywrapfst.randgen)             # <<<<<<<<<<<<<<
 * reverse = _1arg_patch(pywrapfst.reverse)
 * rmepsilon = _1arg_patch(pywrapfst.rmepsilon)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_1arg_patch); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1080; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1080; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_randgen); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1080; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1080; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1080; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1080; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_randgen, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1080; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":1081
 * push = _1arg_patch(pywrapfst.push)
 * randgen = _1arg_patch(pywrapfst.randgen)
 * reverse = _1arg_patch(pywrapfst.reverse)             # <<<<<<<<<<<<<<
 * rmepsilon = _1arg_patch(pywrapfst.rmepsilon)
 * shortestpath = _1arg_patch(pywrapfst.shortestpath)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_1arg_patch); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1081; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1081; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_reverse); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1081; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1081; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1081; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6); __pyx_t_6 = NULL;
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1081; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reverse, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1081; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":1082
 * randgen = _1arg_patch(pywrapfst.randgen)
 * reverse = _1arg_patch(pywrapfst.reverse)
 * rmepsilon = _1arg_patch(pywrapfst.rmepsilon)             # <<<<<<<<<<<<<<
 * shortestpath = _1arg_patch(pywrapfst.shortestpath)
 * statemap = _1arg_patch(pywrapfst.statemap)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_1arg_patch); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1082; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1082; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_rmepsilon); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1082; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1082; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1082; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1082; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_rmepsilon, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1082; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":1083
 * reverse = _1arg_patch(pywrapfst.reverse)
 * rmepsilon = _1arg_patch(pywrapfst.rmepsilon)
 * shortestpath = _1arg_patch(pywrapfst.shortestpath)             # <<<<<<<<<<<<<<
 * statemap = _1arg_patch(pywrapfst.statemap)
 * synchronize = _1arg_patch(pywrapfst.synchronize)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_1arg_patch); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1083; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1083; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_shortestpath); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1083; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1083; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1083; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6); __pyx_t_6 = NULL;
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1083; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_shortestpath, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1083; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":1084
 * rmepsilon = _1arg_patch(pywrapfst.rmepsilon)
 * shortestpath = _1arg_patch(pywrapfst.shortestpath)
 * statemap = _1arg_patch(pywrapfst.statemap)             # <<<<<<<<<<<<<<
 * synchronize = _1arg_patch(pywrapfst.synchronize)
 * 
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_1arg_patch); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1084; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1084; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_statemap); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1084; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1084; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1084; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1084; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_statemap, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1084; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":1085
 * shortestpath = _1arg_patch(pywrapfst.shortestpath)
 * statemap = _1arg_patch(pywrapfst.statemap)
 * synchronize = _1arg_patch(pywrapfst.synchronize)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_1arg_patch); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1085; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1085; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_synchronize); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1085; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1085; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1085; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6); __pyx_t_6 = NULL;
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1085; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_synchronize, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1085; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":1088
 * 
 * 
 * def _shortestdistance_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg, *args, **kwargs):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6pynini_15_shortestdistance_patch, NULL, __pyx_n_s_pynini); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1088; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_shortestdistance_patch, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1088; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":1096
 * 
 * 
 * shortestdistance = _shortestdistance_patch(pywrapfst.shortestdistance)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_shortestdistance_patch); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1096; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1096; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_shortestdistance); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1096; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1096; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1096; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1096; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_shortestdistance, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1096; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":1104
 * 
 * 
 * def _compose_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6pynini_17_compose_patch, NULL, __pyx_n_s_pynini); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_compose_patch, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":1122
 * 
 * 
 * compose = _compose_patch(pywrapfst.compose)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_compose_patch); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_compose); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6); __pyx_t_6 = NULL;
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_compose, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":1125
 * 
 * 
 * def _difference_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6pynini_19_difference_patch, NULL, __pyx_n_s_pynini); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_difference_patch, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":1145
 * 
 * 
 * difference = _difference_patch(pywrapfst.difference)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_difference_patch); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_difference); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_difference, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":1148
 * 
 * 
 * def _intersect_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6pynini_21_intersect_patch, NULL, __pyx_n_s_pynini); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_intersect_patch, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":1165
 * 
 * 
 * intersect = _intersect_patch(pywrapfst.intersect)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_intersect_patch); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_intersect); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6); __pyx_t_6 = NULL;
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_intersect, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":1171
 * 
 * 
 * def _comp_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6pynini_23_comp_patch, NULL, __pyx_n_s_pynini); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_comp_patch, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":1180
 * 
 * 
 * equal = _comp_patch(pywrapfst.equal)             # <<<<<<<<<<<<<<
 * isomorphic = _comp_patch(pywrapfst.isomorphic)
 * 
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_comp_patch); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_equal); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_equal, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":1181
 * 
 * equal = _comp_patch(pywrapfst.equal)
 * isomorphic = _comp_patch(pywrapfst.isomorphic)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_comp_patch); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_isomorphic); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6); __pyx_t_6 = NULL;
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_isomorphic, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":1187
 * 
 * 
 * def _comp_merge_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6pynini_25_comp_merge_patch, NULL, __pyx_n_s_pynini); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_comp_merge_patch, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":1200
 * 
 * 
 * equivalent = _comp_merge_patch(pywrapfst.equivalent)             # <<<<<<<<<<<<<<
 * randequivalent = _comp_merge_patch(pywrapfst.randequivalent)
 * 
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_comp_merge_patch); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_equivalent); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_equivalent, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":1201
 * 
 * equivalent = _comp_merge_patch(pywrapfst.equivalent)
 * randequivalent = _comp_merge_patch(pywrapfst.randequivalent)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_comp_merge_patch); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_randequivalent); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6); __pyx_t_6 = NULL;
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_randequivalent, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":1204
 * 
 * 
 * def replace(root, *,             # <<<<<<<<<<<<<<
 *             call_arc_labeling=b"neither",
 *             return_arc_labeling=b"neither",
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6pynini_27replace, NULL, __pyx_n_s_pynini); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_replace, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":1278
 * 
 * 
 * def union(*args):             # <<<<<<<<<<<<<<
 *   """
 *   union(*args)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6pynini_29union, NULL, __pyx_n_s_pynini); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_union, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":1362
 * 
 *   @classmethod
 *   def read(cls, filename):             # <<<<<<<<<<<<<<
 *     """
 *     PdtParentheses.read(filename)
 */
  __pyx_t_2 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pynini_PdtParentheses, __pyx_n_s_read); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pynini.pyx":1361
 *     self._parens.push_back(LabelPair(push, pop))
 * 
 *   @classmethod             # <<<<<<<<<<<<<<
 *   def read(cls, filename):
 *     """
 */
  __pyx_t_3 = __Pyx_Method_ClassMethod(__pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pynini_PdtParentheses->tp_dict, __pyx_n_s_read, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_6pynini_PdtParentheses);

  /* "pynini.pyx":1404
 * 
 * 
 * def pdt_compose(ifst1,             # <<<<<<<<<<<<<<
 *                 ifst2,
 *                 PdtParentheses parens,
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_6pynini_31pdt_compose, NULL, __pyx_n_s_pynini); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pdt_compose, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":1466
 * 
 * 
 * def pdt_expand(ipdt,             # <<<<<<<<<<<<<<
 *                PdtParentheses parens,
 *                bool connect=True,
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_6pynini_33pdt_expand, NULL, __pyx_n_s_pynini); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pdt_expand, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":1509
 * 
 * 
 * def pdt_replace(root, *,             # <<<<<<<<<<<<<<
 *                 pdt_parser_type=b"left",
 *                 **replacements):
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_6pynini_35pdt_replace, NULL, __pyx_n_s_pynini); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1509; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pdt_replace, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1509; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":1569
 * 
 * 
 * def pdt_reverse(ipdt, PdtParentheses parens):             # <<<<<<<<<<<<<<
 *   """
 *   pdt_reverse(ipdt, parens)
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_6pynini_37pdt_reverse, NULL, __pyx_n_s_pynini); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1569; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pdt_reverse, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1569; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":1592
 * 
 * 
 * def pdt_shortestpath(ipdt,             # <<<<<<<<<<<<<<
 *                      PdtParentheses parens,
 *                      qt=b"fifo",
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_6pynini_39pdt_shortestpath, NULL, __pyx_n_s_pynini); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pdt_shortestpath, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":1698
 * 
 *   @classmethod
 *   def read(cls, filename):             # <<<<<<<<<<<<<<
 *     """
 *     MPdtParentheses.read(filename)
 */
  __pyx_t_3 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pynini_MPdtParentheses, __pyx_n_s_read); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1698; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);

  /* "pynini.pyx":1697
 *     self._assign.push_back(assignment)
 * 
 *   @classmethod             # <<<<<<<<<<<<<<
 *   def read(cls, filename):
 *     """
 */
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1697; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pynini_MPdtParentheses->tp_dict, __pyx_n_s_read, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1698; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pynini_MPdtParentheses);

  /* "pynini.pyx":1804
 * 
 * 
 * def mpdt_expand(impdt, MPdtParentheses parens, bool connect=True,             # <<<<<<<<<<<<<<
 *                 bool keep_parentheses=False):
 *   """
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6pynini_43mpdt_expand, NULL, __pyx_n_s_pynini); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1804; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_mpdt_expand, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1804; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":1842
 * 
 * 
 * def mpdt_reverse(impdt, MPdtParentheses parens):             # <<<<<<<<<<<<<<
 *   """
 *   mpdt_reverse(impdt, parens)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6pynini_45mpdt_reverse, NULL, __pyx_n_s_pynini); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_mpdt_reverse, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2112
 * 
 *   @property
 *   def arc_type(self):             # <<<<<<<<<<<<<<
 *     self._check_not_mode(b"c")
 *     return (self._reader._arc_type() if self._mode == b"r" else
 */
  __pyx_t_2 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pynini_Far, __pyx_n_s_arc_type); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pynini.pyx":2111
 *     return self._reader.error() if self._mode == b"r" else self._writer.error()
 * 
 *   @property             # <<<<<<<<<<<<<<
 *   def arc_type(self):
 *     self._check_not_mode(b"c")
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pynini_Far->tp_dict, __pyx_n_s_arc_type, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pynini_Far);

  /* "pynini.pyx":2118
 * 
 *   @property
 *   def closed(self):             # <<<<<<<<<<<<<<
 *     return self._mode == b"c"
 * 
 */
  __pyx_t_2 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pynini_Far, __pyx_n_s_closed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pynini.pyx":2117
 *             self._writer._arc_type())
 * 
 *   @property             # <<<<<<<<<<<<<<
 *   def closed(self):
 *     return self._mode == b"c"
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pynini_Far->tp_dict, __pyx_n_s_closed, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pynini_Far);

  /* "pynini.pyx":2122
 * 
 *   @property
 *   def far_type(self):             # <<<<<<<<<<<<<<
 *     if self._mode == b"r":
 *       return self._reader._far_type()
 */
  __pyx_t_2 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pynini_Far, __pyx_n_s_far_type); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pynini.pyx":2121
 *     return self._mode == b"c"
 * 
 *   @property             # <<<<<<<<<<<<<<
 *   def far_type(self):
 *     if self._mode == b"r":
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pynini_Far->tp_dict, __pyx_n_s_far_type, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pynini_Far);

  /* "pynini.pyx":2131
 * 
 *   @property
 *   def mode(self):             # <<<<<<<<<<<<<<
 *     return "{:c}".format(self._mode)
 * 
 */
  __pyx_t_2 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pynini_Far, __pyx_n_s_mode); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pynini.pyx":2130
 *       return "closed"
 * 
 *   @property             # <<<<<<<<<<<<<<
 *   def mode(self):
 *     return "{:c}".format(self._mode)
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pynini_Far->tp_dict, __pyx_n_s_mode, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pynini_Far);

  /* "pynini.pyx":2135
 * 
 *   @property
 *   def name(self):             # <<<<<<<<<<<<<<
 *     return self._name
 * 
 */
  __pyx_t_2 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pynini_Far, __pyx_n_s_name_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pynini.pyx":2134
 *     return "{:c}".format(self._mode)
 * 
 *   @property             # <<<<<<<<<<<<<<
 *   def name(self):
 *     return self._name
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pynini_Far->tp_dict, __pyx_n_s_name_2, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pynini_Far);

  /* "pynini.pyx":2301
 * 
 * 
 * from pywrapfst import Arc             # <<<<<<<<<<<<<<
 * from pywrapfst import ArcIterator
 * from pywrapfst import EncodeMapper
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_Arc);
  __Pyx_GIVEREF(__pyx_n_s_Arc);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Arc);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_Arc); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Arc, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2302
 * 
 * from pywrapfst import Arc
 * from pywrapfst import ArcIterator             # <<<<<<<<<<<<<<
 * from pywrapfst import EncodeMapper
 * from pywrapfst import MutableArcIterator
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_ArcIterator);
  __Pyx_GIVEREF(__pyx_n_s_ArcIterator);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_ArcIterator);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ArcIterator); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ArcIterator, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2303
 * from pywrapfst import Arc
 * from pywrapfst import ArcIterator
 * from pywrapfst import EncodeMapper             # <<<<<<<<<<<<<<
 * from pywrapfst import MutableArcIterator
 * from pywrapfst import StateIterator
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_EncodeMapper);
  __Pyx_GIVEREF(__pyx_n_s_EncodeMapper);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_EncodeMapper);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_EncodeMapper); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_EncodeMapper, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2304
 * from pywrapfst import ArcIterator
 * from pywrapfst import EncodeMapper
 * from pywrapfst import MutableArcIterator             # <<<<<<<<<<<<<<
 * from pywrapfst import StateIterator
 * from pywrapfst import SymbolTable
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_MutableArcIterator);
  __Pyx_GIVEREF(__pyx_n_s_MutableArcIterator);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_MutableArcIterator);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_MutableArcIterator); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MutableArcIterator, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2305
 * from pywrapfst import EncodeMapper
 * from pywrapfst import MutableArcIterator
 * from pywrapfst import StateIterator             # <<<<<<<<<<<<<<
 * from pywrapfst import SymbolTable
 * from pywrapfst import SymbolTableIterator
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_StateIterator);
  __Pyx_GIVEREF(__pyx_n_s_StateIterator);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_StateIterator);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_StateIterator); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_StateIterator, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2306
 * from pywrapfst import MutableArcIterator
 * from pywrapfst import StateIterator
 * from pywrapfst import SymbolTable             # <<<<<<<<<<<<<<
 * from pywrapfst import SymbolTableIterator
 * from pywrapfst import Weight
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_SymbolTable_2);
  __Pyx_GIVEREF(__pyx_n_s_SymbolTable_2);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_SymbolTable_2);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_SymbolTable_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SymbolTable_2, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2307
 * from pywrapfst import StateIterator
 * from pywrapfst import SymbolTable
 * from pywrapfst import SymbolTableIterator             # <<<<<<<<<<<<<<
 * from pywrapfst import Weight
 * 
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_SymbolTableIterator);
  __Pyx_GIVEREF(__pyx_n_s_SymbolTableIterator);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_SymbolTableIterator);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_SymbolTableIterator); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SymbolTableIterator, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2308
 * from pywrapfst import SymbolTable
 * from pywrapfst import SymbolTableIterator
 * from pywrapfst import Weight             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_Weight);
  __Pyx_GIVEREF(__pyx_n_s_Weight);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_Weight);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Weight); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Weight, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2314
 * 
 * 
 * from pywrapfst import FstBadWeightError             # <<<<<<<<<<<<<<
 * from pywrapfst import \
 *     FstDeletedConstructorError
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_FstBadWeightError);
  __Pyx_GIVEREF(__pyx_n_s_FstBadWeightError);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_FstBadWeightError);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_FstBadWeightError); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FstBadWeightError, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2316
 * from pywrapfst import FstBadWeightError
 * from pywrapfst import \
 *     FstDeletedConstructorError             # <<<<<<<<<<<<<<
 * from pywrapfst import FstIndexError
 * from pywrapfst import \
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_FstDeletedConstructorError);
  __Pyx_GIVEREF(__pyx_n_s_FstDeletedConstructorError);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_FstDeletedConstructorError);

  /* "pynini.pyx":2315
 * 
 * from pywrapfst import FstBadWeightError
 * from pywrapfst import \             # <<<<<<<<<<<<<<
 *     FstDeletedConstructorError
 * from pywrapfst import FstIndexError
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_FstDeletedConstructorError); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FstDeletedConstructorError, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2317
 * from pywrapfst import \
 *     FstDeletedConstructorError
 * from pywrapfst import FstIndexError             # <<<<<<<<<<<<<<
 * from pywrapfst import \
 *     FstUnknownWeightTypeError
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_FstIndexError);
  __Pyx_GIVEREF(__pyx_n_s_FstIndexError);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_FstIndexError);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_FstIndexError); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FstIndexError, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2319
 * from pywrapfst import FstIndexError
 * from pywrapfst import \
 *     FstUnknownWeightTypeError             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_FstUnknownWeightTypeError);
  __Pyx_GIVEREF(__pyx_n_s_FstUnknownWeightTypeError);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_FstUnknownWeightTypeError);

  /* "pynini.pyx":2318
 *     FstDeletedConstructorError
 * from pywrapfst import FstIndexError
 * from pywrapfst import \             # <<<<<<<<<<<<<<
 *     FstUnknownWeightTypeError
 * 
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_FstUnknownWeightTypeError); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FstUnknownWeightTypeError, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2325
 * 
 * 
 * from pywrapfst import EXPANDED             # <<<<<<<<<<<<<<
 * from pywrapfst import MUTABLE
 * from pywrapfst import ERROR
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_EXPANDED);
  __Pyx_GIVEREF(__pyx_n_s_EXPANDED);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_EXPANDED);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_EXPANDED); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_EXPANDED, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2326
 * 
 * from pywrapfst import EXPANDED
 * from pywrapfst import MUTABLE             # <<<<<<<<<<<<<<
 * from pywrapfst import ERROR
 * from pywrapfst import ACCEPTOR
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_MUTABLE);
  __Pyx_GIVEREF(__pyx_n_s_MUTABLE);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_MUTABLE);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_MUTABLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MUTABLE, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2327
 * from pywrapfst import EXPANDED
 * from pywrapfst import MUTABLE
 * from pywrapfst import ERROR             # <<<<<<<<<<<<<<
 * from pywrapfst import ACCEPTOR
 * from pywrapfst import NOT_ACCEPTOR
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_ERROR);
  __Pyx_GIVEREF(__pyx_n_s_ERROR);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_ERROR);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_ERROR); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ERROR, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2328
 * from pywrapfst import MUTABLE
 * from pywrapfst import ERROR
 * from pywrapfst import ACCEPTOR             # <<<<<<<<<<<<<<
 * from pywrapfst import NOT_ACCEPTOR
 * from pywrapfst import I_DETERMINISTIC
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_ACCEPTOR);
  __Pyx_GIVEREF(__pyx_n_s_ACCEPTOR);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_ACCEPTOR);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ACCEPTOR); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ACCEPTOR, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2329
 * from pywrapfst import ERROR
 * from pywrapfst import ACCEPTOR
 * from pywrapfst import NOT_ACCEPTOR             # <<<<<<<<<<<<<<
 * from pywrapfst import I_DETERMINISTIC
 * from pywrapfst import NON_I_DETERMINISTIC
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_NOT_ACCEPTOR);
  __Pyx_GIVEREF(__pyx_n_s_NOT_ACCEPTOR);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_NOT_ACCEPTOR);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_NOT_ACCEPTOR); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NOT_ACCEPTOR, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2330
 * from pywrapfst import ACCEPTOR
 * from pywrapfst import NOT_ACCEPTOR
 * from pywrapfst import I_DETERMINISTIC             # <<<<<<<<<<<<<<
 * from pywrapfst import NON_I_DETERMINISTIC
 * from pywrapfst import O_DETERMINISTIC
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_I_DETERMINISTIC);
  __Pyx_GIVEREF(__pyx_n_s_I_DETERMINISTIC);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_I_DETERMINISTIC);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_I_DETERMINISTIC); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_I_DETERMINISTIC, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2331
 * from pywrapfst import NOT_ACCEPTOR
 * from pywrapfst import I_DETERMINISTIC
 * from pywrapfst import NON_I_DETERMINISTIC             # <<<<<<<<<<<<<<
 * from pywrapfst import O_DETERMINISTIC
 * from pywrapfst import NON_O_DETERMINISTIC
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_NON_I_DETERMINISTIC);
  __Pyx_GIVEREF(__pyx_n_s_NON_I_DETERMINISTIC);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_NON_I_DETERMINISTIC);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_NON_I_DETERMINISTIC); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NON_I_DETERMINISTIC, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2332
 * from pywrapfst import I_DETERMINISTIC
 * from pywrapfst import NON_I_DETERMINISTIC
 * from pywrapfst import O_DETERMINISTIC             # <<<<<<<<<<<<<<
 * from pywrapfst import NON_O_DETERMINISTIC
 * from pywrapfst import EPSILONS
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_O_DETERMINISTIC);
  __Pyx_GIVEREF(__pyx_n_s_O_DETERMINISTIC);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_O_DETERMINISTIC);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_O_DETERMINISTIC); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_O_DETERMINISTIC, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2333
 * from pywrapfst import NON_I_DETERMINISTIC
 * from pywrapfst import O_DETERMINISTIC
 * from pywrapfst import NON_O_DETERMINISTIC             # <<<<<<<<<<<<<<
 * from pywrapfst import EPSILONS
 * from pywrapfst import NO_EPSILONS
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_NON_O_DETERMINISTIC);
  __Pyx_GIVEREF(__pyx_n_s_NON_O_DETERMINISTIC);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_NON_O_DETERMINISTIC);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_NON_O_DETERMINISTIC); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NON_O_DETERMINISTIC, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2334
 * from pywrapfst import O_DETERMINISTIC
 * from pywrapfst import NON_O_DETERMINISTIC
 * from pywrapfst import EPSILONS             # <<<<<<<<<<<<<<
 * from pywrapfst import NO_EPSILONS
 * from pywrapfst import I_EPSILONS
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_EPSILONS);
  __Pyx_GIVEREF(__pyx_n_s_EPSILONS);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_EPSILONS);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_EPSILONS); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_EPSILONS, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2335
 * from pywrapfst import NON_O_DETERMINISTIC
 * from pywrapfst import EPSILONS
 * from pywrapfst import NO_EPSILONS             # <<<<<<<<<<<<<<
 * from pywrapfst import I_EPSILONS
 * from pywrapfst import NO_I_EPSILONS
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_NO_EPSILONS);
  __Pyx_GIVEREF(__pyx_n_s_NO_EPSILONS);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_NO_EPSILONS);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_NO_EPSILONS); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NO_EPSILONS, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2336
 * from pywrapfst import EPSILONS
 * from pywrapfst import NO_EPSILONS
 * from pywrapfst import I_EPSILONS             # <<<<<<<<<<<<<<
 * from pywrapfst import NO_I_EPSILONS
 * from pywrapfst import O_EPSILONS
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_I_EPSILONS);
  __Pyx_GIVEREF(__pyx_n_s_I_EPSILONS);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_I_EPSILONS);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_I_EPSILONS); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_I_EPSILONS, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2337
 * from pywrapfst import NO_EPSILONS
 * from pywrapfst import I_EPSILONS
 * from pywrapfst import NO_I_EPSILONS             # <<<<<<<<<<<<<<
 * from pywrapfst import O_EPSILONS
 * from pywrapfst import NO_O_EPSILONS
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_NO_I_EPSILONS);
  __Pyx_GIVEREF(__pyx_n_s_NO_I_EPSILONS);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_NO_I_EPSILONS);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_NO_I_EPSILONS); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NO_I_EPSILONS, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2338
 * from pywrapfst import I_EPSILONS
 * from pywrapfst import NO_I_EPSILONS
 * from pywrapfst import O_EPSILONS             # <<<<<<<<<<<<<<
 * from pywrapfst import NO_O_EPSILONS
 * from pywrapfst import I_LABEL_SORTED
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_O_EPSILONS);
  __Pyx_GIVEREF(__pyx_n_s_O_EPSILONS);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_O_EPSILONS);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_O_EPSILONS); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_O_EPSILONS, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2339
 * from pywrapfst import NO_I_EPSILONS
 * from pywrapfst import O_EPSILONS
 * from pywrapfst import NO_O_EPSILONS             # <<<<<<<<<<<<<<
 * from pywrapfst import I_LABEL_SORTED
 * from pywrapfst import NOT_I_LABEL_SORTED
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_NO_O_EPSILONS);
  __Pyx_GIVEREF(__pyx_n_s_NO_O_EPSILONS);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_NO_O_EPSILONS);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_NO_O_EPSILONS); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NO_O_EPSILONS, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2340
 * from pywrapfst import O_EPSILONS
 * from pywrapfst import NO_O_EPSILONS
 * from pywrapfst import I_LABEL_SORTED             # <<<<<<<<<<<<<<
 * from pywrapfst import NOT_I_LABEL_SORTED
 * from pywrapfst import O_LABEL_SORTED
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_I_LABEL_SORTED);
  __Pyx_GIVEREF(__pyx_n_s_I_LABEL_SORTED);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_I_LABEL_SORTED);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_I_LABEL_SORTED); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_I_LABEL_SORTED, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2341
 * from pywrapfst import NO_O_EPSILONS
 * from pywrapfst import I_LABEL_SORTED
 * from pywrapfst import NOT_I_LABEL_SORTED             # <<<<<<<<<<<<<<
 * from pywrapfst import O_LABEL_SORTED
 * from pywrapfst import NOT_O_LABEL_SORTED
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_NOT_I_LABEL_SORTED);
  __Pyx_GIVEREF(__pyx_n_s_NOT_I_LABEL_SORTED);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_NOT_I_LABEL_SORTED);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_NOT_I_LABEL_SORTED); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NOT_I_LABEL_SORTED, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2342
 * from pywrapfst import I_LABEL_SORTED
 * from pywrapfst import NOT_I_LABEL_SORTED
 * from pywrapfst import O_LABEL_SORTED             # <<<<<<<<<<<<<<
 * from pywrapfst import NOT_O_LABEL_SORTED
 * from pywrapfst import WEIGHTED
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_O_LABEL_SORTED);
  __Pyx_GIVEREF(__pyx_n_s_O_LABEL_SORTED);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_O_LABEL_SORTED);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_O_LABEL_SORTED); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_O_LABEL_SORTED, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2343
 * from pywrapfst import NOT_I_LABEL_SORTED
 * from pywrapfst import O_LABEL_SORTED
 * from pywrapfst import NOT_O_LABEL_SORTED             # <<<<<<<<<<<<<<
 * from pywrapfst import WEIGHTED
 * from pywrapfst import UNWEIGHTED
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_NOT_O_LABEL_SORTED);
  __Pyx_GIVEREF(__pyx_n_s_NOT_O_LABEL_SORTED);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_NOT_O_LABEL_SORTED);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_NOT_O_LABEL_SORTED); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NOT_O_LABEL_SORTED, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2344
 * from pywrapfst import O_LABEL_SORTED
 * from pywrapfst import NOT_O_LABEL_SORTED
 * from pywrapfst import WEIGHTED             # <<<<<<<<<<<<<<
 * from pywrapfst import UNWEIGHTED
 * from pywrapfst import CYCLIC
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_WEIGHTED);
  __Pyx_GIVEREF(__pyx_n_s_WEIGHTED);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_WEIGHTED);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_WEIGHTED); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WEIGHTED, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2345
 * from pywrapfst import NOT_O_LABEL_SORTED
 * from pywrapfst import WEIGHTED
 * from pywrapfst import UNWEIGHTED             # <<<<<<<<<<<<<<
 * from pywrapfst import CYCLIC
 * from pywrapfst import ACYCLIC
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_UNWEIGHTED);
  __Pyx_GIVEREF(__pyx_n_s_UNWEIGHTED);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_UNWEIGHTED);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_UNWEIGHTED); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_UNWEIGHTED, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2346
 * from pywrapfst import WEIGHTED
 * from pywrapfst import UNWEIGHTED
 * from pywrapfst import CYCLIC             # <<<<<<<<<<<<<<
 * from pywrapfst import ACYCLIC
 * from pywrapfst import INITIAL_CYCLIC
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_CYCLIC);
  __Pyx_GIVEREF(__pyx_n_s_CYCLIC);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_CYCLIC);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_CYCLIC); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CYCLIC, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2347
 * from pywrapfst import UNWEIGHTED
 * from pywrapfst import CYCLIC
 * from pywrapfst import ACYCLIC             # <<<<<<<<<<<<<<
 * from pywrapfst import INITIAL_CYCLIC
 * from pywrapfst import INITIAL_ACYCLIC
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_ACYCLIC);
  __Pyx_GIVEREF(__pyx_n_s_ACYCLIC);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_ACYCLIC);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_ACYCLIC); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ACYCLIC, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2348
 * from pywrapfst import CYCLIC
 * from pywrapfst import ACYCLIC
 * from pywrapfst import INITIAL_CYCLIC             # <<<<<<<<<<<<<<
 * from pywrapfst import INITIAL_ACYCLIC
 * from pywrapfst import TOP_SORTED
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_INITIAL_CYCLIC);
  __Pyx_GIVEREF(__pyx_n_s_INITIAL_CYCLIC);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_INITIAL_CYCLIC);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_INITIAL_CYCLIC); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INITIAL_CYCLIC, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2349
 * from pywrapfst import ACYCLIC
 * from pywrapfst import INITIAL_CYCLIC
 * from pywrapfst import INITIAL_ACYCLIC             # <<<<<<<<<<<<<<
 * from pywrapfst import TOP_SORTED
 * from pywrapfst import NOT_TOP_SORTED
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_INITIAL_ACYCLIC);
  __Pyx_GIVEREF(__pyx_n_s_INITIAL_ACYCLIC);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_INITIAL_ACYCLIC);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_INITIAL_ACYCLIC); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INITIAL_ACYCLIC, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2350
 * from pywrapfst import INITIAL_CYCLIC
 * from pywrapfst import INITIAL_ACYCLIC
 * from pywrapfst import TOP_SORTED             # <<<<<<<<<<<<<<
 * from pywrapfst import NOT_TOP_SORTED
 * from pywrapfst import ACCESSIBLE
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_TOP_SORTED);
  __Pyx_GIVEREF(__pyx_n_s_TOP_SORTED);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_TOP_SORTED);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_TOP_SORTED); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TOP_SORTED, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2351
 * from pywrapfst import INITIAL_ACYCLIC
 * from pywrapfst import TOP_SORTED
 * from pywrapfst import NOT_TOP_SORTED             # <<<<<<<<<<<<<<
 * from pywrapfst import ACCESSIBLE
 * from pywrapfst import NOT_ACCESSIBLE
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_NOT_TOP_SORTED);
  __Pyx_GIVEREF(__pyx_n_s_NOT_TOP_SORTED);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_NOT_TOP_SORTED);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_NOT_TOP_SORTED); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NOT_TOP_SORTED, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2352
 * from pywrapfst import TOP_SORTED
 * from pywrapfst import NOT_TOP_SORTED
 * from pywrapfst import ACCESSIBLE             # <<<<<<<<<<<<<<
 * from pywrapfst import NOT_ACCESSIBLE
 * from pywrapfst import COACCESSIBLE
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_ACCESSIBLE);
  __Pyx_GIVEREF(__pyx_n_s_ACCESSIBLE);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_ACCESSIBLE);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ACCESSIBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ACCESSIBLE, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2353
 * from pywrapfst import NOT_TOP_SORTED
 * from pywrapfst import ACCESSIBLE
 * from pywrapfst import NOT_ACCESSIBLE             # <<<<<<<<<<<<<<
 * from pywrapfst import COACCESSIBLE
 * from pywrapfst import NOT_COACCESSIBLE
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_NOT_ACCESSIBLE);
  __Pyx_GIVEREF(__pyx_n_s_NOT_ACCESSIBLE);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_NOT_ACCESSIBLE);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_NOT_ACCESSIBLE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NOT_ACCESSIBLE, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2354
 * from pywrapfst import ACCESSIBLE
 * from pywrapfst import NOT_ACCESSIBLE
 * from pywrapfst import COACCESSIBLE             # <<<<<<<<<<<<<<
 * from pywrapfst import NOT_COACCESSIBLE
 * from pywrapfst import STRING
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_COACCESSIBLE);
  __Pyx_GIVEREF(__pyx_n_s_COACCESSIBLE);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_COACCESSIBLE);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_COACCESSIBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COACCESSIBLE, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2355
 * from pywrapfst import NOT_ACCESSIBLE
 * from pywrapfst import COACCESSIBLE
 * from pywrapfst import NOT_COACCESSIBLE             # <<<<<<<<<<<<<<
 * from pywrapfst import STRING
 * from pywrapfst import NOT_STRING
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_NOT_COACCESSIBLE);
  __Pyx_GIVEREF(__pyx_n_s_NOT_COACCESSIBLE);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_NOT_COACCESSIBLE);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_NOT_COACCESSIBLE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NOT_COACCESSIBLE, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2356
 * from pywrapfst import COACCESSIBLE
 * from pywrapfst import NOT_COACCESSIBLE
 * from pywrapfst import STRING             # <<<<<<<<<<<<<<
 * from pywrapfst import NOT_STRING
 * from pywrapfst import WEIGHTED_CYCLES
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_STRING);
  __Pyx_GIVEREF(__pyx_n_s_STRING);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_STRING);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_STRING); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_STRING, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2357
 * from pywrapfst import NOT_COACCESSIBLE
 * from pywrapfst import STRING
 * from pywrapfst import NOT_STRING             # <<<<<<<<<<<<<<
 * from pywrapfst import WEIGHTED_CYCLES
 * from pywrapfst import UNWEIGHTED_CYCLES
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_NOT_STRING);
  __Pyx_GIVEREF(__pyx_n_s_NOT_STRING);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_NOT_STRING);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_NOT_STRING); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NOT_STRING, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2358
 * from pywrapfst import STRING
 * from pywrapfst import NOT_STRING
 * from pywrapfst import WEIGHTED_CYCLES             # <<<<<<<<<<<<<<
 * from pywrapfst import UNWEIGHTED_CYCLES
 * from pywrapfst import NULL_PROPERTIES
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_WEIGHTED_CYCLES);
  __Pyx_GIVEREF(__pyx_n_s_WEIGHTED_CYCLES);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_WEIGHTED_CYCLES);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_WEIGHTED_CYCLES); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WEIGHTED_CYCLES, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2359
 * from pywrapfst import NOT_STRING
 * from pywrapfst import WEIGHTED_CYCLES
 * from pywrapfst import UNWEIGHTED_CYCLES             # <<<<<<<<<<<<<<
 * from pywrapfst import NULL_PROPERTIES
 * from pywrapfst import COPY_PROPERTIES
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_UNWEIGHTED_CYCLES);
  __Pyx_GIVEREF(__pyx_n_s_UNWEIGHTED_CYCLES);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_UNWEIGHTED_CYCLES);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_UNWEIGHTED_CYCLES); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_UNWEIGHTED_CYCLES, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2360
 * from pywrapfst import WEIGHTED_CYCLES
 * from pywrapfst import UNWEIGHTED_CYCLES
 * from pywrapfst import NULL_PROPERTIES             # <<<<<<<<<<<<<<
 * from pywrapfst import COPY_PROPERTIES
 * from pywrapfst import INTRINSIC_PROPERTIES
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_NULL_PROPERTIES);
  __Pyx_GIVEREF(__pyx_n_s_NULL_PROPERTIES);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_NULL_PROPERTIES);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_NULL_PROPERTIES); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NULL_PROPERTIES, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2361
 * from pywrapfst import UNWEIGHTED_CYCLES
 * from pywrapfst import NULL_PROPERTIES
 * from pywrapfst import COPY_PROPERTIES             # <<<<<<<<<<<<<<
 * from pywrapfst import INTRINSIC_PROPERTIES
 * from pywrapfst import EXTRINSIC_PROPERTIES
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_COPY_PROPERTIES);
  __Pyx_GIVEREF(__pyx_n_s_COPY_PROPERTIES);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_COPY_PROPERTIES);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_COPY_PROPERTIES); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COPY_PROPERTIES, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2362
 * from pywrapfst import NULL_PROPERTIES
 * from pywrapfst import COPY_PROPERTIES
 * from pywrapfst import INTRINSIC_PROPERTIES             # <<<<<<<<<<<<<<
 * from pywrapfst import EXTRINSIC_PROPERTIES
 * from pywrapfst import SET_START_PROPERTIES
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_INTRINSIC_PROPERTIES);
  __Pyx_GIVEREF(__pyx_n_s_INTRINSIC_PROPERTIES);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_INTRINSIC_PROPERTIES);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_INTRINSIC_PROPERTIES); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INTRINSIC_PROPERTIES, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2363
 * from pywrapfst import COPY_PROPERTIES
 * from pywrapfst import INTRINSIC_PROPERTIES
 * from pywrapfst import EXTRINSIC_PROPERTIES             # <<<<<<<<<<<<<<
 * from pywrapfst import SET_START_PROPERTIES
 * from pywrapfst import SET_FINAL_PROPERTIES
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_EXTRINSIC_PROPERTIES);
  __Pyx_GIVEREF(__pyx_n_s_EXTRINSIC_PROPERTIES);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_EXTRINSIC_PROPERTIES);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_EXTRINSIC_PROPERTIES); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_EXTRINSIC_PROPERTIES, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2364
 * from pywrapfst import INTRINSIC_PROPERTIES
 * from pywrapfst import EXTRINSIC_PROPERTIES
 * from pywrapfst import SET_START_PROPERTIES             # <<<<<<<<<<<<<<
 * from pywrapfst import SET_FINAL_PROPERTIES
 * from pywrapfst import ADD_STATE_PROPERTIES
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_SET_START_PROPERTIES);
  __Pyx_GIVEREF(__pyx_n_s_SET_START_PROPERTIES);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_SET_START_PROPERTIES);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_SET_START_PROPERTIES); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SET_START_PROPERTIES, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2365
 * from pywrapfst import EXTRINSIC_PROPERTIES
 * from pywrapfst import SET_START_PROPERTIES
 * from pywrapfst import SET_FINAL_PROPERTIES             # <<<<<<<<<<<<<<
 * from pywrapfst import ADD_STATE_PROPERTIES
 * from pywrapfst import ADD_ARC_PROPERTIES
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_SET_FINAL_PROPERTIES);
  __Pyx_GIVEREF(__pyx_n_s_SET_FINAL_PROPERTIES);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_SET_FINAL_PROPERTIES);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_SET_FINAL_PROPERTIES); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SET_FINAL_PROPERTIES, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2366
 * from pywrapfst import SET_START_PROPERTIES
 * from pywrapfst import SET_FINAL_PROPERTIES
 * from pywrapfst import ADD_STATE_PROPERTIES             # <<<<<<<<<<<<<<
 * from pywrapfst import ADD_ARC_PROPERTIES
 * from pywrapfst import SET_ARC_PROPERTIES
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_ADD_STATE_PROPERTIES);
  __Pyx_GIVEREF(__pyx_n_s_ADD_STATE_PROPERTIES);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_ADD_STATE_PROPERTIES);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ADD_STATE_PROPERTIES); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ADD_STATE_PROPERTIES, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2367
 * from pywrapfst import SET_FINAL_PROPERTIES
 * from pywrapfst import ADD_STATE_PROPERTIES
 * from pywrapfst import ADD_ARC_PROPERTIES             # <<<<<<<<<<<<<<
 * from pywrapfst import SET_ARC_PROPERTIES
 * from pywrapfst import DELETE_STATE_PROPERTIES
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2367; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_ADD_ARC_PROPERTIES);
  __Pyx_GIVEREF(__pyx_n_s_ADD_ARC_PROPERTIES);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_ADD_ARC_PROPERTIES);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2367; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_ADD_ARC_PROPERTIES); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2367; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ADD_ARC_PROPERTIES, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2367; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2368
 * from pywrapfst import ADD_STATE_PROPERTIES
 * from pywrapfst import ADD_ARC_PROPERTIES
 * from pywrapfst import SET_ARC_PROPERTIES             # <<<<<<<<<<<<<<
 * from pywrapfst import DELETE_STATE_PROPERTIES
 * from pywrapfst import DELETE_ARC_PROPERTIES
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_SET_ARC_PROPERTIES);
  __Pyx_GIVEREF(__pyx_n_s_SET_ARC_PROPERTIES);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_SET_ARC_PROPERTIES);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_SET_ARC_PROPERTIES); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SET_ARC_PROPERTIES, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2369
 * from pywrapfst import ADD_ARC_PROPERTIES
 * from pywrapfst import SET_ARC_PROPERTIES
 * from pywrapfst import DELETE_STATE_PROPERTIES             # <<<<<<<<<<<<<<
 * from pywrapfst import DELETE_ARC_PROPERTIES
 * from pywrapfst import STATE_SORT_PROPERTIES
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_DELETE_STATE_PROPERTIES);
  __Pyx_GIVEREF(__pyx_n_s_DELETE_STATE_PROPERTIES);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_DELETE_STATE_PROPERTIES);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_DELETE_STATE_PROPERTIES); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DELETE_STATE_PROPERTIES, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2370
 * from pywrapfst import SET_ARC_PROPERTIES
 * from pywrapfst import DELETE_STATE_PROPERTIES
 * from pywrapfst import DELETE_ARC_PROPERTIES             # <<<<<<<<<<<<<<
 * from pywrapfst import STATE_SORT_PROPERTIES
 * from pywrapfst import ARC_SORT_PROPERTIES
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_DELETE_ARC_PROPERTIES);
  __Pyx_GIVEREF(__pyx_n_s_DELETE_ARC_PROPERTIES);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_DELETE_ARC_PROPERTIES);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_DELETE_ARC_PROPERTIES); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DELETE_ARC_PROPERTIES, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2371
 * from pywrapfst import DELETE_STATE_PROPERTIES
 * from pywrapfst import DELETE_ARC_PROPERTIES
 * from pywrapfst import STATE_SORT_PROPERTIES             # <<<<<<<<<<<<<<
 * from pywrapfst import ARC_SORT_PROPERTIES
 * from pywrapfst import \
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_STATE_SORT_PROPERTIES);
  __Pyx_GIVEREF(__pyx_n_s_STATE_SORT_PROPERTIES);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_STATE_SORT_PROPERTIES);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_STATE_SORT_PROPERTIES); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_STATE_SORT_PROPERTIES, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2372
 * from pywrapfst import DELETE_ARC_PROPERTIES
 * from pywrapfst import STATE_SORT_PROPERTIES
 * from pywrapfst import ARC_SORT_PROPERTIES             # <<<<<<<<<<<<<<
 * from pywrapfst import \
 *     I_LABEL_INVARIANT_PROPERTIES
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_ARC_SORT_PROPERTIES);
  __Pyx_GIVEREF(__pyx_n_s_ARC_SORT_PROPERTIES);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_ARC_SORT_PROPERTIES);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ARC_SORT_PROPERTIES); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ARC_SORT_PROPERTIES, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2374
 * from pywrapfst import ARC_SORT_PROPERTIES
 * from pywrapfst import \
 *     I_LABEL_INVARIANT_PROPERTIES             # <<<<<<<<<<<<<<
 * from pywrapfst import \
 *     O_LABEL_INVARIANT_PROPERTIES
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_I_LABEL_INVARIANT_PROPERTIES);
  __Pyx_GIVEREF(__pyx_n_s_I_LABEL_INVARIANT_PROPERTIES);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_I_LABEL_INVARIANT_PROPERTIES);

  /* "pynini.pyx":2373
 * from pywrapfst import STATE_SORT_PROPERTIES
 * from pywrapfst import ARC_SORT_PROPERTIES
 * from pywrapfst import \             # <<<<<<<<<<<<<<
 *     I_LABEL_INVARIANT_PROPERTIES
 * from pywrapfst import \
 */
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_I_LABEL_INVARIANT_PROPERTIES); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_I_LABEL_INVARIANT_PROPERTIES, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2376
 *     I_LABEL_INVARIANT_PROPERTIES
 * from pywrapfst import \
 *     O_LABEL_INVARIANT_PROPERTIES             # <<<<<<<<<<<<<<
 * from pywrapfst import \
 *     WEIGHT_INVARIANT_PROPERTIES
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2376; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_O_LABEL_INVARIANT_PROPERTIES);
  __Pyx_GIVEREF(__pyx_n_s_O_LABEL_INVARIANT_PROPERTIES);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_O_LABEL_INVARIANT_PROPERTIES);

  /* "pynini.pyx":2375
 * from pywrapfst import \
 *     I_LABEL_INVARIANT_PROPERTIES
 * from pywrapfst import \             # <<<<<<<<<<<<<<
 *     O_LABEL_INVARIANT_PROPERTIES
 * from pywrapfst import \
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_O_LABEL_INVARIANT_PROPERTIES); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_O_LABEL_INVARIANT_PROPERTIES, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2376; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2378
 *     O_LABEL_INVARIANT_PROPERTIES
 * from pywrapfst import \
 *     WEIGHT_INVARIANT_PROPERTIES             # <<<<<<<<<<<<<<
 * from pywrapfst import \
 *     ADD_SUPERFINAL_PROPERTIES
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_WEIGHT_INVARIANT_PROPERTIES);
  __Pyx_GIVEREF(__pyx_n_s_WEIGHT_INVARIANT_PROPERTIES);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_WEIGHT_INVARIANT_PROPERTIES);

  /* "pynini.pyx":2377
 * from pywrapfst import \
 *     O_LABEL_INVARIANT_PROPERTIES
 * from pywrapfst import \             # <<<<<<<<<<<<<<
 *     WEIGHT_INVARIANT_PROPERTIES
 * from pywrapfst import \
 */
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_WEIGHT_INVARIANT_PROPERTIES); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WEIGHT_INVARIANT_PROPERTIES, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2380
 *     WEIGHT_INVARIANT_PROPERTIES
 * from pywrapfst import \
 *     ADD_SUPERFINAL_PROPERTIES             # <<<<<<<<<<<<<<
 * from pywrapfst import \
 *     RM_SUPERFINAL_PROPERTIES
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_ADD_SUPERFINAL_PROPERTIES);
  __Pyx_GIVEREF(__pyx_n_s_ADD_SUPERFINAL_PROPERTIES);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_ADD_SUPERFINAL_PROPERTIES);

  /* "pynini.pyx":2379
 * from pywrapfst import \
 *     WEIGHT_INVARIANT_PROPERTIES
 * from pywrapfst import \             # <<<<<<<<<<<<<<
 *     ADD_SUPERFINAL_PROPERTIES
 * from pywrapfst import \
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ADD_SUPERFINAL_PROPERTIES); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ADD_SUPERFINAL_PROPERTIES, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2382
 *     ADD_SUPERFINAL_PROPERTIES
 * from pywrapfst import \
 *     RM_SUPERFINAL_PROPERTIES             # <<<<<<<<<<<<<<
 * from pywrapfst import BINARY_PROPERTIES
 * from pywrapfst import TRINARY_PROPERTIES
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_RM_SUPERFINAL_PROPERTIES);
  __Pyx_GIVEREF(__pyx_n_s_RM_SUPERFINAL_PROPERTIES);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_RM_SUPERFINAL_PROPERTIES);

  /* "pynini.pyx":2381
 * from pywrapfst import \
 *     ADD_SUPERFINAL_PROPERTIES
 * from pywrapfst import \             # <<<<<<<<<<<<<<
 *     RM_SUPERFINAL_PROPERTIES
 * from pywrapfst import BINARY_PROPERTIES
 */
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_RM_SUPERFINAL_PROPERTIES); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_RM_SUPERFINAL_PROPERTIES, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2383
 * from pywrapfst import \
 *     RM_SUPERFINAL_PROPERTIES
 * from pywrapfst import BINARY_PROPERTIES             # <<<<<<<<<<<<<<
 * from pywrapfst import TRINARY_PROPERTIES
 * from pywrapfst import POS_TRINARY_PROPERTIES
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_BINARY_PROPERTIES);
  __Pyx_GIVEREF(__pyx_n_s_BINARY_PROPERTIES);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_BINARY_PROPERTIES);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_BINARY_PROPERTIES); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BINARY_PROPERTIES, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2384
 *     RM_SUPERFINAL_PROPERTIES
 * from pywrapfst import BINARY_PROPERTIES
 * from pywrapfst import TRINARY_PROPERTIES             # <<<<<<<<<<<<<<
 * from pywrapfst import POS_TRINARY_PROPERTIES
 * from pywrapfst import NEG_TRINARY_PROPERTIES
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2384; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_TRINARY_PROPERTIES);
  __Pyx_GIVEREF(__pyx_n_s_TRINARY_PROPERTIES);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_TRINARY_PROPERTIES);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2384; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_TRINARY_PROPERTIES); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2384; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TRINARY_PROPERTIES, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2384; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2385
 * from pywrapfst import BINARY_PROPERTIES
 * from pywrapfst import TRINARY_PROPERTIES
 * from pywrapfst import POS_TRINARY_PROPERTIES             # <<<<<<<<<<<<<<
 * from pywrapfst import NEG_TRINARY_PROPERTIES
 * from pywrapfst import FST_PROPERTIES
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_POS_TRINARY_PROPERTIES);
  __Pyx_GIVEREF(__pyx_n_s_POS_TRINARY_PROPERTIES);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_POS_TRINARY_PROPERTIES);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_POS_TRINARY_PROPERTIES); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_POS_TRINARY_PROPERTIES, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2386
 * from pywrapfst import TRINARY_PROPERTIES
 * from pywrapfst import POS_TRINARY_PROPERTIES
 * from pywrapfst import NEG_TRINARY_PROPERTIES             # <<<<<<<<<<<<<<
 * from pywrapfst import FST_PROPERTIES
 * 
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_NEG_TRINARY_PROPERTIES);
  __Pyx_GIVEREF(__pyx_n_s_NEG_TRINARY_PROPERTIES);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_NEG_TRINARY_PROPERTIES);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_NEG_TRINARY_PROPERTIES); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NEG_TRINARY_PROPERTIES, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2387
 * from pywrapfst import POS_TRINARY_PROPERTIES
 * from pywrapfst import NEG_TRINARY_PROPERTIES
 * from pywrapfst import FST_PROPERTIES             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_FST_PROPERTIES);
  __Pyx_GIVEREF(__pyx_n_s_FST_PROPERTIES);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_FST_PROPERTIES);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_FST_PROPERTIES); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FST_PROPERTIES, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2393
 * 
 * 
 * a = acceptor             # <<<<<<<<<<<<<<
 * t = transducer
 * u = union
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_acceptor); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_a, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2394
 * 
 * a = acceptor
 * t = transducer             # <<<<<<<<<<<<<<
 * u = union
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_transducer); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_t, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2395
 * a = acceptor
 * t = transducer
 * u = union             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_union); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_u, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2403
 * 
 * 
 * def _copy_patch(fnc):             # <<<<<<<<<<<<<<
 *   # The junk in the `functools.wraps` decorator is due to a long-standing bug
 *   # in Python 2.7 (https://bugs.python.org/issue3445).
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6pynini_47_copy_patch, NULL, __pyx_n_s_pynini); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_copy_patch, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2414
 * 
 * 
 * arcsort = _copy_patch(Fst.arcsort)             # <<<<<<<<<<<<<<
 * closure = _copy_patch(Fst.closure)
 * concat = _copy_patch(Fst.concat)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_copy_patch); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_n_s_arcsort); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_arcsort, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2415
 * 
 * arcsort = _copy_patch(Fst.arcsort)
 * closure = _copy_patch(Fst.closure)             # <<<<<<<<<<<<<<
 * concat = _copy_patch(Fst.concat)
 * connect = _copy_patch(Fst.connect)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_copy_patch); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_n_s_closure); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_closure, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2416
 * arcsort = _copy_patch(Fst.arcsort)
 * closure = _copy_patch(Fst.closure)
 * concat = _copy_patch(Fst.concat)             # <<<<<<<<<<<<<<
 * connect = _copy_patch(Fst.connect)
 * decode = _copy_patch(Fst.decode)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_copy_patch); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2416; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_n_s_concat); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2416; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2416; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2416; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6); __pyx_t_6 = NULL;
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2416; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_concat, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2416; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2417
 * closure = _copy_patch(Fst.closure)
 * concat = _copy_patch(Fst.concat)
 * connect = _copy_patch(Fst.connect)             # <<<<<<<<<<<<<<
 * decode = _copy_patch(Fst.decode)
 * encode = _copy_patch(Fst.encode)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_copy_patch); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_n_s_connect); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_connect, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2418
 * concat = _copy_patch(Fst.concat)
 * connect = _copy_patch(Fst.connect)
 * decode = _copy_patch(Fst.decode)             # <<<<<<<<<<<<<<
 * encode = _copy_patch(Fst.encode)
 * invert = _copy_patch(Fst.invert)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_copy_patch); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_n_s_decode); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_decode, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2419
 * connect = _copy_patch(Fst.connect)
 * decode = _copy_patch(Fst.decode)
 * encode = _copy_patch(Fst.encode)             # <<<<<<<<<<<<<<
 * invert = _copy_patch(Fst.invert)
 * minimize = _copy_patch(Fst.minimize)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_copy_patch); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6); __pyx_t_6 = NULL;
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_encode, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2420
 * decode = _copy_patch(Fst.decode)
 * encode = _copy_patch(Fst.encode)
 * invert = _copy_patch(Fst.invert)             # <<<<<<<<<<<<<<
 * minimize = _copy_patch(Fst.minimize)
 * optimize = _copy_patch(Fst.optimize)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_copy_patch); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_n_s_invert); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_invert, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2421
 * encode = _copy_patch(Fst.encode)
 * invert = _copy_patch(Fst.invert)
 * minimize = _copy_patch(Fst.minimize)             # <<<<<<<<<<<<<<
 * optimize = _copy_patch(Fst.optimize)
 * project = _copy_patch(Fst.project)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_copy_patch); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2421; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_n_s_minimize); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2421; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2421; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2421; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2421; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_minimize, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2421; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2422
 * invert = _copy_patch(Fst.invert)
 * minimize = _copy_patch(Fst.minimize)
 * optimize = _copy_patch(Fst.optimize)             # <<<<<<<<<<<<<<
 * project = _copy_patch(Fst.project)
 * relabel_pairs = _copy_patch(Fst.relabel_pairs)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_copy_patch); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_n_s_optimize); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6); __pyx_t_6 = NULL;
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_optimize, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2423
 * minimize = _copy_patch(Fst.minimize)
 * optimize = _copy_patch(Fst.optimize)
 * project = _copy_patch(Fst.project)             # <<<<<<<<<<<<<<
 * relabel_pairs = _copy_patch(Fst.relabel_pairs)
 * relabel_tables = _copy_patch(Fst.relabel_tables)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_copy_patch); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_n_s_project); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_project, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2424
 * optimize = _copy_patch(Fst.optimize)
 * project = _copy_patch(Fst.project)
 * relabel_pairs = _copy_patch(Fst.relabel_pairs)             # <<<<<<<<<<<<<<
 * relabel_tables = _copy_patch(Fst.relabel_tables)
 * reweight = _copy_patch(Fst.reweight)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_copy_patch); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2424; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_n_s_relabel_pairs); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2424; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2424; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2424; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2424; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_relabel_pairs, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2424; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2425
 * project = _copy_patch(Fst.project)
 * relabel_pairs = _copy_patch(Fst.relabel_pairs)
 * relabel_tables = _copy_patch(Fst.relabel_tables)             # <<<<<<<<<<<<<<
 * reweight = _copy_patch(Fst.reweight)
 * topsort = _copy_patch(Fst.topsort)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_copy_patch); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_n_s_relabel_tables); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6); __pyx_t_6 = NULL;
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_relabel_tables, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2426
 * relabel_pairs = _copy_patch(Fst.relabel_pairs)
 * relabel_tables = _copy_patch(Fst.relabel_tables)
 * reweight = _copy_patch(Fst.reweight)             # <<<<<<<<<<<<<<
 * topsort = _copy_patch(Fst.topsort)
 * 
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_copy_patch); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2426; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_n_s_reweight); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2426; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2426; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2426; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2426; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reweight, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2426; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2427
 * relabel_tables = _copy_patch(Fst.relabel_tables)
 * reweight = _copy_patch(Fst.reweight)
 * topsort = _copy_patch(Fst.topsort)             # <<<<<<<<<<<<<<
 * 
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_copy_patch); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_n_s_topsort); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_topsort, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":1
 * #cython: nonecheck=True             # <<<<<<<<<<<<<<
 * # Licensed under the Apache License, Version 2.0 (the "License");
 * # you may not use this file except in compliance with the License.
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init pynini", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init pynini");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject* args = PyTuple_Pack(1, arg);
    return (likely(args)) ? __Pyx_PyObject_Call(func, args, NULL) : NULL;
}
#endif

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
#else
    PyErr_GetExcInfo(type, value, tb);
#endif
}
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(type, value, tb);
#endif
}

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_COMPILING_IN_CPYTHON
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (PyErr_ExceptionMatches(PyExc_OverflowError))
                        PyErr_Clear();
                    else
                        return NULL;
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_COMPILING_IN_CPYTHON
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(__pyx_CyFunctionObject, func.m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyMem_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
#if CYTHON_COMPILING_IN_PYPY
static PyObject * __Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    PyObject *self = f->m_self;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0 = PySequence_ITEM(arg, 0);
                if (unlikely(!arg0)) return NULL;
                result = (*meth)(self, arg0);
                Py_DECREF(arg0);
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
#else
static PyObject * __Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
	return PyCFunction_Call(func, arg, kw);
}
#endif
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_Call,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
#if !CYTHON_COMPILING_IN_PYPY
    __pyx_CyFunctionType_type.tp_call = PyCFunction_Call;
#endif
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (__pyx_CyFunctionType == NULL) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyMem_Malloc(size);
    if (!m->defaults)
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto bad;
#if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *function = PyMethod_GET_FUNCTION(method);
            result = __Pyx_PyObject_CallOneArg(function, self);
            Py_DECREF(method);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

static CYTHON_INLINE int __Pyx_unpack_tuple2(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                             int is_tuple, int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    if (!is_tuple && unlikely(!PyTuple_Check(tuple))) {
        iternextfunc iternext;
        iter = PyObject_GetIter(tuple);
        if (unlikely(!iter)) goto bad;
        if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
        iternext = Py_TYPE(iter)->tp_iternext;
        value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
        value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
        if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
        Py_DECREF(iter);
    } else {
        if (!has_known_size && unlikely(PyTuple_GET_SIZE(tuple) != 2)) {
            __Pyx_UnpackTupleError(tuple, 2);
            goto bad;
        }
#if CYTHON_COMPILING_IN_PYPY
        value1 = PySequence_ITEM(tuple, 0);
        if (unlikely(!value1)) goto bad;
        value2 = PySequence_ITEM(tuple, 1);
        if (unlikely(!value2)) goto bad;
#else
        value1 = PyTuple_GET_ITEM(tuple, 0);
        value2 = PyTuple_GET_ITEM(tuple, 1);
        Py_INCREF(value1);
        Py_INCREF(value2);
#endif
        if (decref_tuple) { Py_DECREF(tuple); }
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
#if !CYTHON_COMPILING_IN_PYPY
    if (is_dict) {
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
    }
#endif
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#endif
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

static CYTHON_INLINE PyObject *__Pyx_PyIter_Next2(PyObject* iterator, PyObject* defval) {
    PyObject* next;
    iternextfunc iternext = Py_TYPE(iterator)->tp_iternext;
#if CYTHON_COMPILING_IN_CPYTHON
    if (unlikely(!iternext)) {
#else
    if (unlikely(!iternext) || unlikely(!PyIter_Check(iterator))) {
#endif
        PyErr_Format(PyExc_TypeError,
            "%.200s object is not an iterator", Py_TYPE(iterator)->tp_name);
        return NULL;
    }
    next = iternext(iterator);
    if (likely(next))
        return next;
#if CYTHON_COMPILING_IN_CPYTHON
#if PY_VERSION_HEX >= 0x02070000
    if (unlikely(iternext == &_PyObject_NextNotImplemented))
        return NULL;
#endif
#endif
    if (defval) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
            if (unlikely(exc_type != PyExc_StopIteration) &&
                    !PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))
                return NULL;
            PyErr_Clear();
        }
        Py_INCREF(defval);
        return defval;
    }
    if (!PyErr_Occurred())
        PyErr_SetNone(PyExc_StopIteration);
    return NULL;
}

static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_dealloc != current_tp_dealloc)
        type = type->tp_base;
    while (type && type->tp_dealloc == current_tp_dealloc)
        type = type->tp_base;
    if (type)
        type->tp_dealloc(obj);
}

static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result)
        result = __Pyx_GetModuleGlobalName(name);
    return result;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
#endif

static CYTHON_INLINE int32_t __Pyx_PyInt_As_int32_t(PyObject *x) {
    const int32_t neg_one = (int32_t) -1, const_zero = (int32_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int32_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int32_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int32_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int32_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int32_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(int32_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(int32_t) >= 2 * PyLong_SHIFT) {
                            return (int32_t) (((((int32_t)digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int32_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(int32_t) >= 3 * PyLong_SHIFT) {
                            return (int32_t) (((((((int32_t)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int32_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(int32_t) >= 4 * PyLong_SHIFT) {
                            return (int32_t) (((((((((int32_t)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int32_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int32_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int32_t, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int32_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int32_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int32_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int32_t, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(int32_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int32_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(int32_t) - 1 > 2 * PyLong_SHIFT) {
                            return (int32_t) -(((((int32_t)digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int32_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(int32_t) - 1 > 2 * PyLong_SHIFT) {
                            return (int32_t) (((((int32_t)digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int32_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(int32_t) - 1 > 3 * PyLong_SHIFT) {
                            return (int32_t) -(((((((int32_t)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int32_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(int32_t) - 1 > 3 * PyLong_SHIFT) {
                            return (int32_t) (((((((int32_t)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int32_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(int32_t) - 1 > 4 * PyLong_SHIFT) {
                            return (int32_t) -(((((((((int32_t)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int32_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(int32_t) - 1 > 4 * PyLong_SHIFT) {
                            return (int32_t) (((((((((int32_t)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int32_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int32_t, long, PyLong_AsLong(x))
            } else if (sizeof(int32_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int32_t, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int32_t val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int32_t) -1;
        }
    } else {
        int32_t val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int32_t) -1;
        val = __Pyx_PyInt_As_int32_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int32_t");
    return (int32_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int32_t");
    return (int32_t) -1;
}

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) -(((((int)digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) -(((((((int)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) -(((((((((int)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

static CYTHON_INLINE int64_t __Pyx_PyInt_As_int64_t(PyObject *x) {
    const int64_t neg_one = (int64_t) -1, const_zero = (int64_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int64_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int64_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int64_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int64_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int64_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(int64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(int64_t) >= 2 * PyLong_SHIFT) {
                            return (int64_t) (((((int64_t)digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(int64_t) >= 3 * PyLong_SHIFT) {
                            return (int64_t) (((((((int64_t)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(int64_t) >= 4 * PyLong_SHIFT) {
                            return (int64_t) (((((((((int64_t)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int64_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int64_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int64_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int64_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int64_t, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(int64_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int64_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (int64_t) -(((((int64_t)digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (int64_t) (((((int64_t)digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (int64_t) -(((((((int64_t)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (int64_t) (((((((int64_t)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (int64_t) -(((((((((int64_t)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (int64_t) (((((((((int64_t)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int64_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, long, PyLong_AsLong(x))
            } else if (sizeof(int64_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int64_t val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int64_t) -1;
        }
    } else {
        int64_t val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int64_t) -1;
        val = __Pyx_PyInt_As_int64_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int64_t");
    return (int64_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int64_t");
    return (int64_t) -1;
}

static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) -(((((size_t)digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) -(((((((size_t)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) -(((((((((size_t)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int64_t(int64_t value) {
    const int64_t neg_one = (int64_t) -1, const_zero = (int64_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int64_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int64_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int64_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(int64_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int64_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int64_t),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_char(char value) {
    const char neg_one = (char) -1, const_zero = (char) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(char) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(char) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(char) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(char) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(char) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(char),
                                     little, !is_unsigned);
    }
}

static PyObject* __Pyx_Method_ClassMethod(PyObject *method) {
#if CYTHON_COMPILING_IN_PYPY
    if (PyObject_TypeCheck(method, &PyWrapperDescr_Type)) {
        return PyClassMethod_New(method);
    }
#else
    static PyTypeObject *methoddescr_type = NULL;
    if (methoddescr_type == NULL) {
       PyObject *meth = PyObject_GetAttrString((PyObject*)&PyList_Type, "append");
       if (!meth) return NULL;
       methoddescr_type = Py_TYPE(meth);
       Py_DECREF(meth);
    }
    if (PyObject_TypeCheck(method, methoddescr_type)) {
        PyMethodDescrObject *descr = (PyMethodDescrObject *)method;
        #if PY_VERSION_HEX < 0x03020000
        PyTypeObject *d_type = descr->d_type;
        #else
        PyTypeObject *d_type = descr->d_common.d_type;
        #endif
        return PyDescr_NewClassMethod(d_type, descr->d_method);
    }
#endif
    else if (PyMethod_Check(method)) {
        return PyClassMethod_New(PyMethod_GET_FUNCTION(method));
    }
    else if (PyCFunction_Check(method)) {
        return PyClassMethod_New(method);
    }
#ifdef __Pyx_CyFunction_USED
    else if (PyObject_TypeCheck(method, __pyx_CyFunctionType)) {
        return PyClassMethod_New(method);
    }
#endif
    PyErr_SetString(PyExc_TypeError,
                   "Class-level classmethod() can only be called on "
                   "a method_descriptor or instance method.");
    return NULL;
}

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) -(((((long)digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) -(((((((long)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) -(((((((((long)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
#else
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
#endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}

static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto bad;
#if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            args = PyTuple_New(2);
            if (unlikely(!args)) goto bad;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            Py_DECREF(method); method = NULL;
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
bad:
    Py_XDECREF(method);
    return result;
}

#include <structmember.h>
#include <frameobject.h>
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
#if 1 || PY_VERSION_HEX < 0x030300B0
static int __Pyx_PyGen_FetchStopIterationValue(PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
#if PY_VERSION_HEX >= 0x030300A0
        if (ev && Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
#endif
        if (!ev || !PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            if (!ev) {
                Py_INCREF(Py_None);
                ev = Py_None;
            } else if (PyTuple_Check(ev)) {
                if (PyTuple_GET_SIZE(ev) >= 1) {
                    PyObject *value;
#if CYTHON_COMPILING_IN_CPYTHON
                    value = PySequence_ITEM(ev, 0);
#else
                    value = PyTuple_GET_ITEM(ev, 0);
                    Py_INCREF(value);
#endif
                    Py_DECREF(ev);
                    ev = value;
                } else {
                    Py_INCREF(Py_None);
                    Py_DECREF(ev);
                    ev = Py_None;
                }
            }
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = ev;
            return 0;
        }
    } else if (!PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
#endif
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__pyx_CoroutineObject *self) {
    PyObject *exc_type = self->exc_type;
    PyObject *exc_value = self->exc_value;
    PyObject *exc_traceback = self->exc_traceback;
    self->exc_type = NULL;
    self->exc_value = NULL;
    self->exc_traceback = NULL;
    Py_XDECREF(exc_type);
    Py_XDECREF(exc_value);
    Py_XDECREF(exc_traceback);
}
static CYTHON_INLINE
int __Pyx_Coroutine_CheckRunning(__pyx_CoroutineObject *gen) {
    if (unlikely(gen->is_running)) {
        PyErr_SetString(PyExc_ValueError,
                        "generator already executing");
        return 1;
    }
    return 0;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value) {
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            PyErr_SetString(PyExc_TypeError,
                            "can't send non-None value to a "
                            "just-started generator");
            return NULL;
        }
    }
    if (unlikely(self->resume_label == -1)) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    if (value) {
#if CYTHON_COMPILING_IN_PYPY
#else
        if (self->exc_traceback) {
            PyThreadState *tstate = PyThreadState_GET();
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = tstate->frame;
        }
#endif
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(self);
    }
    self->is_running = 1;
    retval = self->body((PyObject *) self, value);
    self->is_running = 0;
    if (retval) {
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
#if CYTHON_COMPILING_IN_PYPY
#else
        if (self->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_CLEAR(f->f_back);
        }
#endif
    } else {
        __Pyx_Coroutine_ExceptionClear(self);
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(PyObject *retval) {
    if (unlikely(!retval && !PyErr_Occurred())) {
        PyErr_SetNone(PyExc_StopIteration);
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen_FetchStopIterationValue(&val);
    ret = __Pyx_Coroutine_SendEx(gen, val);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = PyIter_Next(yf);  // FIXME!
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value);
    }
    return __Pyx_Coroutine_MethodReturn(retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL);
    if (retval) {
        Py_DECREF(retval);
        PyErr_SetString(PyExc_RuntimeError,
                        "generator ignored GeneratorExit");
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (!raised_exception
        || raised_exception == PyExc_StopIteration
        || raised_exception == PyExc_GeneratorExit
        || PyErr_GivenExceptionMatches(raised_exception, PyExc_GeneratorExit)
        || PyErr_GivenExceptionMatches(raised_exception, PyExc_StopIteration))
    {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *typ;
    PyObject *tb = NULL;
    PyObject *val = NULL;
    PyObject *yf = gen->yieldfrom;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit)) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(__Pyx_Coroutine_SendEx(gen, NULL));
            goto throw_here;
        }
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Throw(yf, args);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Throw(yf, args);
        } else
        #endif
        {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            ret = PyObject_CallObject(meth, args);
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(__Pyx_Coroutine_SendEx(gen, NULL));
}
static int __Pyx_Coroutine_traverse(PyObject *self, visitproc visit, void *arg) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    Py_VISIT(gen->exc_type);
    Py_VISIT(gen->exc_value);
    Py_VISIT(gen->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    Py_CLEAR(gen->exc_type);
    Py_CLEAR(gen->exc_value);
    Py_CLEAR(gen->exc_traceback);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label > 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *res;
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    if (gen->resume_label <= 0)
        return ;
#if PY_VERSION_HEX < 0x030400a1
    assert(self->ob_refcnt == 0);
    self->ob_refcnt = 1;
#endif
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
    res = __Pyx_Coroutine_Close(self);
    if (res == NULL)
        PyErr_WriteUnraisable(self);
    else
        Py_DECREF(res);
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if PY_VERSION_HEX < 0x030400a1
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        self->ob_refcnt = refcnt;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self)
{
    Py_INCREF(self->gi_name);
    return self->gi_name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self)
{
    Py_INCREF(self->gi_qualname);
    return self->gi_qualname;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(PyTypeObject* type, __pyx_coroutine_body_t body,
                                                   PyObject *closure, PyObject *name, PyObject *qualname) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (gen == NULL)
        return NULL;
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->exc_type = NULL;
    gen->exc_value = NULL;
    gen->exc_traceback = NULL;
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    PyObject_GC_Track(gen);
    return gen;
}

static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (!abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_VERSION_HEX >= 0x03030000) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_VERSION_HEX >= 0x03030000) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_Coroutine_patch_module(
                module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
            );
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
    }
#else
    if (0) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if PY_VERSION_HEX >= 0x030400a1
    __Pyx_Coroutine_del,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = PyObject_GenericGetAttr;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

#ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
