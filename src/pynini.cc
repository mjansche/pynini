/* Generated by Cython 0.28.3 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_28_3"
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (0 && PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0; // PyThread_create_key reports success always
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif // TSS (Thread Specific Storage) API
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
  #define PyObject_Unicode             PyObject_Str
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__pynini
#define __PYX_HAVE_API__pynini
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <memory>
#include <utility>
#include <vector>
#include <string.h>
#include <string>
#include <stdint.h>
#include <stddef.h>
#include <time.h>
#include <iostream>
#include <fstream>
#include <sstream>
#include <fst/util.h>
#include <fst/fstlib.h>
#include <fst/script/fstscript.h>
#include <fst/script/getters.h>
#include <fst/extensions/far/far.h>
#include <fst/extensions/far/getters.h>
#include <fst/extensions/far/far-class.h>
#include <fst/extensions/mpdt/mpdtlib.h>
#include <fst/extensions/mpdt/mpdtscript.h>
#include <fst/extensions/mpdt/read_write_utils.h>
#include <fst/extensions/pdt/pdtlib.h>
#include <fst/extensions/pdt/getters.h>
#include <fst/extensions/pdt/pdtscript.h>
#include "cdrewrite.h"
#include "getters.h"
#include "crossproductscript.h"
#include "lenientlycomposescript.h"
#include "mergesymbols.h"
#include "mergesymbolsscript.h"
#include "optimizescript.h"
#include "repeatscript.h"
#include "pathsscript.h"
#include "stringcompile.h"
#include "stringcompilescript.h"
#include "stringmapscript.h"
#include "stringprintscript.h"
#include "stringtokentype.h"
#include "pynini_cdrewrite.h"
#include "pynini_replace.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING "utf8"
#define __Pyx_PyObject_FromString __Pyx_PyUnicode_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "pynini.pyx",
  "stringsource",
  "pywrapfst.pxd",
};

/* "basictypes.pxd":22
 * 
 * 
 * ctypedef int8_t int8             # <<<<<<<<<<<<<<
 * ctypedef int16_t int16
 * ctypedef int32_t int32
 */
typedef int8_t __pyx_t_10basictypes_int8;

/* "basictypes.pxd":23
 * 
 * ctypedef int8_t int8
 * ctypedef int16_t int16             # <<<<<<<<<<<<<<
 * ctypedef int32_t int32
 * ctypedef int64_t int64
 */
typedef int16_t __pyx_t_10basictypes_int16;

/* "basictypes.pxd":24
 * ctypedef int8_t int8
 * ctypedef int16_t int16
 * ctypedef int32_t int32             # <<<<<<<<<<<<<<
 * ctypedef int64_t int64
 * ctypedef uint8_t uint8
 */
typedef int32_t __pyx_t_10basictypes_int32;

/* "basictypes.pxd":25
 * ctypedef int16_t int16
 * ctypedef int32_t int32
 * ctypedef int64_t int64             # <<<<<<<<<<<<<<
 * ctypedef uint8_t uint8
 * ctypedef uint16_t uint16
 */
typedef int64_t __pyx_t_10basictypes_int64;

/* "basictypes.pxd":26
 * ctypedef int32_t int32
 * ctypedef int64_t int64
 * ctypedef uint8_t uint8             # <<<<<<<<<<<<<<
 * ctypedef uint16_t uint16
 * ctypedef uint32_t uint32
 */
typedef uint8_t __pyx_t_10basictypes_uint8;

/* "basictypes.pxd":27
 * ctypedef int64_t int64
 * ctypedef uint8_t uint8
 * ctypedef uint16_t uint16             # <<<<<<<<<<<<<<
 * ctypedef uint32_t uint32
 * ctypedef uint64_t uint64
 */
typedef uint16_t __pyx_t_10basictypes_uint16;

/* "basictypes.pxd":28
 * ctypedef uint8_t uint8
 * ctypedef uint16_t uint16
 * ctypedef uint32_t uint32             # <<<<<<<<<<<<<<
 * ctypedef uint64_t uint64
 */
typedef uint32_t __pyx_t_10basictypes_uint32;

/* "basictypes.pxd":29
 * ctypedef uint16_t uint16
 * ctypedef uint32_t uint32
 * ctypedef uint64_t uint64             # <<<<<<<<<<<<<<
 */
typedef uint64_t __pyx_t_10basictypes_uint64;

/*--- Type declarations ---*/
struct __pyx_obj_9pywrapfst_Weight;
struct __pyx_obj_9pywrapfst__SymbolTable;
struct __pyx_obj_9pywrapfst__EncodeMapperSymbolTable;
struct __pyx_obj_9pywrapfst__FstSymbolTable;
struct __pyx_obj_9pywrapfst__MutableSymbolTable;
struct __pyx_obj_9pywrapfst__MutableFstSymbolTable;
struct __pyx_obj_9pywrapfst_SymbolTable;
struct __pyx_obj_9pywrapfst_SymbolTableIterator;
struct __pyx_obj_9pywrapfst_EncodeMapper;
struct __pyx_obj_9pywrapfst__Fst;
struct __pyx_obj_9pywrapfst__MutableFst;
struct __pyx_obj_9pywrapfst_Arc;
struct __pyx_obj_9pywrapfst_ArcIterator;
struct __pyx_obj_9pywrapfst_MutableArcIterator;
struct __pyx_obj_9pywrapfst_StateIterator;
struct __pyx_obj_9pywrapfst_Compiler;
struct __pyx_obj_9pywrapfst_FarReader;
struct __pyx_obj_9pywrapfst_FarWriter;
struct __pyx_obj_6pynini_Fst;
struct __pyx_obj_6pynini_PdtParentheses;
struct __pyx_obj_6pynini_MPdtParentheses;
struct __pyx_obj_6pynini_StringPathIterator;
struct __pyx_obj_6pynini_Far;
struct __pyx_obj_6pynini___pyx_scope_struct___1arg_patch;
struct __pyx_obj_6pynini___pyx_scope_struct_1__shortestdistance_patch;
struct __pyx_obj_6pynini___pyx_scope_struct_2__compose_patch;
struct __pyx_obj_6pynini___pyx_scope_struct_3__difference_patch;
struct __pyx_obj_6pynini___pyx_scope_struct_4__comp_patch;
struct __pyx_obj_6pynini___pyx_scope_struct_5__comp_merge_patch;
struct __pyx_obj_6pynini___pyx_scope_struct_6___iter__;
struct __pyx_obj_6pynini___pyx_scope_struct_7___iter__;
struct __pyx_obj_6pynini___pyx_scope_struct_8_istrings;
struct __pyx_obj_6pynini___pyx_scope_struct_9_ostrings;
struct __pyx_obj_6pynini___pyx_scope_struct_10_weights;
struct __pyx_obj_6pynini___pyx_scope_struct_11__copy_patch;

/* "fst.pxd":496
 * 
 * 
 * ctypedef pair[int64, const FstClass *] LabelFstClassPair             # <<<<<<<<<<<<<<
 * 
 * ctypedef pair[int64, int64] LabelPair
 */
typedef std::pair<__pyx_t_10basictypes_int64,fst::script::FstClass const *>  __pyx_t_3fst_LabelFstClassPair;

/* "fst.pxd":498
 * ctypedef pair[int64, const FstClass *] LabelFstClassPair
 * 
 * ctypedef pair[int64, int64] LabelPair             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef std::pair<__pyx_t_10basictypes_int64,__pyx_t_10basictypes_int64>  __pyx_t_3fst_LabelPair;
struct __pyx_opt_args_9pywrapfst_tostring;
struct __pyx_opt_args_9pywrapfst_weight_tostring;
struct __pyx_opt_args_9pywrapfst_19_MutableSymbolTable_add_symbol;
struct __pyx_opt_args_9pywrapfst_4_Fst_draw;
struct __pyx_opt_args_9pywrapfst_4_Fst_text;
struct __pyx_opt_args_9pywrapfst_11_MutableFst__arcsort;
struct __pyx_opt_args_9pywrapfst_11_MutableFst__closure;
struct __pyx_opt_args_9pywrapfst_11_MutableFst__delete_arcs;
struct __pyx_opt_args_9pywrapfst_11_MutableFst__delete_states;
struct __pyx_opt_args_9pywrapfst_11_MutableFst__minimize;
struct __pyx_opt_args_9pywrapfst_11_MutableFst__project;
struct __pyx_opt_args_9pywrapfst_11_MutableFst__prune;
struct __pyx_opt_args_9pywrapfst_11_MutableFst__push;
struct __pyx_opt_args_9pywrapfst_11_MutableFst__relabel_pairs;
struct __pyx_opt_args_9pywrapfst_11_MutableFst__relabel_tables;
struct __pyx_opt_args_9pywrapfst_11_MutableFst__reweight;
struct __pyx_opt_args_9pywrapfst_11_MutableFst__rmepsilon;
struct __pyx_opt_args_9pywrapfst_11_MutableFst__set_final;
struct __pyx_opt_args_9pywrapfst__create_Fst;
struct __pyx_opt_args_9pywrapfst__map;
struct __pyx_opt_args_9pywrapfst_arcmap;
struct __pyx_opt_args_9pywrapfst_compose;
struct __pyx_opt_args_9pywrapfst_convert;
struct __pyx_opt_args_9pywrapfst_determinize;
struct __pyx_opt_args_9pywrapfst_difference;
struct __pyx_opt_args_9pywrapfst_disambiguate;
struct __pyx_opt_args_9pywrapfst_epsnormalize;
struct __pyx_opt_args_9pywrapfst_equal;
struct __pyx_opt_args_9pywrapfst_equivalent;
struct __pyx_opt_args_9pywrapfst_intersect;
struct __pyx_opt_args_9pywrapfst_isomorphic;
struct __pyx_opt_args_9pywrapfst_prune;
struct __pyx_opt_args_9pywrapfst_push;
struct __pyx_opt_args_9pywrapfst_randequivalent;
struct __pyx_opt_args_9pywrapfst_randgen;
struct __pyx_opt_args_9pywrapfst_replace;
struct __pyx_opt_args_9pywrapfst_reverse;
struct __pyx_opt_args_9pywrapfst__shortestdistance;
struct __pyx_opt_args_9pywrapfst_shortestpath;

/* "pywrapfst.pxd":40
 * 
 * 
 * cdef string tostring(data, encoding=?) except *             # <<<<<<<<<<<<<<
 * 
 * cdef string weight_tostring(data, encoding=?) except *
 */
struct __pyx_opt_args_9pywrapfst_tostring {
  int __pyx_n;
  PyObject *encoding;
};

/* "pywrapfst.pxd":42
 * cdef string tostring(data, encoding=?) except *
 * 
 * cdef string weight_tostring(data, encoding=?) except *             # <<<<<<<<<<<<<<
 * 
 * cdef fst.ComposeFilter _get_compose_filter(
 */
struct __pyx_opt_args_9pywrapfst_weight_tostring {
  int __pyx_n;
  PyObject *encoding;
};

/* "pywrapfst.pxd":98
 * # SymbolTable.
 * 
 * ctypedef fst.SymbolTable * SymbolTable_ptr             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef fst::SymbolTable *__pyx_t_9pywrapfst_SymbolTable_ptr;

/* "pywrapfst.pxd":138
 * cdef class _MutableSymbolTable(_SymbolTable):
 * 
 *   cpdef int64 add_symbol(self, symbol, int64 key=?)             # <<<<<<<<<<<<<<
 * 
 *   cpdef void add_table(self, _SymbolTable syms)
 */
struct __pyx_opt_args_9pywrapfst_19_MutableSymbolTable_add_symbol {
  int __pyx_n;
  __pyx_t_10basictypes_int64 key;
};

/* "pywrapfst.pxd":214
 * 
 * 
 * ctypedef fst.FstClass * FstClass_ptr             # <<<<<<<<<<<<<<
 * ctypedef fst.MutableFstClass * MutableFstClass_ptr
 * ctypedef fst.VectorFstClass * VectorFstClass_ptr
 */
typedef fst::script::FstClass *__pyx_t_9pywrapfst_FstClass_ptr;

/* "pywrapfst.pxd":215
 * 
 * ctypedef fst.FstClass * FstClass_ptr
 * ctypedef fst.MutableFstClass * MutableFstClass_ptr             # <<<<<<<<<<<<<<
 * ctypedef fst.VectorFstClass * VectorFstClass_ptr
 * 
 */
typedef fst::script::MutableFstClass *__pyx_t_9pywrapfst_MutableFstClass_ptr;

/* "pywrapfst.pxd":216
 * ctypedef fst.FstClass * FstClass_ptr
 * ctypedef fst.MutableFstClass * MutableFstClass_ptr
 * ctypedef fst.VectorFstClass * VectorFstClass_ptr             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef fst::script::VectorFstClass *__pyx_t_9pywrapfst_VectorFstClass_ptr;

/* "pywrapfst.pxd":229
 *   cpdef _Fst copy(self)
 * 
 *   cpdef void draw(self, filename, _SymbolTable isymbols=?,             # <<<<<<<<<<<<<<
 *                   _SymbolTable osymbols=?, SymbolTable ssymbols=?,
 *                   bool acceptor=?, title=?, double width=?,
 */
struct __pyx_opt_args_9pywrapfst_4_Fst_draw {
  int __pyx_n;
  struct __pyx_obj_9pywrapfst__SymbolTable *isymbols;
  struct __pyx_obj_9pywrapfst__SymbolTable *osymbols;
  struct __pyx_obj_9pywrapfst_SymbolTable *ssymbols;
  bool acceptor;
  PyObject *title;
  double width;
  double height;
  bool portrait;
  bool vertical;
  double ranksep;
  double nodesep;
  __pyx_t_10basictypes_int32 fontsize;
  __pyx_t_10basictypes_int32 precision;
  PyObject *float_format;
  bool show_weight_one;
};

/* "pywrapfst.pxd":257
 *   cpdef StateIterator states(self)
 * 
 *   cpdef string text(self, _SymbolTable isymbols=?, _SymbolTable osymbols=?,             # <<<<<<<<<<<<<<
 *                     _SymbolTable ssymbols=?, bool acceptor=?,
 *                     bool show_weight_one=?, missing_sym=?)
 */
struct __pyx_opt_args_9pywrapfst_4_Fst_text {
  int __pyx_n;
  struct __pyx_obj_9pywrapfst__SymbolTable *isymbols;
  struct __pyx_obj_9pywrapfst__SymbolTable *osymbols;
  struct __pyx_obj_9pywrapfst__SymbolTable *ssymbols;
  bool acceptor;
  bool show_weight_one;
  PyObject *missing_sym;
};

/* "pywrapfst.pxd":280
 *   cpdef int64 add_state(self) except *
 * 
 *   cdef void _arcsort(self, sort_type=?) except *             # <<<<<<<<<<<<<<
 * 
 *   cdef void _closure(self, bool closure_plus=?) except *
 */
struct __pyx_opt_args_9pywrapfst_11_MutableFst__arcsort {
  int __pyx_n;
  PyObject *sort_type;
};

/* "pywrapfst.pxd":282
 *   cdef void _arcsort(self, sort_type=?) except *
 * 
 *   cdef void _closure(self, bool closure_plus=?) except *             # <<<<<<<<<<<<<<
 * 
 *   cdef void _concat(self, _Fst ifst) except *
 */
struct __pyx_opt_args_9pywrapfst_11_MutableFst__closure {
  int __pyx_n;
  bool closure_plus;
};

/* "pywrapfst.pxd":290
 *   cdef void _decode(self, EncodeMapper) except *
 * 
 *   cdef void _delete_arcs(self, int64 state, size_t n=?) except *             # <<<<<<<<<<<<<<
 * 
 *   cdef void _delete_states(self, states=?) except *
 */
struct __pyx_opt_args_9pywrapfst_11_MutableFst__delete_arcs {
  int __pyx_n;
  size_t n;
};

/* "pywrapfst.pxd":292
 *   cdef void _delete_arcs(self, int64 state, size_t n=?) except *
 * 
 *   cdef void _delete_states(self, states=?) except *             # <<<<<<<<<<<<<<
 * 
 *   cdef void _encode(self, EncodeMapper) except *
 */
struct __pyx_opt_args_9pywrapfst_11_MutableFst__delete_states {
  int __pyx_n;
  PyObject *states;
};

/* "pywrapfst.pxd":298
 *   cdef void _invert(self) except *
 * 
 *   cdef void _minimize(self, float delta=?, bool allow_nondet=?) except *             # <<<<<<<<<<<<<<
 * 
 *   cpdef MutableArcIterator mutable_arcs(self, int64 state)
 */
struct __pyx_opt_args_9pywrapfst_11_MutableFst__minimize {
  int __pyx_n;
  float delta;
  bool allow_nondet;
};

/* "pywrapfst.pxd":304
 *   cpdef int64 num_states(self)
 * 
 *   cdef void _project(self, bool project_output=?) except *             # <<<<<<<<<<<<<<
 * 
 *   cdef void _prune(self, float delta=?, int64 nstate=?, weight=?) except *
 */
struct __pyx_opt_args_9pywrapfst_11_MutableFst__project {
  int __pyx_n;
  bool project_output;
};

/* "pywrapfst.pxd":306
 *   cdef void _project(self, bool project_output=?) except *
 * 
 *   cdef void _prune(self, float delta=?, int64 nstate=?, weight=?) except *             # <<<<<<<<<<<<<<
 * 
 *   cdef void _push(self, float delta=?, bool remove_total_weight=?,
 */
struct __pyx_opt_args_9pywrapfst_11_MutableFst__prune {
  int __pyx_n;
  float delta;
  __pyx_t_10basictypes_int64 nstate;
  PyObject *weight;
};

/* "pywrapfst.pxd":308
 *   cdef void _prune(self, float delta=?, int64 nstate=?, weight=?) except *
 * 
 *   cdef void _push(self, float delta=?, bool remove_total_weight=?,             # <<<<<<<<<<<<<<
 *                   bool to_final=?) except *
 * 
 */
struct __pyx_opt_args_9pywrapfst_11_MutableFst__push {
  int __pyx_n;
  float delta;
  bool remove_total_weight;
  bool to_final;
};

/* "pywrapfst.pxd":311
 *                   bool to_final=?) except *
 * 
 *   cdef void _relabel_pairs(self, ipairs=?, opairs=?) except *             # <<<<<<<<<<<<<<
 * 
 *   cdef void _relabel_tables(self, _SymbolTable old_isymbols=?,
 */
struct __pyx_opt_args_9pywrapfst_11_MutableFst__relabel_pairs {
  int __pyx_n;
  PyObject *ipairs;
  PyObject *opairs;
};

/* "pywrapfst.pxd":313
 *   cdef void _relabel_pairs(self, ipairs=?, opairs=?) except *
 * 
 *   cdef void _relabel_tables(self, _SymbolTable old_isymbols=?,             # <<<<<<<<<<<<<<
 *       _SymbolTable new_isymbols=?, unknown_isymbol=?,
 *       bool attach_new_isymbols=?,
 */
struct __pyx_opt_args_9pywrapfst_11_MutableFst__relabel_tables {
  int __pyx_n;
  struct __pyx_obj_9pywrapfst__SymbolTable *old_isymbols;
  struct __pyx_obj_9pywrapfst__SymbolTable *new_isymbols;
  PyObject *unknown_isymbol;
  bool attach_new_isymbols;
  struct __pyx_obj_9pywrapfst__SymbolTable *old_osymbols;
  struct __pyx_obj_9pywrapfst__SymbolTable *new_osymbols;
  PyObject *unknown_osymbol;
  bool attach_new_osymbols;
};

/* "pywrapfst.pxd":323
 *   cdef void _reserve_states(self, int64 n) except *
 * 
 *   cdef void _reweight(self, potentials, bool to_final=?) except *             # <<<<<<<<<<<<<<
 * 
 *   cdef void _rmepsilon(self, queue_type=?, bool connect=?, weight=?,
 */
struct __pyx_opt_args_9pywrapfst_11_MutableFst__reweight {
  int __pyx_n;
  bool to_final;
};

/* "pywrapfst.pxd":325
 *   cdef void _reweight(self, potentials, bool to_final=?) except *
 * 
 *   cdef void _rmepsilon(self, queue_type=?, bool connect=?, weight=?,             # <<<<<<<<<<<<<<
 *                        int64 nstate=?, float delta=?) except *
 * 
 */
struct __pyx_opt_args_9pywrapfst_11_MutableFst__rmepsilon {
  int __pyx_n;
  PyObject *queue_type;
  bool connect;
  PyObject *weight;
  __pyx_t_10basictypes_int64 nstate;
  float delta;
};

/* "pywrapfst.pxd":328
 *                        int64 nstate=?, float delta=?) except *
 * 
 *   cdef void _set_final(self, int64 state, weight=?) except *             # <<<<<<<<<<<<<<
 * 
 *   cdef void _set_properties(self, uint64 props, uint64 mask)
 */
struct __pyx_opt_args_9pywrapfst_11_MutableFst__set_final {
  int __pyx_n;
  PyObject *weight;
};

/* "pywrapfst.pxd":352
 * cdef _Fst _init_XFst(FstClass_ptr tfst)
 * 
 * cdef _MutableFst _create_Fst(arc_type=?)             # <<<<<<<<<<<<<<
 * 
 * cpdef _Fst _read(filename)
 */
struct __pyx_opt_args_9pywrapfst__create_Fst {
  int __pyx_n;
  PyObject *arc_type;
};

/* "pywrapfst.pxd":435
 * 
 * 
 * cdef _Fst _map(_Fst ifst, float delta=?, map_type=?, double power=?, weight=?)             # <<<<<<<<<<<<<<
 * 
 * cpdef _Fst arcmap(_Fst ifst, float delta=?, map_type=?, double power=?,
 */
struct __pyx_opt_args_9pywrapfst__map {
  int __pyx_n;
  float delta;
  PyObject *map_type;
  double power;
  PyObject *weight;
};

/* "pywrapfst.pxd":437
 * cdef _Fst _map(_Fst ifst, float delta=?, map_type=?, double power=?, weight=?)
 * 
 * cpdef _Fst arcmap(_Fst ifst, float delta=?, map_type=?, double power=?,             # <<<<<<<<<<<<<<
 *                   weight=?)
 * 
 */
struct __pyx_opt_args_9pywrapfst_arcmap {
  int __pyx_n;
  float delta;
  PyObject *map_type;
  double power;
  PyObject *weight;
};

/* "pywrapfst.pxd":440
 *                   weight=?)
 * 
 * cpdef _MutableFst compose(_Fst ifst1, _Fst ifst2, compose_filter=?,             # <<<<<<<<<<<<<<
 *                           bool connect=?)
 * 
 */
struct __pyx_opt_args_9pywrapfst_compose {
  int __pyx_n;
  PyObject *compose_filter;
  bool connect;
};

/* "pywrapfst.pxd":443
 *                           bool connect=?)
 * 
 * cpdef _Fst convert(_Fst ifst, fst_type=?)             # <<<<<<<<<<<<<<
 * 
 * cpdef _MutableFst determinize(_Fst ifst, float delta=?, det_type=?,
 */
struct __pyx_opt_args_9pywrapfst_convert {
  int __pyx_n;
  PyObject *fst_type;
};

/* "pywrapfst.pxd":445
 * cpdef _Fst convert(_Fst ifst, fst_type=?)
 * 
 * cpdef _MutableFst determinize(_Fst ifst, float delta=?, det_type=?,             # <<<<<<<<<<<<<<
 *                               int64 nstate=?, int64 subsequential_label=?,
 *                               weight=?, bool increment_subsequential_label=?)
 */
struct __pyx_opt_args_9pywrapfst_determinize {
  int __pyx_n;
  float delta;
  PyObject *det_type;
  __pyx_t_10basictypes_int64 nstate;
  __pyx_t_10basictypes_int64 subsequential_label;
  PyObject *weight;
  bool increment_subsequential_label;
};

/* "pywrapfst.pxd":449
 *                               weight=?, bool increment_subsequential_label=?)
 * 
 * cpdef _MutableFst difference(_Fst ifst1, _Fst ifst2, compose_filter=?,             # <<<<<<<<<<<<<<
 *                              bool connect=?)
 * 
 */
struct __pyx_opt_args_9pywrapfst_difference {
  int __pyx_n;
  PyObject *compose_filter;
  bool connect;
};

/* "pywrapfst.pxd":452
 *                              bool connect=?)
 * 
 * cpdef _MutableFst disambiguate(_Fst ifst, float delta=?, int64 nstate=?,             # <<<<<<<<<<<<<<
 *                                int64 subsequential_label=?, weight=?)
 * 
 */
struct __pyx_opt_args_9pywrapfst_disambiguate {
  int __pyx_n;
  float delta;
  __pyx_t_10basictypes_int64 nstate;
  __pyx_t_10basictypes_int64 subsequential_label;
  PyObject *weight;
};

/* "pywrapfst.pxd":455
 *                                int64 subsequential_label=?, weight=?)
 * 
 * cpdef _MutableFst epsnormalize(_Fst ifst, bool eps_norm_output=?)             # <<<<<<<<<<<<<<
 * 
 * cpdef bool equal(_Fst ifst1, _Fst ifst2, float delta=?)
 */
struct __pyx_opt_args_9pywrapfst_epsnormalize {
  int __pyx_n;
  bool eps_norm_output;
};

/* "pywrapfst.pxd":457
 * cpdef _MutableFst epsnormalize(_Fst ifst, bool eps_norm_output=?)
 * 
 * cpdef bool equal(_Fst ifst1, _Fst ifst2, float delta=?)             # <<<<<<<<<<<<<<
 * 
 * cpdef bool equivalent(_Fst ifst1, _Fst ifst2, float delta=?) except *
 */
struct __pyx_opt_args_9pywrapfst_equal {
  int __pyx_n;
  float delta;
};

/* "pywrapfst.pxd":459
 * cpdef bool equal(_Fst ifst1, _Fst ifst2, float delta=?)
 * 
 * cpdef bool equivalent(_Fst ifst1, _Fst ifst2, float delta=?) except *             # <<<<<<<<<<<<<<
 * 
 * cpdef _MutableFst intersect(_Fst ifst1, _Fst ifst2, compose_filter=?,
 */
struct __pyx_opt_args_9pywrapfst_equivalent {
  int __pyx_n;
  float delta;
};

/* "pywrapfst.pxd":461
 * cpdef bool equivalent(_Fst ifst1, _Fst ifst2, float delta=?) except *
 * 
 * cpdef _MutableFst intersect(_Fst ifst1, _Fst ifst2, compose_filter=?,             # <<<<<<<<<<<<<<
 *                             bool connect=?)
 * 
 */
struct __pyx_opt_args_9pywrapfst_intersect {
  int __pyx_n;
  PyObject *compose_filter;
  bool connect;
};

/* "pywrapfst.pxd":464
 *                             bool connect=?)
 * 
 * cpdef bool isomorphic(_Fst ifst1, _Fst ifst2, float delta=?)             # <<<<<<<<<<<<<<
 * 
 * cpdef _MutableFst prune(_Fst ifst, float delta=?, int64 nstate=?,
 */
struct __pyx_opt_args_9pywrapfst_isomorphic {
  int __pyx_n;
  float delta;
};

/* "pywrapfst.pxd":466
 * cpdef bool isomorphic(_Fst ifst1, _Fst ifst2, float delta=?)
 * 
 * cpdef _MutableFst prune(_Fst ifst, float delta=?, int64 nstate=?,             # <<<<<<<<<<<<<<
 *                         weight=?)
 * 
 */
struct __pyx_opt_args_9pywrapfst_prune {
  int __pyx_n;
  float delta;
  __pyx_t_10basictypes_int64 nstate;
  PyObject *weight;
};

/* "pywrapfst.pxd":469
 *                         weight=?)
 * 
 * cpdef _MutableFst push(_Fst ifst, float delta=?, bool push_weights=?,             # <<<<<<<<<<<<<<
 *                        bool push_labels=?, bool remove_common_affix=?,
 *                        bool remove_total_weight=?, bool to_final=?)
 */
struct __pyx_opt_args_9pywrapfst_push {
  int __pyx_n;
  float delta;
  bool push_weights;
  bool push_labels;
  bool remove_common_affix;
  bool remove_total_weight;
  bool to_final;
};

/* "pywrapfst.pxd":473
 *                        bool remove_total_weight=?, bool to_final=?)
 * 
 * cpdef bool randequivalent(_Fst ifst1, _Fst ifst2, int32 npath=?,             # <<<<<<<<<<<<<<
 *                           float delta=?, time_t seed=?, select=?,
 *                           int32 max_length=?) except *
 */
struct __pyx_opt_args_9pywrapfst_randequivalent {
  int __pyx_n;
  __pyx_t_10basictypes_int32 npath;
  float delta;
  time_t seed;
  PyObject *select;
  __pyx_t_10basictypes_int32 max_length;
};

/* "pywrapfst.pxd":477
 *                           int32 max_length=?) except *
 * 
 * cpdef _MutableFst randgen(_Fst ifst, int32 npath=?, time_t seed=?,             # <<<<<<<<<<<<<<
 *                           select=?, int32 max_length=?,
 *                           bool remove_total_weight=?, bool weighted=?)
 */
struct __pyx_opt_args_9pywrapfst_randgen {
  int __pyx_n;
  __pyx_t_10basictypes_int32 npath;
  time_t seed;
  PyObject *select;
  __pyx_t_10basictypes_int32 max_length;
  bool remove_total_weight;
  bool weighted;
};

/* "pywrapfst.pxd":484
 *     bool epsilon_on_replace) except *
 * 
 * cpdef _MutableFst replace(pairs, call_arc_labeling=?, return_arc_labeling=?,             # <<<<<<<<<<<<<<
 *                           bool epsilon_on_replace=?, int64 return_label=?)
 * 
 */
struct __pyx_opt_args_9pywrapfst_replace {
  int __pyx_n;
  PyObject *call_arc_labeling;
  PyObject *return_arc_labeling;
  bool epsilon_on_replace;
  __pyx_t_10basictypes_int64 return_label;
};

/* "pywrapfst.pxd":487
 *                           bool epsilon_on_replace=?, int64 return_label=?)
 * 
 * cpdef _MutableFst reverse(_Fst ifst, bool require_superinitial=?)             # <<<<<<<<<<<<<<
 * 
 * cdef vector[fst.WeightClass] *_shortestdistance(_Fst ifst, float delta=?,
 */
struct __pyx_opt_args_9pywrapfst_reverse {
  int __pyx_n;
  bool require_superinitial;
};

/* "pywrapfst.pxd":489
 * cpdef _MutableFst reverse(_Fst ifst, bool require_superinitial=?)
 * 
 * cdef vector[fst.WeightClass] *_shortestdistance(_Fst ifst, float delta=?,             # <<<<<<<<<<<<<<
 *                                                 int64 nstate=?, queue_type=?,
 *                                                 bool reverse=?) except *
 */
struct __pyx_opt_args_9pywrapfst__shortestdistance {
  int __pyx_n;
  float delta;
  __pyx_t_10basictypes_int64 nstate;
  PyObject *queue_type;
  bool reverse;
};

/* "pywrapfst.pxd":493
 *                                                 bool reverse=?) except *
 * 
 * cpdef _MutableFst shortestpath(_Fst ifst, float delta=?, int32 nshortest=?,             # <<<<<<<<<<<<<<
 *                                int64 nstate=?, queue_type=?, bool unique=?,
 *                                weight=?)
 */
struct __pyx_opt_args_9pywrapfst_shortestpath {
  int __pyx_n;
  float delta;
  __pyx_t_10basictypes_int32 nshortest;
  __pyx_t_10basictypes_int64 nstate;
  PyObject *queue_type;
  bool unique;
  PyObject *weight;
};

/* "pynini_includes.pxd":37
 * 
 * 
 * ctypedef pair[string, const FstClass *] StringFstClassPair             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef std::pair<std::string,fst::script::FstClass const *>  __pyx_t_15pynini_includes_StringFstClassPair;
struct __pyx_opt_args_6pynini_3Fst_paths;
struct __pyx_opt_args_6pynini_3Fst_stringify;
struct __pyx_opt_args_6pynini_3Fst__optimize;
struct __pyx_opt_args_6pynini__compile_or_copy_Fst;
struct __pyx_opt_args_6pynini_acceptor;
struct __pyx_opt_args_6pynini_transducer;
struct __pyx_opt_args_6pynini_cdrewrite;
struct __pyx_opt_args_6pynini_epsilon_machine;
struct __pyx_opt_args_6pynini_leniently_compose;
struct __pyx_opt_args_6pynini_matches;
struct __pyx_opt_args_6pynini_string_file;
struct __pyx_opt_args_6pynini_string_map;
struct __pyx_opt_args_6pynini_mpdt_compose;

/* "pynini.pyx":456
 *     return (_read_from_string, (self.write_to_string(),))
 * 
 *   cpdef StringPathIterator paths(self, input_token_type=b"byte",             # <<<<<<<<<<<<<<
 *                                  output_token_type=b"byte"):
 *     """
 */
struct __pyx_opt_args_6pynini_3Fst_paths {
  int __pyx_n;
  PyObject *input_token_type;
  PyObject *output_token_type;
};

/* "pynini.pyx":488
 *     return StringPathIterator(self, input_token_type, output_token_type)
 * 
 *   cpdef string stringify(self, token_type=b"byte") except *:             # <<<<<<<<<<<<<<
 *     """
 *     stringify(self, token_type="byte")
 */
struct __pyx_opt_args_6pynini_3Fst_stringify {
  int __pyx_n;
  PyObject *token_type;
};

/* "pynini.pyx":672
 *     return self
 * 
 *   cdef void _optimize(self, bool compute_props=False) except *:             # <<<<<<<<<<<<<<
 *     Optimize(self._mfst.get(), compute_props)
 *     self._check_mutating_imethod()
 */
struct __pyx_opt_args_6pynini_3Fst__optimize {
  int __pyx_n;
  bool compute_props;
};

/* "pynini.pyx":798
 * 
 * 
 * cdef Fst _compile_or_copy_Fst(arg, arc_type=b"standard"):             # <<<<<<<<<<<<<<
 *   if not isinstance(arg, Fst):
 *     return acceptor(arg, arc_type=arc_type)
 */
struct __pyx_opt_args_6pynini__compile_or_copy_Fst {
  int __pyx_n;
  PyObject *arc_type;
};

/* "pynini.pyx":856
 * 
 * 
 * cpdef Fst acceptor(astring,             # <<<<<<<<<<<<<<
 *                    weight=None,
 *                    arc_type=b"standard",
 */
struct __pyx_opt_args_6pynini_acceptor {
  int __pyx_n;
  PyObject *weight;
  PyObject *arc_type;
  PyObject *token_type;
  bool attach_symbols;
};

/* "pynini.pyx":912
 * 
 * 
 * cpdef Fst transducer(istring,             # <<<<<<<<<<<<<<
 *                      ostring,
 *                      weight=None,
 */
struct __pyx_opt_args_6pynini_transducer {
  int __pyx_n;
  PyObject *weight;
  PyObject *arc_type;
  PyObject *input_token_type;
  PyObject *output_token_type;
  bool attach_input_symbols;
  bool attach_output_symbols;
};

/* "pynini.pyx":993
 * 
 * 
 * cpdef Fst cdrewrite(tau,             # <<<<<<<<<<<<<<
 *                     lambda_,
 *                     rho,
 */
struct __pyx_opt_args_6pynini_cdrewrite {
  int __pyx_n;
  PyObject *direction;
  PyObject *mode;
};

/* "pynini.pyx":1047
 * 
 * 
 * cpdef Fst epsilon_machine(arc_type=b"standard", weight=None):             # <<<<<<<<<<<<<<
 *   """
 *   epsilon_machine(arc_type="standard")
 */
struct __pyx_opt_args_6pynini_epsilon_machine {
  int __pyx_n;
  PyObject *arc_type;
  PyObject *weight;
};

/* "pynini.pyx":1075
 * 
 * 
 * cpdef Fst leniently_compose(ifst1, ifst2, sigma_star, compose_filter=b"auto",             # <<<<<<<<<<<<<<
 *                             bool connect=True):
 *   """
 */
struct __pyx_opt_args_6pynini_leniently_compose {
  int __pyx_n;
  PyObject *compose_filter;
  bool connect;
};

/* "pynini.pyx":1118
 * 
 * 
 * cpdef bool matches(ifst1, ifst2, compose_filter=b"auto"):             # <<<<<<<<<<<<<<
 *   """
 *   matches(ifst1, ifst2, compose_filter="auto")
 */
struct __pyx_opt_args_6pynini_matches {
  int __pyx_n;
  PyObject *compose_filter;
};

/* "pynini.pyx":1144
 * 
 * 
 * cpdef Fst string_file(filename,             # <<<<<<<<<<<<<<
 *                       arc_type=b"standard",
 *                       input_token_type=b"byte",
 */
struct __pyx_opt_args_6pynini_string_file {
  int __pyx_n;
  PyObject *arc_type;
  PyObject *input_token_type;
  PyObject *output_token_type;
  bool attach_input_symbols;
  bool attach_output_symbols;
};

/* "pynini.pyx":1217
 * 
 * 
 * cpdef Fst string_map(lines,             # <<<<<<<<<<<<<<
 *                      arc_type=b"standard",
 *                      input_token_type=b"byte",
 */
struct __pyx_opt_args_6pynini_string_map {
  int __pyx_n;
  PyObject *arc_type;
  PyObject *input_token_type;
  PyObject *output_token_type;
  bool attach_input_symbols;
  bool attach_output_symbols;
};

/* "pynini.pyx":1956
 * 
 * 
 * cpdef Fst mpdt_compose(ifst1, ifst2, MPdtParentheses parens,             # <<<<<<<<<<<<<<
 *                        compose_filter=b"paren", bool left_mpdt=True):
 *   """
 */
struct __pyx_opt_args_6pynini_mpdt_compose {
  int __pyx_n;
  PyObject *compose_filter;
  bool left_mpdt;
};

/* "pywrapfst.pxd":68
 * 
 * 
 * cdef class Weight(object):             # <<<<<<<<<<<<<<
 * 
 *   cdef unique_ptr[fst.WeightClass] _weight
 */
struct __pyx_obj_9pywrapfst_Weight {
  PyObject_HEAD
  struct __pyx_vtabstruct_9pywrapfst_Weight *__pyx_vtab;
  std::unique_ptr<fst::script::WeightClass>  _weight;
};


/* "pywrapfst.pxd":101
 * 
 * 
 * cdef class _SymbolTable(object):             # <<<<<<<<<<<<<<
 * 
 *   cdef fst.SymbolTable *_table
 */
struct __pyx_obj_9pywrapfst__SymbolTable {
  PyObject_HEAD
  struct __pyx_vtabstruct_9pywrapfst__SymbolTable *__pyx_vtab;
  fst::SymbolTable *_table;
};


/* "pywrapfst.pxd":126
 * 
 * 
 * cdef class _EncodeMapperSymbolTable(_SymbolTable):             # <<<<<<<<<<<<<<
 * 
 *   cdef shared_ptr[fst.EncodeMapperClass] _encoder
 */
struct __pyx_obj_9pywrapfst__EncodeMapperSymbolTable {
  struct __pyx_obj_9pywrapfst__SymbolTable __pyx_base;
  std::shared_ptr<fst::script::EncodeMapperClass>  _encoder;
};


/* "pywrapfst.pxd":131
 * 
 * 
 * cdef class _FstSymbolTable(_SymbolTable):             # <<<<<<<<<<<<<<
 * 
 *   cdef shared_ptr[fst.FstClass] _fst
 */
struct __pyx_obj_9pywrapfst__FstSymbolTable {
  struct __pyx_obj_9pywrapfst__SymbolTable __pyx_base;
  std::shared_ptr<fst::script::FstClass>  _fst;
};


/* "pywrapfst.pxd":136
 * 
 * 
 * cdef class _MutableSymbolTable(_SymbolTable):             # <<<<<<<<<<<<<<
 * 
 *   cpdef int64 add_symbol(self, symbol, int64 key=?)
 */
struct __pyx_obj_9pywrapfst__MutableSymbolTable {
  struct __pyx_obj_9pywrapfst__SymbolTable __pyx_base;
};


/* "pywrapfst.pxd":145
 * 
 * 
 * cdef class _MutableFstSymbolTable(_MutableSymbolTable):             # <<<<<<<<<<<<<<
 * 
 *   cdef shared_ptr[fst.MutableFstClass] _mfst
 */
struct __pyx_obj_9pywrapfst__MutableFstSymbolTable {
  struct __pyx_obj_9pywrapfst__MutableSymbolTable __pyx_base;
  std::shared_ptr<fst::script::MutableFstClass>  _mfst;
};


/* "pywrapfst.pxd":150
 * 
 * 
 * cdef class SymbolTable(_MutableSymbolTable):             # <<<<<<<<<<<<<<
 * 
 *   cdef unique_ptr[fst.SymbolTable] _smart_table
 */
struct __pyx_obj_9pywrapfst_SymbolTable {
  struct __pyx_obj_9pywrapfst__MutableSymbolTable __pyx_base;
  std::unique_ptr<fst::SymbolTable>  _smart_table;
};


/* "pywrapfst.pxd":171
 * 
 * 
 * cdef class SymbolTableIterator(object):             # <<<<<<<<<<<<<<
 * 
 *   cdef shared_ptr[fst.SymbolTable] _table
 */
struct __pyx_obj_9pywrapfst_SymbolTableIterator {
  PyObject_HEAD
  struct __pyx_vtabstruct_9pywrapfst_SymbolTableIterator *__pyx_vtab;
  std::shared_ptr<fst::SymbolTable>  _table;
  std::unique_ptr<fst::SymbolTableIterator>  _siter;
};


/* "pywrapfst.pxd":190
 * 
 * 
 * cdef class EncodeMapper(object):             # <<<<<<<<<<<<<<
 * 
 *   cdef shared_ptr[fst.EncodeMapperClass] _encoder
 */
struct __pyx_obj_9pywrapfst_EncodeMapper {
  PyObject_HEAD
  struct __pyx_vtabstruct_9pywrapfst_EncodeMapper *__pyx_vtab;
  std::shared_ptr<fst::script::EncodeMapperClass>  _encoder;
};


/* "pywrapfst.pxd":219
 * 
 * 
 * cdef class _Fst(object):             # <<<<<<<<<<<<<<
 * 
 *   cdef shared_ptr[fst.FstClass] _fst
 */
struct __pyx_obj_9pywrapfst__Fst {
  PyObject_HEAD
  struct __pyx_vtabstruct_9pywrapfst__Fst *__pyx_vtab;
  std::shared_ptr<fst::script::FstClass>  _fst;
};


/* "pywrapfst.pxd":270
 * 
 * 
 * cdef class _MutableFst(_Fst):             # <<<<<<<<<<<<<<
 * 
 *   cdef shared_ptr[fst.MutableFstClass] _mfst
 */
struct __pyx_obj_9pywrapfst__MutableFst {
  struct __pyx_obj_9pywrapfst__Fst __pyx_base;
  std::shared_ptr<fst::script::MutableFstClass>  _mfst;
};


/* "pywrapfst.pxd":362
 * 
 * 
 * cdef class Arc(object):             # <<<<<<<<<<<<<<
 * 
 *   cdef unique_ptr[fst.ArcClass] _arc
 */
struct __pyx_obj_9pywrapfst_Arc {
  PyObject_HEAD
  struct __pyx_vtabstruct_9pywrapfst_Arc *__pyx_vtab;
  std::unique_ptr<fst::script::ArcClass>  _arc;
};


/* "pywrapfst.pxd":372
 * 
 * 
 * cdef class ArcIterator(object):             # <<<<<<<<<<<<<<
 * 
 *   cdef shared_ptr[fst.FstClass] _fst
 */
struct __pyx_obj_9pywrapfst_ArcIterator {
  PyObject_HEAD
  struct __pyx_vtabstruct_9pywrapfst_ArcIterator *__pyx_vtab;
  std::shared_ptr<fst::script::FstClass>  _fst;
  std::unique_ptr<fst::script::ArcIteratorClass>  _aiter;
};


/* "pywrapfst.pxd":394
 * 
 * 
 * cdef class MutableArcIterator(object):             # <<<<<<<<<<<<<<
 * 
 *   cdef shared_ptr[fst.MutableFstClass] _mfst
 */
struct __pyx_obj_9pywrapfst_MutableArcIterator {
  PyObject_HEAD
  struct __pyx_vtabstruct_9pywrapfst_MutableArcIterator *__pyx_vtab;
  std::shared_ptr<fst::script::MutableFstClass>  _mfst;
  std::unique_ptr<fst::script::MutableArcIteratorClass>  _aiter;
};


/* "pywrapfst.pxd":418
 * 
 * 
 * cdef class StateIterator(object):             # <<<<<<<<<<<<<<
 * 
 *   cdef shared_ptr[fst.FstClass] _fst
 */
struct __pyx_obj_9pywrapfst_StateIterator {
  PyObject_HEAD
  struct __pyx_vtabstruct_9pywrapfst_StateIterator *__pyx_vtab;
  std::shared_ptr<fst::script::FstClass>  _fst;
  std::unique_ptr<fst::script::StateIteratorClass>  _siter;
};


/* "pywrapfst.pxd":505
 * 
 * 
 * cdef class Compiler(object):             # <<<<<<<<<<<<<<
 * 
 *   cdef unique_ptr[stringstream] _sstrm
 */
struct __pyx_obj_9pywrapfst_Compiler {
  PyObject_HEAD
  struct __pyx_vtabstruct_9pywrapfst_Compiler *__pyx_vtab;
  std::unique_ptr<std::stringstream>  _sstrm;
  std::string _fst_type;
  std::string _arc_type;
  fst::SymbolTable const *_isymbols;
  fst::SymbolTable const *_osymbols;
  fst::SymbolTable const *_ssymbols;
  bool _acceptor;
  bool _keep_isymbols;
  bool _keep_osymbols;
  bool _keep_state_numbering;
  bool _allow_negative_labels;
};


/* "pywrapfst.pxd":526
 * # FarReader.
 * 
 * cdef class FarReader(object):             # <<<<<<<<<<<<<<
 * 
 *   cdef unique_ptr[fst.FarReaderClass] _reader
 */
struct __pyx_obj_9pywrapfst_FarReader {
  PyObject_HEAD
  struct __pyx_vtabstruct_9pywrapfst_FarReader *__pyx_vtab;
  std::unique_ptr<fst::script::FarReaderClass>  _reader;
};


/* "pywrapfst.pxd":551
 * # FarWriter.
 * 
 * cdef class FarWriter(object):             # <<<<<<<<<<<<<<
 * 
 *   cdef unique_ptr[fst.FarWriterClass] _writer
 */
struct __pyx_obj_9pywrapfst_FarWriter {
  PyObject_HEAD
  struct __pyx_vtabstruct_9pywrapfst_FarWriter *__pyx_vtab;
  std::unique_ptr<fst::script::FarWriterClass>  _writer;
};


/* "pynini.pyx":364
 * 
 * 
 * cdef class Fst(_MutableFst):             # <<<<<<<<<<<<<<
 * 
 *   """
 */
struct __pyx_obj_6pynini_Fst {
  struct __pyx_obj_9pywrapfst__MutableFst __pyx_base;
};


/* "pynini.pyx":1528
 * 
 * 
 * cdef class PdtParentheses(object):             # <<<<<<<<<<<<<<
 * 
 *   """
 */
struct __pyx_obj_6pynini_PdtParentheses {
  PyObject_HEAD
  struct __pyx_vtabstruct_6pynini_PdtParentheses *__pyx_vtab;
  std::vector<std::pair<__pyx_t_10basictypes_int64,__pyx_t_10basictypes_int64> >  _parens;
};


/* "pynini.pyx":1851
 * 
 * 
 * cdef class MPdtParentheses(object):             # <<<<<<<<<<<<<<
 * 
 *   """
 */
struct __pyx_obj_6pynini_MPdtParentheses {
  PyObject_HEAD
  struct __pyx_vtabstruct_6pynini_MPdtParentheses *__pyx_vtab;
  std::vector<std::pair<__pyx_t_10basictypes_int64,__pyx_t_10basictypes_int64> >  _parens;
  std::vector<__pyx_t_10basictypes_int64>  _assign;
};


/* "pynini.pyx":2082
 * 
 * 
 * cdef class StringPathIterator(object):             # <<<<<<<<<<<<<<
 * 
 *   """
 */
struct __pyx_obj_6pynini_StringPathIterator {
  PyObject_HEAD
  struct __pyx_vtabstruct_6pynini_StringPathIterator *__pyx_vtab;
  std::unique_ptr<fst::script::StringPathIteratorClass>  _paths;
};


/* "pynini.pyx":2277
 * 
 * 
 * cdef class Far(object):             # <<<<<<<<<<<<<<
 * 
 *   """
 */
struct __pyx_obj_6pynini_Far {
  PyObject_HEAD
  struct __pyx_vtabstruct_6pynini_Far *__pyx_vtab;
  char _mode;
  std::string _name;
  struct __pyx_obj_9pywrapfst_FarReader *_reader;
  struct __pyx_obj_9pywrapfst_FarWriter *_writer;
};


/* "pynini.pyx":1310
 * 
 * 
 * def _1arg_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg, *args, **kwargs):
 */
struct __pyx_obj_6pynini___pyx_scope_struct___1arg_patch {
  PyObject_HEAD
  PyObject *__pyx_v_fnc;
};


/* "pynini.pyx":1331
 * 
 * 
 * def _shortestdistance_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg, *args, **kwargs):
 */
struct __pyx_obj_6pynini___pyx_scope_struct_1__shortestdistance_patch {
  PyObject_HEAD
  PyObject *__pyx_v_fnc;
};


/* "pynini.pyx":1347
 * 
 * 
 * def _compose_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */
struct __pyx_obj_6pynini___pyx_scope_struct_2__compose_patch {
  PyObject_HEAD
  PyObject *__pyx_v_fnc;
};


/* "pynini.pyx":1365
 * 
 * 
 * def _difference_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */
struct __pyx_obj_6pynini___pyx_scope_struct_3__difference_patch {
  PyObject_HEAD
  PyObject *__pyx_v_fnc;
};


/* "pynini.pyx":1389
 * 
 * 
 * def _comp_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */
struct __pyx_obj_6pynini___pyx_scope_struct_4__comp_patch {
  PyObject_HEAD
  PyObject *__pyx_v_fnc;
};


/* "pynini.pyx":1406
 * 
 * 
 * def _comp_merge_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */
struct __pyx_obj_6pynini___pyx_scope_struct_5__comp_merge_patch {
  PyObject_HEAD
  PyObject *__pyx_v_fnc;
};


/* "pynini.pyx":1552
 *     return self._parens.size()
 * 
 *   def __iter__(self):             # <<<<<<<<<<<<<<
 *     cdef size_t i = 0
 *     for i in range(self._parens.size()):
 */
struct __pyx_obj_6pynini___pyx_scope_struct_6___iter__ {
  PyObject_HEAD
  size_t __pyx_v_i;
  struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_self;
  std::vector<std::pair<__pyx_t_10basictypes_int64,__pyx_t_10basictypes_int64> > ::size_type __pyx_t_0;
  std::vector<std::pair<__pyx_t_10basictypes_int64,__pyx_t_10basictypes_int64> > ::size_type __pyx_t_1;
  size_t __pyx_t_2;
};


/* "pynini.pyx":1877
 *     return self._parens.size()
 * 
 *   def __iter__(self):             # <<<<<<<<<<<<<<
 *     cdef size_t i = 0
 *     for i in range(self._parens.size()):
 */
struct __pyx_obj_6pynini___pyx_scope_struct_7___iter__ {
  PyObject_HEAD
  size_t __pyx_v_i;
  struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_self;
  std::vector<std::pair<__pyx_t_10basictypes_int64,__pyx_t_10basictypes_int64> > ::size_type __pyx_t_0;
  std::vector<std::pair<__pyx_t_10basictypes_int64,__pyx_t_10basictypes_int64> > ::size_type __pyx_t_1;
  size_t __pyx_t_2;
};


/* "pynini.pyx":2201
 *     return self._paths.get().IString()
 * 
 *   def istrings(self):             # <<<<<<<<<<<<<<
 *     """
 *     istrings(self)
 */
struct __pyx_obj_6pynini___pyx_scope_struct_8_istrings {
  PyObject_HEAD
  struct __pyx_obj_6pynini_StringPathIterator *__pyx_v_self;
};


/* "pynini.pyx":2228
 *     return self._paths.get().OString()
 * 
 *   def ostrings(self):             # <<<<<<<<<<<<<<
 *     """
 *     ostrings(self)
 */
struct __pyx_obj_6pynini___pyx_scope_struct_9_ostrings {
  PyObject_HEAD
  struct __pyx_obj_6pynini_StringPathIterator *__pyx_v_self;
};


/* "pynini.pyx":2257
 *     return weight
 * 
 *   def weights(self):             # <<<<<<<<<<<<<<
 *     """
 *     weights(self)
 */
struct __pyx_obj_6pynini___pyx_scope_struct_10_weights {
  PyObject_HEAD
  struct __pyx_obj_6pynini_StringPathIterator *__pyx_v_self;
};


/* "pynini.pyx":2666
 * 
 * 
 * def _copy_patch(fnc):             # <<<<<<<<<<<<<<
 *   # The junk in the `functools.wraps` decorator is due to a long-standing bug
 *   # in Python 2.7 (https://bugs.python.org/issue3445).
 */
struct __pyx_obj_6pynini___pyx_scope_struct_11__copy_patch {
  PyObject_HEAD
  PyObject *__pyx_v_fnc;
};



/* "pywrapfst.pxd":68
 * 
 * 
 * cdef class Weight(object):             # <<<<<<<<<<<<<<
 * 
 *   cdef unique_ptr[fst.WeightClass] _weight
 */

struct __pyx_vtabstruct_9pywrapfst_Weight {
  void (*_check_weight)(struct __pyx_obj_9pywrapfst_Weight *);
  struct __pyx_obj_9pywrapfst_Weight *(*copy)(struct __pyx_obj_9pywrapfst_Weight *, int __pyx_skip_dispatch);
  std::string (*to_string)(struct __pyx_obj_9pywrapfst_Weight *, int __pyx_skip_dispatch);
  std::string (*type)(struct __pyx_obj_9pywrapfst_Weight *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_9pywrapfst_Weight *__pyx_vtabptr_9pywrapfst_Weight;


/* "pywrapfst.pxd":101
 * 
 * 
 * cdef class _SymbolTable(object):             # <<<<<<<<<<<<<<
 * 
 *   cdef fst.SymbolTable *_table
 */

struct __pyx_vtabstruct_9pywrapfst__SymbolTable {
  __pyx_t_10basictypes_int64 (*available_key)(struct __pyx_obj_9pywrapfst__SymbolTable *, int __pyx_skip_dispatch);
  PyObject *(*checksum)(struct __pyx_obj_9pywrapfst__SymbolTable *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pywrapfst_SymbolTable *(*copy)(struct __pyx_obj_9pywrapfst__SymbolTable *, int __pyx_skip_dispatch);
  __pyx_t_10basictypes_int64 (*get_nth_key)(struct __pyx_obj_9pywrapfst__SymbolTable *, Py_ssize_t, int __pyx_skip_dispatch);
  PyObject *(*labeled_checksum)(struct __pyx_obj_9pywrapfst__SymbolTable *, int __pyx_skip_dispatch);
  bool (*member)(struct __pyx_obj_9pywrapfst__SymbolTable *, PyObject *, int __pyx_skip_dispatch);
  std::string (*name)(struct __pyx_obj_9pywrapfst__SymbolTable *, int __pyx_skip_dispatch);
  size_t (*num_symbols)(struct __pyx_obj_9pywrapfst__SymbolTable *, int __pyx_skip_dispatch);
  void (*write)(struct __pyx_obj_9pywrapfst__SymbolTable *, PyObject *, int __pyx_skip_dispatch);
  void (*write_text)(struct __pyx_obj_9pywrapfst__SymbolTable *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_9pywrapfst__SymbolTable *__pyx_vtabptr_9pywrapfst__SymbolTable;


/* "pywrapfst.pxd":126
 * 
 * 
 * cdef class _EncodeMapperSymbolTable(_SymbolTable):             # <<<<<<<<<<<<<<
 * 
 *   cdef shared_ptr[fst.EncodeMapperClass] _encoder
 */

struct __pyx_vtabstruct_9pywrapfst__EncodeMapperSymbolTable {
  struct __pyx_vtabstruct_9pywrapfst__SymbolTable __pyx_base;
};
static struct __pyx_vtabstruct_9pywrapfst__EncodeMapperSymbolTable *__pyx_vtabptr_9pywrapfst__EncodeMapperSymbolTable;


/* "pywrapfst.pxd":131
 * 
 * 
 * cdef class _FstSymbolTable(_SymbolTable):             # <<<<<<<<<<<<<<
 * 
 *   cdef shared_ptr[fst.FstClass] _fst
 */

struct __pyx_vtabstruct_9pywrapfst__FstSymbolTable {
  struct __pyx_vtabstruct_9pywrapfst__SymbolTable __pyx_base;
};
static struct __pyx_vtabstruct_9pywrapfst__FstSymbolTable *__pyx_vtabptr_9pywrapfst__FstSymbolTable;


/* "pywrapfst.pxd":136
 * 
 * 
 * cdef class _MutableSymbolTable(_SymbolTable):             # <<<<<<<<<<<<<<
 * 
 *   cpdef int64 add_symbol(self, symbol, int64 key=?)
 */

struct __pyx_vtabstruct_9pywrapfst__MutableSymbolTable {
  struct __pyx_vtabstruct_9pywrapfst__SymbolTable __pyx_base;
  __pyx_t_10basictypes_int64 (*add_symbol)(struct __pyx_obj_9pywrapfst__MutableSymbolTable *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_9pywrapfst_19_MutableSymbolTable_add_symbol *__pyx_optional_args);
  void (*add_table)(struct __pyx_obj_9pywrapfst__MutableSymbolTable *, struct __pyx_obj_9pywrapfst__SymbolTable *, int __pyx_skip_dispatch);
  void (*set_name)(struct __pyx_obj_9pywrapfst__MutableSymbolTable *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_9pywrapfst__MutableSymbolTable *__pyx_vtabptr_9pywrapfst__MutableSymbolTable;


/* "pywrapfst.pxd":145
 * 
 * 
 * cdef class _MutableFstSymbolTable(_MutableSymbolTable):             # <<<<<<<<<<<<<<
 * 
 *   cdef shared_ptr[fst.MutableFstClass] _mfst
 */

struct __pyx_vtabstruct_9pywrapfst__MutableFstSymbolTable {
  struct __pyx_vtabstruct_9pywrapfst__MutableSymbolTable __pyx_base;
};
static struct __pyx_vtabstruct_9pywrapfst__MutableFstSymbolTable *__pyx_vtabptr_9pywrapfst__MutableFstSymbolTable;


/* "pywrapfst.pxd":150
 * 
 * 
 * cdef class SymbolTable(_MutableSymbolTable):             # <<<<<<<<<<<<<<
 * 
 *   cdef unique_ptr[fst.SymbolTable] _smart_table
 */

struct __pyx_vtabstruct_9pywrapfst_SymbolTable {
  struct __pyx_vtabstruct_9pywrapfst__MutableSymbolTable __pyx_base;
};
static struct __pyx_vtabstruct_9pywrapfst_SymbolTable *__pyx_vtabptr_9pywrapfst_SymbolTable;


/* "pywrapfst.pxd":171
 * 
 * 
 * cdef class SymbolTableIterator(object):             # <<<<<<<<<<<<<<
 * 
 *   cdef shared_ptr[fst.SymbolTable] _table
 */

struct __pyx_vtabstruct_9pywrapfst_SymbolTableIterator {
  bool (*done)(struct __pyx_obj_9pywrapfst_SymbolTableIterator *, int __pyx_skip_dispatch);
  void (*next)(struct __pyx_obj_9pywrapfst_SymbolTableIterator *, int __pyx_skip_dispatch);
  void (*reset)(struct __pyx_obj_9pywrapfst_SymbolTableIterator *, int __pyx_skip_dispatch);
  std::string (*symbol)(struct __pyx_obj_9pywrapfst_SymbolTableIterator *, int __pyx_skip_dispatch);
  __pyx_t_10basictypes_int64 (*value)(struct __pyx_obj_9pywrapfst_SymbolTableIterator *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_9pywrapfst_SymbolTableIterator *__pyx_vtabptr_9pywrapfst_SymbolTableIterator;


/* "pywrapfst.pxd":190
 * 
 * 
 * cdef class EncodeMapper(object):             # <<<<<<<<<<<<<<
 * 
 *   cdef shared_ptr[fst.EncodeMapperClass] _encoder
 */

struct __pyx_vtabstruct_9pywrapfst_EncodeMapper {
  std::string (*arc_type)(struct __pyx_obj_9pywrapfst_EncodeMapper *, int __pyx_skip_dispatch);
  __pyx_t_10basictypes_uint32 (*flags)(struct __pyx_obj_9pywrapfst_EncodeMapper *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pywrapfst__EncodeMapperSymbolTable *(*input_symbols)(struct __pyx_obj_9pywrapfst_EncodeMapper *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pywrapfst__EncodeMapperSymbolTable *(*output_symbols)(struct __pyx_obj_9pywrapfst_EncodeMapper *, int __pyx_skip_dispatch);
  __pyx_t_10basictypes_uint64 (*properties)(struct __pyx_obj_9pywrapfst_EncodeMapper *, __pyx_t_10basictypes_uint64, int __pyx_skip_dispatch);
  void (*set_input_symbols)(struct __pyx_obj_9pywrapfst_EncodeMapper *, struct __pyx_obj_9pywrapfst__SymbolTable *, int __pyx_skip_dispatch);
  void (*set_output_symbols)(struct __pyx_obj_9pywrapfst_EncodeMapper *, struct __pyx_obj_9pywrapfst__SymbolTable *, int __pyx_skip_dispatch);
  std::string (*weight_type)(struct __pyx_obj_9pywrapfst_EncodeMapper *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_9pywrapfst_EncodeMapper *__pyx_vtabptr_9pywrapfst_EncodeMapper;


/* "pywrapfst.pxd":219
 * 
 * 
 * cdef class _Fst(object):             # <<<<<<<<<<<<<<
 * 
 *   cdef shared_ptr[fst.FstClass] _fst
 */

struct __pyx_vtabstruct_9pywrapfst__Fst {
  std::string (*arc_type)(struct __pyx_obj_9pywrapfst__Fst *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pywrapfst_ArcIterator *(*arcs)(struct __pyx_obj_9pywrapfst__Fst *, __pyx_t_10basictypes_int64, int __pyx_skip_dispatch);
  struct __pyx_obj_9pywrapfst__Fst *(*copy)(struct __pyx_obj_9pywrapfst__Fst *, int __pyx_skip_dispatch);
  void (*draw)(struct __pyx_obj_9pywrapfst__Fst *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_9pywrapfst_4_Fst_draw *__pyx_optional_args);
  struct __pyx_obj_9pywrapfst_Weight *(*final)(struct __pyx_obj_9pywrapfst__Fst *, __pyx_t_10basictypes_int64, int __pyx_skip_dispatch);
  std::string (*fst_type)(struct __pyx_obj_9pywrapfst__Fst *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pywrapfst__FstSymbolTable *(*input_symbols)(struct __pyx_obj_9pywrapfst__Fst *, int __pyx_skip_dispatch);
  size_t (*num_arcs)(struct __pyx_obj_9pywrapfst__Fst *, __pyx_t_10basictypes_int64, int __pyx_skip_dispatch);
  size_t (*num_input_epsilons)(struct __pyx_obj_9pywrapfst__Fst *, __pyx_t_10basictypes_int64, int __pyx_skip_dispatch);
  size_t (*num_output_epsilons)(struct __pyx_obj_9pywrapfst__Fst *, __pyx_t_10basictypes_int64, int __pyx_skip_dispatch);
  struct __pyx_obj_9pywrapfst__FstSymbolTable *(*output_symbols)(struct __pyx_obj_9pywrapfst__Fst *, int __pyx_skip_dispatch);
  __pyx_t_10basictypes_uint64 (*properties)(struct __pyx_obj_9pywrapfst__Fst *, __pyx_t_10basictypes_uint64, bool, int __pyx_skip_dispatch);
  __pyx_t_10basictypes_int64 (*start)(struct __pyx_obj_9pywrapfst__Fst *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pywrapfst_StateIterator *(*states)(struct __pyx_obj_9pywrapfst__Fst *, int __pyx_skip_dispatch);
  std::string (*text)(struct __pyx_obj_9pywrapfst__Fst *, int __pyx_skip_dispatch, struct __pyx_opt_args_9pywrapfst_4_Fst_text *__pyx_optional_args);
  bool (*verify)(struct __pyx_obj_9pywrapfst__Fst *, int __pyx_skip_dispatch);
  std::string (*weight_type)(struct __pyx_obj_9pywrapfst__Fst *, int __pyx_skip_dispatch);
  void (*write)(struct __pyx_obj_9pywrapfst__Fst *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*write_to_string)(struct __pyx_obj_9pywrapfst__Fst *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_9pywrapfst__Fst *__pyx_vtabptr_9pywrapfst__Fst;


/* "pywrapfst.pxd":270
 * 
 * 
 * cdef class _MutableFst(_Fst):             # <<<<<<<<<<<<<<
 * 
 *   cdef shared_ptr[fst.MutableFstClass] _mfst
 */

struct __pyx_vtabstruct_9pywrapfst__MutableFst {
  struct __pyx_vtabstruct_9pywrapfst__Fst __pyx_base;
  void (*_check_mutating_imethod)(struct __pyx_obj_9pywrapfst__MutableFst *);
  void (*_add_arc)(struct __pyx_obj_9pywrapfst__MutableFst *, __pyx_t_10basictypes_int64, struct __pyx_obj_9pywrapfst_Arc *);
  __pyx_t_10basictypes_int64 (*add_state)(struct __pyx_obj_9pywrapfst__MutableFst *, int __pyx_skip_dispatch);
  void (*_arcsort)(struct __pyx_obj_9pywrapfst__MutableFst *, struct __pyx_opt_args_9pywrapfst_11_MutableFst__arcsort *__pyx_optional_args);
  void (*_closure)(struct __pyx_obj_9pywrapfst__MutableFst *, struct __pyx_opt_args_9pywrapfst_11_MutableFst__closure *__pyx_optional_args);
  void (*_concat)(struct __pyx_obj_9pywrapfst__MutableFst *, struct __pyx_obj_9pywrapfst__Fst *);
  void (*_connect)(struct __pyx_obj_9pywrapfst__MutableFst *);
  void (*_decode)(struct __pyx_obj_9pywrapfst__MutableFst *, struct __pyx_obj_9pywrapfst_EncodeMapper *);
  void (*_delete_arcs)(struct __pyx_obj_9pywrapfst__MutableFst *, __pyx_t_10basictypes_int64, struct __pyx_opt_args_9pywrapfst_11_MutableFst__delete_arcs *__pyx_optional_args);
  void (*_delete_states)(struct __pyx_obj_9pywrapfst__MutableFst *, struct __pyx_opt_args_9pywrapfst_11_MutableFst__delete_states *__pyx_optional_args);
  void (*_encode)(struct __pyx_obj_9pywrapfst__MutableFst *, struct __pyx_obj_9pywrapfst_EncodeMapper *);
  void (*_invert)(struct __pyx_obj_9pywrapfst__MutableFst *);
  void (*_minimize)(struct __pyx_obj_9pywrapfst__MutableFst *, struct __pyx_opt_args_9pywrapfst_11_MutableFst__minimize *__pyx_optional_args);
  struct __pyx_obj_9pywrapfst_MutableArcIterator *(*mutable_arcs)(struct __pyx_obj_9pywrapfst__MutableFst *, __pyx_t_10basictypes_int64, int __pyx_skip_dispatch);
  __pyx_t_10basictypes_int64 (*num_states)(struct __pyx_obj_9pywrapfst__MutableFst *, int __pyx_skip_dispatch);
  void (*_project)(struct __pyx_obj_9pywrapfst__MutableFst *, struct __pyx_opt_args_9pywrapfst_11_MutableFst__project *__pyx_optional_args);
  void (*_prune)(struct __pyx_obj_9pywrapfst__MutableFst *, struct __pyx_opt_args_9pywrapfst_11_MutableFst__prune *__pyx_optional_args);
  void (*_push)(struct __pyx_obj_9pywrapfst__MutableFst *, struct __pyx_opt_args_9pywrapfst_11_MutableFst__push *__pyx_optional_args);
  void (*_relabel_pairs)(struct __pyx_obj_9pywrapfst__MutableFst *, struct __pyx_opt_args_9pywrapfst_11_MutableFst__relabel_pairs *__pyx_optional_args);
  void (*_relabel_tables)(struct __pyx_obj_9pywrapfst__MutableFst *, struct __pyx_opt_args_9pywrapfst_11_MutableFst__relabel_tables *__pyx_optional_args);
  void (*_reserve_arcs)(struct __pyx_obj_9pywrapfst__MutableFst *, __pyx_t_10basictypes_int64, size_t);
  void (*_reserve_states)(struct __pyx_obj_9pywrapfst__MutableFst *, __pyx_t_10basictypes_int64);
  void (*_reweight)(struct __pyx_obj_9pywrapfst__MutableFst *, PyObject *, struct __pyx_opt_args_9pywrapfst_11_MutableFst__reweight *__pyx_optional_args);
  void (*_rmepsilon)(struct __pyx_obj_9pywrapfst__MutableFst *, struct __pyx_opt_args_9pywrapfst_11_MutableFst__rmepsilon *__pyx_optional_args);
  void (*_set_final)(struct __pyx_obj_9pywrapfst__MutableFst *, __pyx_t_10basictypes_int64, struct __pyx_opt_args_9pywrapfst_11_MutableFst__set_final *__pyx_optional_args);
  void (*_set_properties)(struct __pyx_obj_9pywrapfst__MutableFst *, __pyx_t_10basictypes_uint64, __pyx_t_10basictypes_uint64);
  void (*_set_start)(struct __pyx_obj_9pywrapfst__MutableFst *, __pyx_t_10basictypes_int64);
  void (*_set_input_symbols)(struct __pyx_obj_9pywrapfst__MutableFst *, struct __pyx_obj_9pywrapfst__SymbolTable *);
  void (*_set_output_symbols)(struct __pyx_obj_9pywrapfst__MutableFst *, struct __pyx_obj_9pywrapfst__SymbolTable *);
  void (*_topsort)(struct __pyx_obj_9pywrapfst__MutableFst *);
  void (*_union)(struct __pyx_obj_9pywrapfst__MutableFst *, struct __pyx_obj_9pywrapfst__Fst *);
};
static struct __pyx_vtabstruct_9pywrapfst__MutableFst *__pyx_vtabptr_9pywrapfst__MutableFst;


/* "pywrapfst.pxd":362
 * 
 * 
 * cdef class Arc(object):             # <<<<<<<<<<<<<<
 * 
 *   cdef unique_ptr[fst.ArcClass] _arc
 */

struct __pyx_vtabstruct_9pywrapfst_Arc {
  struct __pyx_obj_9pywrapfst_Arc *(*copy)(struct __pyx_obj_9pywrapfst_Arc *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_9pywrapfst_Arc *__pyx_vtabptr_9pywrapfst_Arc;


/* "pywrapfst.pxd":372
 * 
 * 
 * cdef class ArcIterator(object):             # <<<<<<<<<<<<<<
 * 
 *   cdef shared_ptr[fst.FstClass] _fst
 */

struct __pyx_vtabstruct_9pywrapfst_ArcIterator {
  bool (*done)(struct __pyx_obj_9pywrapfst_ArcIterator *, int __pyx_skip_dispatch);
  __pyx_t_10basictypes_uint32 (*flags)(struct __pyx_obj_9pywrapfst_ArcIterator *, int __pyx_skip_dispatch);
  void (*next)(struct __pyx_obj_9pywrapfst_ArcIterator *, int __pyx_skip_dispatch);
  size_t (*position)(struct __pyx_obj_9pywrapfst_ArcIterator *, int __pyx_skip_dispatch);
  void (*reset)(struct __pyx_obj_9pywrapfst_ArcIterator *, int __pyx_skip_dispatch);
  void (*seek)(struct __pyx_obj_9pywrapfst_ArcIterator *, size_t, int __pyx_skip_dispatch);
  void (*set_flags)(struct __pyx_obj_9pywrapfst_ArcIterator *, __pyx_t_10basictypes_uint32, __pyx_t_10basictypes_uint32, int __pyx_skip_dispatch);
  PyObject *(*value)(struct __pyx_obj_9pywrapfst_ArcIterator *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_9pywrapfst_ArcIterator *__pyx_vtabptr_9pywrapfst_ArcIterator;


/* "pywrapfst.pxd":394
 * 
 * 
 * cdef class MutableArcIterator(object):             # <<<<<<<<<<<<<<
 * 
 *   cdef shared_ptr[fst.MutableFstClass] _mfst
 */

struct __pyx_vtabstruct_9pywrapfst_MutableArcIterator {
  bool (*done)(struct __pyx_obj_9pywrapfst_MutableArcIterator *, int __pyx_skip_dispatch);
  __pyx_t_10basictypes_uint32 (*flags)(struct __pyx_obj_9pywrapfst_MutableArcIterator *, int __pyx_skip_dispatch);
  void (*next)(struct __pyx_obj_9pywrapfst_MutableArcIterator *, int __pyx_skip_dispatch);
  size_t (*position)(struct __pyx_obj_9pywrapfst_MutableArcIterator *, int __pyx_skip_dispatch);
  void (*reset)(struct __pyx_obj_9pywrapfst_MutableArcIterator *, int __pyx_skip_dispatch);
  void (*seek)(struct __pyx_obj_9pywrapfst_MutableArcIterator *, size_t, int __pyx_skip_dispatch);
  void (*set_flags)(struct __pyx_obj_9pywrapfst_MutableArcIterator *, __pyx_t_10basictypes_uint32, __pyx_t_10basictypes_uint32, int __pyx_skip_dispatch);
  void (*set_value)(struct __pyx_obj_9pywrapfst_MutableArcIterator *, struct __pyx_obj_9pywrapfst_Arc *, int __pyx_skip_dispatch);
  PyObject *(*value)(struct __pyx_obj_9pywrapfst_MutableArcIterator *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_9pywrapfst_MutableArcIterator *__pyx_vtabptr_9pywrapfst_MutableArcIterator;


/* "pywrapfst.pxd":418
 * 
 * 
 * cdef class StateIterator(object):             # <<<<<<<<<<<<<<
 * 
 *   cdef shared_ptr[fst.FstClass] _fst
 */

struct __pyx_vtabstruct_9pywrapfst_StateIterator {
  bool (*done)(struct __pyx_obj_9pywrapfst_StateIterator *, int __pyx_skip_dispatch);
  void (*next)(struct __pyx_obj_9pywrapfst_StateIterator *, int __pyx_skip_dispatch);
  void (*reset)(struct __pyx_obj_9pywrapfst_StateIterator *, int __pyx_skip_dispatch);
  __pyx_t_10basictypes_int64 (*value)(struct __pyx_obj_9pywrapfst_StateIterator *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_9pywrapfst_StateIterator *__pyx_vtabptr_9pywrapfst_StateIterator;


/* "pywrapfst.pxd":505
 * 
 * 
 * cdef class Compiler(object):             # <<<<<<<<<<<<<<
 * 
 *   cdef unique_ptr[stringstream] _sstrm
 */

struct __pyx_vtabstruct_9pywrapfst_Compiler {
  struct __pyx_obj_9pywrapfst__Fst *(*compile)(struct __pyx_obj_9pywrapfst_Compiler *, int __pyx_skip_dispatch);
  void (*write)(struct __pyx_obj_9pywrapfst_Compiler *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_9pywrapfst_Compiler *__pyx_vtabptr_9pywrapfst_Compiler;


/* "pywrapfst.pxd":526
 * # FarReader.
 * 
 * cdef class FarReader(object):             # <<<<<<<<<<<<<<
 * 
 *   cdef unique_ptr[fst.FarReaderClass] _reader
 */

struct __pyx_vtabstruct_9pywrapfst_FarReader {
  std::string (*arc_type)(struct __pyx_obj_9pywrapfst_FarReader *, int __pyx_skip_dispatch);
  bool (*done)(struct __pyx_obj_9pywrapfst_FarReader *, int __pyx_skip_dispatch);
  bool (*error)(struct __pyx_obj_9pywrapfst_FarReader *, int __pyx_skip_dispatch);
  std::string (*far_type)(struct __pyx_obj_9pywrapfst_FarReader *, int __pyx_skip_dispatch);
  bool (*find)(struct __pyx_obj_9pywrapfst_FarReader *, PyObject *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pywrapfst__Fst *(*get_fst)(struct __pyx_obj_9pywrapfst_FarReader *, int __pyx_skip_dispatch);
  std::string (*get_key)(struct __pyx_obj_9pywrapfst_FarReader *, int __pyx_skip_dispatch);
  void (*next)(struct __pyx_obj_9pywrapfst_FarReader *, int __pyx_skip_dispatch);
  void (*reset)(struct __pyx_obj_9pywrapfst_FarReader *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_9pywrapfst_FarReader *__pyx_vtabptr_9pywrapfst_FarReader;


/* "pywrapfst.pxd":551
 * # FarWriter.
 * 
 * cdef class FarWriter(object):             # <<<<<<<<<<<<<<
 * 
 *   cdef unique_ptr[fst.FarWriterClass] _writer
 */

struct __pyx_vtabstruct_9pywrapfst_FarWriter {
  std::string (*arc_type)(struct __pyx_obj_9pywrapfst_FarWriter *, int __pyx_skip_dispatch);
  void (*close)(struct __pyx_obj_9pywrapfst_FarWriter *);
  void (*add)(struct __pyx_obj_9pywrapfst_FarWriter *, PyObject *, struct __pyx_obj_9pywrapfst__Fst *, int __pyx_skip_dispatch);
  bool (*error)(struct __pyx_obj_9pywrapfst_FarWriter *, int __pyx_skip_dispatch);
  std::string (*far_type)(struct __pyx_obj_9pywrapfst_FarWriter *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_9pywrapfst_FarWriter *__pyx_vtabptr_9pywrapfst_FarWriter;


/* "pynini.pyx":364
 * 
 * 
 * cdef class Fst(_MutableFst):             # <<<<<<<<<<<<<<
 * 
 *   """
 */

struct __pyx_vtabstruct_6pynini_Fst {
  struct __pyx_vtabstruct_9pywrapfst__MutableFst __pyx_base;
  void (*_from_MutableFstClass)(struct __pyx_obj_6pynini_Fst *, fst::script::MutableFstClass *);
  struct __pyx_obj_6pynini_StringPathIterator *(*paths)(struct __pyx_obj_6pynini_Fst *, int __pyx_skip_dispatch, struct __pyx_opt_args_6pynini_3Fst_paths *__pyx_optional_args);
  std::string (*stringify)(struct __pyx_obj_6pynini_Fst *, int __pyx_skip_dispatch, struct __pyx_opt_args_6pynini_3Fst_stringify *__pyx_optional_args);
  struct __pyx_obj_6pynini_Fst *(*copy)(struct __pyx_obj_6pynini_Fst *, int __pyx_skip_dispatch);
  void (*_optimize)(struct __pyx_obj_6pynini_Fst *, struct __pyx_opt_args_6pynini_3Fst__optimize *__pyx_optional_args);
};
static struct __pyx_vtabstruct_6pynini_Fst *__pyx_vtabptr_6pynini_Fst;


/* "pynini.pyx":1528
 * 
 * 
 * cdef class PdtParentheses(object):             # <<<<<<<<<<<<<<
 * 
 *   """
 */

struct __pyx_vtabstruct_6pynini_PdtParentheses {
  struct __pyx_obj_6pynini_PdtParentheses *(*copy)(struct __pyx_obj_6pynini_PdtParentheses *, int __pyx_skip_dispatch);
  void (*add_pair)(struct __pyx_obj_6pynini_PdtParentheses *, __pyx_t_10basictypes_int64, __pyx_t_10basictypes_int64, int __pyx_skip_dispatch);
  void (*write)(struct __pyx_obj_6pynini_PdtParentheses *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_6pynini_PdtParentheses *__pyx_vtabptr_6pynini_PdtParentheses;


/* "pynini.pyx":1851
 * 
 * 
 * cdef class MPdtParentheses(object):             # <<<<<<<<<<<<<<
 * 
 *   """
 */

struct __pyx_vtabstruct_6pynini_MPdtParentheses {
  struct __pyx_obj_6pynini_MPdtParentheses *(*copy)(struct __pyx_obj_6pynini_MPdtParentheses *, int __pyx_skip_dispatch);
  void (*add_triple)(struct __pyx_obj_6pynini_MPdtParentheses *, __pyx_t_10basictypes_int64, __pyx_t_10basictypes_int64, __pyx_t_10basictypes_int64, int __pyx_skip_dispatch);
  void (*write)(struct __pyx_obj_6pynini_MPdtParentheses *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_6pynini_MPdtParentheses *__pyx_vtabptr_6pynini_MPdtParentheses;


/* "pynini.pyx":2082
 * 
 * 
 * cdef class StringPathIterator(object):             # <<<<<<<<<<<<<<
 * 
 *   """
 */

struct __pyx_vtabstruct_6pynini_StringPathIterator {
  bool (*done)(struct __pyx_obj_6pynini_StringPathIterator *, int __pyx_skip_dispatch);
  void (*next)(struct __pyx_obj_6pynini_StringPathIterator *, int __pyx_skip_dispatch);
  void (*reset)(struct __pyx_obj_6pynini_StringPathIterator *, int __pyx_skip_dispatch);
  bool (*error)(struct __pyx_obj_6pynini_StringPathIterator *, int __pyx_skip_dispatch);
  std::string (*istring)(struct __pyx_obj_6pynini_StringPathIterator *, int __pyx_skip_dispatch);
  std::string (*ostring)(struct __pyx_obj_6pynini_StringPathIterator *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pywrapfst_Weight *(*weight)(struct __pyx_obj_6pynini_StringPathIterator *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_6pynini_StringPathIterator *__pyx_vtabptr_6pynini_StringPathIterator;


/* "pynini.pyx":2277
 * 
 * 
 * cdef class Far(object):             # <<<<<<<<<<<<<<
 * 
 *   """
 */

struct __pyx_vtabstruct_6pynini_Far {
  void (*_check_mode)(struct __pyx_obj_6pynini_Far *, char);
  void (*_check_not_mode)(struct __pyx_obj_6pynini_Far *, char);
  bool (*error)(struct __pyx_obj_6pynini_Far *, int __pyx_skip_dispatch);
  std::string (*arc_type)(struct __pyx_obj_6pynini_Far *, int __pyx_skip_dispatch);
  bool (*closed)(struct __pyx_obj_6pynini_Far *, int __pyx_skip_dispatch);
  std::string (*far_type)(struct __pyx_obj_6pynini_Far *, int __pyx_skip_dispatch);
  std::string (*mode)(struct __pyx_obj_6pynini_Far *, int __pyx_skip_dispatch);
  std::string (*name)(struct __pyx_obj_6pynini_Far *, int __pyx_skip_dispatch);
  bool (*done)(struct __pyx_obj_6pynini_Far *, int __pyx_skip_dispatch);
  bool (*find)(struct __pyx_obj_6pynini_Far *, PyObject *, int __pyx_skip_dispatch);
  struct __pyx_obj_6pynini_Fst *(*get_fst)(struct __pyx_obj_6pynini_Far *, int __pyx_skip_dispatch);
  std::string (*get_key)(struct __pyx_obj_6pynini_Far *, int __pyx_skip_dispatch);
  void (*next)(struct __pyx_obj_6pynini_Far *, int __pyx_skip_dispatch);
  void (*reset)(struct __pyx_obj_6pynini_Far *, int __pyx_skip_dispatch);
  void (*add)(struct __pyx_obj_6pynini_Far *, PyObject *, struct __pyx_obj_6pynini_Fst *, int __pyx_skip_dispatch);
  void (*close)(struct __pyx_obj_6pynini_Far *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_6pynini_Far *__pyx_vtabptr_6pynini_Far;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunction.proto */
#define __Pyx_CyFunction_USED 1
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code)\
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* tp_new.proto */
#define __Pyx_tp_new(type_obj, args) __Pyx_tp_new_kwargs(type_obj, args, NULL)
static CYTHON_INLINE PyObject* __Pyx_tp_new_kwargs(PyObject* type_obj, PyObject* args, PyObject* kwargs) {
    return (PyObject*) (((PyTypeObject*)type_obj)->tp_new((PyTypeObject*)type_obj, args, kwargs));
}

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* CallNextTpDealloc.proto */
static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc);

/* IncludeStringH.proto */
#include <string.h>

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* ClassMethod.proto */
#include "descrobject.h"
static PyObject* __Pyx_Method_ClassMethod(PyObject *method);

/* GetNameInClass.proto */
static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int64_t(int64_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_char(char value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64_t(uint64_t value);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE int64_t __Pyx_PyInt_As_int64_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int32_t __Pyx_PyInt_As_int32_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE uint64_t __Pyx_PyInt_As_uint64_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg);

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyThreadState *, PyObject *);
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->exc_type, &(self)->exc_value, &(self)->exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(self);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->exc_type, (self)->exc_value, (self)->exc_traceback);\
    (self)->exc_type = (self)->exc_value = (self)->exc_traceback = NULL;\
    }
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__pyx_CoroutineObject *self);

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* PyIdentifierFromString.proto */
#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

/* ModuleImport.proto */
static PyObject *__Pyx_ImportModule(const char *name);

/* TypeImport.proto */
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

/* FunctionImport.proto */
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static void __pyx_f_6pynini_3Fst__from_MutableFstClass(struct __pyx_obj_6pynini_Fst *__pyx_v_self, fst::script::MutableFstClass *__pyx_v_tfst); /* proto*/
static struct __pyx_obj_6pynini_StringPathIterator *__pyx_f_6pynini_3Fst_paths(struct __pyx_obj_6pynini_Fst *__pyx_v_self, int __pyx_skip_dispatch, struct __pyx_opt_args_6pynini_3Fst_paths *__pyx_optional_args); /* proto*/
static std::string __pyx_f_6pynini_3Fst_stringify(struct __pyx_obj_6pynini_Fst *__pyx_v_self, int __pyx_skip_dispatch, struct __pyx_opt_args_6pynini_3Fst_stringify *__pyx_optional_args); /* proto*/
struct __pyx_obj_6pynini_Fst *__pyx_f_6pynini_3Fst_copy(struct __pyx_obj_6pynini_Fst *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
struct __pyx_obj_6pynini_Fst *__pyx_f_6pynini_3Fst_copy__pyx_wrap_1(struct __pyx_obj_6pynini_Fst *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static void __pyx_f_6pynini_3Fst__optimize(struct __pyx_obj_6pynini_Fst *__pyx_v_self, struct __pyx_opt_args_6pynini_3Fst__optimize *__pyx_optional_args); /* proto*/
static struct __pyx_obj_6pynini_PdtParentheses *__pyx_f_6pynini_14PdtParentheses_copy(struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static void __pyx_f_6pynini_14PdtParentheses_add_pair(struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_self, __pyx_t_10basictypes_int64 __pyx_v_push, __pyx_t_10basictypes_int64 __pyx_v_pop, int __pyx_skip_dispatch); /* proto*/
static void __pyx_f_6pynini_14PdtParentheses_write(struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_self, PyObject *__pyx_v_filename, int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_6pynini_MPdtParentheses *__pyx_f_6pynini_15MPdtParentheses_copy(struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static void __pyx_f_6pynini_15MPdtParentheses_add_triple(struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_self, __pyx_t_10basictypes_int64 __pyx_v_push, __pyx_t_10basictypes_int64 __pyx_v_pop, __pyx_t_10basictypes_int64 __pyx_v_assignment, int __pyx_skip_dispatch); /* proto*/
static void __pyx_f_6pynini_15MPdtParentheses_write(struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_self, PyObject *__pyx_v_filename, int __pyx_skip_dispatch); /* proto*/
static bool __pyx_f_6pynini_18StringPathIterator_done(struct __pyx_obj_6pynini_StringPathIterator *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static void __pyx_f_6pynini_18StringPathIterator_next(struct __pyx_obj_6pynini_StringPathIterator *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static void __pyx_f_6pynini_18StringPathIterator_reset(struct __pyx_obj_6pynini_StringPathIterator *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static bool __pyx_f_6pynini_18StringPathIterator_error(struct __pyx_obj_6pynini_StringPathIterator *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static std::string __pyx_f_6pynini_18StringPathIterator_istring(struct __pyx_obj_6pynini_StringPathIterator *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static std::string __pyx_f_6pynini_18StringPathIterator_ostring(struct __pyx_obj_6pynini_StringPathIterator *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_9pywrapfst_Weight *__pyx_f_6pynini_18StringPathIterator_weight(struct __pyx_obj_6pynini_StringPathIterator *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static void __pyx_f_6pynini_3Far__check_mode(struct __pyx_obj_6pynini_Far *__pyx_v_self, char __pyx_v_mode); /* proto*/
static void __pyx_f_6pynini_3Far__check_not_mode(struct __pyx_obj_6pynini_Far *__pyx_v_self, char __pyx_v_mode); /* proto*/
static bool __pyx_f_6pynini_3Far_error(struct __pyx_obj_6pynini_Far *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static std::string __pyx_f_6pynini_3Far_arc_type(struct __pyx_obj_6pynini_Far *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static bool __pyx_f_6pynini_3Far_closed(struct __pyx_obj_6pynini_Far *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static std::string __pyx_f_6pynini_3Far_far_type(struct __pyx_obj_6pynini_Far *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static std::string __pyx_f_6pynini_3Far_mode(struct __pyx_obj_6pynini_Far *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static std::string __pyx_f_6pynini_3Far_name(struct __pyx_obj_6pynini_Far *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static bool __pyx_f_6pynini_3Far_done(struct __pyx_obj_6pynini_Far *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static bool __pyx_f_6pynini_3Far_find(struct __pyx_obj_6pynini_Far *__pyx_v_self, PyObject *__pyx_v_key, int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_6pynini_Fst *__pyx_f_6pynini_3Far_get_fst(struct __pyx_obj_6pynini_Far *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static std::string __pyx_f_6pynini_3Far_get_key(struct __pyx_obj_6pynini_Far *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static void __pyx_f_6pynini_3Far_next(struct __pyx_obj_6pynini_Far *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static void __pyx_f_6pynini_3Far_reset(struct __pyx_obj_6pynini_Far *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static void __pyx_f_6pynini_3Far_add(struct __pyx_obj_6pynini_Far *__pyx_v_self, PyObject *__pyx_v_key, struct __pyx_obj_6pynini_Fst *__pyx_v_fst, int __pyx_skip_dispatch); /* proto*/
static void __pyx_f_6pynini_3Far_close(struct __pyx_obj_6pynini_Far *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/

/* Module declarations from 'libcpp' */

/* Module declarations from 'libcpp.cast' */

/* Module declarations from 'libcpp.memory' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'basictypes' */

/* Module declarations from 'libc.stddef' */

/* Module declarations from 'libc.time' */

/* Module declarations from 'ios' */

/* Module declarations from 'fst' */

/* Module declarations from 'memory' */

/* Module declarations from 'pywrapfst' */
static PyTypeObject *__pyx_ptype_9pywrapfst_Weight = 0;
static PyTypeObject *__pyx_ptype_9pywrapfst__SymbolTable = 0;
static PyTypeObject *__pyx_ptype_9pywrapfst__EncodeMapperSymbolTable = 0;
static PyTypeObject *__pyx_ptype_9pywrapfst__FstSymbolTable = 0;
static PyTypeObject *__pyx_ptype_9pywrapfst__MutableSymbolTable = 0;
static PyTypeObject *__pyx_ptype_9pywrapfst__MutableFstSymbolTable = 0;
static PyTypeObject *__pyx_ptype_9pywrapfst_SymbolTable = 0;
static PyTypeObject *__pyx_ptype_9pywrapfst_SymbolTableIterator = 0;
static PyTypeObject *__pyx_ptype_9pywrapfst_EncodeMapper = 0;
static PyTypeObject *__pyx_ptype_9pywrapfst__Fst = 0;
static PyTypeObject *__pyx_ptype_9pywrapfst__MutableFst = 0;
static PyTypeObject *__pyx_ptype_9pywrapfst_Arc = 0;
static PyTypeObject *__pyx_ptype_9pywrapfst_ArcIterator = 0;
static PyTypeObject *__pyx_ptype_9pywrapfst_MutableArcIterator = 0;
static PyTypeObject *__pyx_ptype_9pywrapfst_StateIterator = 0;
static PyTypeObject *__pyx_ptype_9pywrapfst_Compiler = 0;
static PyTypeObject *__pyx_ptype_9pywrapfst_FarReader = 0;
static PyTypeObject *__pyx_ptype_9pywrapfst_FarWriter = 0;
static std::string (*__pyx_f_9pywrapfst_tostring)(PyObject *, struct __pyx_opt_args_9pywrapfst_tostring *__pyx_optional_args); /*proto*/
static enum fst::ComposeFilter (*__pyx_f_9pywrapfst__get_compose_filter)(std::string const &); /*proto*/
static enum fst::QueueType (*__pyx_f_9pywrapfst__get_queue_type)(std::string const &); /*proto*/
static enum fst::ReplaceLabelType (*__pyx_f_9pywrapfst__get_replace_label_type)(std::string const &, bool); /*proto*/
static fst::script::WeightClass (*__pyx_f_9pywrapfst__get_WeightClass_or_One)(std::string const &, PyObject *); /*proto*/
static fst::script::WeightClass (*__pyx_f_9pywrapfst__get_WeightClass_or_Zero)(std::string const &, PyObject *); /*proto*/
static struct __pyx_obj_9pywrapfst_SymbolTable *(*__pyx_f_9pywrapfst__init_SymbolTable)(fst::SymbolTable *); /*proto*/
static struct __pyx_obj_9pywrapfst__MutableFst *(*__pyx_f_9pywrapfst__init_MutableFst)(__pyx_t_9pywrapfst_MutableFstClass_ptr); /*proto*/

/* Module declarations from 'pynini_includes' */

/* Module declarations from 'pynini' */
static PyTypeObject *__pyx_ptype_6pynini_Fst = 0;
static PyTypeObject *__pyx_ptype_6pynini_PdtParentheses = 0;
static PyTypeObject *__pyx_ptype_6pynini_MPdtParentheses = 0;
static PyTypeObject *__pyx_ptype_6pynini_StringPathIterator = 0;
static PyTypeObject *__pyx_ptype_6pynini_Far = 0;
static PyTypeObject *__pyx_ptype_6pynini___pyx_scope_struct___1arg_patch = 0;
static PyTypeObject *__pyx_ptype_6pynini___pyx_scope_struct_1__shortestdistance_patch = 0;
static PyTypeObject *__pyx_ptype_6pynini___pyx_scope_struct_2__compose_patch = 0;
static PyTypeObject *__pyx_ptype_6pynini___pyx_scope_struct_3__difference_patch = 0;
static PyTypeObject *__pyx_ptype_6pynini___pyx_scope_struct_4__comp_patch = 0;
static PyTypeObject *__pyx_ptype_6pynini___pyx_scope_struct_5__comp_merge_patch = 0;
static PyTypeObject *__pyx_ptype_6pynini___pyx_scope_struct_6___iter__ = 0;
static PyTypeObject *__pyx_ptype_6pynini___pyx_scope_struct_7___iter__ = 0;
static PyTypeObject *__pyx_ptype_6pynini___pyx_scope_struct_8_istrings = 0;
static PyTypeObject *__pyx_ptype_6pynini___pyx_scope_struct_9_ostrings = 0;
static PyTypeObject *__pyx_ptype_6pynini___pyx_scope_struct_10_weights = 0;
static PyTypeObject *__pyx_ptype_6pynini___pyx_scope_struct_11__copy_patch = 0;
static __pyx_t_10basictypes_uint64 __pyx_v_6pynini_kAcceptorAndString;
static __pyx_t_10basictypes_uint64 __pyx_v_6pynini_kDifferenceRhs;
static enum fst::StringTokenType __pyx_f_6pynini__get_token_type(std::string const &); /*proto*/
static enum fst::CDRewriteDirection __pyx_f_6pynini__get_cdrewrite_direction(std::string const &); /*proto*/
static enum fst::CDRewriteMode __pyx_f_6pynini__get_cdrewrite_mode(std::string const &); /*proto*/
static enum fst::PdtComposeFilter __pyx_f_6pynini__get_pdt_compose_filter(std::string const &); /*proto*/
static enum fst::PdtParserType __pyx_f_6pynini__get_pdt_parser_type(std::string const &); /*proto*/
static void __pyx_f_6pynini__add_parentheses_symbols(fst::script::MutableFstClass *, std::vector<std::pair<__pyx_t_10basictypes_int64,__pyx_t_10basictypes_int64> >  const &, bool); /*proto*/
static void __pyx_f_6pynini__maybe_arcsort(fst::script::MutableFstClass *, fst::script::MutableFstClass *); /*proto*/
static struct __pyx_obj_6pynini_Fst *__pyx_f_6pynini__compile_or_copy_Fst(PyObject *, struct __pyx_opt_args_6pynini__compile_or_copy_Fst *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_6pynini__compile_or_copy_two_Fsts(PyObject *, PyObject *); /*proto*/
static struct __pyx_obj_6pynini_Fst *__pyx_f_6pynini__init_Fst_from_MutableFst(struct __pyx_obj_9pywrapfst__MutableFst *); /*proto*/
static struct __pyx_obj_6pynini_Fst *__pyx_f_6pynini__from_pywrapfst(struct __pyx_obj_9pywrapfst__Fst *, int __pyx_skip_dispatch); /*proto*/
static struct __pyx_obj_6pynini_Fst *__pyx_f_6pynini__read(PyObject *, int __pyx_skip_dispatch); /*proto*/
static struct __pyx_obj_6pynini_Fst *__pyx_f_6pynini__read_from_string(PyObject *, int __pyx_skip_dispatch); /*proto*/
static struct __pyx_obj_6pynini_Fst *__pyx_f_6pynini_acceptor(PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_6pynini_acceptor *__pyx_optional_args); /*proto*/
static struct __pyx_obj_6pynini_Fst *__pyx_f_6pynini_transducer(PyObject *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_6pynini_transducer *__pyx_optional_args); /*proto*/
static struct __pyx_obj_6pynini_Fst *__pyx_f_6pynini_cdrewrite(PyObject *, PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_6pynini_cdrewrite *__pyx_optional_args); /*proto*/
static struct __pyx_obj_6pynini_Fst *__pyx_f_6pynini_epsilon_machine(int __pyx_skip_dispatch, struct __pyx_opt_args_6pynini_epsilon_machine *__pyx_optional_args); /*proto*/
static struct __pyx_obj_6pynini_Fst *__pyx_f_6pynini_leniently_compose(PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_6pynini_leniently_compose *__pyx_optional_args); /*proto*/
static bool __pyx_f_6pynini_matches(PyObject *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_6pynini_matches *__pyx_optional_args); /*proto*/
static struct __pyx_obj_6pynini_Fst *__pyx_f_6pynini_string_file(PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_6pynini_string_file *__pyx_optional_args); /*proto*/
static struct __pyx_obj_6pynini_Fst *__pyx_f_6pynini_string_map(PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_6pynini_string_map *__pyx_optional_args); /*proto*/
static struct __pyx_obj_6pynini_Fst *__pyx_f_6pynini_mpdt_compose(PyObject *, PyObject *, struct __pyx_obj_6pynini_MPdtParentheses *, int __pyx_skip_dispatch, struct __pyx_opt_args_6pynini_mpdt_compose *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_6pynini___pyx_unpickle_PdtParentheses__set_state(struct __pyx_obj_6pynini_PdtParentheses *, PyObject *); /*proto*/
static PyObject *__pyx_f_6pynini___pyx_unpickle_MPdtParentheses__set_state(struct __pyx_obj_6pynini_MPdtParentheses *, PyObject *); /*proto*/
static PyObject *__pyx_f_6pynini___pyx_unpickle_Far__set_state(struct __pyx_obj_6pynini_Far *, PyObject *); /*proto*/
static PyObject *__pyx_convert_pair_to_py___pyx_t_10basictypes_int64______pyx_t_10basictypes_int64(std::pair<__pyx_t_10basictypes_int64,__pyx_t_10basictypes_int64>  const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_pair_3c___pyx_t_10basictypes_int64_2c___pyx_t_10basictypes_int64_3e___(const std::vector<std::pair<__pyx_t_10basictypes_int64,__pyx_t_10basictypes_int64> >  &); /*proto*/
static std::pair<__pyx_t_10basictypes_int64,__pyx_t_10basictypes_int64>  __pyx_convert_pair_from_py___pyx_t_10basictypes_int64__and___pyx_t_10basictypes_int64(PyObject *); /*proto*/
static std::vector<std::pair<__pyx_t_10basictypes_int64,__pyx_t_10basictypes_int64> >  __pyx_convert_vector_from_py_std_3a__3a_pair_3c___pyx_t_10basictypes_int64_2c___pyx_t_10basictypes_int64_3e___(PyObject *); /*proto*/
static PyObject *__pyx_convert_vector_to_py___pyx_t_10basictypes_int64(const std::vector<__pyx_t_10basictypes_int64>  &); /*proto*/
static std::vector<__pyx_t_10basictypes_int64>  __pyx_convert_vector_from_py___pyx_t_10basictypes_int64(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "pynini"
extern int __pyx_module_is_main_pynini;
int __pyx_module_is_main_pynini = 0;

/* Implementation of 'pynini' */
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_KeyError;
static PyObject *__pyx_builtin_super;
static PyObject *__pyx_builtin_id;
static PyObject *__pyx_builtin_StopIteration;
static PyObject *__pyx_builtin_TypeError;
static const char __pyx_k_a[] = "a";
static const char __pyx_k_c[] = "{:c}";
static const char __pyx_k_r[] = "r";
static const char __pyx_k_t[] = "t";
static const char __pyx_k_u[] = "u";
static const char __pyx_k_id[] = "id";
static const char __pyx_k_nt[] = "nt";
static const char __pyx_k_tb[] = "tb";
static const char __pyx_k_wc[] = "wc";
static const char __pyx_k_Arc[] = "Arc";
static const char __pyx_k_Fst[] = "Fst";
static const char __pyx_k_add[] = "add";
static const char __pyx_k_arg[] = "arg";
static const char __pyx_k_cal[] = "cal";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_exc[] = "exc";
static const char __pyx_k_fnc[] = "fnc";
static const char __pyx_k_fst[] = "fst";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_lhs[] = "lhs";
static const char __pyx_k_ltr[] = "ltr";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_obl[] = "obl";
static const char __pyx_k_pdt[] = "pdt";
static const char __pyx_k_pop[] = "pop";
static const char __pyx_k_ral[] = "ral";
static const char __pyx_k_rep[] = "rep";
static const char __pyx_k_rho[] = "rho";
static const char __pyx_k_rhs[] = "rhs";
static const char __pyx_k_tau[] = "tau";
static const char __pyx_k_arg1[] = "arg1";
static const char __pyx_k_arg2[] = "arg2";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_auto[] = "auto";
static const char __pyx_k_byte[] = "byte";
static const char __pyx_k_copy[] = "copy";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_done[] = "done";
static const char __pyx_k_fifo[] = "fifo";
static const char __pyx_k_find[] = "find";
static const char __pyx_k_ifst[] = "ifst";
static const char __pyx_k_ipdt[] = "ipdt";
static const char __pyx_k_iter[] = "__iter__";
static const char __pyx_k_left[] = "left";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mode[] = "mode";
static const char __pyx_k_mpdt[] = "mpdt";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_next[] = "next";
static const char __pyx_k_open[] = "open";
static const char __pyx_k_opts[] = "opts";
static const char __pyx_k_plus[] = "plus";
static const char __pyx_k_push[] = "push";
static const char __pyx_k_read[] = "read";
static const char __pyx_k_rest[] = "rest";
static const char __pyx_k_root[] = "root";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_ERROR[] = "ERROR";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_equal[] = "equal";
static const char __pyx_k_error[] = "error";
static const char __pyx_k_first[] = "first";
static const char __pyx_k_ifst1[] = "ifst1";
static const char __pyx_k_ifst2[] = "ifst2";
static const char __pyx_k_impdt[] = "impdt";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_lines[] = "lines";
static const char __pyx_k_lower[] = "lower";
static const char __pyx_k_pairs[] = "pairs";
static const char __pyx_k_paren[] = "paren";
static const char __pyx_k_patch[] = "patch";
static const char __pyx_k_paths[] = "paths";
static const char __pyx_k_power[] = "power";
static const char __pyx_k_prune[] = "prune";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_reset[] = "reset";
static const char __pyx_k_super[] = "super";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_times[] = "times";
static const char __pyx_k_union[] = "union";
static const char __pyx_k_upper[] = "upper";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_wraps[] = "wraps";
static const char __pyx_k_write[] = "write";
static const char __pyx_k_CYCLIC[] = "CYCLIC";
static const char __pyx_k_STRING[] = "STRING";
static const char __pyx_k_Weight[] = "Weight";
static const char __pyx_k_arcmap[] = "arcmap";
static const char __pyx_k_closed[] = "closed";
static const char __pyx_k_concat[] = "concat";
static const char __pyx_k_create[] = "create";
static const char __pyx_k_decode[] = "decode";
static const char __pyx_k_divide[] = "divide";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_invert[] = "invert";
static const char __pyx_k_kwargs[] = "kwargs";
static const char __pyx_k_lambda[] = "lambda_";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_parens[] = "parens";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_pynini[] = "pynini";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_result[] = "result";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_weight[] = "weight";
static const char __pyx_k_ACYCLIC[] = "ACYCLIC";
static const char __pyx_k_MUTABLE[] = "MUTABLE";
static const char __pyx_k_arcsort[] = "arcsort";
static const char __pyx_k_astring[] = "astring";
static const char __pyx_k_closure[] = "closure";
static const char __pyx_k_compose[] = "compose";
static const char __pyx_k_connect[] = "connect";
static const char __pyx_k_default[] = "default";
static const char __pyx_k_get_fst[] = "get_fst";
static const char __pyx_k_get_key[] = "get_key";
static const char __pyx_k_istring[] = "istring";
static const char __pyx_k_logging[] = "logging";
static const char __pyx_k_neither[] = "neither";
static const char __pyx_k_nonterm[] = "nonterm";
static const char __pyx_k_ostring[] = "ostring";
static const char __pyx_k_path_gc[] = "path_gc";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_project[] = "project";
static const char __pyx_k_randgen[] = "randgen";
static const char __pyx_k_replace[] = "replace";
static const char __pyx_k_reverse[] = "reverse";
static const char __pyx_k_topsort[] = "topsort";
static const char __pyx_k_warning[] = "warning";
static const char __pyx_k_weights[] = "weights";
static const char __pyx_k_ACCEPTOR[] = "ACCEPTOR";
static const char __pyx_k_EPSILONS[] = "EPSILONS";
static const char __pyx_k_EXPANDED[] = "EXPANDED";
static const char __pyx_k_KeyError[] = "KeyError";
static const char __pyx_k_NO_LABEL[] = "NO_LABEL";
static const char __pyx_k_WEIGHTED[] = "WEIGHTED";
static const char __pyx_k_acceptor[] = "acceptor";
static const char __pyx_k_add_pair[] = "add_pair";
static const char __pyx_k_arc_type[] = "arc_type";
static const char __pyx_k_far_type[] = "far_type";
static const char __pyx_k_filename[] = "filename";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_istrings[] = "istrings";
static const char __pyx_k_left_pdt[] = "left_pdt";
static const char __pyx_k_minimize[] = "minimize";
static const char __pyx_k_optimize[] = "optimize";
static const char __pyx_k_ostrings[] = "ostrings";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_reweight[] = "reweight";
static const char __pyx_k_root_fst[] = "root_fst";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_standard[] = "standard";
static const char __pyx_k_statemap[] = "statemap";
static const char __pyx_k_ARC_FLAGS[] = "ARC_FLAGS";
static const char __pyx_k_NO_SYMBOL[] = "NO_SYMBOL";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_direction[] = "direction";
static const char __pyx_k_functools[] = "functools";
static const char __pyx_k_intersect[] = "intersect";
static const char __pyx_k_left_mpdt[] = "left_mpdt";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_pywrapfst[] = "pywrapfst";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_rmepsilon[] = "rmepsilon";
static const char __pyx_k_stringify[] = "stringify";
static const char __pyx_k_1arg_patch[] = "_1arg_patch";
static const char __pyx_k_ACCESSIBLE[] = "ACCESSIBLE";
static const char __pyx_k_FstIOError[] = "FstIOError";
static const char __pyx_k_FstOpError[] = "FstOpError";
static const char __pyx_k_I_EPSILONS[] = "I_EPSILONS";
static const char __pyx_k_NOT_STRING[] = "NOT_STRING";
static const char __pyx_k_O_EPSILONS[] = "O_EPSILONS";
static const char __pyx_k_TOP_SORTED[] = "TOP_SORTED";
static const char __pyx_k_UNWEIGHTED[] = "UNWEIGHTED";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_add_triple[] = "add_triple";
static const char __pyx_k_assignment[] = "assignment";
static const char __pyx_k_comp_patch[] = "_comp_patch";
static const char __pyx_k_copy_patch[] = "_copy_patch";
static const char __pyx_k_difference[] = "difference";
static const char __pyx_k_equivalent[] = "equivalent";
static const char __pyx_k_isomorphic[] = "isomorphic";
static const char __pyx_k_pdt_expand[] = "pdt_expand";
static const char __pyx_k_pynini_pyx[] = "pynini.pyx";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_queue_type[] = "queue_type";
static const char __pyx_k_result_fst[] = "result_fst";
static const char __pyx_k_sigma_star[] = "sigma_star";
static const char __pyx_k_token_type[] = "token_type";
static const char __pyx_k_transducer[] = "transducer";
static const char __pyx_k_ArcIterator[] = "ArcIterator";
static const char __pyx_k_FstArgError[] = "FstArgError";
static const char __pyx_k_NO_EPSILONS[] = "NO_EPSILONS";
static const char __pyx_k_NO_STATE_ID[] = "NO_STATE_ID";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_Read_failed[] = "Read failed";
static const char __pyx_k_SymbolTable[] = "_SymbolTable";
static const char __pyx_k_determinize[] = "determinize";
static const char __pyx_k_mpdt_expand[] = "mpdt_expand";
static const char __pyx_k_pdt_compose[] = "pdt_compose";
static const char __pyx_k_pdt_replace[] = "pdt_replace";
static const char __pyx_k_pdt_reverse[] = "pdt_reverse";
static const char __pyx_k_replacement[] = "replacement";
static const char __pyx_k_synchronize[] = "synchronize";
static const char __pyx_k_ARC_NO_CACHE[] = "ARC_NO_CACHE";
static const char __pyx_k_COACCESSIBLE[] = "COACCESSIBLE";
static const char __pyx_k_ENCODE_FLAGS[] = "ENCODE_FLAGS";
static const char __pyx_k_EncodeMapper[] = "EncodeMapper";
static const char __pyx_k_NOT_ACCEPTOR[] = "NOT_ACCEPTOR";
static const char __pyx_k_disambiguate[] = "disambiguate";
static const char __pyx_k_epsnormalize[] = "epsnormalize";
static const char __pyx_k_mpdt_reverse[] = "mpdt_reverse";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_replacements[] = "replacements";
static const char __pyx_k_return_label[] = "return_label";
static const char __pyx_k_shortestpath[] = "shortestpath";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_ENCODE_LABELS[] = "ENCODE_LABELS";
static const char __pyx_k_FstIndexError[] = "FstIndexError";
static const char __pyx_k_NO_I_EPSILONS[] = "NO_I_EPSILONS";
static const char __pyx_k_NO_O_EPSILONS[] = "NO_O_EPSILONS";
static const char __pyx_k_Read_failed_r[] = "Read failed: {!r}";
static const char __pyx_k_StateIterator[] = "StateIterator";
static const char __pyx_k_StopIteration[] = "StopIteration";
static const char __pyx_k_SymbolTable_2[] = "SymbolTable";
static const char __pyx_k_compose_patch[] = "_compose_patch";
static const char __pyx_k_compute_props[] = "compute_props";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_relabel_pairs[] = "relabel_pairs";
static const char __pyx_k_result_parens[] = "result_parens";
static const char __pyx_k_ENCODE_WEIGHTS[] = "ENCODE_WEIGHTS";
static const char __pyx_k_FST_PROPERTIES[] = "FST_PROPERTIES";
static const char __pyx_k_INITIAL_CYCLIC[] = "INITIAL_CYCLIC";
static const char __pyx_k_I_LABEL_SORTED[] = "I_LABEL_SORTED";
static const char __pyx_k_NOT_ACCESSIBLE[] = "NOT_ACCESSIBLE";
static const char __pyx_k_NOT_TOP_SORTED[] = "NOT_TOP_SORTED";
static const char __pyx_k_O_LABEL_SORTED[] = "O_LABEL_SORTED";
static const char __pyx_k_Unknown_mode_r[] = "Unknown mode: {!r}";
static const char __pyx_k_Write_failed_r[] = "Write failed: {!r}";
static const char __pyx_k_attach_symbols[] = "attach_symbols";
static const char __pyx_k_compose_filter[] = "compose_filter";
static const char __pyx_k_from_pywrapfst[] = "from_pywrapfst";
static const char __pyx_k_randequivalent[] = "randequivalent";
static const char __pyx_k_relabel_tables[] = "relabel_tables";
static const char __pyx_k_ARC_VALUE_FLAGS[] = "ARC_VALUE_FLAGS";
static const char __pyx_k_COPY_PROPERTIES[] = "COPY_PROPERTIES";
static const char __pyx_k_INITIAL_ACYCLIC[] = "INITIAL_ACYCLIC";
static const char __pyx_k_I_DETERMINISTIC[] = "I_DETERMINISTIC";
static const char __pyx_k_NULL_PROPERTIES[] = "NULL_PROPERTIES";
static const char __pyx_k_O_DETERMINISTIC[] = "O_DETERMINISTIC";
static const char __pyx_k_WEIGHTED_CYCLES[] = "WEIGHTED_CYCLES";
static const char __pyx_k_pdt_parser_type[] = "pdt_parser_type";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_ARC_WEIGHT_VALUE[] = "ARC_WEIGHT_VALUE";
static const char __pyx_k_NOT_COACCESSIBLE[] = "NOT_COACCESSIBLE";
static const char __pyx_k_Operation_failed[] = "Operation failed";
static const char __pyx_k_comp_merge_patch[] = "_comp_merge_patch";
static const char __pyx_k_difference_patch[] = "_difference_patch";
static const char __pyx_k_input_token_type[] = "input_token_type";
static const char __pyx_k_keep_parentheses[] = "keep_parentheses";
static const char __pyx_k_pdt_shortestpath[] = "pdt_shortestpath";
static const char __pyx_k_pyx_unpickle_Far[] = "__pyx_unpickle_Far";
static const char __pyx_k_read_from_string[] = "_read_from_string";
static const char __pyx_k_shortestdistance[] = "shortestdistance";
static const char __pyx_k_ARC_I_LABEL_VALUE[] = "ARC_I_LABEL_VALUE";
static const char __pyx_k_ARC_O_LABEL_VALUE[] = "ARC_O_LABEL_VALUE";
static const char __pyx_k_BINARY_PROPERTIES[] = "BINARY_PROPERTIES";
static const char __pyx_k_FstBadWeightError[] = "FstBadWeightError";
static const char __pyx_k_UNWEIGHTED_CYCLES[] = "UNWEIGHTED_CYCLES";
static const char __pyx_k_call_arc_labeling[] = "call_arc_labeling";
static const char __pyx_k_output_token_type[] = "output_token_type";
static const char __pyx_k_ADD_ARC_PROPERTIES[] = "ADD_ARC_PROPERTIES";
static const char __pyx_k_FST_is_not_acyclic[] = "FST is not acyclic";
static const char __pyx_k_Invalid_token_type[] = "Invalid token type";
static const char __pyx_k_MutableArcIterator[] = "MutableArcIterator";
static const char __pyx_k_NOT_I_LABEL_SORTED[] = "NOT_I_LABEL_SORTED";
static const char __pyx_k_NOT_O_LABEL_SORTED[] = "NOT_O_LABEL_SORTED";
static const char __pyx_k_SET_ARC_PROPERTIES[] = "SET_ARC_PROPERTIES";
static const char __pyx_k_TRINARY_PROPERTIES[] = "TRINARY_PROPERTIES";
static const char __pyx_k_Unknown_arc_type_r[] = "Unknown arc type: {!r}";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_epsilon_on_replace[] = "epsilon_on_replace";
static const char __pyx_k_merge_symbol_table[] = "merge_symbol_table";
static const char __pyx_k_read_from_string_2[] = "read_from_string";
static const char __pyx_k_ARC_SORT_PROPERTIES[] = "ARC_SORT_PROPERTIES";
static const char __pyx_k_FST_is_not_a_string[] = "FST is not a string";
static const char __pyx_k_NON_I_DETERMINISTIC[] = "NON_I_DETERMINISTIC";
static const char __pyx_k_NON_O_DETERMINISTIC[] = "NON_O_DETERMINISTIC";
static const char __pyx_k_SymbolTableIterator[] = "SymbolTableIterator";
static const char __pyx_k_compose_filter_enum[] = "compose_filter_enum";
static const char __pyx_k_return_arc_labeling[] = "return_arc_labeling";
static const char __pyx_k_ADD_STATE_PROPERTIES[] = "ADD_STATE_PROPERTIES";
static const char __pyx_k_ARC_NEXT_STATE_VALUE[] = "ARC_NEXT_STATE_VALUE";
static const char __pyx_k_EXTRINSIC_PROPERTIES[] = "EXTRINSIC_PROPERTIES";
static const char __pyx_k_Far_r_mode_c_at_0x_x[] = "<{} Far {!r}, mode '{:c}' at 0x{:x}>";
static const char __pyx_k_INTRINSIC_PROPERTIES[] = "INTRINSIC_PROPERTIES";
static const char __pyx_k_SET_FINAL_PROPERTIES[] = "SET_FINAL_PROPERTIES";
static const char __pyx_k_SET_START_PROPERTIES[] = "SET_START_PROPERTIES";
static const char __pyx_k_Unknown_token_type_r[] = "Unknown token type: {!r}";
static const char __pyx_k_attach_input_symbols[] = "attach_input_symbols";
static const char __pyx_k_compact_symbol_table[] = "compact_symbol_table";
static const char __pyx_k_DELETE_ARC_PROPERTIES[] = "DELETE_ARC_PROPERTIES";
static const char __pyx_k_PdtParentheses___iter[] = "PdtParentheses.__iter__";
static const char __pyx_k_STATE_SORT_PROPERTIES[] = "STATE_SORT_PROPERTIES";
static const char __pyx_k_attach_output_symbols[] = "attach_output_symbols";
static const char __pyx_k_get_byte_symbol_table[] = "get_byte_symbol_table";
static const char __pyx_k_MPdtParentheses___iter[] = "MPdtParentheses.__iter__";
static const char __pyx_k_NEG_TRINARY_PROPERTIES[] = "NEG_TRINARY_PROPERTIES";
static const char __pyx_k_POS_TRINARY_PROPERTIES[] = "POS_TRINARY_PROPERTIES";
static const char __pyx_k_PdtParentheses_at_0x_x[] = "<PdtParentheses at 0x{:x}>";
static const char __pyx_k_shortestdistance_patch[] = "_shortestdistance_patch";
static const char __pyx_k_1arg_patch_locals_patch[] = "_1arg_patch.<locals>.patch";
static const char __pyx_k_DELETE_STATE_PROPERTIES[] = "DELETE_STATE_PROPERTIES";
static const char __pyx_k_MPdtParentheses_at_0x_x[] = "<MPdtParentheses at 0x{:x}>";
static const char __pyx_k_comp_patch_locals_patch[] = "_comp_patch.<locals>.patch";
static const char __pyx_k_copy_patch_locals_patch[] = "_copy_patch.<locals>.patch";
static const char __pyx_k_RM_SUPERFINAL_PROPERTIES[] = "RM_SUPERFINAL_PROPERTIES";
static const char __pyx_k_ADD_SUPERFINAL_PROPERTIES[] = "ADD_SUPERFINAL_PROPERTIES";
static const char __pyx_k_FstStringCompilationError[] = "FstStringCompilationError";
static const char __pyx_k_String_compilation_failed[] = "String compilation failed";
static const char __pyx_k_Unknown_PDT_parser_type_r[] = "Unknown PDT parser type: {!r}";
static const char __pyx_k_FstDeletedConstructorError[] = "FstDeletedConstructorError";
static const char __pyx_k_StringPathIterator_at_0x_x[] = "<StringPathIterator at 0x{:x}>";
static const char __pyx_k_StringPathIterator_weights[] = "StringPathIterator.weights";
static const char __pyx_k_compose_patch_locals_patch[] = "_compose_patch.<locals>.patch";
static const char __pyx_k_StringPathIterator_istrings[] = "StringPathIterator.istrings";
static const char __pyx_k_StringPathIterator_ostrings[] = "StringPathIterator.ostrings";
static const char __pyx_k_WEIGHT_INVARIANT_PROPERTIES[] = "WEIGHT_INVARIANT_PROPERTIES";
static const char __pyx_k_pyx_unpickle_PdtParentheses[] = "__pyx_unpickle_PdtParentheses";
static const char __pyx_k_I_LABEL_INVARIANT_PROPERTIES[] = "I_LABEL_INVARIANT_PROPERTIES";
static const char __pyx_k_O_LABEL_INVARIANT_PROPERTIES[] = "O_LABEL_INVARIANT_PROPERTIES";
static const char __pyx_k_pyx_unpickle_MPdtParentheses[] = "__pyx_unpickle_MPdtParentheses";
static const char __pyx_k_String_map_compilation_failed[] = "String map compilation failed";
static const char __pyx_k_comp_merge_patch_locals_patch[] = "_comp_merge_patch.<locals>.patch";
static const char __pyx_k_difference_patch_locals_patch[] = "_difference_patch.<locals>.patch";
static const char __pyx_k_Cannot_invoke_method_in_current[] = "Cannot invoke method in current mode: '{:c}'";
static const char __pyx_k_Unknown_PDT_compose_filter_type[] = "Unknown PDT compose filter type: {!r}";
static const char __pyx_k_self__paths_cannot_be_converted[] = "self._paths cannot be converted to a Python object for pickling";
static const char __pyx_k_shortestdistance_patch_locals_p[] = "_shortestdistance_patch.<locals>.patch";
static const char __pyx_k_2nd_argument_must_be_an_unweight[] = "2nd argument must be an unweighted acceptor";
static const char __pyx_k_Expected_at_least_2_positional_a[] = "Expected at least 2 positional arguments ({} given)";
static const char __pyx_k_Expecting_acceptor_or_string_arg[] = "Expecting acceptor or string argument, got a transducer";
static const char __pyx_k_Incompatible_checksums_s_vs_0x07[] = "Incompatible checksums (%s vs 0x078cdb7 = (_parens))";
static const char __pyx_k_Incompatible_checksums_s_vs_0x79[] = "Incompatible checksums (%s vs 0x7925043 = (_assign, _parens))";
static const char __pyx_k_Incompatible_checksums_s_vs_0xcb[] = "Incompatible checksums (%s vs 0xcb2b861 = (_mode, _name, _reader, _writer))";
static const char __pyx_k_Pynini_finite_state_grammar_comp[] = "Pynini: finite-state grammar compilation for Python.";
static const char __pyx_k_Unable_to_resolve_parentheses_sy[] = "Unable to resolve parentheses symbol table conflict";
static const char __pyx_k_Unknown_context_dependent_rewrit[] = "Unknown context-dependent rewrite direction: {!r}";
static const char __pyx_k_Unknown_context_dependent_rewrit_2[] = "Unknown context-dependent rewrite mode: {!r}";
static PyObject *__pyx_n_s_1arg_patch;
static PyObject *__pyx_n_s_1arg_patch_locals_patch;
static PyObject *__pyx_kp_s_2nd_argument_must_be_an_unweight;
static PyObject *__pyx_n_s_ACCEPTOR;
static PyObject *__pyx_n_s_ACCESSIBLE;
static PyObject *__pyx_n_s_ACYCLIC;
static PyObject *__pyx_n_s_ADD_ARC_PROPERTIES;
static PyObject *__pyx_n_s_ADD_STATE_PROPERTIES;
static PyObject *__pyx_n_s_ADD_SUPERFINAL_PROPERTIES;
static PyObject *__pyx_n_s_ARC_FLAGS;
static PyObject *__pyx_n_s_ARC_I_LABEL_VALUE;
static PyObject *__pyx_n_s_ARC_NEXT_STATE_VALUE;
static PyObject *__pyx_n_s_ARC_NO_CACHE;
static PyObject *__pyx_n_s_ARC_O_LABEL_VALUE;
static PyObject *__pyx_n_s_ARC_SORT_PROPERTIES;
static PyObject *__pyx_n_s_ARC_VALUE_FLAGS;
static PyObject *__pyx_n_s_ARC_WEIGHT_VALUE;
static PyObject *__pyx_n_s_Arc;
static PyObject *__pyx_n_s_ArcIterator;
static PyObject *__pyx_n_s_BINARY_PROPERTIES;
static PyObject *__pyx_n_s_COACCESSIBLE;
static PyObject *__pyx_n_s_COPY_PROPERTIES;
static PyObject *__pyx_n_s_CYCLIC;
static PyObject *__pyx_kp_s_Cannot_invoke_method_in_current;
static PyObject *__pyx_n_s_DELETE_ARC_PROPERTIES;
static PyObject *__pyx_n_s_DELETE_STATE_PROPERTIES;
static PyObject *__pyx_n_s_ENCODE_FLAGS;
static PyObject *__pyx_n_s_ENCODE_LABELS;
static PyObject *__pyx_n_s_ENCODE_WEIGHTS;
static PyObject *__pyx_n_s_EPSILONS;
static PyObject *__pyx_n_s_ERROR;
static PyObject *__pyx_n_s_EXPANDED;
static PyObject *__pyx_n_s_EXTRINSIC_PROPERTIES;
static PyObject *__pyx_n_s_EncodeMapper;
static PyObject *__pyx_kp_s_Expected_at_least_2_positional_a;
static PyObject *__pyx_kp_s_Expecting_acceptor_or_string_arg;
static PyObject *__pyx_n_s_FST_PROPERTIES;
static PyObject *__pyx_kp_s_FST_is_not_a_string;
static PyObject *__pyx_kp_s_FST_is_not_acyclic;
static PyObject *__pyx_kp_s_Far_r_mode_c_at_0x_x;
static PyObject *__pyx_n_s_Fst;
static PyObject *__pyx_n_s_FstArgError;
static PyObject *__pyx_n_s_FstBadWeightError;
static PyObject *__pyx_n_s_FstDeletedConstructorError;
static PyObject *__pyx_n_s_FstIOError;
static PyObject *__pyx_n_s_FstIndexError;
static PyObject *__pyx_n_s_FstOpError;
static PyObject *__pyx_n_s_FstStringCompilationError;
static PyObject *__pyx_n_s_INITIAL_ACYCLIC;
static PyObject *__pyx_n_s_INITIAL_CYCLIC;
static PyObject *__pyx_n_s_INTRINSIC_PROPERTIES;
static PyObject *__pyx_n_s_I_DETERMINISTIC;
static PyObject *__pyx_n_s_I_EPSILONS;
static PyObject *__pyx_n_s_I_LABEL_INVARIANT_PROPERTIES;
static PyObject *__pyx_n_s_I_LABEL_SORTED;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0x07;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0x79;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0xcb;
static PyObject *__pyx_kp_s_Invalid_token_type;
static PyObject *__pyx_n_s_KeyError;
static PyObject *__pyx_n_s_MPdtParentheses___iter;
static PyObject *__pyx_kp_s_MPdtParentheses_at_0x_x;
static PyObject *__pyx_n_s_MUTABLE;
static PyObject *__pyx_n_s_MutableArcIterator;
static PyObject *__pyx_n_s_NEG_TRINARY_PROPERTIES;
static PyObject *__pyx_n_s_NON_I_DETERMINISTIC;
static PyObject *__pyx_n_s_NON_O_DETERMINISTIC;
static PyObject *__pyx_n_s_NOT_ACCEPTOR;
static PyObject *__pyx_n_s_NOT_ACCESSIBLE;
static PyObject *__pyx_n_s_NOT_COACCESSIBLE;
static PyObject *__pyx_n_s_NOT_I_LABEL_SORTED;
static PyObject *__pyx_n_s_NOT_O_LABEL_SORTED;
static PyObject *__pyx_n_s_NOT_STRING;
static PyObject *__pyx_n_s_NOT_TOP_SORTED;
static PyObject *__pyx_n_s_NO_EPSILONS;
static PyObject *__pyx_n_s_NO_I_EPSILONS;
static PyObject *__pyx_n_s_NO_LABEL;
static PyObject *__pyx_n_s_NO_O_EPSILONS;
static PyObject *__pyx_n_s_NO_STATE_ID;
static PyObject *__pyx_n_s_NO_SYMBOL;
static PyObject *__pyx_n_s_NULL_PROPERTIES;
static PyObject *__pyx_n_s_O_DETERMINISTIC;
static PyObject *__pyx_n_s_O_EPSILONS;
static PyObject *__pyx_n_s_O_LABEL_INVARIANT_PROPERTIES;
static PyObject *__pyx_n_s_O_LABEL_SORTED;
static PyObject *__pyx_kp_s_Operation_failed;
static PyObject *__pyx_n_s_POS_TRINARY_PROPERTIES;
static PyObject *__pyx_n_s_PdtParentheses___iter;
static PyObject *__pyx_kp_s_PdtParentheses_at_0x_x;
static PyObject *__pyx_n_s_PickleError;
static PyObject *__pyx_n_s_RM_SUPERFINAL_PROPERTIES;
static PyObject *__pyx_kp_s_Read_failed;
static PyObject *__pyx_kp_s_Read_failed_r;
static PyObject *__pyx_n_s_SET_ARC_PROPERTIES;
static PyObject *__pyx_n_s_SET_FINAL_PROPERTIES;
static PyObject *__pyx_n_s_SET_START_PROPERTIES;
static PyObject *__pyx_n_s_STATE_SORT_PROPERTIES;
static PyObject *__pyx_n_s_STRING;
static PyObject *__pyx_n_s_StateIterator;
static PyObject *__pyx_n_s_StopIteration;
static PyObject *__pyx_kp_s_StringPathIterator_at_0x_x;
static PyObject *__pyx_n_s_StringPathIterator_istrings;
static PyObject *__pyx_n_s_StringPathIterator_ostrings;
static PyObject *__pyx_n_s_StringPathIterator_weights;
static PyObject *__pyx_kp_s_String_compilation_failed;
static PyObject *__pyx_kp_s_String_map_compilation_failed;
static PyObject *__pyx_n_s_SymbolTable;
static PyObject *__pyx_n_s_SymbolTableIterator;
static PyObject *__pyx_n_s_SymbolTable_2;
static PyObject *__pyx_n_s_TOP_SORTED;
static PyObject *__pyx_n_s_TRINARY_PROPERTIES;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_UNWEIGHTED;
static PyObject *__pyx_n_s_UNWEIGHTED_CYCLES;
static PyObject *__pyx_kp_s_Unable_to_resolve_parentheses_sy;
static PyObject *__pyx_kp_s_Unknown_PDT_compose_filter_type;
static PyObject *__pyx_kp_s_Unknown_PDT_parser_type_r;
static PyObject *__pyx_kp_s_Unknown_arc_type_r;
static PyObject *__pyx_kp_s_Unknown_context_dependent_rewrit;
static PyObject *__pyx_kp_s_Unknown_context_dependent_rewrit_2;
static PyObject *__pyx_kp_s_Unknown_mode_r;
static PyObject *__pyx_kp_s_Unknown_token_type_r;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_WEIGHTED;
static PyObject *__pyx_n_s_WEIGHTED_CYCLES;
static PyObject *__pyx_n_s_WEIGHT_INVARIANT_PROPERTIES;
static PyObject *__pyx_n_s_Weight;
static PyObject *__pyx_kp_s_Write_failed_r;
static PyObject *__pyx_n_s_a;
static PyObject *__pyx_n_s_acceptor;
static PyObject *__pyx_n_s_add;
static PyObject *__pyx_n_s_add_pair;
static PyObject *__pyx_n_s_add_triple;
static PyObject *__pyx_n_s_arc_type;
static PyObject *__pyx_n_s_arcmap;
static PyObject *__pyx_n_s_arcsort;
static PyObject *__pyx_n_s_arg;
static PyObject *__pyx_n_s_arg1;
static PyObject *__pyx_n_s_arg2;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_assignment;
static PyObject *__pyx_n_s_astring;
static PyObject *__pyx_n_s_attach_input_symbols;
static PyObject *__pyx_n_s_attach_output_symbols;
static PyObject *__pyx_n_s_attach_symbols;
static PyObject *__pyx_n_b_auto;
static PyObject *__pyx_n_b_byte;
static PyObject *__pyx_kp_s_c;
static PyObject *__pyx_n_s_cal;
static PyObject *__pyx_n_s_call_arc_labeling;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_b_closed;
static PyObject *__pyx_n_s_closed;
static PyObject *__pyx_n_s_closure;
static PyObject *__pyx_n_s_comp_merge_patch;
static PyObject *__pyx_n_s_comp_merge_patch_locals_patch;
static PyObject *__pyx_n_s_comp_patch;
static PyObject *__pyx_n_s_comp_patch_locals_patch;
static PyObject *__pyx_n_s_compact_symbol_table;
static PyObject *__pyx_n_s_compose;
static PyObject *__pyx_n_s_compose_filter;
static PyObject *__pyx_n_s_compose_filter_enum;
static PyObject *__pyx_n_s_compose_patch;
static PyObject *__pyx_n_s_compose_patch_locals_patch;
static PyObject *__pyx_n_s_compute_props;
static PyObject *__pyx_n_s_concat;
static PyObject *__pyx_n_s_connect;
static PyObject *__pyx_n_s_copy;
static PyObject *__pyx_n_s_copy_patch;
static PyObject *__pyx_n_s_copy_patch_locals_patch;
static PyObject *__pyx_n_s_create;
static PyObject *__pyx_n_s_decode;
static PyObject *__pyx_n_b_default;
static PyObject *__pyx_n_s_determinize;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_s_difference;
static PyObject *__pyx_n_s_difference_patch;
static PyObject *__pyx_n_s_difference_patch_locals_patch;
static PyObject *__pyx_n_s_direction;
static PyObject *__pyx_n_s_disambiguate;
static PyObject *__pyx_n_s_divide;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_done;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_epsilon_on_replace;
static PyObject *__pyx_n_s_epsnormalize;
static PyObject *__pyx_n_s_equal;
static PyObject *__pyx_n_s_equivalent;
static PyObject *__pyx_n_s_error;
static PyObject *__pyx_n_s_exc;
static PyObject *__pyx_n_s_far_type;
static PyObject *__pyx_n_b_fifo;
static PyObject *__pyx_n_s_filename;
static PyObject *__pyx_n_s_find;
static PyObject *__pyx_n_s_first;
static PyObject *__pyx_n_s_fnc;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_from_pywrapfst;
static PyObject *__pyx_n_s_fst;
static PyObject *__pyx_n_s_functools;
static PyObject *__pyx_n_s_get_byte_symbol_table;
static PyObject *__pyx_n_s_get_fst;
static PyObject *__pyx_n_s_get_key;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_id;
static PyObject *__pyx_n_s_ifst;
static PyObject *__pyx_n_s_ifst1;
static PyObject *__pyx_n_s_ifst2;
static PyObject *__pyx_n_s_impdt;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_input_token_type;
static PyObject *__pyx_n_s_intersect;
static PyObject *__pyx_n_s_invert;
static PyObject *__pyx_n_s_ipdt;
static PyObject *__pyx_n_s_isomorphic;
static PyObject *__pyx_n_s_istring;
static PyObject *__pyx_n_s_istrings;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_n_s_iter;
static PyObject *__pyx_n_s_keep_parentheses;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_n_s_kwargs;
static PyObject *__pyx_n_s_lambda;
static PyObject *__pyx_n_b_left;
static PyObject *__pyx_n_s_left_mpdt;
static PyObject *__pyx_n_s_left_pdt;
static PyObject *__pyx_n_s_lhs;
static PyObject *__pyx_n_s_lines;
static PyObject *__pyx_n_s_logging;
static PyObject *__pyx_n_s_lower;
static PyObject *__pyx_n_b_ltr;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_merge_symbol_table;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_minimize;
static PyObject *__pyx_n_s_mode;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_mpdt;
static PyObject *__pyx_n_s_mpdt_expand;
static PyObject *__pyx_n_s_mpdt_reverse;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_b_neither;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_n_s_next;
static PyObject *__pyx_n_s_nonterm;
static PyObject *__pyx_n_s_nt;
static PyObject *__pyx_n_b_obl;
static PyObject *__pyx_n_s_open;
static PyObject *__pyx_n_s_optimize;
static PyObject *__pyx_n_s_opts;
static PyObject *__pyx_n_s_ostring;
static PyObject *__pyx_n_s_ostrings;
static PyObject *__pyx_n_s_output_token_type;
static PyObject *__pyx_n_s_pairs;
static PyObject *__pyx_n_b_paren;
static PyObject *__pyx_n_s_parens;
static PyObject *__pyx_n_s_patch;
static PyObject *__pyx_n_s_path_gc;
static PyObject *__pyx_n_s_paths;
static PyObject *__pyx_n_s_pdt;
static PyObject *__pyx_n_s_pdt_compose;
static PyObject *__pyx_n_s_pdt_expand;
static PyObject *__pyx_n_s_pdt_parser_type;
static PyObject *__pyx_n_s_pdt_replace;
static PyObject *__pyx_n_s_pdt_reverse;
static PyObject *__pyx_n_s_pdt_shortestpath;
static PyObject *__pyx_n_s_pickle;
static PyObject *__pyx_n_s_plus;
static PyObject *__pyx_n_s_pop;
static PyObject *__pyx_n_s_power;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_project;
static PyObject *__pyx_n_s_prune;
static PyObject *__pyx_n_s_push;
static PyObject *__pyx_n_s_pynini;
static PyObject *__pyx_kp_s_pynini_pyx;
static PyObject *__pyx_n_s_pywrapfst;
static PyObject *__pyx_n_s_pyx_PickleError;
static PyObject *__pyx_n_s_pyx_checksum;
static PyObject *__pyx_n_s_pyx_result;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_type;
static PyObject *__pyx_n_s_pyx_unpickle_Far;
static PyObject *__pyx_n_s_pyx_unpickle_MPdtParentheses;
static PyObject *__pyx_n_s_pyx_unpickle_PdtParentheses;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_queue_type;
static PyObject *__pyx_n_b_r;
static PyObject *__pyx_n_s_ral;
static PyObject *__pyx_n_s_randequivalent;
static PyObject *__pyx_n_s_randgen;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_read;
static PyObject *__pyx_n_s_read_from_string;
static PyObject *__pyx_n_s_read_from_string_2;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_relabel_pairs;
static PyObject *__pyx_n_s_relabel_tables;
static PyObject *__pyx_n_s_rep;
static PyObject *__pyx_n_s_replace;
static PyObject *__pyx_n_s_replacement;
static PyObject *__pyx_n_s_replacements;
static PyObject *__pyx_n_s_reset;
static PyObject *__pyx_n_s_rest;
static PyObject *__pyx_n_s_result;
static PyObject *__pyx_n_s_result_fst;
static PyObject *__pyx_n_s_result_parens;
static PyObject *__pyx_n_s_return_arc_labeling;
static PyObject *__pyx_n_s_return_label;
static PyObject *__pyx_n_s_reverse;
static PyObject *__pyx_n_s_reweight;
static PyObject *__pyx_n_s_rho;
static PyObject *__pyx_n_s_rhs;
static PyObject *__pyx_n_s_rmepsilon;
static PyObject *__pyx_n_s_root;
static PyObject *__pyx_n_s_root_fst;
static PyObject *__pyx_kp_s_self__paths_cannot_be_converted;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_shortestdistance;
static PyObject *__pyx_n_s_shortestdistance_patch;
static PyObject *__pyx_n_s_shortestdistance_patch_locals_p;
static PyObject *__pyx_n_s_shortestpath;
static PyObject *__pyx_n_s_sigma_star;
static PyObject *__pyx_n_b_standard;
static PyObject *__pyx_n_s_statemap;
static PyObject *__pyx_n_s_stringify;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_super;
static PyObject *__pyx_n_s_synchronize;
static PyObject *__pyx_n_s_t;
static PyObject *__pyx_n_s_tau;
static PyObject *__pyx_n_s_tb;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_times;
static PyObject *__pyx_n_s_token_type;
static PyObject *__pyx_n_s_topsort;
static PyObject *__pyx_n_s_transducer;
static PyObject *__pyx_n_s_u;
static PyObject *__pyx_n_s_union;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_upper;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_warning;
static PyObject *__pyx_n_s_wc;
static PyObject *__pyx_n_s_weight;
static PyObject *__pyx_n_s_weights;
static PyObject *__pyx_n_s_wraps;
static PyObject *__pyx_n_s_write;
static int __pyx_pf_6pynini_3Fst___init__(struct __pyx_obj_6pynini_Fst *__pyx_v_self, PyObject *__pyx_v_arc_type); /* proto */
static PyObject *__pyx_pf_6pynini_3Fst_2from_pywrapfst(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, struct __pyx_obj_9pywrapfst__Fst *__pyx_v_ifst); /* proto */
static PyObject *__pyx_pf_6pynini_3Fst_4read(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_6pynini_3Fst_6read_from_string(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_state); /* proto */
static PyObject *__pyx_pf_6pynini_3Fst_8__reduce__(struct __pyx_obj_6pynini_Fst *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_3Fst_10paths(struct __pyx_obj_6pynini_Fst *__pyx_v_self, PyObject *__pyx_v_input_token_type, PyObject *__pyx_v_output_token_type); /* proto */
static PyObject *__pyx_pf_6pynini_3Fst_12stringify(struct __pyx_obj_6pynini_Fst *__pyx_v_self, PyObject *__pyx_v_token_type); /* proto */
static PyObject *__pyx_pf_6pynini_3Fst_14copy(struct __pyx_obj_6pynini_Fst *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_3Fst_16closure(struct __pyx_obj_6pynini_Fst *__pyx_v_self, __pyx_t_10basictypes_int32 __pyx_v_lower, __pyx_t_10basictypes_int32 __pyx_v_upper); /* proto */
static PyObject *__pyx_pf_6pynini_3Fst_4plus___get__(struct __pyx_obj_6pynini_Fst *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_3Fst_4ques___get__(struct __pyx_obj_6pynini_Fst *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_3Fst_4star___get__(struct __pyx_obj_6pynini_Fst *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_3Fst_18concat(struct __pyx_obj_6pynini_Fst *__pyx_v_self, PyObject *__pyx_v_ifst); /* proto */
static PyObject *__pyx_pf_6pynini_3Fst_20optimize(struct __pyx_obj_6pynini_Fst *__pyx_v_self, bool __pyx_v_compute_props); /* proto */
static PyObject *__pyx_pf_6pynini_3Fst_22union(struct __pyx_obj_6pynini_Fst *__pyx_v_self, PyObject *__pyx_v_ifst); /* proto */
static PyObject *__pyx_pf_6pynini_3Fst_24__eq__(struct __pyx_obj_6pynini_Fst *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_6pynini_3Fst_26__ne__(struct __pyx_obj_6pynini_Fst *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_6pynini_3Fst_28__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_6pynini_3Fst_30__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_6pynini_3Fst_32__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
#if PY_VERSION_HEX >= 0x03050000
static PyObject *__pyx_pf_6pynini_3Fst_34__matmul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
#endif
static PyObject *__pyx_pf_6pynini_3Fst_36__or__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_6pynini__from_pywrapfst(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_9pywrapfst__Fst *__pyx_v_ifst); /* proto */
static PyObject *__pyx_pf_6pynini_2_read(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_6pynini_4_read_from_string(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_state); /* proto */
static PyObject *__pyx_pf_6pynini_6acceptor(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_astring, PyObject *__pyx_v_weight, PyObject *__pyx_v_arc_type, PyObject *__pyx_v_token_type, bool __pyx_v_attach_symbols); /* proto */
static PyObject *__pyx_pf_6pynini_8transducer(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_istring, PyObject *__pyx_v_ostring, PyObject *__pyx_v_weight, PyObject *__pyx_v_arc_type, PyObject *__pyx_v_input_token_type, PyObject *__pyx_v_output_token_type, bool __pyx_v_attach_input_symbols, bool __pyx_v_attach_output_symbols); /* proto */
static PyObject *__pyx_pf_6pynini_10cdrewrite(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_tau, PyObject *__pyx_v_lambda_, PyObject *__pyx_v_rho, PyObject *__pyx_v_sigma_star, PyObject *__pyx_v_direction, PyObject *__pyx_v_mode); /* proto */
static PyObject *__pyx_pf_6pynini_12epsilon_machine(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_arc_type, PyObject *__pyx_v_weight); /* proto */
static PyObject *__pyx_pf_6pynini_14leniently_compose(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_ifst1, PyObject *__pyx_v_ifst2, PyObject *__pyx_v_sigma_star, PyObject *__pyx_v_compose_filter, bool __pyx_v_connect); /* proto */
static PyObject *__pyx_pf_6pynini_16matches(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_ifst1, PyObject *__pyx_v_ifst2, PyObject *__pyx_v_compose_filter); /* proto */
static PyObject *__pyx_pf_6pynini_18string_file(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_arc_type, PyObject *__pyx_v_input_token_type, PyObject *__pyx_v_output_token_type, bool __pyx_v_attach_input_symbols, bool __pyx_v_attach_output_symbols); /* proto */
static PyObject *__pyx_pf_6pynini_20string_map(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_lines, PyObject *__pyx_v_arc_type, PyObject *__pyx_v_input_token_type, PyObject *__pyx_v_output_token_type, bool __pyx_v_attach_input_symbols, bool __pyx_v_attach_output_symbols); /* proto */
static PyObject *__pyx_pf_6pynini_22get_byte_symbol_table(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6pynini_11_1arg_patch_patch(PyObject *__pyx_self, PyObject *__pyx_v_arg, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_6pynini_24_1arg_patch(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fnc); /* proto */
static PyObject *__pyx_pf_6pynini_23_shortestdistance_patch_patch(PyObject *__pyx_self, PyObject *__pyx_v_arg, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_6pynini_26_shortestdistance_patch(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fnc); /* proto */
static PyObject *__pyx_pf_6pynini_14_compose_patch_patch(PyObject *__pyx_self, PyObject *__pyx_v_arg1, PyObject *__pyx_v_arg2, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_6pynini_28_compose_patch(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fnc); /* proto */
static PyObject *__pyx_pf_6pynini_17_difference_patch_patch(PyObject *__pyx_self, PyObject *__pyx_v_arg1, PyObject *__pyx_v_arg2, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_6pynini_30_difference_patch(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fnc); /* proto */
static PyObject *__pyx_pf_6pynini_11_comp_patch_patch(PyObject *__pyx_self, PyObject *__pyx_v_arg1, PyObject *__pyx_v_arg2, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_6pynini_32_comp_patch(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fnc); /* proto */
static PyObject *__pyx_pf_6pynini_17_comp_merge_patch_patch(PyObject *__pyx_self, PyObject *__pyx_v_arg1, PyObject *__pyx_v_arg2, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_6pynini_34_comp_merge_patch(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fnc); /* proto */
static PyObject *__pyx_pf_6pynini_36replace(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root, PyObject *__pyx_v_replacements, PyObject *__pyx_v_call_arc_labeling, PyObject *__pyx_v_return_arc_labeling, bool __pyx_v_epsilon_on_replace, __pyx_t_10basictypes_int64 __pyx_v_return_label); /* proto */
static PyObject *__pyx_pf_6pynini_38union(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_6pynini_14PdtParentheses___repr__(struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_6pynini_14PdtParentheses_2__len__(struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_14PdtParentheses_4__iter__(struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_14PdtParentheses_7copy(struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_14PdtParentheses_9add_pair(struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_self, __pyx_t_10basictypes_int64 __pyx_v_push, __pyx_t_10basictypes_int64 __pyx_v_pop); /* proto */
static PyObject *__pyx_pf_6pynini_14PdtParentheses_11read(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_6pynini_14PdtParentheses_13write(struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_6pynini_14PdtParentheses_15__reduce_cython__(struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_14PdtParentheses_17__setstate_cython__(struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6pynini_40pdt_compose(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_ifst1, PyObject *__pyx_v_ifst2, struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_parens, PyObject *__pyx_v_compose_filter, bool __pyx_v_left_pdt); /* proto */
static PyObject *__pyx_pf_6pynini_42pdt_expand(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_ipdt, struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_parens, bool __pyx_v_connect, bool __pyx_v_keep_parentheses, PyObject *__pyx_v_weight); /* proto */
static PyObject *__pyx_pf_6pynini_44pdt_replace(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root, PyObject *__pyx_v_replacements, PyObject *__pyx_v_pdt_parser_type); /* proto */
static PyObject *__pyx_pf_6pynini_46pdt_reverse(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_ipdt, struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_parens); /* proto */
static PyObject *__pyx_pf_6pynini_48pdt_shortestpath(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_ipdt, struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_parens, PyObject *__pyx_v_queue_type, bool __pyx_v_keep_parentheses, bool __pyx_v_path_gc); /* proto */
static PyObject *__pyx_pf_6pynini_15MPdtParentheses___repr__(struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_6pynini_15MPdtParentheses_2__len__(struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_15MPdtParentheses_4__iter__(struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_15MPdtParentheses_7copy(struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_15MPdtParentheses_9add_triple(struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_self, __pyx_t_10basictypes_int64 __pyx_v_push, __pyx_t_10basictypes_int64 __pyx_v_pop, __pyx_t_10basictypes_int64 __pyx_v_assignment); /* proto */
static PyObject *__pyx_pf_6pynini_15MPdtParentheses_11read(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_6pynini_15MPdtParentheses_13write(struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_6pynini_15MPdtParentheses_15__reduce_cython__(struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_15MPdtParentheses_17__setstate_cython__(struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6pynini_50mpdt_compose(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_ifst1, PyObject *__pyx_v_ifst2, struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_parens, PyObject *__pyx_v_compose_filter, bool __pyx_v_left_mpdt); /* proto */
static PyObject *__pyx_pf_6pynini_52mpdt_expand(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_impdt, struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_parens, bool __pyx_v_connect, bool __pyx_v_keep_parentheses); /* proto */
static PyObject *__pyx_pf_6pynini_54mpdt_reverse(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_impdt, struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_parens); /* proto */
static PyObject *__pyx_pf_6pynini_18StringPathIterator___repr__(struct __pyx_obj_6pynini_StringPathIterator *__pyx_v_self); /* proto */
static int __pyx_pf_6pynini_18StringPathIterator_2__init__(struct __pyx_obj_6pynini_StringPathIterator *__pyx_v_self, PyObject *__pyx_v_ifst, PyObject *__pyx_v_input_token_type, PyObject *__pyx_v_output_token_type); /* proto */
static PyObject *__pyx_pf_6pynini_18StringPathIterator_4__iter__(struct __pyx_obj_6pynini_StringPathIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_18StringPathIterator_6__next__(struct __pyx_obj_6pynini_StringPathIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_18StringPathIterator_8done(struct __pyx_obj_6pynini_StringPathIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_18StringPathIterator_10next(struct __pyx_obj_6pynini_StringPathIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_18StringPathIterator_12reset(struct __pyx_obj_6pynini_StringPathIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_18StringPathIterator_14error(struct __pyx_obj_6pynini_StringPathIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_18StringPathIterator_16istring(struct __pyx_obj_6pynini_StringPathIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_18StringPathIterator_18istrings(struct __pyx_obj_6pynini_StringPathIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_18StringPathIterator_21ostring(struct __pyx_obj_6pynini_StringPathIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_18StringPathIterator_23ostrings(struct __pyx_obj_6pynini_StringPathIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_18StringPathIterator_26weight(struct __pyx_obj_6pynini_StringPathIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_18StringPathIterator_28weights(struct __pyx_obj_6pynini_StringPathIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_18StringPathIterator_31__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pynini_StringPathIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_18StringPathIterator_33__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pynini_StringPathIterator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6pynini_3Far___init__(struct __pyx_obj_6pynini_Far *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_mode, PyObject *__pyx_v_arc_type, PyObject *__pyx_v_far_type); /* proto */
static PyObject *__pyx_pf_6pynini_3Far_2__repr__(struct __pyx_obj_6pynini_Far *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_3Far_4error(struct __pyx_obj_6pynini_Far *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_3Far_6arc_type(struct __pyx_obj_6pynini_Far *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_3Far_8closed(struct __pyx_obj_6pynini_Far *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_3Far_10far_type(struct __pyx_obj_6pynini_Far *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_3Far_12mode(struct __pyx_obj_6pynini_Far *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_3Far_14name(struct __pyx_obj_6pynini_Far *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_3Far_16done(struct __pyx_obj_6pynini_Far *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_3Far_18find(struct __pyx_obj_6pynini_Far *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_6pynini_3Far_20get_fst(struct __pyx_obj_6pynini_Far *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_3Far_22get_key(struct __pyx_obj_6pynini_Far *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_3Far_24next(struct __pyx_obj_6pynini_Far *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_3Far_26reset(struct __pyx_obj_6pynini_Far *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_3Far_28__getitem__(struct __pyx_obj_6pynini_Far *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_6pynini_3Far_30add(struct __pyx_obj_6pynini_Far *__pyx_v_self, PyObject *__pyx_v_key, struct __pyx_obj_6pynini_Fst *__pyx_v_fst); /* proto */
static int __pyx_pf_6pynini_3Far_32__setitem__(struct __pyx_obj_6pynini_Far *__pyx_v_self, PyObject *__pyx_v_key, struct __pyx_obj_6pynini_Fst *__pyx_v_fst); /* proto */
static PyObject *__pyx_pf_6pynini_3Far_34close(struct __pyx_obj_6pynini_Far *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_3Far_36__enter__(struct __pyx_obj_6pynini_Far *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_3Far_38__exit__(struct __pyx_obj_6pynini_Far *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_exc, CYTHON_UNUSED PyObject *__pyx_v_value, CYTHON_UNUSED PyObject *__pyx_v_tb); /* proto */
static PyObject *__pyx_pf_6pynini_3Far_40__reduce_cython__(struct __pyx_obj_6pynini_Far *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pynini_3Far_42__setstate_cython__(struct __pyx_obj_6pynini_Far *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6pynini_11_copy_patch_patch(PyObject *__pyx_self, PyObject *__pyx_v_arg1, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_6pynini_56_copy_patch(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fnc); /* proto */
static PyObject *__pyx_pf_6pynini_58__pyx_unpickle_PdtParentheses(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6pynini_60__pyx_unpickle_MPdtParentheses(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6pynini_62__pyx_unpickle_Far(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_6pynini_Fst(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pynini_PdtParentheses(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pynini_MPdtParentheses(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pynini_StringPathIterator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pynini_Far(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pynini___pyx_scope_struct___1arg_patch(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pynini___pyx_scope_struct_1__shortestdistance_patch(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pynini___pyx_scope_struct_2__compose_patch(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pynini___pyx_scope_struct_3__difference_patch(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pynini___pyx_scope_struct_4__comp_patch(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pynini___pyx_scope_struct_5__comp_merge_patch(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pynini___pyx_scope_struct_6___iter__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pynini___pyx_scope_struct_7___iter__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pynini___pyx_scope_struct_8_istrings(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pynini___pyx_scope_struct_9_ostrings(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pynini___pyx_scope_struct_10_weights(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pynini___pyx_scope_struct_11__copy_patch(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_7916983;
static PyObject *__pyx_int_127029315;
static PyObject *__pyx_int_213039201;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__67;
static PyObject *__pyx_codeobj__11;
static PyObject *__pyx_codeobj__13;
static PyObject *__pyx_codeobj__15;
static PyObject *__pyx_codeobj__18;
static PyObject *__pyx_codeobj__20;
static PyObject *__pyx_codeobj__22;
static PyObject *__pyx_codeobj__29;
static PyObject *__pyx_codeobj__30;
static PyObject *__pyx_codeobj__32;
static PyObject *__pyx_codeobj__34;
static PyObject *__pyx_codeobj__36;
static PyObject *__pyx_codeobj__38;
static PyObject *__pyx_codeobj__40;
static PyObject *__pyx_codeobj__42;
static PyObject *__pyx_codeobj__44;
static PyObject *__pyx_codeobj__46;
static PyObject *__pyx_codeobj__48;
static PyObject *__pyx_codeobj__50;
static PyObject *__pyx_codeobj__52;
static PyObject *__pyx_codeobj__54;
static PyObject *__pyx_codeobj__56;
static PyObject *__pyx_codeobj__58;
static PyObject *__pyx_codeobj__60;
static PyObject *__pyx_codeobj__62;
static PyObject *__pyx_codeobj__64;
static PyObject *__pyx_codeobj__66;
static PyObject *__pyx_codeobj__68;
/* Late includes */

/* "pynini.pyx":171
 * 
 * 
 * cdef StringTokenType _get_token_type(const string &token_type) except *:             # <<<<<<<<<<<<<<
 *   """Matches string with the appropriate StringTokenType enum value.
 * 
 */

static enum fst::StringTokenType __pyx_f_6pynini__get_token_type(std::string const &__pyx_v_token_type) {
  enum fst::StringTokenType __pyx_v_token_type_enum;
  enum fst::StringTokenType __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("_get_token_type", 0);

  /* "pynini.pyx":189
 *   """
 *   cdef StringTokenType token_type_enum
 *   if not GetStringTokenType(token_type, addr(token_type_enum)):             # <<<<<<<<<<<<<<
 *     raise FstArgError("Unknown token type: {!r}".format(token_type))
 *   return token_type_enum
 */
  __pyx_t_1 = ((!(fst::script::GetStringTokenType(__pyx_v_token_type, (&__pyx_v_token_type_enum)) != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "pynini.pyx":190
 *   cdef StringTokenType token_type_enum
 *   if not GetStringTokenType(token_type, addr(token_type_enum)):
 *     raise FstArgError("Unknown token type: {!r}".format(token_type))             # <<<<<<<<<<<<<<
 *   return token_type_enum
 * 
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstArgError); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 190, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Unknown_token_type_r, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 190, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __pyx_convert_PyUnicode_string_to_py_std__in_string(__pyx_v_token_type); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 190, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 190, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_6};
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 190, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_6};
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 190, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 190, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 190, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 190, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 190, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 190, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 190, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 190, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 190, __pyx_L1_error)

    /* "pynini.pyx":189
 *   """
 *   cdef StringTokenType token_type_enum
 *   if not GetStringTokenType(token_type, addr(token_type_enum)):             # <<<<<<<<<<<<<<
 *     raise FstArgError("Unknown token type: {!r}".format(token_type))
 *   return token_type_enum
 */
  }

  /* "pynini.pyx":191
 *   if not GetStringTokenType(token_type, addr(token_type_enum)):
 *     raise FstArgError("Unknown token type: {!r}".format(token_type))
 *   return token_type_enum             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_token_type_enum;
  goto __pyx_L0;

  /* "pynini.pyx":171
 * 
 * 
 * cdef StringTokenType _get_token_type(const string &token_type) except *:             # <<<<<<<<<<<<<<
 *   """Matches string with the appropriate StringTokenType enum value.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pynini._get_token_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = (enum fst::StringTokenType) 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":194
 * 
 * 
 * cdef CDRewriteDirection _get_cdrewrite_direction(             # <<<<<<<<<<<<<<
 *     const string &rewrite_direction) except *:
 *   """Matches string with the appropriate CDRewriteDirection enum value.
 */

static enum fst::CDRewriteDirection __pyx_f_6pynini__get_cdrewrite_direction(std::string const &__pyx_v_rewrite_direction) {
  enum fst::CDRewriteDirection __pyx_v_rewrite_direction_enum;
  enum fst::CDRewriteDirection __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("_get_cdrewrite_direction", 0);

  /* "pynini.pyx":213
 *   """
 *   cdef CDRewriteDirection rewrite_direction_enum
 *   if not GetCDRewriteDirection(rewrite_direction, addr(rewrite_direction_enum)):             # <<<<<<<<<<<<<<
 *     raise FstArgError(
 *         "Unknown context-dependent rewrite direction: {!r}".format(
 */
  __pyx_t_1 = ((!(fst::script::GetCDRewriteDirection(__pyx_v_rewrite_direction, (&__pyx_v_rewrite_direction_enum)) != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "pynini.pyx":214
 *   cdef CDRewriteDirection rewrite_direction_enum
 *   if not GetCDRewriteDirection(rewrite_direction, addr(rewrite_direction_enum)):
 *     raise FstArgError(             # <<<<<<<<<<<<<<
 *         "Unknown context-dependent rewrite direction: {!r}".format(
 *             rewrite_direction))
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstArgError); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 214, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "pynini.pyx":215
 *   if not GetCDRewriteDirection(rewrite_direction, addr(rewrite_direction_enum)):
 *     raise FstArgError(
 *         "Unknown context-dependent rewrite direction: {!r}".format(             # <<<<<<<<<<<<<<
 *             rewrite_direction))
 *   return rewrite_direction_enum
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Unknown_context_dependent_rewrit, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 215, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);

    /* "pynini.pyx":216
 *     raise FstArgError(
 *         "Unknown context-dependent rewrite direction: {!r}".format(
 *             rewrite_direction))             # <<<<<<<<<<<<<<
 *   return rewrite_direction_enum
 * 
 */
    __pyx_t_6 = __pyx_convert_PyUnicode_string_to_py_std__in_string(__pyx_v_rewrite_direction); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 215, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_6};
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 215, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_6};
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 215, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 215, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 215, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 214, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 214, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 214, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 214, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 214, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 214, __pyx_L1_error)

    /* "pynini.pyx":213
 *   """
 *   cdef CDRewriteDirection rewrite_direction_enum
 *   if not GetCDRewriteDirection(rewrite_direction, addr(rewrite_direction_enum)):             # <<<<<<<<<<<<<<
 *     raise FstArgError(
 *         "Unknown context-dependent rewrite direction: {!r}".format(
 */
  }

  /* "pynini.pyx":217
 *         "Unknown context-dependent rewrite direction: {!r}".format(
 *             rewrite_direction))
 *   return rewrite_direction_enum             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_rewrite_direction_enum;
  goto __pyx_L0;

  /* "pynini.pyx":194
 * 
 * 
 * cdef CDRewriteDirection _get_cdrewrite_direction(             # <<<<<<<<<<<<<<
 *     const string &rewrite_direction) except *:
 *   """Matches string with the appropriate CDRewriteDirection enum value.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pynini._get_cdrewrite_direction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = (enum fst::CDRewriteDirection) 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":220
 * 
 * 
 * cdef CDRewriteMode _get_cdrewrite_mode(const string &rewrite_mode) except *:             # <<<<<<<<<<<<<<
 *   """Matches string with the appropriate CDRewriteMode enum value.
 * 
 */

static enum fst::CDRewriteMode __pyx_f_6pynini__get_cdrewrite_mode(std::string const &__pyx_v_rewrite_mode) {
  enum fst::CDRewriteMode __pyx_v_rewrite_mode_enum;
  enum fst::CDRewriteMode __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("_get_cdrewrite_mode", 0);

  /* "pynini.pyx":238
 *   """
 *   cdef CDRewriteMode rewrite_mode_enum
 *   if not GetCDRewriteMode(rewrite_mode, addr(rewrite_mode_enum)):             # <<<<<<<<<<<<<<
 *     raise FstArgError(
 *         "Unknown context-dependent rewrite mode: {!r}".format(rewrite_mode))
 */
  __pyx_t_1 = ((!(fst::script::GetCDRewriteMode(__pyx_v_rewrite_mode, (&__pyx_v_rewrite_mode_enum)) != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "pynini.pyx":239
 *   cdef CDRewriteMode rewrite_mode_enum
 *   if not GetCDRewriteMode(rewrite_mode, addr(rewrite_mode_enum)):
 *     raise FstArgError(             # <<<<<<<<<<<<<<
 *         "Unknown context-dependent rewrite mode: {!r}".format(rewrite_mode))
 *   return rewrite_mode_enum
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstArgError); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 239, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "pynini.pyx":240
 *   if not GetCDRewriteMode(rewrite_mode, addr(rewrite_mode_enum)):
 *     raise FstArgError(
 *         "Unknown context-dependent rewrite mode: {!r}".format(rewrite_mode))             # <<<<<<<<<<<<<<
 *   return rewrite_mode_enum
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Unknown_context_dependent_rewrit_2, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 240, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __pyx_convert_PyUnicode_string_to_py_std__in_string(__pyx_v_rewrite_mode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 240, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 240, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_6};
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 240, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_6};
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 240, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 240, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 240, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 239, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 239, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 239, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 239, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 239, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 239, __pyx_L1_error)

    /* "pynini.pyx":238
 *   """
 *   cdef CDRewriteMode rewrite_mode_enum
 *   if not GetCDRewriteMode(rewrite_mode, addr(rewrite_mode_enum)):             # <<<<<<<<<<<<<<
 *     raise FstArgError(
 *         "Unknown context-dependent rewrite mode: {!r}".format(rewrite_mode))
 */
  }

  /* "pynini.pyx":241
 *     raise FstArgError(
 *         "Unknown context-dependent rewrite mode: {!r}".format(rewrite_mode))
 *   return rewrite_mode_enum             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_rewrite_mode_enum;
  goto __pyx_L0;

  /* "pynini.pyx":220
 * 
 * 
 * cdef CDRewriteMode _get_cdrewrite_mode(const string &rewrite_mode) except *:             # <<<<<<<<<<<<<<
 *   """Matches string with the appropriate CDRewriteMode enum value.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pynini._get_cdrewrite_mode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = (enum fst::CDRewriteMode) 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":244
 * 
 * 
 * cdef PdtComposeFilter _get_pdt_compose_filter(             # <<<<<<<<<<<<<<
 *     const string &compose_filter) except *:
 *   """Matches string with the appropriate PdtComposeFilter enum value.
 */

static enum fst::PdtComposeFilter __pyx_f_6pynini__get_pdt_compose_filter(std::string const &__pyx_v_compose_filter) {
  enum fst::PdtComposeFilter __pyx_v_compose_filter_enum;
  enum fst::PdtComposeFilter __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("_get_pdt_compose_filter", 0);

  /* "pynini.pyx":260
 *   """
 *   cdef PdtComposeFilter compose_filter_enum
 *   if not GetPdtComposeFilter(compose_filter, addr(compose_filter_enum)):             # <<<<<<<<<<<<<<
 *     raise FstArgError("Unknown PDT compose filter type: {!r}".format(
 *         compose_filter))
 */
  __pyx_t_1 = ((!(fst::script::GetPdtComposeFilter(__pyx_v_compose_filter, (&__pyx_v_compose_filter_enum)) != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "pynini.pyx":261
 *   cdef PdtComposeFilter compose_filter_enum
 *   if not GetPdtComposeFilter(compose_filter, addr(compose_filter_enum)):
 *     raise FstArgError("Unknown PDT compose filter type: {!r}".format(             # <<<<<<<<<<<<<<
 *         compose_filter))
 *   return compose_filter_enum
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstArgError); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 261, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Unknown_PDT_compose_filter_type, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 261, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);

    /* "pynini.pyx":262
 *   if not GetPdtComposeFilter(compose_filter, addr(compose_filter_enum)):
 *     raise FstArgError("Unknown PDT compose filter type: {!r}".format(
 *         compose_filter))             # <<<<<<<<<<<<<<
 *   return compose_filter_enum
 * 
 */
    __pyx_t_6 = __pyx_convert_PyUnicode_string_to_py_std__in_string(__pyx_v_compose_filter); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 261, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_6};
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 261, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_6};
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 261, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 261, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 261, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 261, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 261, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 261, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 261, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 261, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 261, __pyx_L1_error)

    /* "pynini.pyx":260
 *   """
 *   cdef PdtComposeFilter compose_filter_enum
 *   if not GetPdtComposeFilter(compose_filter, addr(compose_filter_enum)):             # <<<<<<<<<<<<<<
 *     raise FstArgError("Unknown PDT compose filter type: {!r}".format(
 *         compose_filter))
 */
  }

  /* "pynini.pyx":263
 *     raise FstArgError("Unknown PDT compose filter type: {!r}".format(
 *         compose_filter))
 *   return compose_filter_enum             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_compose_filter_enum;
  goto __pyx_L0;

  /* "pynini.pyx":244
 * 
 * 
 * cdef PdtComposeFilter _get_pdt_compose_filter(             # <<<<<<<<<<<<<<
 *     const string &compose_filter) except *:
 *   """Matches string with the appropriate PdtComposeFilter enum value.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pynini._get_pdt_compose_filter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = (enum fst::PdtComposeFilter) 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":266
 * 
 * 
 * cdef PdtParserType _get_pdt_parser_type(const string &parser_type) except *:             # <<<<<<<<<<<<<<
 *   """Matches string with the appropriate PdtParserType enum value.
 * 
 */

static enum fst::PdtParserType __pyx_f_6pynini__get_pdt_parser_type(std::string const &__pyx_v_parser_type) {
  enum fst::PdtParserType __pyx_v_parser_type_enum;
  enum fst::PdtParserType __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("_get_pdt_parser_type", 0);

  /* "pynini.pyx":284
 *   """
 *   cdef PdtParserType parser_type_enum
 *   if not GetPdtParserType(parser_type, addr(parser_type_enum)):             # <<<<<<<<<<<<<<
 *     raise FstArgError("Unknown PDT parser type: {!r}".format(parser_type))
 *   return parser_type_enum
 */
  __pyx_t_1 = ((!(fst::script::GetPdtParserType(__pyx_v_parser_type, (&__pyx_v_parser_type_enum)) != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "pynini.pyx":285
 *   cdef PdtParserType parser_type_enum
 *   if not GetPdtParserType(parser_type, addr(parser_type_enum)):
 *     raise FstArgError("Unknown PDT parser type: {!r}".format(parser_type))             # <<<<<<<<<<<<<<
 *   return parser_type_enum
 * 
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstArgError); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Unknown_PDT_parser_type_r, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __pyx_convert_PyUnicode_string_to_py_std__in_string(__pyx_v_parser_type); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 285, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_6};
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 285, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_6};
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 285, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 285, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 285, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 285, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 285, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 285, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 285, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 285, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 285, __pyx_L1_error)

    /* "pynini.pyx":284
 *   """
 *   cdef PdtParserType parser_type_enum
 *   if not GetPdtParserType(parser_type, addr(parser_type_enum)):             # <<<<<<<<<<<<<<
 *     raise FstArgError("Unknown PDT parser type: {!r}".format(parser_type))
 *   return parser_type_enum
 */
  }

  /* "pynini.pyx":286
 *   if not GetPdtParserType(parser_type, addr(parser_type_enum)):
 *     raise FstArgError("Unknown PDT parser type: {!r}".format(parser_type))
 *   return parser_type_enum             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_parser_type_enum;
  goto __pyx_L0;

  /* "pynini.pyx":266
 * 
 * 
 * cdef PdtParserType _get_pdt_parser_type(const string &parser_type) except *:             # <<<<<<<<<<<<<<
 *   """Matches string with the appropriate PdtParserType enum value.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pynini._get_pdt_parser_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = (enum fst::PdtParserType) 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":289
 * 
 * 
 * cdef void _add_parentheses_symbols(MutableFstClass *fst,             # <<<<<<<<<<<<<<
 *                                    const vector[pair[int64, int64]] &parens,
 *                                    bool left) except *:
 */

static void __pyx_f_6pynini__add_parentheses_symbols(fst::script::MutableFstClass *__pyx_v_fst, std::vector<std::pair<__pyx_t_10basictypes_int64,__pyx_t_10basictypes_int64> >  const &__pyx_v_parens, bool __pyx_v_left) {
  __pyx_t_9pywrapfst_SymbolTable_ptr __pyx_v_source_syms;
  __pyx_t_9pywrapfst_SymbolTable_ptr __pyx_v_sink_syms;
  size_t __pyx_v_i;
  __pyx_t_10basictypes_int64 __pyx_v_label;
  std::string __pyx_v_symbol;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  std::vector<std::pair<__pyx_t_10basictypes_int64,__pyx_t_10basictypes_int64> > ::size_type __pyx_t_2;
  std::vector<std::pair<__pyx_t_10basictypes_int64,__pyx_t_10basictypes_int64> > ::size_type __pyx_t_3;
  size_t __pyx_t_4;
  __pyx_t_10basictypes_int64 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("_add_parentheses_symbols", 0);

  /* "pynini.pyx":307
 *   cdef SymbolTable_ptr source_syms
 *   cdef SymbolTable_ptr sink_syms
 *   cdef size_t i = 0             # <<<<<<<<<<<<<<
 *   cdef int64 label
 *   cdef string symbol
 */
  __pyx_v_i = 0;

  /* "pynini.pyx":310
 *   cdef int64 label
 *   cdef string symbol
 *   if left:             # <<<<<<<<<<<<<<
 *     source_syms = fst.MutableInputSymbols()
 *     if source_syms == NULL:
 */
  __pyx_t_1 = (__pyx_v_left != 0);
  if (__pyx_t_1) {

    /* "pynini.pyx":311
 *   cdef string symbol
 *   if left:
 *     source_syms = fst.MutableInputSymbols()             # <<<<<<<<<<<<<<
 *     if source_syms == NULL:
 *       return
 */
    __pyx_v_source_syms = __pyx_v_fst->MutableInputSymbols();

    /* "pynini.pyx":312
 *   if left:
 *     source_syms = fst.MutableInputSymbols()
 *     if source_syms == NULL:             # <<<<<<<<<<<<<<
 *       return
 *     sink_syms = fst.MutableOutputSymbols()
 */
    __pyx_t_1 = ((__pyx_v_source_syms == NULL) != 0);
    if (__pyx_t_1) {

      /* "pynini.pyx":313
 *     source_syms = fst.MutableInputSymbols()
 *     if source_syms == NULL:
 *       return             # <<<<<<<<<<<<<<
 *     sink_syms = fst.MutableOutputSymbols()
 *     if sink_syms == NULL:
 */
      goto __pyx_L0;

      /* "pynini.pyx":312
 *   if left:
 *     source_syms = fst.MutableInputSymbols()
 *     if source_syms == NULL:             # <<<<<<<<<<<<<<
 *       return
 *     sink_syms = fst.MutableOutputSymbols()
 */
    }

    /* "pynini.pyx":314
 *     if source_syms == NULL:
 *       return
 *     sink_syms = fst.MutableOutputSymbols()             # <<<<<<<<<<<<<<
 *     if sink_syms == NULL:
 *       return
 */
    __pyx_v_sink_syms = __pyx_v_fst->MutableOutputSymbols();

    /* "pynini.pyx":315
 *       return
 *     sink_syms = fst.MutableOutputSymbols()
 *     if sink_syms == NULL:             # <<<<<<<<<<<<<<
 *       return
 *   else:
 */
    __pyx_t_1 = ((__pyx_v_sink_syms == NULL) != 0);
    if (__pyx_t_1) {

      /* "pynini.pyx":316
 *     sink_syms = fst.MutableOutputSymbols()
 *     if sink_syms == NULL:
 *       return             # <<<<<<<<<<<<<<
 *   else:
 *     source_syms = fst.MutableOutputSymbols()
 */
      goto __pyx_L0;

      /* "pynini.pyx":315
 *       return
 *     sink_syms = fst.MutableOutputSymbols()
 *     if sink_syms == NULL:             # <<<<<<<<<<<<<<
 *       return
 *   else:
 */
    }

    /* "pynini.pyx":310
 *   cdef int64 label
 *   cdef string symbol
 *   if left:             # <<<<<<<<<<<<<<
 *     source_syms = fst.MutableInputSymbols()
 *     if source_syms == NULL:
 */
    goto __pyx_L3;
  }

  /* "pynini.pyx":318
 *       return
 *   else:
 *     source_syms = fst.MutableOutputSymbols()             # <<<<<<<<<<<<<<
 *     if source_syms == NULL:
 *       return
 */
  /*else*/ {
    __pyx_v_source_syms = __pyx_v_fst->MutableOutputSymbols();

    /* "pynini.pyx":319
 *   else:
 *     source_syms = fst.MutableOutputSymbols()
 *     if source_syms == NULL:             # <<<<<<<<<<<<<<
 *       return
 *     sink_syms = fst.MutableInputSymbols()
 */
    __pyx_t_1 = ((__pyx_v_source_syms == NULL) != 0);
    if (__pyx_t_1) {

      /* "pynini.pyx":320
 *     source_syms = fst.MutableOutputSymbols()
 *     if source_syms == NULL:
 *       return             # <<<<<<<<<<<<<<
 *     sink_syms = fst.MutableInputSymbols()
 *     if sink_syms == NULL:
 */
      goto __pyx_L0;

      /* "pynini.pyx":319
 *   else:
 *     source_syms = fst.MutableOutputSymbols()
 *     if source_syms == NULL:             # <<<<<<<<<<<<<<
 *       return
 *     sink_syms = fst.MutableInputSymbols()
 */
    }

    /* "pynini.pyx":321
 *     if source_syms == NULL:
 *       return
 *     sink_syms = fst.MutableInputSymbols()             # <<<<<<<<<<<<<<
 *     if sink_syms == NULL:
 *       return
 */
    __pyx_v_sink_syms = __pyx_v_fst->MutableInputSymbols();

    /* "pynini.pyx":322
 *       return
 *     sink_syms = fst.MutableInputSymbols()
 *     if sink_syms == NULL:             # <<<<<<<<<<<<<<
 *       return
 *   for i in range(parens.size()):
 */
    __pyx_t_1 = ((__pyx_v_sink_syms == NULL) != 0);
    if (__pyx_t_1) {

      /* "pynini.pyx":323
 *     sink_syms = fst.MutableInputSymbols()
 *     if sink_syms == NULL:
 *       return             # <<<<<<<<<<<<<<
 *   for i in range(parens.size()):
 *     label = parens[i].first
 */
      goto __pyx_L0;

      /* "pynini.pyx":322
 *       return
 *     sink_syms = fst.MutableInputSymbols()
 *     if sink_syms == NULL:             # <<<<<<<<<<<<<<
 *       return
 *   for i in range(parens.size()):
 */
    }
  }
  __pyx_L3:;

  /* "pynini.pyx":324
 *     if sink_syms == NULL:
 *       return
 *   for i in range(parens.size()):             # <<<<<<<<<<<<<<
 *     label = parens[i].first
 *     symbol = source_syms.FindSymbol(label)
 */
  __pyx_t_2 = __pyx_v_parens.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "pynini.pyx":325
 *       return
 *   for i in range(parens.size()):
 *     label = parens[i].first             # <<<<<<<<<<<<<<
 *     symbol = source_syms.FindSymbol(label)
 *     if symbol == b"":
 */
    __pyx_t_5 = (__pyx_v_parens[__pyx_v_i]).first;
    __pyx_v_label = __pyx_t_5;

    /* "pynini.pyx":326
 *   for i in range(parens.size()):
 *     label = parens[i].first
 *     symbol = source_syms.FindSymbol(label)             # <<<<<<<<<<<<<<
 *     if symbol == b"":
 *       raise KeyError(label)
 */
    __pyx_v_symbol = __pyx_v_source_syms->Find(__pyx_v_label);

    /* "pynini.pyx":327
 *     label = parens[i].first
 *     symbol = source_syms.FindSymbol(label)
 *     if symbol == b"":             # <<<<<<<<<<<<<<
 *       raise KeyError(label)
 *     if label != sink_syms.AddSymbol(symbol, label):
 */
    __pyx_t_1 = ((__pyx_v_symbol == ((char const *)"")) != 0);
    if (unlikely(__pyx_t_1)) {

      /* "pynini.pyx":328
 *     symbol = source_syms.FindSymbol(label)
 *     if symbol == b"":
 *       raise KeyError(label)             # <<<<<<<<<<<<<<
 *     if label != sink_syms.AddSymbol(symbol, label):
 *       raise FstOpError(
 */
      __pyx_t_6 = __Pyx_PyInt_From_int64_t(__pyx_v_label); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 328, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 328, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_Raise(__pyx_t_7, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __PYX_ERR(0, 328, __pyx_L1_error)

      /* "pynini.pyx":327
 *     label = parens[i].first
 *     symbol = source_syms.FindSymbol(label)
 *     if symbol == b"":             # <<<<<<<<<<<<<<
 *       raise KeyError(label)
 *     if label != sink_syms.AddSymbol(symbol, label):
 */
    }

    /* "pynini.pyx":329
 *     if symbol == b"":
 *       raise KeyError(label)
 *     if label != sink_syms.AddSymbol(symbol, label):             # <<<<<<<<<<<<<<
 *       raise FstOpError(
 *           "Unable to resolve parentheses symbol table conflict")
 */
    __pyx_t_1 = ((__pyx_v_label != __pyx_v_sink_syms->AddSymbol(__pyx_v_symbol, __pyx_v_label)) != 0);
    if (unlikely(__pyx_t_1)) {

      /* "pynini.pyx":330
 *       raise KeyError(label)
 *     if label != sink_syms.AddSymbol(symbol, label):
 *       raise FstOpError(             # <<<<<<<<<<<<<<
 *           "Unable to resolve parentheses symbol table conflict")
 *     label = parens[i].second
 */
      __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstOpError); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 330, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 330, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(0, 330, __pyx_L1_error)

      /* "pynini.pyx":329
 *     if symbol == b"":
 *       raise KeyError(label)
 *     if label != sink_syms.AddSymbol(symbol, label):             # <<<<<<<<<<<<<<
 *       raise FstOpError(
 *           "Unable to resolve parentheses symbol table conflict")
 */
    }

    /* "pynini.pyx":332
 *       raise FstOpError(
 *           "Unable to resolve parentheses symbol table conflict")
 *     label = parens[i].second             # <<<<<<<<<<<<<<
 *     symbol = source_syms.FindSymbol(label)
 *     if symbol == b"":
 */
    __pyx_t_5 = (__pyx_v_parens[__pyx_v_i]).second;
    __pyx_v_label = __pyx_t_5;

    /* "pynini.pyx":333
 *           "Unable to resolve parentheses symbol table conflict")
 *     label = parens[i].second
 *     symbol = source_syms.FindSymbol(label)             # <<<<<<<<<<<<<<
 *     if symbol == b"":
 *       raise KeyError(label)
 */
    __pyx_v_symbol = __pyx_v_source_syms->Find(__pyx_v_label);

    /* "pynini.pyx":334
 *     label = parens[i].second
 *     symbol = source_syms.FindSymbol(label)
 *     if symbol == b"":             # <<<<<<<<<<<<<<
 *       raise KeyError(label)
 *     if label != sink_syms.AddSymbol(symbol, label):
 */
    __pyx_t_1 = ((__pyx_v_symbol == ((char const *)"")) != 0);
    if (unlikely(__pyx_t_1)) {

      /* "pynini.pyx":335
 *     symbol = source_syms.FindSymbol(label)
 *     if symbol == b"":
 *       raise KeyError(label)             # <<<<<<<<<<<<<<
 *     if label != sink_syms.AddSymbol(symbol, label):
 *       raise FstOpError(
 */
      __pyx_t_6 = __Pyx_PyInt_From_int64_t(__pyx_v_label); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 335, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 335, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_Raise(__pyx_t_7, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __PYX_ERR(0, 335, __pyx_L1_error)

      /* "pynini.pyx":334
 *     label = parens[i].second
 *     symbol = source_syms.FindSymbol(label)
 *     if symbol == b"":             # <<<<<<<<<<<<<<
 *       raise KeyError(label)
 *     if label != sink_syms.AddSymbol(symbol, label):
 */
    }

    /* "pynini.pyx":336
 *     if symbol == b"":
 *       raise KeyError(label)
 *     if label != sink_syms.AddSymbol(symbol, label):             # <<<<<<<<<<<<<<
 *       raise FstOpError(
 *           "Unable to resolve parentheses symbol table conflict")
 */
    __pyx_t_1 = ((__pyx_v_label != __pyx_v_sink_syms->AddSymbol(__pyx_v_symbol, __pyx_v_label)) != 0);
    if (unlikely(__pyx_t_1)) {

      /* "pynini.pyx":337
 *       raise KeyError(label)
 *     if label != sink_syms.AddSymbol(symbol, label):
 *       raise FstOpError(             # <<<<<<<<<<<<<<
 *           "Unable to resolve parentheses symbol table conflict")
 * 
 */
      __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstOpError); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 337, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 337, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(0, 337, __pyx_L1_error)

      /* "pynini.pyx":336
 *     if symbol == b"":
 *       raise KeyError(label)
 *     if label != sink_syms.AddSymbol(symbol, label):             # <<<<<<<<<<<<<<
 *       raise FstOpError(
 *           "Unable to resolve parentheses symbol table conflict")
 */
    }
  }

  /* "pynini.pyx":289
 * 
 * 
 * cdef void _add_parentheses_symbols(MutableFstClass *fst,             # <<<<<<<<<<<<<<
 *                                    const vector[pair[int64, int64]] &parens,
 *                                    bool left) except *:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pynini._add_parentheses_symbols", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "pynini.pyx":341
 * 
 * 
 * cdef void _maybe_arcsort(MutableFstClass *ifst1, MutableFstClass *ifst2):             # <<<<<<<<<<<<<<
 *   """Arc-sorts two FST arguments for composition, if necessary.
 * 
 */

static void __pyx_f_6pynini__maybe_arcsort(fst::script::MutableFstClass *__pyx_v_ifst1, fst::script::MutableFstClass *__pyx_v_ifst2) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __pyx_t_10basictypes_uint64 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("_maybe_arcsort", 0);

  /* "pynini.pyx":352
 *   # It is probably much quicker to force recomputation of the property (if
 *   # necessary) to call the underlying sort on a vector of arcs.
 *   if ifst1.Properties(O_LABEL_SORTED, True) != O_LABEL_SORTED:             # <<<<<<<<<<<<<<
 *     ArcSort(ifst1, OLABEL_SORT)
 *   if ifst2.Properties(I_LABEL_SORTED, True) != I_LABEL_SORTED:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_O_LABEL_SORTED); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_ifst1->Properties(__pyx_t_2, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_O_LABEL_SORTED); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_5) {

    /* "pynini.pyx":353
 *   # necessary) to call the underlying sort on a vector of arcs.
 *   if ifst1.Properties(O_LABEL_SORTED, True) != O_LABEL_SORTED:
 *     ArcSort(ifst1, OLABEL_SORT)             # <<<<<<<<<<<<<<
 *   if ifst2.Properties(I_LABEL_SORTED, True) != I_LABEL_SORTED:
 *     ArcSort(ifst2, ILABEL_SORT)
 */
    fst::script::ArcSort(__pyx_v_ifst1, fst::script::OLABEL_SORT);

    /* "pynini.pyx":352
 *   # It is probably much quicker to force recomputation of the property (if
 *   # necessary) to call the underlying sort on a vector of arcs.
 *   if ifst1.Properties(O_LABEL_SORTED, True) != O_LABEL_SORTED:             # <<<<<<<<<<<<<<
 *     ArcSort(ifst1, OLABEL_SORT)
 *   if ifst2.Properties(I_LABEL_SORTED, True) != I_LABEL_SORTED:
 */
  }

  /* "pynini.pyx":354
 *   if ifst1.Properties(O_LABEL_SORTED, True) != O_LABEL_SORTED:
 *     ArcSort(ifst1, OLABEL_SORT)
 *   if ifst2.Properties(I_LABEL_SORTED, True) != I_LABEL_SORTED:             # <<<<<<<<<<<<<<
 *     ArcSort(ifst2, ILABEL_SORT)
 * 
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_I_LABEL_SORTED); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyInt_As_uint64_t(__pyx_t_4); if (unlikely((__pyx_t_2 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyInt_From_uint64_t(__pyx_v_ifst2->Properties(__pyx_t_2, 1)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_I_LABEL_SORTED); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_4, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_5) {

    /* "pynini.pyx":355
 *     ArcSort(ifst1, OLABEL_SORT)
 *   if ifst2.Properties(I_LABEL_SORTED, True) != I_LABEL_SORTED:
 *     ArcSort(ifst2, ILABEL_SORT)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    fst::script::ArcSort(__pyx_v_ifst2, fst::script::ILABEL_SORT);

    /* "pynini.pyx":354
 *   if ifst1.Properties(O_LABEL_SORTED, True) != O_LABEL_SORTED:
 *     ArcSort(ifst1, OLABEL_SORT)
 *   if ifst2.Properties(I_LABEL_SORTED, True) != I_LABEL_SORTED:             # <<<<<<<<<<<<<<
 *     ArcSort(ifst2, ILABEL_SORT)
 * 
 */
  }

  /* "pynini.pyx":341
 * 
 * 
 * cdef void _maybe_arcsort(MutableFstClass *ifst1, MutableFstClass *ifst2):             # <<<<<<<<<<<<<<
 *   """Arc-sorts two FST arguments for composition, if necessary.
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("pynini._maybe_arcsort", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "pynini.pyx":375
 *   """
 * 
 *   cdef void _from_MutableFstClass(self, MutableFstClass *tfst):             # <<<<<<<<<<<<<<
 *     """
 *     _from_MutableFstClass(tfst)
 */

static void __pyx_f_6pynini_3Fst__from_MutableFstClass(struct __pyx_obj_6pynini_Fst *__pyx_v_self, fst::script::MutableFstClass *__pyx_v_tfst) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_from_MutableFstClass", 0);

  /* "pynini.pyx":383
 *     This method is not visible to Python users.
 *     """
 *     self._fst.reset(tfst)             # <<<<<<<<<<<<<<
 *     self._mfst = static_pointer_cast[MutableFstClass, FstClass](self._fst)
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_fst");
    __PYX_ERR(0, 383, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base._fst.reset(__pyx_v_tfst);

  /* "pynini.pyx":384
 *     """
 *     self._fst.reset(tfst)
 *     self._mfst = static_pointer_cast[MutableFstClass, FstClass](self._fst)             # <<<<<<<<<<<<<<
 * 
 *   def __init__(self, arc_type=b"standard"):
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_fst");
    __PYX_ERR(0, 384, __pyx_L1_error)
  }
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mfst");
    __PYX_ERR(0, 384, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base._mfst = std::static_pointer_cast<fst::script::MutableFstClass,fst::script::FstClass>(__pyx_v_self->__pyx_base.__pyx_base._fst);

  /* "pynini.pyx":375
 *   """
 * 
 *   cdef void _from_MutableFstClass(self, MutableFstClass *tfst):             # <<<<<<<<<<<<<<
 *     """
 *     _from_MutableFstClass(tfst)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("pynini.Fst._from_MutableFstClass", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "pynini.pyx":386
 *     self._mfst = static_pointer_cast[MutableFstClass, FstClass](self._fst)
 * 
 *   def __init__(self, arc_type=b"standard"):             # <<<<<<<<<<<<<<
 *     cdef unique_ptr[VectorFstClass] tfst
 *     tfst.reset(new VectorFstClass(tostring(arc_type)))
 */

/* Python wrapper */
static int __pyx_pw_6pynini_3Fst_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pynini_3Fst_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arc_type = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arc_type,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_n_b_standard);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_arc_type);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 386, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_arc_type = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 386, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.Fst.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_3Fst___init__(((struct __pyx_obj_6pynini_Fst *)__pyx_v_self), __pyx_v_arc_type);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pynini_3Fst___init__(struct __pyx_obj_6pynini_Fst *__pyx_v_self, PyObject *__pyx_v_arc_type) {
  std::unique_ptr<fst::script::VectorFstClass>  __pyx_v_tfst;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pynini.pyx":388
 *   def __init__(self, arc_type=b"standard"):
 *     cdef unique_ptr[VectorFstClass] tfst
 *     tfst.reset(new VectorFstClass(tostring(arc_type)))             # <<<<<<<<<<<<<<
 *     if tfst.get().Properties(kError, True) == kError:
 *        raise FstArgError("Unknown arc type: {!r}".format(arc_type))
 */
  __pyx_t_1 = __pyx_f_9pywrapfst_tostring(__pyx_v_arc_type, NULL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 388, __pyx_L1_error)
  __pyx_v_tfst.reset(new fst::script::VectorFstClass(__pyx_t_1));

  /* "pynini.pyx":389
 *     cdef unique_ptr[VectorFstClass] tfst
 *     tfst.reset(new VectorFstClass(tostring(arc_type)))
 *     if tfst.get().Properties(kError, True) == kError:             # <<<<<<<<<<<<<<
 *        raise FstArgError("Unknown arc type: {!r}".format(arc_type))
 *     self._from_MutableFstClass(tfst.release())
 */
  __pyx_t_2 = ((__pyx_v_tfst.get()->Properties(fst::kError, 1) == fst::kError) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "pynini.pyx":390
 *     tfst.reset(new VectorFstClass(tostring(arc_type)))
 *     if tfst.get().Properties(kError, True) == kError:
 *        raise FstArgError("Unknown arc type: {!r}".format(arc_type))             # <<<<<<<<<<<<<<
 *     self._from_MutableFstClass(tfst.release())
 * 
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstArgError); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 390, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Unknown_arc_type_r, __pyx_n_s_format); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 390, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_arc_type); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 390, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_v_arc_type};
        __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 390, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_5);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_v_arc_type};
        __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 390, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_5);
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 390, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
        __Pyx_INCREF(__pyx_v_arc_type);
        __Pyx_GIVEREF(__pyx_v_arc_type);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_v_arc_type);
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 390, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 390, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_5};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 390, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_5};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 390, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 390, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 390, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 390, __pyx_L1_error)

    /* "pynini.pyx":389
 *     cdef unique_ptr[VectorFstClass] tfst
 *     tfst.reset(new VectorFstClass(tostring(arc_type)))
 *     if tfst.get().Properties(kError, True) == kError:             # <<<<<<<<<<<<<<
 *        raise FstArgError("Unknown arc type: {!r}".format(arc_type))
 *     self._from_MutableFstClass(tfst.release())
 */
  }

  /* "pynini.pyx":391
 *     if tfst.get().Properties(kError, True) == kError:
 *        raise FstArgError("Unknown arc type: {!r}".format(arc_type))
 *     self._from_MutableFstClass(tfst.release())             # <<<<<<<<<<<<<<
 * 
 *   @classmethod
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_from_MutableFstClass");
    __PYX_ERR(0, 391, __pyx_L1_error)
  }
  ((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->_from_MutableFstClass(__pyx_v_self, __pyx_v_tfst.release());

  /* "pynini.pyx":386
 *     self._mfst = static_pointer_cast[MutableFstClass, FstClass](self._fst)
 * 
 *   def __init__(self, arc_type=b"standard"):             # <<<<<<<<<<<<<<
 *     cdef unique_ptr[VectorFstClass] tfst
 *     tfst.reset(new VectorFstClass(tostring(arc_type)))
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pynini.Fst.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":394
 * 
 *   @classmethod
 *   def from_pywrapfst(cls, _Fst ifst):             # <<<<<<<<<<<<<<
 *     """
 *     Fst.from_pywrapfst(ifst)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Fst_3from_pywrapfst(PyObject *__pyx_v_cls, PyObject *__pyx_v_ifst); /*proto*/
static char __pyx_doc_6pynini_3Fst_2from_pywrapfst[] = "\n    Fst.from_pywrapfst(ifst)\n\n    Constructs a Pynini FST from a pywrapfst._Fst.\n\n    This class method converts an FST from the pywrapfst module (pywrapfst._Fst\n    or its subclass pywrapfst._MutableFst) to a Pynini.Fst. This is essentially\n    a downcasting operation which grants the object additional instance methods,\n    including an enhanced `closure`, `paths`, and `stringify`. The input FST is\n    not invalidated, but mutation of the input or output object while the other\n    is still in scope will trigger a deep copy.\n\n    Args:\n      ifst: Input FST of type pywrapfst._Fst.\n\n    Returns:\n      An FST.\n    ";
static PyObject *__pyx_pw_6pynini_3Fst_3from_pywrapfst(PyObject *__pyx_v_cls, PyObject *__pyx_v_ifst) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_pywrapfst (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ifst), __pyx_ptype_9pywrapfst__Fst, 1, "ifst", 0))) __PYX_ERR(0, 394, __pyx_L1_error)
  __pyx_r = __pyx_pf_6pynini_3Fst_2from_pywrapfst(((PyTypeObject*)__pyx_v_cls), ((struct __pyx_obj_9pywrapfst__Fst *)__pyx_v_ifst));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Fst_2from_pywrapfst(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, struct __pyx_obj_9pywrapfst__Fst *__pyx_v_ifst) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("from_pywrapfst", 0);

  /* "pynini.pyx":413
 *       An FST.
 *     """
 *     return _from_pywrapfst(ifst)             # <<<<<<<<<<<<<<
 * 
 *   @classmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini__from_pywrapfst(__pyx_v_ifst, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":394
 * 
 *   @classmethod
 *   def from_pywrapfst(cls, _Fst ifst):             # <<<<<<<<<<<<<<
 *     """
 *     Fst.from_pywrapfst(ifst)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.Fst.from_pywrapfst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":416
 * 
 *   @classmethod
 *   def read(cls, filename):             # <<<<<<<<<<<<<<
 *     """
 *     Fst.read(filename)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Fst_5read(PyObject *__pyx_v_cls, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_6pynini_3Fst_4read[] = "\n    Fst.read(filename)\n\n    Reads an FST from a file.\n\n    Args:\n      filename: The string location of the input file.\n\n    Returns:\n      An FST.\n\n    Raises:\n      FstIOError: Read failed.\n    ";
static PyObject *__pyx_pw_6pynini_3Fst_5read(PyObject *__pyx_v_cls, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Fst_4read(((PyTypeObject*)__pyx_v_cls), ((PyObject *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Fst_4read(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("read", 0);

  /* "pynini.pyx":431
 *       FstIOError: Read failed.
 *     """
 *     return _read(filename)             # <<<<<<<<<<<<<<
 * 
 *   @classmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini__read(__pyx_v_filename, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":416
 * 
 *   @classmethod
 *   def read(cls, filename):             # <<<<<<<<<<<<<<
 *     """
 *     Fst.read(filename)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.Fst.read", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":434
 * 
 *   @classmethod
 *   def read_from_string(cls, state):             # <<<<<<<<<<<<<<
 *     """
 *     Fst.read(string)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Fst_7read_from_string(PyObject *__pyx_v_cls, PyObject *__pyx_v_state); /*proto*/
static char __pyx_doc_6pynini_3Fst_6read_from_string[] = "\n    Fst.read(string)\n\n    Reads an FST from a serialized string.\n\n    Args:\n      state: A string containing the serialized FST.\n\n    Returns:\n      An FST.\n\n    Raises:\n      FstIOError: Read failed.\n    ";
static PyObject *__pyx_pw_6pynini_3Fst_7read_from_string(PyObject *__pyx_v_cls, PyObject *__pyx_v_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_from_string (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Fst_6read_from_string(((PyTypeObject*)__pyx_v_cls), ((PyObject *)__pyx_v_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Fst_6read_from_string(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("read_from_string", 0);

  /* "pynini.pyx":449
 *       FstIOError: Read failed.
 *     """
 *     return _read_from_string(state)             # <<<<<<<<<<<<<<
 * 
 *   # Registers the class for pickling.
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini__read_from_string(__pyx_v_state, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":434
 * 
 *   @classmethod
 *   def read_from_string(cls, state):             # <<<<<<<<<<<<<<
 *     """
 *     Fst.read(string)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.Fst.read_from_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":453
 *   # Registers the class for pickling.
 * 
 *   def __reduce__(self):             # <<<<<<<<<<<<<<
 *     return (_read_from_string, (self.write_to_string(),))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Fst_9__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6pynini_3Fst_9__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Fst_8__reduce__(((struct __pyx_obj_6pynini_Fst *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Fst_8__reduce__(struct __pyx_obj_6pynini_Fst *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__reduce__", 0);

  /* "pynini.pyx":454
 * 
 *   def __reduce__(self):
 *     return (_read_from_string, (self.write_to_string(),))             # <<<<<<<<<<<<<<
 * 
 *   cpdef StringPathIterator paths(self, input_token_type=b"byte",
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_read_from_string); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "write_to_string");
    __PYX_ERR(0, 454, __pyx_L1_error)
  }
  __pyx_t_2 = ((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.write_to_string(((struct __pyx_obj_9pywrapfst__Fst *)__pyx_v_self), 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":453
 *   # Registers the class for pickling.
 * 
 *   def __reduce__(self):             # <<<<<<<<<<<<<<
 *     return (_read_from_string, (self.write_to_string(),))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynini.Fst.__reduce__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":456
 *     return (_read_from_string, (self.write_to_string(),))
 * 
 *   cpdef StringPathIterator paths(self, input_token_type=b"byte",             # <<<<<<<<<<<<<<
 *                                  output_token_type=b"byte"):
 *     """
 */

static PyObject *__pyx_pw_6pynini_3Fst_11paths(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static struct __pyx_obj_6pynini_StringPathIterator *__pyx_f_6pynini_3Fst_paths(struct __pyx_obj_6pynini_Fst *__pyx_v_self, int __pyx_skip_dispatch, struct __pyx_opt_args_6pynini_3Fst_paths *__pyx_optional_args) {
  PyObject *__pyx_v_input_token_type = ((PyObject *)__pyx_n_b_byte);
  PyObject *__pyx_v_output_token_type = ((PyObject *)__pyx_n_b_byte);
  struct __pyx_obj_6pynini_StringPathIterator *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("paths", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_input_token_type = __pyx_optional_args->input_token_type;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_output_token_type = __pyx_optional_args->output_token_type;
      }
    }
  }
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_paths); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 456, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_3Fst_11paths)) {
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      __pyx_t_5 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_5 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_input_token_type, __pyx_v_output_token_type};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 456, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_input_token_type, __pyx_v_output_token_type};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 456, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 456, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (__pyx_t_4) {
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
        }
        __Pyx_INCREF(__pyx_v_input_token_type);
        __Pyx_GIVEREF(__pyx_v_input_token_type);
        PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_input_token_type);
        __Pyx_INCREF(__pyx_v_output_token_type);
        __Pyx_GIVEREF(__pyx_v_output_token_type);
        PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_output_token_type);
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 456, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_6pynini_StringPathIterator))))) __PYX_ERR(0, 456, __pyx_L1_error)
      __pyx_r = ((struct __pyx_obj_6pynini_StringPathIterator *)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":486
 *     See also: `StringPathIterator`.
 *     """
 *     return StringPathIterator(self, input_token_type, output_token_type)             # <<<<<<<<<<<<<<
 * 
 *   cpdef string stringify(self, token_type=b"byte") except *:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self));
  __Pyx_INCREF(__pyx_v_input_token_type);
  __Pyx_GIVEREF(__pyx_v_input_token_type);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_input_token_type);
  __Pyx_INCREF(__pyx_v_output_token_type);
  __Pyx_GIVEREF(__pyx_v_output_token_type);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_output_token_type);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6pynini_StringPathIterator), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = ((struct __pyx_obj_6pynini_StringPathIterator *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":456
 *     return (_read_from_string, (self.write_to_string(),))
 * 
 *   cpdef StringPathIterator paths(self, input_token_type=b"byte",             # <<<<<<<<<<<<<<
 *                                  output_token_type=b"byte"):
 *     """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pynini.Fst.paths", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Fst_11paths(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pynini_3Fst_10paths[] = "\n    paths(self, token_type=\"byte)\n\n    Creates iterator over all string paths in an acyclic FST.\n\n    This method returns an iterator over all paths (represented as pairs of\n    strings and an associated path weight) through an acyclic FST. This\n    operation is only feasible when the FST is acyclic. Depending on the\n    requested token type, the arc labels along the input and output sides of a\n    path are interpreted as UTF-8-encoded Unicode strings, raw bytes, or a\n    concatenation of string labels from a symbol table.\n\n    Args:\n      input_token_type: A string indicating how the input strings are to be\n          constructed from arc labels---one of: \"byte\" (interprets arc labels\n          as raw bytes), \"utf8\" (interprets arc labels as Unicode code points),\n          or \"symbol\" (interprets arc labels using the input symbol table).\n      output_token_type: A string indicating how the output strings are to be\n          constructed from arc labels---one of: \"byte\" (interprets arc labels\n          as raw bytes), \"utf8\" (interprets arc labels as Unicode code points),\n          or \"symbol\" (interprets arc labels using the input symbol table).\n\n    Raises:\n      FstArgError: Unknown token type.\n      FstArgError: FST is not acyclic.\n\n    See also: `StringPathIterator`.\n    ";
static PyObject *__pyx_pw_6pynini_3Fst_11paths(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_input_token_type = 0;
  PyObject *__pyx_v_output_token_type = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("paths (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_input_token_type,&__pyx_n_s_output_token_type,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)__pyx_n_b_byte);
    values[1] = ((PyObject *)__pyx_n_b_byte);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_input_token_type);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_output_token_type);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "paths") < 0)) __PYX_ERR(0, 456, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_input_token_type = values[0];
    __pyx_v_output_token_type = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("paths", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 456, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.Fst.paths", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_3Fst_10paths(((struct __pyx_obj_6pynini_Fst *)__pyx_v_self), __pyx_v_input_token_type, __pyx_v_output_token_type);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Fst_10paths(struct __pyx_obj_6pynini_Fst *__pyx_v_self, PyObject *__pyx_v_input_token_type, PyObject *__pyx_v_output_token_type) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_6pynini_3Fst_paths __pyx_t_2;
  __Pyx_RefNannySetupContext("paths", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 2;
  __pyx_t_2.input_token_type = __pyx_v_input_token_type;
  __pyx_t_2.output_token_type = __pyx_v_output_token_type;
  __pyx_t_1 = ((PyObject *)__pyx_vtabptr_6pynini_Fst->paths(__pyx_v_self, 1, &__pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.Fst.paths", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":488
 *     return StringPathIterator(self, input_token_type, output_token_type)
 * 
 *   cpdef string stringify(self, token_type=b"byte") except *:             # <<<<<<<<<<<<<<
 *     """
 *     stringify(self, token_type="byte")
 */

static PyObject *__pyx_pw_6pynini_3Fst_13stringify(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static std::string __pyx_f_6pynini_3Fst_stringify(struct __pyx_obj_6pynini_Fst *__pyx_v_self, int __pyx_skip_dispatch, struct __pyx_opt_args_6pynini_3Fst_stringify *__pyx_optional_args) {
  PyObject *__pyx_v_token_type = ((PyObject *)__pyx_n_b_byte);
  enum fst::StringTokenType __pyx_v_ttype;
  __pyx_t_9pywrapfst_SymbolTable_ptr __pyx_v_syms;
  std::string __pyx_v_result;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  std::string __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  enum fst::StringTokenType __pyx_t_9;
  __Pyx_RefNannySetupContext("stringify", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_token_type = __pyx_optional_args->token_type;
    }
  }
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_stringify); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 488, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_3Fst_13stringify)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_token_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 488, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_token_type};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 488, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_token_type};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 488, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        {
          __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 488, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
          __Pyx_INCREF(__pyx_v_token_type);
          __Pyx_GIVEREF(__pyx_v_token_type);
          PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_token_type);
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 488, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 488, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_6;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":520
 *     """
 *     cdef StringTokenType ttype
 *     cdef SymbolTable_ptr syms = NULL             # <<<<<<<<<<<<<<
 *     if isinstance(token_type, pywrapfst._SymbolTable):
 *       ttype = SYMBOL
 */
  __pyx_v_syms = NULL;

  /* "pynini.pyx":521
 *     cdef StringTokenType ttype
 *     cdef SymbolTable_ptr syms = NULL
 *     if isinstance(token_type, pywrapfst._SymbolTable):             # <<<<<<<<<<<<<<
 *       ttype = SYMBOL
 *       syms = (<SymbolTable_ptr> (<_SymbolTable> token_type)._table)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_SymbolTable); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_7 = PyObject_IsInstance(__pyx_v_token_type, __pyx_t_2); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 521, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_8 = (__pyx_t_7 != 0);
  if (__pyx_t_8) {

    /* "pynini.pyx":522
 *     cdef SymbolTable_ptr syms = NULL
 *     if isinstance(token_type, pywrapfst._SymbolTable):
 *       ttype = SYMBOL             # <<<<<<<<<<<<<<
 *       syms = (<SymbolTable_ptr> (<_SymbolTable> token_type)._table)
 *     else:
 */
    __pyx_v_ttype = fst::SYMBOL;

    /* "pynini.pyx":523
 *     if isinstance(token_type, pywrapfst._SymbolTable):
 *       ttype = SYMBOL
 *       syms = (<SymbolTable_ptr> (<_SymbolTable> token_type)._table)             # <<<<<<<<<<<<<<
 *     else:
 *       ttype = _get_token_type(tostring(token_type))
 */
    if (unlikely(__pyx_v_token_type == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_table");
      __PYX_ERR(0, 523, __pyx_L1_error)
    }
    __pyx_v_syms = ((__pyx_t_9pywrapfst_SymbolTable_ptr)((struct __pyx_obj_9pywrapfst__SymbolTable *)__pyx_v_token_type)->_table);

    /* "pynini.pyx":521
 *     cdef StringTokenType ttype
 *     cdef SymbolTable_ptr syms = NULL
 *     if isinstance(token_type, pywrapfst._SymbolTable):             # <<<<<<<<<<<<<<
 *       ttype = SYMBOL
 *       syms = (<SymbolTable_ptr> (<_SymbolTable> token_type)._table)
 */
    goto __pyx_L3;
  }

  /* "pynini.pyx":525
 *       syms = (<SymbolTable_ptr> (<_SymbolTable> token_type)._table)
 *     else:
 *       ttype = _get_token_type(tostring(token_type))             # <<<<<<<<<<<<<<
 *       if ttype == SYMBOL:
 *         raise FstArgError("Invalid token type")
 */
  /*else*/ {
    __pyx_t_6 = __pyx_f_9pywrapfst_tostring(__pyx_v_token_type, NULL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 525, __pyx_L1_error)
    __pyx_t_9 = __pyx_f_6pynini__get_token_type(__pyx_t_6); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 525, __pyx_L1_error)
    __pyx_v_ttype = __pyx_t_9;

    /* "pynini.pyx":526
 *     else:
 *       ttype = _get_token_type(tostring(token_type))
 *       if ttype == SYMBOL:             # <<<<<<<<<<<<<<
 *         raise FstArgError("Invalid token type")
 *     cdef string result
 */
    __pyx_t_8 = ((__pyx_v_ttype == fst::SYMBOL) != 0);
    if (unlikely(__pyx_t_8)) {

      /* "pynini.pyx":527
 *       ttype = _get_token_type(tostring(token_type))
 *       if ttype == SYMBOL:
 *         raise FstArgError("Invalid token type")             # <<<<<<<<<<<<<<
 *     cdef string result
 *     if not PrintString(deref(self._fst), addr(result), ttype, syms):
 */
      __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstArgError); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 527, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 527, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(0, 527, __pyx_L1_error)

      /* "pynini.pyx":526
 *     else:
 *       ttype = _get_token_type(tostring(token_type))
 *       if ttype == SYMBOL:             # <<<<<<<<<<<<<<
 *         raise FstArgError("Invalid token type")
 *     cdef string result
 */
    }
  }
  __pyx_L3:;

  /* "pynini.pyx":529
 *         raise FstArgError("Invalid token type")
 *     cdef string result
 *     if not PrintString(deref(self._fst), addr(result), ttype, syms):             # <<<<<<<<<<<<<<
 *       raise FstArgError("FST is not a string")
 *     return result
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_fst");
    __PYX_ERR(0, 529, __pyx_L1_error)
  }
  __pyx_t_8 = ((!(fst::script::PrintString((*__pyx_v_self->__pyx_base.__pyx_base._fst), (&__pyx_v_result), __pyx_v_ttype, __pyx_v_syms) != 0)) != 0);
  if (unlikely(__pyx_t_8)) {

    /* "pynini.pyx":530
 *     cdef string result
 *     if not PrintString(deref(self._fst), addr(result), ttype, syms):
 *       raise FstArgError("FST is not a string")             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstArgError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 530, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 530, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 530, __pyx_L1_error)

    /* "pynini.pyx":529
 *         raise FstArgError("Invalid token type")
 *     cdef string result
 *     if not PrintString(deref(self._fst), addr(result), ttype, syms):             # <<<<<<<<<<<<<<
 *       raise FstArgError("FST is not a string")
 *     return result
 */
  }

  /* "pynini.pyx":531
 *     if not PrintString(deref(self._fst), addr(result), ttype, syms):
 *       raise FstArgError("FST is not a string")
 *     return result             # <<<<<<<<<<<<<<
 * 
 *   # The following all override their definition in _MutableFst.
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "pynini.pyx":488
 *     return StringPathIterator(self, input_token_type, output_token_type)
 * 
 *   cpdef string stringify(self, token_type=b"byte") except *:             # <<<<<<<<<<<<<<
 *     """
 *     stringify(self, token_type="byte")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynini.Fst.stringify", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Fst_13stringify(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pynini_3Fst_12stringify[] = "\n    stringify(self, token_type=\"byte\")\n\n    Creates a string from a string FST.\n\n    This method returns the string recognized by the FST as a Python byte or\n    Unicode string. This is only well-defined when the FST is an acceptor and a\n    \"string\" FST (meaning that the start state is numbered 0, and there is\n    exactly one transition from each state i to each state i + 1, there are no\n    other transitions, and the last state is final). Depending on the requested\n    token type, the arc labels are interpreted as a UTF-8-encoded Unicode\n    string, raw bytes, or as a concatenation of string labels from the output\n    symbol table.\n\n    The underlying routine reads only the output labels, so if the FST is\n    not an acceptor, it will be treated as the output projection of the FST.\n\n    Args:\n      token_type: A string indicating how the string is to be constructed from\n          arc labels---one of: \"byte\" (interprets arc labels as raw bytes),\n          \"utf8\" (interprets arc labels as Unicode code points), or a\n          SymbolTable.\n\n    Returns:\n      The string corresponding to (an output projection) of the FST.\n\n    Raises:\n      FstArgError: FST is not a string.\n      FstArgError: Unknown token type.\n    ";
static PyObject *__pyx_pw_6pynini_3Fst_13stringify(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_token_type = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stringify (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_token_type,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_n_b_byte);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_token_type);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "stringify") < 0)) __PYX_ERR(0, 488, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_token_type = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("stringify", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 488, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.Fst.stringify", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_3Fst_12stringify(((struct __pyx_obj_6pynini_Fst *)__pyx_v_self), __pyx_v_token_type);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Fst_12stringify(struct __pyx_obj_6pynini_Fst *__pyx_v_self, PyObject *__pyx_v_token_type) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  struct __pyx_opt_args_6pynini_3Fst_stringify __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("stringify", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.token_type = __pyx_v_token_type;
  __pyx_t_1 = __pyx_vtabptr_6pynini_Fst->stringify(__pyx_v_self, 1, &__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 488, __pyx_L1_error)
  __pyx_t_3 = __pyx_convert_PyUnicode_string_to_py_std__in_string(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynini.Fst.stringify", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":535
 *   # The following all override their definition in _MutableFst.
 * 
 *   cpdef Fst copy(self):             # <<<<<<<<<<<<<<
 *     """
 *     copy(self)
 */

static PyObject *__pyx_pw_6pynini_3Fst_15copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
struct __pyx_obj_6pynini_Fst *__pyx_f_6pynini_3Fst_copy(struct __pyx_obj_6pynini_Fst *__pyx_v_self, int __pyx_skip_dispatch) {
  struct __pyx_obj_6pynini_Fst *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("copy", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_copy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 535, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_3Fst_15copy)) {
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 535, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 535, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_6pynini_Fst))))) __PYX_ERR(0, 535, __pyx_L1_error)
      __pyx_r = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":541
 *     Makes a copy of the FST.
 *     """
 *     return _init_Fst_from_MutableFst(super(_MutableFst, self).copy())             # <<<<<<<<<<<<<<
 * 
 *   def closure(self, int32 lower=0, int32 upper=0):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_9pywrapfst__MutableFst));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_9pywrapfst__MutableFst));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_9pywrapfst__MutableFst));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_copy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 541, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 541, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9pywrapfst__MutableFst))))) __PYX_ERR(0, 541, __pyx_L1_error)
  __pyx_t_2 = ((PyObject *)__pyx_f_6pynini__init_Fst_from_MutableFst(((struct __pyx_obj_9pywrapfst__MutableFst *)__pyx_t_1))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":535
 *   # The following all override their definition in _MutableFst.
 * 
 *   cpdef Fst copy(self):             # <<<<<<<<<<<<<<
 *     """
 *     copy(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynini.Fst.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Fst_15copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pynini_3Fst_14copy[] = "\n    copy(self)\n\n    Makes a copy of the FST.\n    ";
static PyObject *__pyx_pw_6pynini_3Fst_15copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Fst_14copy(((struct __pyx_obj_6pynini_Fst *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Fst_14copy(struct __pyx_obj_6pynini_Fst *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("copy", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini_3Fst_copy(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.Fst.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

struct __pyx_obj_6pynini_Fst *__pyx_f_6pynini_3Fst_copy__pyx_wrap_1(struct __pyx_obj_6pynini_Fst *__pyx_v_self, int __pyx_skip_dispatch) {
  return __pyx_f_6pynini_3Fst_copy(__pyx_v_self, __pyx_skip_dispatch);
}

/* "pynini.pyx":543
 *     return _init_Fst_from_MutableFst(super(_MutableFst, self).copy())
 * 
 *   def closure(self, int32 lower=0, int32 upper=0):             # <<<<<<<<<<<<<<
 *     """
 *     closure(self, lower)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Fst_17closure(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pynini_3Fst_16closure[] = "\n    closure(self, lower)\n    closure(self, lower, upper)\n\n    Computes concatenative closure.\n\n    This operation destructively converts the FST to its concatenative closure.\n    If A transduces string x to y with weight w, then the zero-argument form\n    `A.closure()` mutates A so that it transduces between empty strings with\n    weight 1, transduces string x to y with weight w, transduces xx to yy with\n    weight w \\otimes w, string xxx to yyy with weight w \\otimes w \\otimes w\n    (and so on).\n\n    When called with two optional positive integer arguments, these act as\n    lower and upper bounds, respectively, for the number of cycles through the\n    original FST that the mutated FST permits. Therefore, `A.closure(0, 1)`\n    mutates A so that it permits 0 or 1 cycles; i.e., the mutated A transduces\n    between empty strings or transduces x to y.\n\n    When called with one optional positive integer argument, this argument\n    acts as the lower bound, with the upper bound implicitly set to infinity.\n    Therefore, `A.closure(1)` performs a mutation roughly equivalent to\n    `A.closure()` except that the former does not transduce between empty\n    strings.\n\n    The following are the equivalents for the closure-style syntax used in\n    Perl-style regular expressions:\n\n    Regexp:\t\tThis method:\t\tCopy shortcuts:\n\n    /x?/\t\tx.closure(0, 1)\t\tx.ques\n    /x*/\t\tx.closure()\t\tx.star\n    /x+/\t\tx.closure(1)\t\tx.plus\n    /x{N}/\t\tx.closure(N, N)\n    /x{M,N}/\t\tx.closure(M, N)\n    /x{N,}/\t\tx.closure(N)\n    /x{,N}/\t\tx.closure(0, N)\n\n    Args:\n      lower: lower bound.\n      upper: upper bound.\n\n    Returns:\n      self.\n\n    See also `ques`, `star`, `plus`.\n    ";
static PyObject *__pyx_pw_6pynini_3Fst_17closure(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_10basictypes_int32 __pyx_v_lower;
  __pyx_t_10basictypes_int32 __pyx_v_upper;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("closure (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_lower,&__pyx_n_s_upper,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lower);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_upper);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "closure") < 0)) __PYX_ERR(0, 543, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_lower = __Pyx_PyInt_As_int32_t(values[0]); if (unlikely((__pyx_v_lower == ((int32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 543, __pyx_L3_error)
    } else {
      __pyx_v_lower = ((__pyx_t_10basictypes_int32)0);
    }
    if (values[1]) {
      __pyx_v_upper = __Pyx_PyInt_As_int32_t(values[1]); if (unlikely((__pyx_v_upper == ((int32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 543, __pyx_L3_error)
    } else {
      __pyx_v_upper = ((__pyx_t_10basictypes_int32)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("closure", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 543, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.Fst.closure", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_3Fst_16closure(((struct __pyx_obj_6pynini_Fst *)__pyx_v_self), __pyx_v_lower, __pyx_v_upper);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Fst_16closure(struct __pyx_obj_6pynini_Fst *__pyx_v_self, __pyx_t_10basictypes_int32 __pyx_v_lower, __pyx_t_10basictypes_int32 __pyx_v_upper) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("closure", 0);

  /* "pynini.pyx":591
 *     See also `ques`, `star`, `plus`.
 *     """
 *     Repeat(self._mfst.get(), lower, upper)             # <<<<<<<<<<<<<<
 *     self._check_mutating_imethod()
 *     return self
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mfst");
    __PYX_ERR(0, 591, __pyx_L1_error)
  }
  fst::script::Repeat(__pyx_v_self->__pyx_base._mfst.get(), __pyx_v_lower, __pyx_v_upper);

  /* "pynini.pyx":592
 *     """
 *     Repeat(self._mfst.get(), lower, upper)
 *     self._check_mutating_imethod()             # <<<<<<<<<<<<<<
 *     return self
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_check_mutating_imethod");
    __PYX_ERR(0, 592, __pyx_L1_error)
  }
  ((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base._check_mutating_imethod(((struct __pyx_obj_9pywrapfst__MutableFst *)__pyx_v_self)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 592, __pyx_L1_error)

  /* "pynini.pyx":593
 *     Repeat(self._mfst.get(), lower, upper)
 *     self._check_mutating_imethod()
 *     return self             # <<<<<<<<<<<<<<
 * 
 *   @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pynini.pyx":543
 *     return _init_Fst_from_MutableFst(super(_MutableFst, self).copy())
 * 
 *   def closure(self, int32 lower=0, int32 upper=0):             # <<<<<<<<<<<<<<
 *     """
 *     closure(self, lower)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pynini.Fst.closure", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":596
 * 
 *   @property
 *   def plus(self):             # <<<<<<<<<<<<<<
 *     """
 *     plus(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Fst_4plus_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pynini_3Fst_4plus_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Fst_4plus___get__(((struct __pyx_obj_6pynini_Fst *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Fst_4plus___get__(struct __pyx_obj_6pynini_Fst *__pyx_v_self) {
  struct __pyx_obj_6pynini_Fst *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pynini.pyx":607
 *     See also: `closure`.
 *     """
 *     cdef Fst result = self.copy()             # <<<<<<<<<<<<<<
 *     Closure(result._mfst.get(), CLOSURE_PLUS)
 *     result._check_mutating_imethod()
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "copy");
    __PYX_ERR(0, 607, __pyx_L1_error)
  }
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->copy(__pyx_v_self, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":608
 *     """
 *     cdef Fst result = self.copy()
 *     Closure(result._mfst.get(), CLOSURE_PLUS)             # <<<<<<<<<<<<<<
 *     result._check_mutating_imethod()
 *     return result
 */
  if (unlikely(((PyObject *)__pyx_v_result) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mfst");
    __PYX_ERR(0, 608, __pyx_L1_error)
  }
  fst::script::Closure(__pyx_v_result->__pyx_base._mfst.get(), fst::CLOSURE_PLUS);

  /* "pynini.pyx":609
 *     cdef Fst result = self.copy()
 *     Closure(result._mfst.get(), CLOSURE_PLUS)
 *     result._check_mutating_imethod()             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_result) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_check_mutating_imethod");
    __PYX_ERR(0, 609, __pyx_L1_error)
  }
  ((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_result->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base._check_mutating_imethod(((struct __pyx_obj_9pywrapfst__MutableFst *)__pyx_v_result)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 609, __pyx_L1_error)

  /* "pynini.pyx":610
 *     Closure(result._mfst.get(), CLOSURE_PLUS)
 *     result._check_mutating_imethod()
 *     return result             # <<<<<<<<<<<<<<
 * 
 *   @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "pynini.pyx":596
 * 
 *   @property
 *   def plus(self):             # <<<<<<<<<<<<<<
 *     """
 *     plus(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.Fst.plus.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":613
 * 
 *   @property
 *   def ques(self):             # <<<<<<<<<<<<<<
 *     """
 *     ques(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Fst_4ques_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pynini_3Fst_4ques_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Fst_4ques___get__(((struct __pyx_obj_6pynini_Fst *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Fst_4ques___get__(struct __pyx_obj_6pynini_Fst *__pyx_v_self) {
  struct __pyx_obj_6pynini_Fst *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pynini.pyx":624
 *     See also: `closure`.
 *     """
 *     cdef Fst result = self.copy()             # <<<<<<<<<<<<<<
 *     Repeat(result._mfst.get(), 0, 1)
 *     result._check_mutating_imethod()
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "copy");
    __PYX_ERR(0, 624, __pyx_L1_error)
  }
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->copy(__pyx_v_self, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":625
 *     """
 *     cdef Fst result = self.copy()
 *     Repeat(result._mfst.get(), 0, 1)             # <<<<<<<<<<<<<<
 *     result._check_mutating_imethod()
 *     return result
 */
  if (unlikely(((PyObject *)__pyx_v_result) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mfst");
    __PYX_ERR(0, 625, __pyx_L1_error)
  }
  fst::script::Repeat(__pyx_v_result->__pyx_base._mfst.get(), 0, 1);

  /* "pynini.pyx":626
 *     cdef Fst result = self.copy()
 *     Repeat(result._mfst.get(), 0, 1)
 *     result._check_mutating_imethod()             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_result) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_check_mutating_imethod");
    __PYX_ERR(0, 626, __pyx_L1_error)
  }
  ((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_result->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base._check_mutating_imethod(((struct __pyx_obj_9pywrapfst__MutableFst *)__pyx_v_result)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 626, __pyx_L1_error)

  /* "pynini.pyx":627
 *     Repeat(result._mfst.get(), 0, 1)
 *     result._check_mutating_imethod()
 *     return result             # <<<<<<<<<<<<<<
 * 
 *   @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "pynini.pyx":613
 * 
 *   @property
 *   def ques(self):             # <<<<<<<<<<<<<<
 *     """
 *     ques(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.Fst.ques.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":630
 * 
 *   @property
 *   def star(self):             # <<<<<<<<<<<<<<
 *     """
 *     star(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Fst_4star_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pynini_3Fst_4star_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Fst_4star___get__(((struct __pyx_obj_6pynini_Fst *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Fst_4star___get__(struct __pyx_obj_6pynini_Fst *__pyx_v_self) {
  struct __pyx_obj_6pynini_Fst *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pynini.pyx":641
 *     See also: `closure`.
 *     """
 *     cdef Fst result = self.copy()             # <<<<<<<<<<<<<<
 *     Closure(result._mfst.get(), CLOSURE_STAR)
 *     result._check_mutating_imethod()
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "copy");
    __PYX_ERR(0, 641, __pyx_L1_error)
  }
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->copy(__pyx_v_self, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 641, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":642
 *     """
 *     cdef Fst result = self.copy()
 *     Closure(result._mfst.get(), CLOSURE_STAR)             # <<<<<<<<<<<<<<
 *     result._check_mutating_imethod()
 *     return result
 */
  if (unlikely(((PyObject *)__pyx_v_result) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mfst");
    __PYX_ERR(0, 642, __pyx_L1_error)
  }
  fst::script::Closure(__pyx_v_result->__pyx_base._mfst.get(), fst::CLOSURE_STAR);

  /* "pynini.pyx":643
 *     cdef Fst result = self.copy()
 *     Closure(result._mfst.get(), CLOSURE_STAR)
 *     result._check_mutating_imethod()             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_result) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_check_mutating_imethod");
    __PYX_ERR(0, 643, __pyx_L1_error)
  }
  ((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_result->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base._check_mutating_imethod(((struct __pyx_obj_9pywrapfst__MutableFst *)__pyx_v_result)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 643, __pyx_L1_error)

  /* "pynini.pyx":644
 *     Closure(result._mfst.get(), CLOSURE_STAR)
 *     result._check_mutating_imethod()
 *     return result             # <<<<<<<<<<<<<<
 * 
 *   def concat(self, ifst):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "pynini.pyx":630
 * 
 *   @property
 *   def star(self):             # <<<<<<<<<<<<<<
 *     """
 *     star(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.Fst.star.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":646
 *     return result
 * 
 *   def concat(self, ifst):             # <<<<<<<<<<<<<<
 *     """
 *     concat(self, ifst)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Fst_19concat(PyObject *__pyx_v_self, PyObject *__pyx_v_ifst); /*proto*/
static char __pyx_doc_6pynini_3Fst_18concat[] = "\n    concat(self, ifst)\n\n    Computes the concatenation (product) of two FSTs.\n\n    This operation destructively concatenates the FST with a second FST. If A\n    transduces string x to y with weight a and B transduces string w to v with\n    weight b, then their concatenation transduces string xw to yv with weight\n    a \\otimes b.\n\n    Args:\n      ifst: The second input FST.\n\n    Returns:\n      self.\n\n    Raises:\n      FstOpError: Operation failed.\n    ";
static PyObject *__pyx_pw_6pynini_3Fst_19concat(PyObject *__pyx_v_self, PyObject *__pyx_v_ifst) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("concat (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Fst_18concat(((struct __pyx_obj_6pynini_Fst *)__pyx_v_self), ((PyObject *)__pyx_v_ifst));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Fst_18concat(struct __pyx_obj_6pynini_Fst *__pyx_v_self, PyObject *__pyx_v_ifst) {
  struct __pyx_obj_6pynini_Fst *__pyx_v_rhs = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  struct __pyx_opt_args_6pynini__compile_or_copy_Fst __pyx_t_3;
  __Pyx_RefNannySetupContext("concat", 0);

  /* "pynini.pyx":666
 *       FstOpError: Operation failed.
 *     """
 *     cdef Fst rhs = _compile_or_copy_Fst(ifst, arc_type=self.arc_type())             # <<<<<<<<<<<<<<
 *     MergeSymbols(self._mfst.get(), rhs._mfst.get(),
 *                  MERGE_INPUT_AND_OUTPUT_SYMBOLS)
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "arc_type");
    __PYX_ERR(0, 666, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_convert_PyUnicode_string_to_py_std__in_string(((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.arc_type(((struct __pyx_obj_9pywrapfst__Fst *)__pyx_v_self), 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 666, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3.__pyx_n = 1;
  __pyx_t_3.arc_type = __pyx_t_1;
  __pyx_t_2 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_ifst, &__pyx_t_3)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 666, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_rhs = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pynini.pyx":667
 *     """
 *     cdef Fst rhs = _compile_or_copy_Fst(ifst, arc_type=self.arc_type())
 *     MergeSymbols(self._mfst.get(), rhs._mfst.get(),             # <<<<<<<<<<<<<<
 *                  MERGE_INPUT_AND_OUTPUT_SYMBOLS)
 *     self._concat(rhs)
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mfst");
    __PYX_ERR(0, 667, __pyx_L1_error)
  }
  if (unlikely(((PyObject *)__pyx_v_rhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mfst");
    __PYX_ERR(0, 667, __pyx_L1_error)
  }

  /* "pynini.pyx":668
 *     cdef Fst rhs = _compile_or_copy_Fst(ifst, arc_type=self.arc_type())
 *     MergeSymbols(self._mfst.get(), rhs._mfst.get(),
 *                  MERGE_INPUT_AND_OUTPUT_SYMBOLS)             # <<<<<<<<<<<<<<
 *     self._concat(rhs)
 *     return self
 */
  fst::script::MergeSymbols(__pyx_v_self->__pyx_base._mfst.get(), __pyx_v_rhs->__pyx_base._mfst.get(), fst::MERGE_INPUT_AND_OUTPUT_SYMBOLS);

  /* "pynini.pyx":669
 *     MergeSymbols(self._mfst.get(), rhs._mfst.get(),
 *                  MERGE_INPUT_AND_OUTPUT_SYMBOLS)
 *     self._concat(rhs)             # <<<<<<<<<<<<<<
 *     return self
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_concat");
    __PYX_ERR(0, 669, __pyx_L1_error)
  }
  ((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base._concat(((struct __pyx_obj_9pywrapfst__MutableFst *)__pyx_v_self), ((struct __pyx_obj_9pywrapfst__Fst *)__pyx_v_rhs)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 669, __pyx_L1_error)

  /* "pynini.pyx":670
 *                  MERGE_INPUT_AND_OUTPUT_SYMBOLS)
 *     self._concat(rhs)
 *     return self             # <<<<<<<<<<<<<<
 * 
 *   cdef void _optimize(self, bool compute_props=False) except *:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pynini.pyx":646
 *     return result
 * 
 *   def concat(self, ifst):             # <<<<<<<<<<<<<<
 *     """
 *     concat(self, ifst)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pynini.Fst.concat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_rhs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":672
 *     return self
 * 
 *   cdef void _optimize(self, bool compute_props=False) except *:             # <<<<<<<<<<<<<<
 *     Optimize(self._mfst.get(), compute_props)
 *     self._check_mutating_imethod()
 */

static void __pyx_f_6pynini_3Fst__optimize(struct __pyx_obj_6pynini_Fst *__pyx_v_self, struct __pyx_opt_args_6pynini_3Fst__optimize *__pyx_optional_args) {
  bool __pyx_v_compute_props = ((bool)0);
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_optimize", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_compute_props = __pyx_optional_args->compute_props;
    }
  }

  /* "pynini.pyx":673
 * 
 *   cdef void _optimize(self, bool compute_props=False) except *:
 *     Optimize(self._mfst.get(), compute_props)             # <<<<<<<<<<<<<<
 *     self._check_mutating_imethod()
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mfst");
    __PYX_ERR(0, 673, __pyx_L1_error)
  }
  fst::script::Optimize(__pyx_v_self->__pyx_base._mfst.get(), __pyx_v_compute_props);

  /* "pynini.pyx":674
 *   cdef void _optimize(self, bool compute_props=False) except *:
 *     Optimize(self._mfst.get(), compute_props)
 *     self._check_mutating_imethod()             # <<<<<<<<<<<<<<
 * 
 *   def optimize(self, bool compute_props=False):
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_check_mutating_imethod");
    __PYX_ERR(0, 674, __pyx_L1_error)
  }
  ((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base._check_mutating_imethod(((struct __pyx_obj_9pywrapfst__MutableFst *)__pyx_v_self)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 674, __pyx_L1_error)

  /* "pynini.pyx":672
 *     return self
 * 
 *   cdef void _optimize(self, bool compute_props=False) except *:             # <<<<<<<<<<<<<<
 *     Optimize(self._mfst.get(), compute_props)
 *     self._check_mutating_imethod()
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pynini.Fst._optimize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "pynini.pyx":676
 *     self._check_mutating_imethod()
 * 
 *   def optimize(self, bool compute_props=False):             # <<<<<<<<<<<<<<
 *     """
 *     optimize(self, compute_props=False)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Fst_21optimize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pynini_3Fst_20optimize[] = "\n    optimize(self, compute_props=False)\n\n    Performs a generic optimization of the FST.\n\n    This operation destructively optimizes the FST using epsilon-removal,\n    arc-sum mapping, determinization, and minimization (where possible). The\n    algorithm is as follows:\n\n    * If the FST is not (known to be) epsilon-free, perform epsilon-removal.\n    * Combine identically labeled multi-arcs and sum their weights.\n    * If the FST does not have idempotent weights, halt.\n    * If the FST is not (known to be) deterministic:\n      - If the FST is a (known) acceptor:\n        * If the FST is not (known to be) unweighted and/or acyclic, encode\n          weights.\n      - Otherwise, encode labels and, if the FST is not (known to be)\n        unweighted, encode weights.\n      - Determinize the FST.\n    * Minimize the FST.\n    * Decode the FST and combine identically-labeled multi-arcs and sum their\n      weights, if the FST was previously encoded.\n\n    By default, FST properties are not computed if they are not already set.\n\n    This optimization may result in a reduction of size (due to epsilon-removal,\n    arc-sum mapping, and minimization) and possibly faster composition, but\n    determinization (a prerequisite of minimization) may result in an\n    exponential blowup in size in the worst case. Judicious use of optimization\n    is a bit of a black art.\n\n    Args:\n      compute_props: Should unknown FST properties be computed to help choose\n          appropriate optimizations?\n\n    Returns:\n      self.\n    ";
static PyObject *__pyx_pw_6pynini_3Fst_21optimize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  bool __pyx_v_compute_props;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("optimize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_compute_props,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_compute_props);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "optimize") < 0)) __PYX_ERR(0, 676, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_compute_props = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_compute_props == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 676, __pyx_L3_error)
    } else {
      __pyx_v_compute_props = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("optimize", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 676, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.Fst.optimize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_3Fst_20optimize(((struct __pyx_obj_6pynini_Fst *)__pyx_v_self), __pyx_v_compute_props);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Fst_20optimize(struct __pyx_obj_6pynini_Fst *__pyx_v_self, bool __pyx_v_compute_props) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  struct __pyx_opt_args_6pynini_3Fst__optimize __pyx_t_1;
  __Pyx_RefNannySetupContext("optimize", 0);

  /* "pynini.pyx":715
 *       self.
 *     """
 *     self._optimize(compute_props)             # <<<<<<<<<<<<<<
 *     return self
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_optimize");
    __PYX_ERR(0, 715, __pyx_L1_error)
  }
  __pyx_t_1.__pyx_n = 1;
  __pyx_t_1.compute_props = __pyx_v_compute_props;
  ((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->_optimize(__pyx_v_self, &__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 715, __pyx_L1_error)

  /* "pynini.pyx":716
 *     """
 *     self._optimize(compute_props)
 *     return self             # <<<<<<<<<<<<<<
 * 
 *   def union(self, ifst):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pynini.pyx":676
 *     self._check_mutating_imethod()
 * 
 *   def optimize(self, bool compute_props=False):             # <<<<<<<<<<<<<<
 *     """
 *     optimize(self, compute_props=False)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pynini.Fst.optimize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":718
 *     return self
 * 
 *   def union(self, ifst):             # <<<<<<<<<<<<<<
 *     """
 *     union(self, ifst)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Fst_23union(PyObject *__pyx_v_self, PyObject *__pyx_v_ifst); /*proto*/
static char __pyx_doc_6pynini_3Fst_22union[] = "\n    union(self, ifst)\n\n    Computes the union (sum) of two FSTs.\n\n    This operation destructively computes the union (sum) of two FSTs. If A\n    transduces string x to y with weight a and B transduces string w to v with\n    weight b, then their union transduces x to y with weight a and w to v with\n    weight b.\n\n    Args:\n      ifst: The second input FST.\n\n    Returns:\n      self.\n\n    Raises:\n      FstOpError: Operation failed.\n    ";
static PyObject *__pyx_pw_6pynini_3Fst_23union(PyObject *__pyx_v_self, PyObject *__pyx_v_ifst) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("union (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Fst_22union(((struct __pyx_obj_6pynini_Fst *)__pyx_v_self), ((PyObject *)__pyx_v_ifst));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Fst_22union(struct __pyx_obj_6pynini_Fst *__pyx_v_self, PyObject *__pyx_v_ifst) {
  CYTHON_UNUSED struct __pyx_obj_6pynini_Fst *__pyx_v_lhs = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_v_rhs = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  __Pyx_RefNannySetupContext("union", 0);

  /* "pynini.pyx":740
 *     cdef Fst lhs
 *     cdef Fst rhs
 *     (lhs, rhs) = _compile_or_copy_two_Fsts(self, ifst)             # <<<<<<<<<<<<<<
 *     MergeSymbols(self._mfst.get(), rhs._mfst.get(),
 *                  MERGE_INPUT_AND_OUTPUT_SYMBOLS)
 */
  __pyx_t_1 = __pyx_f_6pynini__compile_or_copy_two_Fsts(((PyObject *)__pyx_v_self), __pyx_v_ifst); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 740, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 740, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 740, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 740, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 740, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_3 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_4), 2) < 0) __PYX_ERR(0, 740, __pyx_L1_error)
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 740, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_6pynini_Fst))))) __PYX_ERR(0, 740, __pyx_L1_error)
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_6pynini_Fst))))) __PYX_ERR(0, 740, __pyx_L1_error)
  __pyx_v_lhs = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_v_rhs = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pynini.pyx":741
 *     cdef Fst rhs
 *     (lhs, rhs) = _compile_or_copy_two_Fsts(self, ifst)
 *     MergeSymbols(self._mfst.get(), rhs._mfst.get(),             # <<<<<<<<<<<<<<
 *                  MERGE_INPUT_AND_OUTPUT_SYMBOLS)
 *     self._union(rhs)
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mfst");
    __PYX_ERR(0, 741, __pyx_L1_error)
  }
  if (unlikely(((PyObject *)__pyx_v_rhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mfst");
    __PYX_ERR(0, 741, __pyx_L1_error)
  }

  /* "pynini.pyx":742
 *     (lhs, rhs) = _compile_or_copy_two_Fsts(self, ifst)
 *     MergeSymbols(self._mfst.get(), rhs._mfst.get(),
 *                  MERGE_INPUT_AND_OUTPUT_SYMBOLS)             # <<<<<<<<<<<<<<
 *     self._union(rhs)
 *     return self
 */
  fst::script::MergeSymbols(__pyx_v_self->__pyx_base._mfst.get(), __pyx_v_rhs->__pyx_base._mfst.get(), fst::MERGE_INPUT_AND_OUTPUT_SYMBOLS);

  /* "pynini.pyx":743
 *     MergeSymbols(self._mfst.get(), rhs._mfst.get(),
 *                  MERGE_INPUT_AND_OUTPUT_SYMBOLS)
 *     self._union(rhs)             # <<<<<<<<<<<<<<
 *     return self
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_union");
    __PYX_ERR(0, 743, __pyx_L1_error)
  }
  ((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base._union(((struct __pyx_obj_9pywrapfst__MutableFst *)__pyx_v_self), ((struct __pyx_obj_9pywrapfst__Fst *)__pyx_v_rhs)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 743, __pyx_L1_error)

  /* "pynini.pyx":744
 *                  MERGE_INPUT_AND_OUTPUT_SYMBOLS)
 *     self._union(rhs)
 *     return self             # <<<<<<<<<<<<<<
 * 
 *   # Operator overloads.
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pynini.pyx":718
 *     return self
 * 
 *   def union(self, ifst):             # <<<<<<<<<<<<<<
 *     """
 *     union(self, ifst)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynini.Fst.union", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_lhs);
  __Pyx_XDECREF((PyObject *)__pyx_v_rhs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":748
 *   # Operator overloads.
 * 
 *   def __eq__(self, other):             # <<<<<<<<<<<<<<
 *     cdef Fst lhs
 *     cdef Fst rhs
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Fst_25__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_6pynini_3Fst_25__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__eq__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Fst_24__eq__(((struct __pyx_obj_6pynini_Fst *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Fst_24__eq__(struct __pyx_obj_6pynini_Fst *__pyx_v_self, PyObject *__pyx_v_other) {
  struct __pyx_obj_6pynini_Fst *__pyx_v_lhs = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_v_rhs = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  __Pyx_RefNannySetupContext("__eq__", 0);

  /* "pynini.pyx":751
 *     cdef Fst lhs
 *     cdef Fst rhs
 *     (lhs, rhs) = _compile_or_copy_two_Fsts(self, other)             # <<<<<<<<<<<<<<
 *     return Equal(deref(lhs._fst), deref(rhs._fst), kDelta)
 * 
 */
  __pyx_t_1 = __pyx_f_6pynini__compile_or_copy_two_Fsts(((PyObject *)__pyx_v_self), __pyx_v_other); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 751, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 751, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 751, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 751, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 751, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_3 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_4), 2) < 0) __PYX_ERR(0, 751, __pyx_L1_error)
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 751, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_6pynini_Fst))))) __PYX_ERR(0, 751, __pyx_L1_error)
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_6pynini_Fst))))) __PYX_ERR(0, 751, __pyx_L1_error)
  __pyx_v_lhs = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_v_rhs = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pynini.pyx":752
 *     cdef Fst rhs
 *     (lhs, rhs) = _compile_or_copy_two_Fsts(self, other)
 *     return Equal(deref(lhs._fst), deref(rhs._fst), kDelta)             # <<<<<<<<<<<<<<
 * 
 *   def __ne__(self, other):
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(((PyObject *)__pyx_v_lhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_fst");
    __PYX_ERR(0, 752, __pyx_L1_error)
  }
  if (unlikely(((PyObject *)__pyx_v_rhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_fst");
    __PYX_ERR(0, 752, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyBool_FromLong(fst::script::Equal((*__pyx_v_lhs->__pyx_base.__pyx_base._fst), (*__pyx_v_rhs->__pyx_base.__pyx_base._fst), fst::kDelta)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 752, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":748
 *   # Operator overloads.
 * 
 *   def __eq__(self, other):             # <<<<<<<<<<<<<<
 *     cdef Fst lhs
 *     cdef Fst rhs
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynini.Fst.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_lhs);
  __Pyx_XDECREF((PyObject *)__pyx_v_rhs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":754
 *     return Equal(deref(lhs._fst), deref(rhs._fst), kDelta)
 * 
 *   def __ne__(self, other):             # <<<<<<<<<<<<<<
 *     return not self == other
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Fst_27__ne__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_6pynini_3Fst_27__ne__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__ne__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Fst_26__ne__(((struct __pyx_obj_6pynini_Fst *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Fst_26__ne__(struct __pyx_obj_6pynini_Fst *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__ne__", 0);

  /* "pynini.pyx":755
 * 
 *   def __ne__(self, other):
 *     return not self == other             # <<<<<<<<<<<<<<
 * 
 *   # x + y
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_self), __pyx_v_other, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 755, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 755, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong((!__pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 755, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":754
 *     return Equal(deref(lhs._fst), deref(rhs._fst), kDelta)
 * 
 *   def __ne__(self, other):             # <<<<<<<<<<<<<<
 *     return not self == other
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.Fst.__ne__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":759
 *   # x + y
 * 
 *   def __add__(self, other):             # <<<<<<<<<<<<<<
 *     cdef string arc_type = tostring(self.arc_type()
 *                                     if hasattr(self, "arc_type") else
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Fst_29__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_6pynini_3Fst_29__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__add__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Fst_28__add__(((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Fst_28__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  std::string __pyx_v_arc_type;
  struct __pyx_obj_6pynini_Fst *__pyx_v_lhs = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  std::string __pyx_t_6;
  struct __pyx_opt_args_6pynini__compile_or_copy_Fst __pyx_t_7;
  __Pyx_RefNannySetupContext("__add__", 0);

  /* "pynini.pyx":761
 *   def __add__(self, other):
 *     cdef string arc_type = tostring(self.arc_type()
 *                                     if hasattr(self, "arc_type") else             # <<<<<<<<<<<<<<
 *                                     other.arc_type())
 *     cdef Fst lhs = _compile_or_copy_Fst(self, arc_type=arc_type)
 */
  __pyx_t_2 = __Pyx_HasAttr(__pyx_v_self, __pyx_n_s_arc_type); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 761, __pyx_L1_error)
  if ((__pyx_t_2 != 0)) {

    /* "pynini.pyx":760
 * 
 *   def __add__(self, other):
 *     cdef string arc_type = tostring(self.arc_type()             # <<<<<<<<<<<<<<
 *                                     if hasattr(self, "arc_type") else
 *                                     other.arc_type())
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_arc_type); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 760, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 760, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 760, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {

    /* "pynini.pyx":762
 *     cdef string arc_type = tostring(self.arc_type()
 *                                     if hasattr(self, "arc_type") else
 *                                     other.arc_type())             # <<<<<<<<<<<<<<
 *     cdef Fst lhs = _compile_or_copy_Fst(self, arc_type=arc_type)
 *     lhs.concat(other)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_arc_type); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 762, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 762, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 762, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  }

  /* "pynini.pyx":760
 * 
 *   def __add__(self, other):
 *     cdef string arc_type = tostring(self.arc_type()             # <<<<<<<<<<<<<<
 *                                     if hasattr(self, "arc_type") else
 *                                     other.arc_type())
 */
  __pyx_t_6 = __pyx_f_9pywrapfst_tostring(__pyx_t_1, NULL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 760, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_arc_type = __pyx_t_6;

  /* "pynini.pyx":763
 *                                     if hasattr(self, "arc_type") else
 *                                     other.arc_type())
 *     cdef Fst lhs = _compile_or_copy_Fst(self, arc_type=arc_type)             # <<<<<<<<<<<<<<
 *     lhs.concat(other)
 *     return lhs
 */
  __pyx_t_1 = __pyx_convert_PyUnicode_string_to_py_std__in_string(__pyx_v_arc_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 763, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7.__pyx_n = 1;
  __pyx_t_7.arc_type = __pyx_t_1;
  __pyx_t_3 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_self, &__pyx_t_7)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 763, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_lhs = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pynini.pyx":764
 *                                     other.arc_type())
 *     cdef Fst lhs = _compile_or_copy_Fst(self, arc_type=arc_type)
 *     lhs.concat(other)             # <<<<<<<<<<<<<<
 *     return lhs
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_lhs), __pyx_n_s_concat); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 764, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_other); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 764, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_other};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 764, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_other};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 764, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 764, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_INCREF(__pyx_v_other);
      __Pyx_GIVEREF(__pyx_v_other);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_other);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 764, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":765
 *     cdef Fst lhs = _compile_or_copy_Fst(self, arc_type=arc_type)
 *     lhs.concat(other)
 *     return lhs             # <<<<<<<<<<<<<<
 * 
 *   # x - y
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_lhs));
  __pyx_r = ((PyObject *)__pyx_v_lhs);
  goto __pyx_L0;

  /* "pynini.pyx":759
 *   # x + y
 * 
 *   def __add__(self, other):             # <<<<<<<<<<<<<<
 *     cdef string arc_type = tostring(self.arc_type()
 *                                     if hasattr(self, "arc_type") else
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynini.Fst.__add__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_lhs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":769
 *   # x - y
 * 
 *   def __sub__(self, other):             # <<<<<<<<<<<<<<
 *     return difference(self, other)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Fst_31__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_6pynini_3Fst_31__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__sub__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Fst_30__sub__(((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Fst_30__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__sub__", 0);

  /* "pynini.pyx":770
 * 
 *   def __sub__(self, other):
 *     return difference(self, other)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_difference); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_self, __pyx_v_other};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 770, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_self, __pyx_v_other};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 770, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 770, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_self);
    __Pyx_GIVEREF(__pyx_v_self);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_self);
    __Pyx_INCREF(__pyx_v_other);
    __Pyx_GIVEREF(__pyx_v_other);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_other);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 770, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":769
 *   # x - y
 * 
 *   def __sub__(self, other):             # <<<<<<<<<<<<<<
 *     return difference(self, other)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynini.Fst.__sub__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":775
 *   # x * y: deprecated in favor of '@'.
 * 
 *   def __mul__(self, other):             # <<<<<<<<<<<<<<
 *     return compose(self, other)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Fst_33__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_6pynini_3Fst_33__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__mul__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Fst_32__mul__(((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Fst_32__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__mul__", 0);

  /* "pynini.pyx":776
 * 
 *   def __mul__(self, other):
 *     return compose(self, other)             # <<<<<<<<<<<<<<
 * 
 *   # x @ y: requires Python 3.5 or better.
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_compose); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_self, __pyx_v_other};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 776, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_self, __pyx_v_other};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 776, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 776, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_self);
    __Pyx_GIVEREF(__pyx_v_self);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_self);
    __Pyx_INCREF(__pyx_v_other);
    __Pyx_GIVEREF(__pyx_v_other);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_other);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 776, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":775
 *   # x * y: deprecated in favor of '@'.
 * 
 *   def __mul__(self, other):             # <<<<<<<<<<<<<<
 *     return compose(self, other)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynini.Fst.__mul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":780
 *   # x @ y: requires Python 3.5 or better.
 * 
 *   def __matmul__(self, other):             # <<<<<<<<<<<<<<
 *     return compose(self, other)
 * 
 */

/* Python wrapper */
#if PY_VERSION_HEX >= 0x03050000
static PyObject *__pyx_pw_6pynini_3Fst_35__matmul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_6pynini_3Fst_35__matmul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__matmul__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Fst_34__matmul__(((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
#endif /*!(#if PY_VERSION_HEX >= 0x03050000)*/

#if PY_VERSION_HEX >= 0x03050000
static PyObject *__pyx_pf_6pynini_3Fst_34__matmul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__matmul__", 0);

  /* "pynini.pyx":781
 * 
 *   def __matmul__(self, other):
 *     return compose(self, other)             # <<<<<<<<<<<<<<
 * 
 *   # x | y
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_compose); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_self, __pyx_v_other};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 781, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_self, __pyx_v_other};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 781, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 781, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_self);
    __Pyx_GIVEREF(__pyx_v_self);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_self);
    __Pyx_INCREF(__pyx_v_other);
    __Pyx_GIVEREF(__pyx_v_other);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_other);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 781, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":780
 *   # x @ y: requires Python 3.5 or better.
 * 
 *   def __matmul__(self, other):             # <<<<<<<<<<<<<<
 *     return compose(self, other)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynini.Fst.__matmul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
#endif /*!(#if PY_VERSION_HEX >= 0x03050000)*/

/* "pynini.pyx":785
 *   # x | y
 * 
 *   def __or__(self, other):             # <<<<<<<<<<<<<<
 *     cdef string arc_type = tostring(self.arc_type()
 *                                     if hasattr(self, "arc_type") else
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Fst_37__or__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_6pynini_3Fst_37__or__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__or__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Fst_36__or__(((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Fst_36__or__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  std::string __pyx_v_arc_type;
  struct __pyx_obj_6pynini_Fst *__pyx_v_lhs = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  std::string __pyx_t_6;
  struct __pyx_opt_args_6pynini__compile_or_copy_Fst __pyx_t_7;
  __Pyx_RefNannySetupContext("__or__", 0);

  /* "pynini.pyx":787
 *   def __or__(self, other):
 *     cdef string arc_type = tostring(self.arc_type()
 *                                     if hasattr(self, "arc_type") else             # <<<<<<<<<<<<<<
 *                                     other.arc_type())
 *     cdef Fst lhs = _compile_or_copy_Fst(self, arc_type=arc_type)
 */
  __pyx_t_2 = __Pyx_HasAttr(__pyx_v_self, __pyx_n_s_arc_type); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 787, __pyx_L1_error)
  if ((__pyx_t_2 != 0)) {

    /* "pynini.pyx":786
 * 
 *   def __or__(self, other):
 *     cdef string arc_type = tostring(self.arc_type()             # <<<<<<<<<<<<<<
 *                                     if hasattr(self, "arc_type") else
 *                                     other.arc_type())
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_arc_type); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 786, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 786, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 786, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {

    /* "pynini.pyx":788
 *     cdef string arc_type = tostring(self.arc_type()
 *                                     if hasattr(self, "arc_type") else
 *                                     other.arc_type())             # <<<<<<<<<<<<<<
 *     cdef Fst lhs = _compile_or_copy_Fst(self, arc_type=arc_type)
 *     lhs.union(other)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_arc_type); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 788, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 788, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 788, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  }

  /* "pynini.pyx":786
 * 
 *   def __or__(self, other):
 *     cdef string arc_type = tostring(self.arc_type()             # <<<<<<<<<<<<<<
 *                                     if hasattr(self, "arc_type") else
 *                                     other.arc_type())
 */
  __pyx_t_6 = __pyx_f_9pywrapfst_tostring(__pyx_t_1, NULL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 786, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_arc_type = __pyx_t_6;

  /* "pynini.pyx":789
 *                                     if hasattr(self, "arc_type") else
 *                                     other.arc_type())
 *     cdef Fst lhs = _compile_or_copy_Fst(self, arc_type=arc_type)             # <<<<<<<<<<<<<<
 *     lhs.union(other)
 *     return lhs
 */
  __pyx_t_1 = __pyx_convert_PyUnicode_string_to_py_std__in_string(__pyx_v_arc_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 789, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7.__pyx_n = 1;
  __pyx_t_7.arc_type = __pyx_t_1;
  __pyx_t_3 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_self, &__pyx_t_7)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 789, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_lhs = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pynini.pyx":790
 *                                     other.arc_type())
 *     cdef Fst lhs = _compile_or_copy_Fst(self, arc_type=arc_type)
 *     lhs.union(other)             # <<<<<<<<<<<<<<
 *     return lhs
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_lhs), __pyx_n_s_union); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_other); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 790, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_other};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 790, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_other};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 790, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 790, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_INCREF(__pyx_v_other);
      __Pyx_GIVEREF(__pyx_v_other);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_other);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 790, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":791
 *     cdef Fst lhs = _compile_or_copy_Fst(self, arc_type=arc_type)
 *     lhs.union(other)
 *     return lhs             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_lhs));
  __pyx_r = ((PyObject *)__pyx_v_lhs);
  goto __pyx_L0;

  /* "pynini.pyx":785
 *   # x | y
 * 
 *   def __or__(self, other):             # <<<<<<<<<<<<<<
 *     cdef string arc_type = tostring(self.arc_type()
 *                                     if hasattr(self, "arc_type") else
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynini.Fst.__or__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_lhs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":798
 * 
 * 
 * cdef Fst _compile_or_copy_Fst(arg, arc_type=b"standard"):             # <<<<<<<<<<<<<<
 *   if not isinstance(arg, Fst):
 *     return acceptor(arg, arc_type=arc_type)
 */

static struct __pyx_obj_6pynini_Fst *__pyx_f_6pynini__compile_or_copy_Fst(PyObject *__pyx_v_arg, struct __pyx_opt_args_6pynini__compile_or_copy_Fst *__pyx_optional_args) {
  PyObject *__pyx_v_arc_type = ((PyObject *)__pyx_n_b_standard);
  struct __pyx_obj_6pynini_Fst *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("_compile_or_copy_Fst", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_arc_type = __pyx_optional_args->arc_type;
    }
  }

  /* "pynini.pyx":799
 * 
 * cdef Fst _compile_or_copy_Fst(arg, arc_type=b"standard"):
 *   if not isinstance(arg, Fst):             # <<<<<<<<<<<<<<
 *     return acceptor(arg, arc_type=arc_type)
 *   else:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_arg, __pyx_ptype_6pynini_Fst); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "pynini.pyx":800
 * cdef Fst _compile_or_copy_Fst(arg, arc_type=b"standard"):
 *   if not isinstance(arg, Fst):
 *     return acceptor(arg, arc_type=arc_type)             # <<<<<<<<<<<<<<
 *   else:
 *     return arg.copy()
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_acceptor); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 800, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 800, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_arg);
    __Pyx_GIVEREF(__pyx_v_arg);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_arg);
    __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 800, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_arc_type, __pyx_v_arc_type) < 0) __PYX_ERR(0, 800, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 800, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_6pynini_Fst))))) __PYX_ERR(0, 800, __pyx_L1_error)
    __pyx_r = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_6);
    __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "pynini.pyx":799
 * 
 * cdef Fst _compile_or_copy_Fst(arg, arc_type=b"standard"):
 *   if not isinstance(arg, Fst):             # <<<<<<<<<<<<<<
 *     return acceptor(arg, arc_type=arc_type)
 *   else:
 */
  }

  /* "pynini.pyx":802
 *     return acceptor(arg, arc_type=arc_type)
 *   else:
 *     return arg.copy()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_arg, __pyx_n_s_copy); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 802, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 802, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_6 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 802, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_6pynini_Fst))))) __PYX_ERR(0, 802, __pyx_L1_error)
    __pyx_r = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_6);
    __pyx_t_6 = 0;
    goto __pyx_L0;
  }

  /* "pynini.pyx":798
 * 
 * 
 * cdef Fst _compile_or_copy_Fst(arg, arc_type=b"standard"):             # <<<<<<<<<<<<<<
 *   if not isinstance(arg, Fst):
 *     return acceptor(arg, arc_type=arc_type)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pynini._compile_or_copy_Fst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":809
 * 
 * 
 * cdef object _compile_or_copy_two_Fsts(arg1, arg2):             # <<<<<<<<<<<<<<
 *   cdef Fst lhs
 *   cdef Fst rhs
 */

static PyObject *__pyx_f_6pynini__compile_or_copy_two_Fsts(PyObject *__pyx_v_arg1, PyObject *__pyx_v_arg2) {
  struct __pyx_obj_6pynini_Fst *__pyx_v_lhs = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_v_rhs = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  struct __pyx_opt_args_6pynini__compile_or_copy_Fst __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("_compile_or_copy_two_Fsts", 0);

  /* "pynini.pyx":812
 *   cdef Fst lhs
 *   cdef Fst rhs
 *   if isinstance(arg1, Fst):             # <<<<<<<<<<<<<<
 *     lhs = arg1.copy()
 *     rhs = _compile_or_copy_Fst(arg2, arc_type=arg1.arc_type())
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_arg1, __pyx_ptype_6pynini_Fst); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pynini.pyx":813
 *   cdef Fst rhs
 *   if isinstance(arg1, Fst):
 *     lhs = arg1.copy()             # <<<<<<<<<<<<<<
 *     rhs = _compile_or_copy_Fst(arg2, arc_type=arg1.arc_type())
 *   elif isinstance(arg2, Fst):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_arg1, __pyx_n_s_copy); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 813, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 813, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 813, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_6pynini_Fst))))) __PYX_ERR(0, 813, __pyx_L1_error)
    __pyx_v_lhs = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pynini.pyx":814
 *   if isinstance(arg1, Fst):
 *     lhs = arg1.copy()
 *     rhs = _compile_or_copy_Fst(arg2, arc_type=arg1.arc_type())             # <<<<<<<<<<<<<<
 *   elif isinstance(arg2, Fst):
 *     rhs = arg2.copy()
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_arg1, __pyx_n_s_arc_type); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 814, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 814, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 814, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6.__pyx_n = 1;
    __pyx_t_6.arc_type = __pyx_t_3;
    __pyx_t_4 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_arg2, &__pyx_t_6)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 814, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_rhs = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "pynini.pyx":812
 *   cdef Fst lhs
 *   cdef Fst rhs
 *   if isinstance(arg1, Fst):             # <<<<<<<<<<<<<<
 *     lhs = arg1.copy()
 *     rhs = _compile_or_copy_Fst(arg2, arc_type=arg1.arc_type())
 */
    goto __pyx_L3;
  }

  /* "pynini.pyx":815
 *     lhs = arg1.copy()
 *     rhs = _compile_or_copy_Fst(arg2, arc_type=arg1.arc_type())
 *   elif isinstance(arg2, Fst):             # <<<<<<<<<<<<<<
 *     rhs = arg2.copy()
 *     lhs = acceptor(arg1, arc_type=arg2.arc_type())
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_arg2, __pyx_ptype_6pynini_Fst); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pynini.pyx":816
 *     rhs = _compile_or_copy_Fst(arg2, arc_type=arg1.arc_type())
 *   elif isinstance(arg2, Fst):
 *     rhs = arg2.copy()             # <<<<<<<<<<<<<<
 *     lhs = acceptor(arg1, arc_type=arg2.arc_type())
 *   else:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_arg2, __pyx_n_s_copy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 816, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 816, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 816, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_6pynini_Fst))))) __PYX_ERR(0, 816, __pyx_L1_error)
    __pyx_v_rhs = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "pynini.pyx":817
 *   elif isinstance(arg2, Fst):
 *     rhs = arg2.copy()
 *     lhs = acceptor(arg1, arc_type=arg2.arc_type())             # <<<<<<<<<<<<<<
 *   else:
 *     lhs = acceptor(arg1)
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_acceptor); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 817, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 817, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_arg1);
    __Pyx_GIVEREF(__pyx_v_arg1);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_arg1);
    __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 817, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_arg2, __pyx_n_s_arc_type); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 817, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    if (__pyx_t_9) {
      __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 817, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else {
      __pyx_t_7 = __Pyx_PyObject_CallNoArg(__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 817, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_arc_type, __pyx_t_7) < 0) __PYX_ERR(0, 817, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 817, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_6pynini_Fst))))) __PYX_ERR(0, 817, __pyx_L1_error)
    __pyx_v_lhs = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_7);
    __pyx_t_7 = 0;

    /* "pynini.pyx":815
 *     lhs = arg1.copy()
 *     rhs = _compile_or_copy_Fst(arg2, arc_type=arg1.arc_type())
 *   elif isinstance(arg2, Fst):             # <<<<<<<<<<<<<<
 *     rhs = arg2.copy()
 *     lhs = acceptor(arg1, arc_type=arg2.arc_type())
 */
    goto __pyx_L3;
  }

  /* "pynini.pyx":819
 *     lhs = acceptor(arg1, arc_type=arg2.arc_type())
 *   else:
 *     lhs = acceptor(arg1)             # <<<<<<<<<<<<<<
 *     rhs = acceptor(arg2)
 *   return (lhs, rhs)
 */
  /*else*/ {
    __pyx_t_7 = ((PyObject *)__pyx_f_6pynini_acceptor(__pyx_v_arg1, 0, NULL)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 819, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_v_lhs = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_7);
    __pyx_t_7 = 0;

    /* "pynini.pyx":820
 *   else:
 *     lhs = acceptor(arg1)
 *     rhs = acceptor(arg2)             # <<<<<<<<<<<<<<
 *   return (lhs, rhs)
 * 
 */
    __pyx_t_7 = ((PyObject *)__pyx_f_6pynini_acceptor(__pyx_v_arg2, 0, NULL)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 820, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_v_rhs = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_7);
    __pyx_t_7 = 0;
  }
  __pyx_L3:;

  /* "pynini.pyx":821
 *     lhs = acceptor(arg1)
 *     rhs = acceptor(arg2)
 *   return (lhs, rhs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 821, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(((PyObject *)__pyx_v_lhs));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_lhs));
  PyTuple_SET_ITEM(__pyx_t_7, 0, ((PyObject *)__pyx_v_lhs));
  __Pyx_INCREF(((PyObject *)__pyx_v_rhs));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_rhs));
  PyTuple_SET_ITEM(__pyx_t_7, 1, ((PyObject *)__pyx_v_rhs));
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":809
 * 
 * 
 * cdef object _compile_or_copy_two_Fsts(arg1, arg2):             # <<<<<<<<<<<<<<
 *   cdef Fst lhs
 *   cdef Fst rhs
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pynini._compile_or_copy_two_Fsts", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_lhs);
  __Pyx_XDECREF((PyObject *)__pyx_v_rhs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":828
 * 
 * 
 * cdef Fst _init_Fst_from_MutableFst(_MutableFst rhs):             # <<<<<<<<<<<<<<
 *   cdef Fst result = Fst.__new__(Fst)
 *   result._fst = rhs._fst
 */

static struct __pyx_obj_6pynini_Fst *__pyx_f_6pynini__init_Fst_from_MutableFst(struct __pyx_obj_9pywrapfst__MutableFst *__pyx_v_rhs) {
  struct __pyx_obj_6pynini_Fst *__pyx_v_result = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::shared_ptr<fst::script::FstClass>  __pyx_t_2;
  std::shared_ptr<fst::script::MutableFstClass>  __pyx_t_3;
  __Pyx_RefNannySetupContext("_init_Fst_from_MutableFst", 0);

  /* "pynini.pyx":829
 * 
 * cdef Fst _init_Fst_from_MutableFst(_MutableFst rhs):
 *   cdef Fst result = Fst.__new__(Fst)             # <<<<<<<<<<<<<<
 *   result._fst = rhs._fst
 *   result._mfst = rhs._mfst
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_6pynini_Fst(((PyTypeObject *)__pyx_ptype_6pynini_Fst), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 829, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_result = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":830
 * cdef Fst _init_Fst_from_MutableFst(_MutableFst rhs):
 *   cdef Fst result = Fst.__new__(Fst)
 *   result._fst = rhs._fst             # <<<<<<<<<<<<<<
 *   result._mfst = rhs._mfst
 *   return result
 */
  if (unlikely(((PyObject *)__pyx_v_rhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_fst");
    __PYX_ERR(0, 830, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_v_rhs->__pyx_base._fst;
  if (unlikely(((PyObject *)__pyx_v_result) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_fst");
    __PYX_ERR(0, 830, __pyx_L1_error)
  }
  __pyx_v_result->__pyx_base.__pyx_base._fst = __pyx_t_2;

  /* "pynini.pyx":831
 *   cdef Fst result = Fst.__new__(Fst)
 *   result._fst = rhs._fst
 *   result._mfst = rhs._mfst             # <<<<<<<<<<<<<<
 *   return result
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_rhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mfst");
    __PYX_ERR(0, 831, __pyx_L1_error)
  }
  __pyx_t_3 = __pyx_v_rhs->_mfst;
  if (unlikely(((PyObject *)__pyx_v_result) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mfst");
    __PYX_ERR(0, 831, __pyx_L1_error)
  }
  __pyx_v_result->__pyx_base._mfst = __pyx_t_3;

  /* "pynini.pyx":832
 *   result._fst = rhs._fst
 *   result._mfst = rhs._mfst
 *   return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "pynini.pyx":828
 * 
 * 
 * cdef Fst _init_Fst_from_MutableFst(_MutableFst rhs):             # <<<<<<<<<<<<<<
 *   cdef Fst result = Fst.__new__(Fst)
 *   result._fst = rhs._fst
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini._init_Fst_from_MutableFst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":838
 * 
 * 
 * cpdef Fst _from_pywrapfst(_Fst ifst):             # <<<<<<<<<<<<<<
 *   cdef Fst result = Fst.__new__(Fst)
 *   result._from_MutableFstClass(new VectorFstClass(deref(ifst._fst)))
 */

static PyObject *__pyx_pw_6pynini_1_from_pywrapfst(PyObject *__pyx_self, PyObject *__pyx_v_ifst); /*proto*/
static struct __pyx_obj_6pynini_Fst *__pyx_f_6pynini__from_pywrapfst(struct __pyx_obj_9pywrapfst__Fst *__pyx_v_ifst, CYTHON_UNUSED int __pyx_skip_dispatch) {
  struct __pyx_obj_6pynini_Fst *__pyx_v_result = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_from_pywrapfst", 0);

  /* "pynini.pyx":839
 * 
 * cpdef Fst _from_pywrapfst(_Fst ifst):
 *   cdef Fst result = Fst.__new__(Fst)             # <<<<<<<<<<<<<<
 *   result._from_MutableFstClass(new VectorFstClass(deref(ifst._fst)))
 *   return result
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_6pynini_Fst(((PyTypeObject *)__pyx_ptype_6pynini_Fst), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 839, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_result = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":840
 * cpdef Fst _from_pywrapfst(_Fst ifst):
 *   cdef Fst result = Fst.__new__(Fst)
 *   result._from_MutableFstClass(new VectorFstClass(deref(ifst._fst)))             # <<<<<<<<<<<<<<
 *   return result
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_result) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_from_MutableFstClass");
    __PYX_ERR(0, 840, __pyx_L1_error)
  }
  if (unlikely(((PyObject *)__pyx_v_ifst) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_fst");
    __PYX_ERR(0, 840, __pyx_L1_error)
  }
  ((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_result->__pyx_base.__pyx_base.__pyx_vtab)->_from_MutableFstClass(__pyx_v_result, new fst::script::VectorFstClass((*__pyx_v_ifst->_fst)));

  /* "pynini.pyx":841
 *   cdef Fst result = Fst.__new__(Fst)
 *   result._from_MutableFstClass(new VectorFstClass(deref(ifst._fst)))
 *   return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "pynini.pyx":838
 * 
 * 
 * cpdef Fst _from_pywrapfst(_Fst ifst):             # <<<<<<<<<<<<<<
 *   cdef Fst result = Fst.__new__(Fst)
 *   result._from_MutableFstClass(new VectorFstClass(deref(ifst._fst)))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini._from_pywrapfst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_1_from_pywrapfst(PyObject *__pyx_self, PyObject *__pyx_v_ifst); /*proto*/
static PyObject *__pyx_pw_6pynini_1_from_pywrapfst(PyObject *__pyx_self, PyObject *__pyx_v_ifst) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_from_pywrapfst (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ifst), __pyx_ptype_9pywrapfst__Fst, 1, "ifst", 0))) __PYX_ERR(0, 838, __pyx_L1_error)
  __pyx_r = __pyx_pf_6pynini__from_pywrapfst(__pyx_self, ((struct __pyx_obj_9pywrapfst__Fst *)__pyx_v_ifst));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini__from_pywrapfst(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_9pywrapfst__Fst *__pyx_v_ifst) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_from_pywrapfst", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini__from_pywrapfst(__pyx_v_ifst, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 838, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini._from_pywrapfst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":844
 * 
 * 
 * cpdef Fst _read(filename):             # <<<<<<<<<<<<<<
 *   return _from_pywrapfst(pywrapfst.Fst.read(filename))
 * 
 */

static PyObject *__pyx_pw_6pynini_3_read(PyObject *__pyx_self, PyObject *__pyx_v_filename); /*proto*/
static struct __pyx_obj_6pynini_Fst *__pyx_f_6pynini__read(PyObject *__pyx_v_filename, CYTHON_UNUSED int __pyx_skip_dispatch) {
  struct __pyx_obj_6pynini_Fst *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("_read", 0);

  /* "pynini.pyx":845
 * 
 * cpdef Fst _read(filename):
 *   return _from_pywrapfst(pywrapfst.Fst.read(filename))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 845, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Fst); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 845, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_read); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 845, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_filename); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 845, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_filename};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 845, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_filename};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 845, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 845, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_filename);
      __Pyx_GIVEREF(__pyx_v_filename);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_filename);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 845, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9pywrapfst__Fst))))) __PYX_ERR(0, 845, __pyx_L1_error)
  __pyx_t_2 = ((PyObject *)__pyx_f_6pynini__from_pywrapfst(((struct __pyx_obj_9pywrapfst__Fst *)__pyx_t_1), 0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 845, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":844
 * 
 * 
 * cpdef Fst _read(filename):             # <<<<<<<<<<<<<<
 *   return _from_pywrapfst(pywrapfst.Fst.read(filename))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynini._read", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3_read(PyObject *__pyx_self, PyObject *__pyx_v_filename); /*proto*/
static PyObject *__pyx_pw_6pynini_3_read(PyObject *__pyx_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_read (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_2_read(__pyx_self, ((PyObject *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_2_read(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_read", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini__read(__pyx_v_filename, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini._read", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":848
 * 
 * 
 * cpdef Fst _read_from_string(state):             # <<<<<<<<<<<<<<
 *   return _from_pywrapfst(pywrapfst.Fst.read_from_string(state))
 * 
 */

static PyObject *__pyx_pw_6pynini_5_read_from_string(PyObject *__pyx_self, PyObject *__pyx_v_state); /*proto*/
static struct __pyx_obj_6pynini_Fst *__pyx_f_6pynini__read_from_string(PyObject *__pyx_v_state, CYTHON_UNUSED int __pyx_skip_dispatch) {
  struct __pyx_obj_6pynini_Fst *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("_read_from_string", 0);

  /* "pynini.pyx":849
 * 
 * cpdef Fst _read_from_string(state):
 *   return _from_pywrapfst(pywrapfst.Fst.read_from_string(state))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 849, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Fst); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 849, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_read_from_string_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 849, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_state); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 849, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_state};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 849, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_state};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 849, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 849, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_state);
      __Pyx_GIVEREF(__pyx_v_state);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_state);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 849, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9pywrapfst__Fst))))) __PYX_ERR(0, 849, __pyx_L1_error)
  __pyx_t_2 = ((PyObject *)__pyx_f_6pynini__from_pywrapfst(((struct __pyx_obj_9pywrapfst__Fst *)__pyx_t_1), 0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 849, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":848
 * 
 * 
 * cpdef Fst _read_from_string(state):             # <<<<<<<<<<<<<<
 *   return _from_pywrapfst(pywrapfst.Fst.read_from_string(state))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynini._read_from_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_5_read_from_string(PyObject *__pyx_self, PyObject *__pyx_v_state); /*proto*/
static PyObject *__pyx_pw_6pynini_5_read_from_string(PyObject *__pyx_self, PyObject *__pyx_v_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_read_from_string (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_4_read_from_string(__pyx_self, ((PyObject *)__pyx_v_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_4_read_from_string(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_read_from_string", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini__read_from_string(__pyx_v_state, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 848, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini._read_from_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":856
 * 
 * 
 * cpdef Fst acceptor(astring,             # <<<<<<<<<<<<<<
 *                    weight=None,
 *                    arc_type=b"standard",
 */

static PyObject *__pyx_pw_6pynini_7acceptor(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static struct __pyx_obj_6pynini_Fst *__pyx_f_6pynini_acceptor(PyObject *__pyx_v_astring, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_6pynini_acceptor *__pyx_optional_args) {

  /* "pynini.pyx":857
 * 
 * cpdef Fst acceptor(astring,
 *                    weight=None,             # <<<<<<<<<<<<<<
 *                    arc_type=b"standard",
 *                    token_type=b"byte",
 */
  PyObject *__pyx_v_weight = ((PyObject *)Py_None);
  PyObject *__pyx_v_arc_type = ((PyObject *)__pyx_n_b_standard);
  PyObject *__pyx_v_token_type = ((PyObject *)__pyx_n_b_byte);

  /* "pynini.pyx":860
 *                    arc_type=b"standard",
 *                    token_type=b"byte",
 *                    bool attach_symbols=True):             # <<<<<<<<<<<<<<
 *   """
 *   acceptor(astring, weight=None, arc_type="standard", token_type="byte",
 */
  bool __pyx_v_attach_symbols = ((bool)1);
  struct __pyx_obj_6pynini_Fst *__pyx_v_result = 0;
  fst::script::WeightClass __pyx_v_wc;
  enum fst::StringTokenType __pyx_v_ttype;
  __pyx_t_9pywrapfst_SymbolTable_ptr __pyx_v_syms;
  bool __pyx_v_success;
  struct __pyx_obj_6pynini_Fst *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  fst::script::WeightClass __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  enum fst::StringTokenType __pyx_t_7;
  __Pyx_RefNannySetupContext("acceptor", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_weight = __pyx_optional_args->weight;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_arc_type = __pyx_optional_args->arc_type;
        if (__pyx_optional_args->__pyx_n > 2) {
          __pyx_v_token_type = __pyx_optional_args->token_type;
          if (__pyx_optional_args->__pyx_n > 3) {
            __pyx_v_attach_symbols = __pyx_optional_args->attach_symbols;
          }
        }
      }
    }
  }

  /* "pynini.pyx":893
 *       FstStringCompilationError: String compilation failed.
 *   """
 *   cdef Fst result = Fst(tostring(arc_type))             # <<<<<<<<<<<<<<
 *   cdef WeightClass wc = _get_WeightClass_or_One(result.weight_type(), weight)
 *   cdef StringTokenType ttype
 */
  __pyx_t_1 = __pyx_f_9pywrapfst_tostring(__pyx_v_arc_type, NULL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 893, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_PyUnicode_string_to_py_std__in_string(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 893, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 893, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_result = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pynini.pyx":894
 *   """
 *   cdef Fst result = Fst(tostring(arc_type))
 *   cdef WeightClass wc = _get_WeightClass_or_One(result.weight_type(), weight)             # <<<<<<<<<<<<<<
 *   cdef StringTokenType ttype
 *   cdef SymbolTable_ptr syms = NULL
 */
  __pyx_t_4 = __pyx_f_9pywrapfst__get_WeightClass_or_One(((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_result->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.weight_type(((struct __pyx_obj_9pywrapfst__Fst *)__pyx_v_result), 0), __pyx_v_weight); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 894, __pyx_L1_error)
  __pyx_v_wc = __pyx_t_4;

  /* "pynini.pyx":896
 *   cdef WeightClass wc = _get_WeightClass_or_One(result.weight_type(), weight)
 *   cdef StringTokenType ttype
 *   cdef SymbolTable_ptr syms = NULL             # <<<<<<<<<<<<<<
 *   if isinstance(token_type, pywrapfst._SymbolTable):
 *     ttype = SYMBOL
 */
  __pyx_v_syms = NULL;

  /* "pynini.pyx":897
 *   cdef StringTokenType ttype
 *   cdef SymbolTable_ptr syms = NULL
 *   if isinstance(token_type, pywrapfst._SymbolTable):             # <<<<<<<<<<<<<<
 *     ttype = SYMBOL
 *     syms = (<SymbolTable_ptr> (<_SymbolTable> token_type)._table)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 897, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_SymbolTable); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 897, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = PyObject_IsInstance(__pyx_v_token_type, __pyx_t_2); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 897, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "pynini.pyx":898
 *   cdef SymbolTable_ptr syms = NULL
 *   if isinstance(token_type, pywrapfst._SymbolTable):
 *     ttype = SYMBOL             # <<<<<<<<<<<<<<
 *     syms = (<SymbolTable_ptr> (<_SymbolTable> token_type)._table)
 *   else:
 */
    __pyx_v_ttype = fst::SYMBOL;

    /* "pynini.pyx":899
 *   if isinstance(token_type, pywrapfst._SymbolTable):
 *     ttype = SYMBOL
 *     syms = (<SymbolTable_ptr> (<_SymbolTable> token_type)._table)             # <<<<<<<<<<<<<<
 *   else:
 *     ttype = _get_token_type(tostring(token_type))
 */
    if (unlikely(__pyx_v_token_type == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_table");
      __PYX_ERR(0, 899, __pyx_L1_error)
    }
    __pyx_v_syms = ((__pyx_t_9pywrapfst_SymbolTable_ptr)((struct __pyx_obj_9pywrapfst__SymbolTable *)__pyx_v_token_type)->_table);

    /* "pynini.pyx":897
 *   cdef StringTokenType ttype
 *   cdef SymbolTable_ptr syms = NULL
 *   if isinstance(token_type, pywrapfst._SymbolTable):             # <<<<<<<<<<<<<<
 *     ttype = SYMBOL
 *     syms = (<SymbolTable_ptr> (<_SymbolTable> token_type)._table)
 */
    goto __pyx_L3;
  }

  /* "pynini.pyx":901
 *     syms = (<SymbolTable_ptr> (<_SymbolTable> token_type)._table)
 *   else:
 *     ttype = _get_token_type(tostring(token_type))             # <<<<<<<<<<<<<<
 *   cdef bool success = CompileString(tostring(astring), result._mfst.get(),
 *                                     ttype, syms, wc, attach_symbols)
 */
  /*else*/ {
    __pyx_t_1 = __pyx_f_9pywrapfst_tostring(__pyx_v_token_type, NULL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 901, __pyx_L1_error)
    __pyx_t_7 = __pyx_f_6pynini__get_token_type(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 901, __pyx_L1_error)
    __pyx_v_ttype = __pyx_t_7;
  }
  __pyx_L3:;

  /* "pynini.pyx":902
 *   else:
 *     ttype = _get_token_type(tostring(token_type))
 *   cdef bool success = CompileString(tostring(astring), result._mfst.get(),             # <<<<<<<<<<<<<<
 *                                     ttype, syms, wc, attach_symbols)
 *   # First we check whether there were problems with arc or weight type, then
 */
  __pyx_t_1 = __pyx_f_9pywrapfst_tostring(__pyx_v_astring, NULL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 902, __pyx_L1_error)

  /* "pynini.pyx":903
 *     ttype = _get_token_type(tostring(token_type))
 *   cdef bool success = CompileString(tostring(astring), result._mfst.get(),
 *                                     ttype, syms, wc, attach_symbols)             # <<<<<<<<<<<<<<
 *   # First we check whether there were problems with arc or weight type, then
 *   # for string compilation issues.
 */
  __pyx_v_success = fst::script::CompileString(__pyx_t_1, __pyx_v_result->__pyx_base._mfst.get(), __pyx_v_ttype, __pyx_v_syms, __pyx_v_wc, __pyx_v_attach_symbols);

  /* "pynini.pyx":906
 *   # First we check whether there were problems with arc or weight type, then
 *   # for string compilation issues.
 *   result._check_mutating_imethod()             # <<<<<<<<<<<<<<
 *   if not success:
 *     raise FstStringCompilationError("String compilation failed")
 */
  ((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_result->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base._check_mutating_imethod(((struct __pyx_obj_9pywrapfst__MutableFst *)__pyx_v_result)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 906, __pyx_L1_error)

  /* "pynini.pyx":907
 *   # for string compilation issues.
 *   result._check_mutating_imethod()
 *   if not success:             # <<<<<<<<<<<<<<
 *     raise FstStringCompilationError("String compilation failed")
 *   return result
 */
  __pyx_t_6 = ((!(__pyx_v_success != 0)) != 0);
  if (unlikely(__pyx_t_6)) {

    /* "pynini.pyx":908
 *   result._check_mutating_imethod()
 *   if not success:
 *     raise FstStringCompilationError("String compilation failed")             # <<<<<<<<<<<<<<
 *   return result
 * 
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstStringCompilationError); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 908, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 908, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 908, __pyx_L1_error)

    /* "pynini.pyx":907
 *   # for string compilation issues.
 *   result._check_mutating_imethod()
 *   if not success:             # <<<<<<<<<<<<<<
 *     raise FstStringCompilationError("String compilation failed")
 *   return result
 */
  }

  /* "pynini.pyx":909
 *   if not success:
 *     raise FstStringCompilationError("String compilation failed")
 *   return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "pynini.pyx":856
 * 
 * 
 * cpdef Fst acceptor(astring,             # <<<<<<<<<<<<<<
 *                    weight=None,
 *                    arc_type=b"standard",
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynini.acceptor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_7acceptor(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pynini_6acceptor[] = "\n  acceptor(astring, weight=None, arc_type=\"standard\", token_type=\"byte\",\n           attach_symbols=True)\n\n  Creates an acceptor from a string.\n\n  This function creates an FST which accepts its input with a fixed weight\n  (defaulting to semiring One).\n\n  Args:\n    astring: The input string.\n    weight: A Weight or weight string indicating the desired path weight. If\n        omitted or null, the path weight is set to semiring One.\n    arc_type: An optional string indicating the arc type for the compiled FST.\n        This argument is silently ignored if istring and/or ostring is already\n        compiled.\n    token_type: Either a string indicating how the input string is to be\n        encoded as arc labels---one of: utf8\" (encodes the strings as UTF-8\n        encoded Unicode string), \"byte\" (encodes the string as raw bytes)---or\n        a SymbolTable to be used to encode the string.\n    attach_symbols: Should the symbol table used to compile the acceptor be\n        attached to the FST?\n\n    Returns:\n      An FST acceptor.\n\n    Raises:\n      FstArgError: Unknown arc type.\n      FstArgError: Unknown token type.\n      FstOpError: Operation failed.\n      FstStringCompilationError: String compilation failed.\n  ";
static PyObject *__pyx_pw_6pynini_7acceptor(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_astring = 0;
  PyObject *__pyx_v_weight = 0;
  PyObject *__pyx_v_arc_type = 0;
  PyObject *__pyx_v_token_type = 0;
  bool __pyx_v_attach_symbols;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("acceptor (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_astring,&__pyx_n_s_weight,&__pyx_n_s_arc_type,&__pyx_n_s_token_type,&__pyx_n_s_attach_symbols,0};
    PyObject* values[5] = {0,0,0,0,0};

    /* "pynini.pyx":857
 * 
 * cpdef Fst acceptor(astring,
 *                    weight=None,             # <<<<<<<<<<<<<<
 *                    arc_type=b"standard",
 *                    token_type=b"byte",
 */
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)__pyx_n_b_standard);
    values[3] = ((PyObject *)__pyx_n_b_byte);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_astring)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_weight);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_arc_type);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_token_type);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attach_symbols);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "acceptor") < 0)) __PYX_ERR(0, 856, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_astring = values[0];
    __pyx_v_weight = values[1];
    __pyx_v_arc_type = values[2];
    __pyx_v_token_type = values[3];
    if (values[4]) {
      __pyx_v_attach_symbols = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_attach_symbols == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 860, __pyx_L3_error)
    } else {

      /* "pynini.pyx":860
 *                    arc_type=b"standard",
 *                    token_type=b"byte",
 *                    bool attach_symbols=True):             # <<<<<<<<<<<<<<
 *   """
 *   acceptor(astring, weight=None, arc_type="standard", token_type="byte",
 */
      __pyx_v_attach_symbols = ((bool)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("acceptor", 0, 1, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 856, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.acceptor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_6acceptor(__pyx_self, __pyx_v_astring, __pyx_v_weight, __pyx_v_arc_type, __pyx_v_token_type, __pyx_v_attach_symbols);

  /* "pynini.pyx":856
 * 
 * 
 * cpdef Fst acceptor(astring,             # <<<<<<<<<<<<<<
 *                    weight=None,
 *                    arc_type=b"standard",
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_6acceptor(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_astring, PyObject *__pyx_v_weight, PyObject *__pyx_v_arc_type, PyObject *__pyx_v_token_type, bool __pyx_v_attach_symbols) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_6pynini_acceptor __pyx_t_2;
  __Pyx_RefNannySetupContext("acceptor", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 4;
  __pyx_t_2.weight = __pyx_v_weight;
  __pyx_t_2.arc_type = __pyx_v_arc_type;
  __pyx_t_2.token_type = __pyx_v_token_type;
  __pyx_t_2.attach_symbols = __pyx_v_attach_symbols;
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini_acceptor(__pyx_v_astring, 0, &__pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 856, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.acceptor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":912
 * 
 * 
 * cpdef Fst transducer(istring,             # <<<<<<<<<<<<<<
 *                      ostring,
 *                      weight=None,
 */

static PyObject *__pyx_pw_6pynini_9transducer(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static struct __pyx_obj_6pynini_Fst *__pyx_f_6pynini_transducer(PyObject *__pyx_v_istring, PyObject *__pyx_v_ostring, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_6pynini_transducer *__pyx_optional_args) {

  /* "pynini.pyx":914
 * cpdef Fst transducer(istring,
 *                      ostring,
 *                      weight=None,             # <<<<<<<<<<<<<<
 *                      arc_type=b"standard",
 *                      input_token_type=b"byte",
 */
  PyObject *__pyx_v_weight = ((PyObject *)Py_None);
  PyObject *__pyx_v_arc_type = ((PyObject *)__pyx_n_b_standard);
  PyObject *__pyx_v_input_token_type = ((PyObject *)__pyx_n_b_byte);
  PyObject *__pyx_v_output_token_type = ((PyObject *)__pyx_n_b_byte);

  /* "pynini.pyx":918
 *                      input_token_type=b"byte",
 *                      output_token_type=b"byte",
 *                      bool attach_input_symbols=True,             # <<<<<<<<<<<<<<
 *                      bool attach_output_symbols=True):
 *   """
 */
  bool __pyx_v_attach_input_symbols = ((bool)1);

  /* "pynini.pyx":919
 *                      output_token_type=b"byte",
 *                      bool attach_input_symbols=True,
 *                      bool attach_output_symbols=True):             # <<<<<<<<<<<<<<
 *   """
 *   transducer(istring, ostring, weight=None, arc_type="standard",
 */
  bool __pyx_v_attach_output_symbols = ((bool)1);
  struct __pyx_obj_6pynini_Fst *__pyx_v_lower = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_v_upper = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_v_result = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  fst::script::WeightClass __pyx_t_7;
  __Pyx_RefNannySetupContext("transducer", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_weight = __pyx_optional_args->weight;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_arc_type = __pyx_optional_args->arc_type;
        if (__pyx_optional_args->__pyx_n > 2) {
          __pyx_v_input_token_type = __pyx_optional_args->input_token_type;
          if (__pyx_optional_args->__pyx_n > 3) {
            __pyx_v_output_token_type = __pyx_optional_args->output_token_type;
            if (__pyx_optional_args->__pyx_n > 4) {
              __pyx_v_attach_input_symbols = __pyx_optional_args->attach_input_symbols;
              if (__pyx_optional_args->__pyx_n > 5) {
                __pyx_v_attach_output_symbols = __pyx_optional_args->attach_output_symbols;
              }
            }
          }
        }
      }
    }
  }

  /* "pynini.pyx":969
 *   cdef Fst lower
 *   cdef Fst upper
 *   cdef Fst result = Fst(arc_type)             # <<<<<<<<<<<<<<
 *   # Sets up upper language.
 *   if not isinstance(istring, Fst):
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_v_arc_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 969, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":971
 *   cdef Fst result = Fst(arc_type)
 *   # Sets up upper language.
 *   if not isinstance(istring, Fst):             # <<<<<<<<<<<<<<
 *     upper = acceptor(istring, arc_type=arc_type, token_type=input_token_type,
 *                      attach_symbols=attach_input_symbols)
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_istring, __pyx_ptype_6pynini_Fst); 
  __pyx_t_3 = ((!(__pyx_t_2 != 0)) != 0);
  if (__pyx_t_3) {

    /* "pynini.pyx":972
 *   # Sets up upper language.
 *   if not isinstance(istring, Fst):
 *     upper = acceptor(istring, arc_type=arc_type, token_type=input_token_type,             # <<<<<<<<<<<<<<
 *                      attach_symbols=attach_input_symbols)
 *   else:
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_acceptor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 972, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 972, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_istring);
    __Pyx_GIVEREF(__pyx_v_istring);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_istring);
    __pyx_t_5 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 972, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_arc_type, __pyx_v_arc_type) < 0) __PYX_ERR(0, 972, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_token_type, __pyx_v_input_token_type) < 0) __PYX_ERR(0, 972, __pyx_L1_error)

    /* "pynini.pyx":973
 *   if not isinstance(istring, Fst):
 *     upper = acceptor(istring, arc_type=arc_type, token_type=input_token_type,
 *                      attach_symbols=attach_input_symbols)             # <<<<<<<<<<<<<<
 *   else:
 *     upper = istring
 */
    __pyx_t_6 = __Pyx_PyBool_FromLong(__pyx_v_attach_input_symbols); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 973, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_attach_symbols, __pyx_t_6) < 0) __PYX_ERR(0, 972, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "pynini.pyx":972
 *   # Sets up upper language.
 *   if not isinstance(istring, Fst):
 *     upper = acceptor(istring, arc_type=arc_type, token_type=input_token_type,             # <<<<<<<<<<<<<<
 *                      attach_symbols=attach_input_symbols)
 *   else:
 */
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 972, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_6pynini_Fst))))) __PYX_ERR(0, 972, __pyx_L1_error)
    __pyx_v_upper = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "pynini.pyx":971
 *   cdef Fst result = Fst(arc_type)
 *   # Sets up upper language.
 *   if not isinstance(istring, Fst):             # <<<<<<<<<<<<<<
 *     upper = acceptor(istring, arc_type=arc_type, token_type=input_token_type,
 *                      attach_symbols=attach_input_symbols)
 */
    goto __pyx_L3;
  }

  /* "pynini.pyx":975
 *                      attach_symbols=attach_input_symbols)
 *   else:
 *     upper = istring             # <<<<<<<<<<<<<<
 *   if upper._fst.get().Properties(kAcceptor, True) != kAcceptor:
 *     logging.warning("Expecting acceptor or string argument, got a transducer")
 */
  /*else*/ {
    if (!(likely(((__pyx_v_istring) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_istring, __pyx_ptype_6pynini_Fst))))) __PYX_ERR(0, 975, __pyx_L1_error)
    __pyx_t_6 = __pyx_v_istring;
    __Pyx_INCREF(__pyx_t_6);
    __pyx_v_upper = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_6);
    __pyx_t_6 = 0;
  }
  __pyx_L3:;

  /* "pynini.pyx":976
 *   else:
 *     upper = istring
 *   if upper._fst.get().Properties(kAcceptor, True) != kAcceptor:             # <<<<<<<<<<<<<<
 *     logging.warning("Expecting acceptor or string argument, got a transducer")
 *   # Sets up lower language, and passes weight.
 */
  if (unlikely(((PyObject *)__pyx_v_upper) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_fst");
    __PYX_ERR(0, 976, __pyx_L1_error)
  }
  __pyx_t_3 = ((__pyx_v_upper->__pyx_base.__pyx_base._fst.get()->Properties(fst::kAcceptor, 1) != fst::kAcceptor) != 0);
  if (__pyx_t_3) {

    /* "pynini.pyx":977
 *     upper = istring
 *   if upper._fst.get().Properties(kAcceptor, True) != kAcceptor:
 *     logging.warning("Expecting acceptor or string argument, got a transducer")             # <<<<<<<<<<<<<<
 *   # Sets up lower language, and passes weight.
 *   if not isinstance(ostring, Fst):
 */
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_logging); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 977, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_warning); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 977, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 977, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "pynini.pyx":976
 *   else:
 *     upper = istring
 *   if upper._fst.get().Properties(kAcceptor, True) != kAcceptor:             # <<<<<<<<<<<<<<
 *     logging.warning("Expecting acceptor or string argument, got a transducer")
 *   # Sets up lower language, and passes weight.
 */
  }

  /* "pynini.pyx":979
 *     logging.warning("Expecting acceptor or string argument, got a transducer")
 *   # Sets up lower language, and passes weight.
 *   if not isinstance(ostring, Fst):             # <<<<<<<<<<<<<<
 *     lower = acceptor(ostring, arc_type=arc_type, token_type=output_token_type,
 *                      attach_symbols=attach_output_symbols)
 */
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_ostring, __pyx_ptype_6pynini_Fst); 
  __pyx_t_2 = ((!(__pyx_t_3 != 0)) != 0);
  if (__pyx_t_2) {

    /* "pynini.pyx":980
 *   # Sets up lower language, and passes weight.
 *   if not isinstance(ostring, Fst):
 *     lower = acceptor(ostring, arc_type=arc_type, token_type=output_token_type,             # <<<<<<<<<<<<<<
 *                      attach_symbols=attach_output_symbols)
 *   else:
 */
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_acceptor); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 980, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 980, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_ostring);
    __Pyx_GIVEREF(__pyx_v_ostring);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_ostring);
    __pyx_t_4 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 980, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_arc_type, __pyx_v_arc_type) < 0) __PYX_ERR(0, 980, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_token_type, __pyx_v_output_token_type) < 0) __PYX_ERR(0, 980, __pyx_L1_error)

    /* "pynini.pyx":981
 *   if not isinstance(ostring, Fst):
 *     lower = acceptor(ostring, arc_type=arc_type, token_type=output_token_type,
 *                      attach_symbols=attach_output_symbols)             # <<<<<<<<<<<<<<
 *   else:
 *     lower = ostring
 */
    __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_attach_output_symbols); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 981, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_attach_symbols, __pyx_t_1) < 0) __PYX_ERR(0, 980, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pynini.pyx":980
 *   # Sets up lower language, and passes weight.
 *   if not isinstance(ostring, Fst):
 *     lower = acceptor(ostring, arc_type=arc_type, token_type=output_token_type,             # <<<<<<<<<<<<<<
 *                      attach_symbols=attach_output_symbols)
 *   else:
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 980, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_6pynini_Fst))))) __PYX_ERR(0, 980, __pyx_L1_error)
    __pyx_v_lower = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "pynini.pyx":979
 *     logging.warning("Expecting acceptor or string argument, got a transducer")
 *   # Sets up lower language, and passes weight.
 *   if not isinstance(ostring, Fst):             # <<<<<<<<<<<<<<
 *     lower = acceptor(ostring, arc_type=arc_type, token_type=output_token_type,
 *                      attach_symbols=attach_output_symbols)
 */
    goto __pyx_L5;
  }

  /* "pynini.pyx":983
 *                      attach_symbols=attach_output_symbols)
 *   else:
 *     lower = ostring             # <<<<<<<<<<<<<<
 *     if lower._fst.get().Properties(kAcceptor, True) != kAcceptor:
 *       logging.warning("Expecting acceptor or string argument, got a transducer")
 */
  /*else*/ {
    if (!(likely(((__pyx_v_ostring) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_ostring, __pyx_ptype_6pynini_Fst))))) __PYX_ERR(0, 983, __pyx_L1_error)
    __pyx_t_1 = __pyx_v_ostring;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v_lower = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "pynini.pyx":984
 *   else:
 *     lower = ostring
 *     if lower._fst.get().Properties(kAcceptor, True) != kAcceptor:             # <<<<<<<<<<<<<<
 *       logging.warning("Expecting acceptor or string argument, got a transducer")
 *   # Actually computes cross-product.
 */
    if (unlikely(((PyObject *)__pyx_v_lower) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_fst");
      __PYX_ERR(0, 984, __pyx_L1_error)
    }
    __pyx_t_2 = ((__pyx_v_lower->__pyx_base.__pyx_base._fst.get()->Properties(fst::kAcceptor, 1) != fst::kAcceptor) != 0);
    if (__pyx_t_2) {

      /* "pynini.pyx":985
 *     lower = ostring
 *     if lower._fst.get().Properties(kAcceptor, True) != kAcceptor:
 *       logging.warning("Expecting acceptor or string argument, got a transducer")             # <<<<<<<<<<<<<<
 *   # Actually computes cross-product.
 *   CrossProduct(deref(upper._fst), deref(lower._fst), result._mfst.get(),
 */
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_logging); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 985, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_warning); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 985, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 985, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "pynini.pyx":984
 *   else:
 *     lower = ostring
 *     if lower._fst.get().Properties(kAcceptor, True) != kAcceptor:             # <<<<<<<<<<<<<<
 *       logging.warning("Expecting acceptor or string argument, got a transducer")
 *   # Actually computes cross-product.
 */
    }
  }
  __pyx_L5:;

  /* "pynini.pyx":987
 *       logging.warning("Expecting acceptor or string argument, got a transducer")
 *   # Actually computes cross-product.
 *   CrossProduct(deref(upper._fst), deref(lower._fst), result._mfst.get(),             # <<<<<<<<<<<<<<
 *                _get_WeightClass_or_One(result.weight_type(), weight))
 *   result._check_mutating_imethod()
 */
  if (unlikely(((PyObject *)__pyx_v_upper) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_fst");
    __PYX_ERR(0, 987, __pyx_L1_error)
  }
  if (unlikely(((PyObject *)__pyx_v_lower) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_fst");
    __PYX_ERR(0, 987, __pyx_L1_error)
  }

  /* "pynini.pyx":988
 *   # Actually computes cross-product.
 *   CrossProduct(deref(upper._fst), deref(lower._fst), result._mfst.get(),
 *                _get_WeightClass_or_One(result.weight_type(), weight))             # <<<<<<<<<<<<<<
 *   result._check_mutating_imethod()
 *   return result
 */
  __pyx_t_7 = __pyx_f_9pywrapfst__get_WeightClass_or_One(((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_result->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.weight_type(((struct __pyx_obj_9pywrapfst__Fst *)__pyx_v_result), 0), __pyx_v_weight); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 988, __pyx_L1_error)

  /* "pynini.pyx":987
 *       logging.warning("Expecting acceptor or string argument, got a transducer")
 *   # Actually computes cross-product.
 *   CrossProduct(deref(upper._fst), deref(lower._fst), result._mfst.get(),             # <<<<<<<<<<<<<<
 *                _get_WeightClass_or_One(result.weight_type(), weight))
 *   result._check_mutating_imethod()
 */
  fst::script::CrossProduct((*__pyx_v_upper->__pyx_base.__pyx_base._fst), (*__pyx_v_lower->__pyx_base.__pyx_base._fst), __pyx_v_result->__pyx_base._mfst.get(), __pyx_t_7);

  /* "pynini.pyx":989
 *   CrossProduct(deref(upper._fst), deref(lower._fst), result._mfst.get(),
 *                _get_WeightClass_or_One(result.weight_type(), weight))
 *   result._check_mutating_imethod()             # <<<<<<<<<<<<<<
 *   return result
 * 
 */
  ((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_result->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base._check_mutating_imethod(((struct __pyx_obj_9pywrapfst__MutableFst *)__pyx_v_result)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 989, __pyx_L1_error)

  /* "pynini.pyx":990
 *                _get_WeightClass_or_One(result.weight_type(), weight))
 *   result._check_mutating_imethod()
 *   return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "pynini.pyx":912
 * 
 * 
 * cpdef Fst transducer(istring,             # <<<<<<<<<<<<<<
 *                      ostring,
 *                      weight=None,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pynini.transducer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_lower);
  __Pyx_XDECREF((PyObject *)__pyx_v_upper);
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_9transducer(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pynini_8transducer[] = "\n  transducer(istring, ostring, weight=None, arc_type=\"standard\",\n             input_token_type=\"byte\", output_token_type=\"byte\",\n             attach_input_symbols=True, attach_output_symbols=True)\n\n  Creates a transducer from a pair of strings or acceptor FSTs.\n\n  This function creates an FST which transduces from the first string to\n  the second with a fixed weight (defaulting to semiring One). If one or both\n  of the input arguments is already compiled as an FST, the resulting transducer\n  is simply the cross-product between the language accepted by the upper and\n  lower FSTs.\n\n  Args:\n    istring: The input string, or an acceptor FST representing the upper\n        language.\n    ostring: The output string, or an acceptor FST representing the upper\n        language.\n    weight: A Weight or weight string indicating the desired path weight. If\n        omitted or null, the path weight is set to semiring One. This argument\n        is silently ignored if istring and/or ostring is already compiled.\n    arc_type: An optional string indicating the arc type for the compiled FST.\n        This argument is silently ignored if istring and/or ostring is already\n        compiled.\n    input_token_type: Either a string indicating how the upper string is to be\n        encoded as arc labels---one of: utf8\" (encodes the strings as UTF-8\n        encoded Unicode string), \"byte\" (encodes the string as raw bytes)---or\n        a SymbolTable to be used to encode the string.\n    output_token_type: Either a string indicating how the lower string is to be\n        encoded as arc labels---one of: utf8\" (encodes the strings as UTF-8\n        encoded Unicode string), \"byte\" (encodes the string as raw bytes)---or\n        a SymbolTable to be used to encode the string.\n    attach_input_symbols: should the symbol table used to compile the\n        input-side acceptor (if applicable) be attached to the FST?\n    attach_output_symbols: should the symbol table ""used to compile the\n        output-side acceptor (if applicable) be attached to the FST?\n\n  Returns:\n    An FST transducer.\n\n  Raises:\n    FstArgError: Unknown arc type.\n    FstArgError: Unknown token type.\n    FstArgError: Weight types do not match.\n    FstOpError: Operation failed.\n    FstStringCompilationError: String compilation failed.\n  ";
static PyObject *__pyx_pw_6pynini_9transducer(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_istring = 0;
  PyObject *__pyx_v_ostring = 0;
  PyObject *__pyx_v_weight = 0;
  PyObject *__pyx_v_arc_type = 0;
  PyObject *__pyx_v_input_token_type = 0;
  PyObject *__pyx_v_output_token_type = 0;
  bool __pyx_v_attach_input_symbols;
  bool __pyx_v_attach_output_symbols;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("transducer (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_istring,&__pyx_n_s_ostring,&__pyx_n_s_weight,&__pyx_n_s_arc_type,&__pyx_n_s_input_token_type,&__pyx_n_s_output_token_type,&__pyx_n_s_attach_input_symbols,&__pyx_n_s_attach_output_symbols,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};

    /* "pynini.pyx":914
 * cpdef Fst transducer(istring,
 *                      ostring,
 *                      weight=None,             # <<<<<<<<<<<<<<
 *                      arc_type=b"standard",
 *                      input_token_type=b"byte",
 */
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)__pyx_n_b_standard);
    values[4] = ((PyObject *)__pyx_n_b_byte);
    values[5] = ((PyObject *)__pyx_n_b_byte);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_istring)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ostring)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("transducer", 0, 2, 8, 1); __PYX_ERR(0, 912, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_weight);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_arc_type);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_input_token_type);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_output_token_type);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attach_input_symbols);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attach_output_symbols);
          if (value) { values[7] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "transducer") < 0)) __PYX_ERR(0, 912, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_istring = values[0];
    __pyx_v_ostring = values[1];
    __pyx_v_weight = values[2];
    __pyx_v_arc_type = values[3];
    __pyx_v_input_token_type = values[4];
    __pyx_v_output_token_type = values[5];
    if (values[6]) {
      __pyx_v_attach_input_symbols = __Pyx_PyObject_IsTrue(values[6]); if (unlikely((__pyx_v_attach_input_symbols == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 918, __pyx_L3_error)
    } else {

      /* "pynini.pyx":918
 *                      input_token_type=b"byte",
 *                      output_token_type=b"byte",
 *                      bool attach_input_symbols=True,             # <<<<<<<<<<<<<<
 *                      bool attach_output_symbols=True):
 *   """
 */
      __pyx_v_attach_input_symbols = ((bool)1);
    }
    if (values[7]) {
      __pyx_v_attach_output_symbols = __Pyx_PyObject_IsTrue(values[7]); if (unlikely((__pyx_v_attach_output_symbols == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 919, __pyx_L3_error)
    } else {

      /* "pynini.pyx":919
 *                      output_token_type=b"byte",
 *                      bool attach_input_symbols=True,
 *                      bool attach_output_symbols=True):             # <<<<<<<<<<<<<<
 *   """
 *   transducer(istring, ostring, weight=None, arc_type="standard",
 */
      __pyx_v_attach_output_symbols = ((bool)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("transducer", 0, 2, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 912, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.transducer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_8transducer(__pyx_self, __pyx_v_istring, __pyx_v_ostring, __pyx_v_weight, __pyx_v_arc_type, __pyx_v_input_token_type, __pyx_v_output_token_type, __pyx_v_attach_input_symbols, __pyx_v_attach_output_symbols);

  /* "pynini.pyx":912
 * 
 * 
 * cpdef Fst transducer(istring,             # <<<<<<<<<<<<<<
 *                      ostring,
 *                      weight=None,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_8transducer(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_istring, PyObject *__pyx_v_ostring, PyObject *__pyx_v_weight, PyObject *__pyx_v_arc_type, PyObject *__pyx_v_input_token_type, PyObject *__pyx_v_output_token_type, bool __pyx_v_attach_input_symbols, bool __pyx_v_attach_output_symbols) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_6pynini_transducer __pyx_t_2;
  __Pyx_RefNannySetupContext("transducer", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 6;
  __pyx_t_2.weight = __pyx_v_weight;
  __pyx_t_2.arc_type = __pyx_v_arc_type;
  __pyx_t_2.input_token_type = __pyx_v_input_token_type;
  __pyx_t_2.output_token_type = __pyx_v_output_token_type;
  __pyx_t_2.attach_input_symbols = __pyx_v_attach_input_symbols;
  __pyx_t_2.attach_output_symbols = __pyx_v_attach_output_symbols;
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini_transducer(__pyx_v_istring, __pyx_v_ostring, 0, &__pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.transducer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":993
 * 
 * 
 * cpdef Fst cdrewrite(tau,             # <<<<<<<<<<<<<<
 *                     lambda_,
 *                     rho,
 */

static PyObject *__pyx_pw_6pynini_11cdrewrite(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static struct __pyx_obj_6pynini_Fst *__pyx_f_6pynini_cdrewrite(PyObject *__pyx_v_tau, PyObject *__pyx_v_lambda_, PyObject *__pyx_v_rho, PyObject *__pyx_v_sigma_star, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_6pynini_cdrewrite *__pyx_optional_args) {
  PyObject *__pyx_v_direction = ((PyObject *)__pyx_n_b_ltr);
  PyObject *__pyx_v_mode = ((PyObject *)__pyx_n_b_obl);
  enum fst::CDRewriteDirection __pyx_v_cd;
  enum fst::CDRewriteMode __pyx_v_cm;
  struct __pyx_obj_6pynini_Fst *__pyx_v_tau_compiled = 0;
  std::string __pyx_v_arc_type;
  struct __pyx_obj_6pynini_Fst *__pyx_v_lambda_compiled = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_v_rho_compiled = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_v_sigma_star_compiled = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_v_result = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  enum fst::CDRewriteDirection __pyx_t_2;
  enum fst::CDRewriteMode __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  struct __pyx_opt_args_6pynini__compile_or_copy_Fst __pyx_t_6;
  __Pyx_RefNannySetupContext("cdrewrite", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_direction = __pyx_optional_args->direction;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_mode = __pyx_optional_args->mode;
      }
    }
  }

  /* "pynini.pyx":1032
 *     FstOpError: Operation failed.
 *   """
 *   cdef CDRewriteDirection cd = _get_cdrewrite_direction(tostring(direction))             # <<<<<<<<<<<<<<
 *   cdef CDRewriteMode cm = _get_cdrewrite_mode(tostring(mode))
 *   cdef Fst tau_compiled = _compile_or_copy_Fst(tau)
 */
  __pyx_t_1 = __pyx_f_9pywrapfst_tostring(__pyx_v_direction, NULL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1032, __pyx_L1_error)
  __pyx_t_2 = __pyx_f_6pynini__get_cdrewrite_direction(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1032, __pyx_L1_error)
  __pyx_v_cd = __pyx_t_2;

  /* "pynini.pyx":1033
 *   """
 *   cdef CDRewriteDirection cd = _get_cdrewrite_direction(tostring(direction))
 *   cdef CDRewriteMode cm = _get_cdrewrite_mode(tostring(mode))             # <<<<<<<<<<<<<<
 *   cdef Fst tau_compiled = _compile_or_copy_Fst(tau)
 *   cdef string arc_type = tau_compiled.arc_type()
 */
  __pyx_t_1 = __pyx_f_9pywrapfst_tostring(__pyx_v_mode, NULL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1033, __pyx_L1_error)
  __pyx_t_3 = __pyx_f_6pynini__get_cdrewrite_mode(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1033, __pyx_L1_error)
  __pyx_v_cm = __pyx_t_3;

  /* "pynini.pyx":1034
 *   cdef CDRewriteDirection cd = _get_cdrewrite_direction(tostring(direction))
 *   cdef CDRewriteMode cm = _get_cdrewrite_mode(tostring(mode))
 *   cdef Fst tau_compiled = _compile_or_copy_Fst(tau)             # <<<<<<<<<<<<<<
 *   cdef string arc_type = tau_compiled.arc_type()
 *   cdef Fst lambda_compiled = _compile_or_copy_Fst(lambda_, arc_type)
 */
  __pyx_t_4 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_tau, NULL)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1034, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_tau_compiled = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pynini.pyx":1035
 *   cdef CDRewriteMode cm = _get_cdrewrite_mode(tostring(mode))
 *   cdef Fst tau_compiled = _compile_or_copy_Fst(tau)
 *   cdef string arc_type = tau_compiled.arc_type()             # <<<<<<<<<<<<<<
 *   cdef Fst lambda_compiled = _compile_or_copy_Fst(lambda_, arc_type)
 *   cdef Fst rho_compiled = _compile_or_copy_Fst(rho, arc_type)
 */
  if (unlikely(((PyObject *)__pyx_v_tau_compiled) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "arc_type");
    __PYX_ERR(0, 1035, __pyx_L1_error)
  }
  __pyx_v_arc_type = ((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_tau_compiled->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.arc_type(((struct __pyx_obj_9pywrapfst__Fst *)__pyx_v_tau_compiled), 0);

  /* "pynini.pyx":1036
 *   cdef Fst tau_compiled = _compile_or_copy_Fst(tau)
 *   cdef string arc_type = tau_compiled.arc_type()
 *   cdef Fst lambda_compiled = _compile_or_copy_Fst(lambda_, arc_type)             # <<<<<<<<<<<<<<
 *   cdef Fst rho_compiled = _compile_or_copy_Fst(rho, arc_type)
 *   cdef Fst sigma_star_compiled = _compile_or_copy_Fst(sigma_star, arc_type)
 */
  __pyx_t_4 = __pyx_convert_PyUnicode_string_to_py_std__in_string(__pyx_v_arc_type); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1036, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6.__pyx_n = 1;
  __pyx_t_6.arc_type = __pyx_t_4;
  __pyx_t_5 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_lambda_, &__pyx_t_6)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1036, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_lambda_compiled = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "pynini.pyx":1037
 *   cdef string arc_type = tau_compiled.arc_type()
 *   cdef Fst lambda_compiled = _compile_or_copy_Fst(lambda_, arc_type)
 *   cdef Fst rho_compiled = _compile_or_copy_Fst(rho, arc_type)             # <<<<<<<<<<<<<<
 *   cdef Fst sigma_star_compiled = _compile_or_copy_Fst(sigma_star, arc_type)
 *   cdef Fst result = Fst(arc_type)
 */
  __pyx_t_5 = __pyx_convert_PyUnicode_string_to_py_std__in_string(__pyx_v_arc_type); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1037, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6.__pyx_n = 1;
  __pyx_t_6.arc_type = __pyx_t_5;
  __pyx_t_4 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_rho, &__pyx_t_6)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1037, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_rho_compiled = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pynini.pyx":1038
 *   cdef Fst lambda_compiled = _compile_or_copy_Fst(lambda_, arc_type)
 *   cdef Fst rho_compiled = _compile_or_copy_Fst(rho, arc_type)
 *   cdef Fst sigma_star_compiled = _compile_or_copy_Fst(sigma_star, arc_type)             # <<<<<<<<<<<<<<
 *   cdef Fst result = Fst(arc_type)
 *   PyniniCDRewrite(deref(tau_compiled._fst), deref(lambda_compiled._fst),
 */
  __pyx_t_4 = __pyx_convert_PyUnicode_string_to_py_std__in_string(__pyx_v_arc_type); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1038, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6.__pyx_n = 1;
  __pyx_t_6.arc_type = __pyx_t_4;
  __pyx_t_5 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_sigma_star, &__pyx_t_6)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1038, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_sigma_star_compiled = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "pynini.pyx":1039
 *   cdef Fst rho_compiled = _compile_or_copy_Fst(rho, arc_type)
 *   cdef Fst sigma_star_compiled = _compile_or_copy_Fst(sigma_star, arc_type)
 *   cdef Fst result = Fst(arc_type)             # <<<<<<<<<<<<<<
 *   PyniniCDRewrite(deref(tau_compiled._fst), deref(lambda_compiled._fst),
 *                   deref(rho_compiled._fst), deref(sigma_star_compiled._fst),
 */
  __pyx_t_5 = __pyx_convert_PyUnicode_string_to_py_std__in_string(__pyx_v_arc_type); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1039, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1039, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_result = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pynini.pyx":1040
 *   cdef Fst sigma_star_compiled = _compile_or_copy_Fst(sigma_star, arc_type)
 *   cdef Fst result = Fst(arc_type)
 *   PyniniCDRewrite(deref(tau_compiled._fst), deref(lambda_compiled._fst),             # <<<<<<<<<<<<<<
 *                   deref(rho_compiled._fst), deref(sigma_star_compiled._fst),
 *                   result._mfst.get(), cd, cm)
 */
  if (unlikely(((PyObject *)__pyx_v_tau_compiled) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_fst");
    __PYX_ERR(0, 1040, __pyx_L1_error)
  }
  if (unlikely(((PyObject *)__pyx_v_lambda_compiled) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_fst");
    __PYX_ERR(0, 1040, __pyx_L1_error)
  }

  /* "pynini.pyx":1041
 *   cdef Fst result = Fst(arc_type)
 *   PyniniCDRewrite(deref(tau_compiled._fst), deref(lambda_compiled._fst),
 *                   deref(rho_compiled._fst), deref(sigma_star_compiled._fst),             # <<<<<<<<<<<<<<
 *                   result._mfst.get(), cd, cm)
 *   result._check_mutating_imethod()
 */
  if (unlikely(((PyObject *)__pyx_v_rho_compiled) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_fst");
    __PYX_ERR(0, 1041, __pyx_L1_error)
  }
  if (unlikely(((PyObject *)__pyx_v_sigma_star_compiled) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_fst");
    __PYX_ERR(0, 1041, __pyx_L1_error)
  }

  /* "pynini.pyx":1040
 *   cdef Fst sigma_star_compiled = _compile_or_copy_Fst(sigma_star, arc_type)
 *   cdef Fst result = Fst(arc_type)
 *   PyniniCDRewrite(deref(tau_compiled._fst), deref(lambda_compiled._fst),             # <<<<<<<<<<<<<<
 *                   deref(rho_compiled._fst), deref(sigma_star_compiled._fst),
 *                   result._mfst.get(), cd, cm)
 */
  fst::script::PyniniCDRewrite((*__pyx_v_tau_compiled->__pyx_base.__pyx_base._fst), (*__pyx_v_lambda_compiled->__pyx_base.__pyx_base._fst), (*__pyx_v_rho_compiled->__pyx_base.__pyx_base._fst), (*__pyx_v_sigma_star_compiled->__pyx_base.__pyx_base._fst), __pyx_v_result->__pyx_base._mfst.get(), __pyx_v_cd, __pyx_v_cm);

  /* "pynini.pyx":1043
 *                   deref(rho_compiled._fst), deref(sigma_star_compiled._fst),
 *                   result._mfst.get(), cd, cm)
 *   result._check_mutating_imethod()             # <<<<<<<<<<<<<<
 *   return result
 * 
 */
  ((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_result->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base._check_mutating_imethod(((struct __pyx_obj_9pywrapfst__MutableFst *)__pyx_v_result)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1043, __pyx_L1_error)

  /* "pynini.pyx":1044
 *                   result._mfst.get(), cd, cm)
 *   result._check_mutating_imethod()
 *   return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "pynini.pyx":993
 * 
 * 
 * cpdef Fst cdrewrite(tau,             # <<<<<<<<<<<<<<
 *                     lambda_,
 *                     rho,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynini.cdrewrite", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_tau_compiled);
  __Pyx_XDECREF((PyObject *)__pyx_v_lambda_compiled);
  __Pyx_XDECREF((PyObject *)__pyx_v_rho_compiled);
  __Pyx_XDECREF((PyObject *)__pyx_v_sigma_star_compiled);
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_11cdrewrite(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pynini_10cdrewrite[] = "\n  cdrewrite(tau, lambda, rho, sigma_star, direction=\"ltr\", mode=\"obl\")\n\n  Generates a transducer expressing a context-dependent rewrite rule.\n\n  This operation compiles a transducer representing a context-dependent\n  rewrite rule of the form\n\n      phi -> psi / lambda __ rho\n\n  over a finite vocabulary. To apply the resulting transducer, simply compose\n  it with an input string or lattice.\n\n  Args:\n    tau: A (weighted) transducer representing phi -> psi.\n    lambda: An unweighted acceptor representing the left context.\n    rho: An unweighted acceptor representing the right context.\n    sigma_star: A cyclic, unweighted acceptor representing the closure over the\n        alphabet.\n    direction: A string specifying the direction of rule application; one of:\n        \"ltr\" (left-to-right application), \"rtl\" (right-to-left application),\n        or \"sim\" (simultaneous application).\n    mode: A string specifying the mode of rule application; one of: \"obl\"\n        (obligatory application), \"opt\" (optional application).\n\n  Returns:\n    A rewrite rule FST.\n\n  Raises:\n    FstArgError: Unknown cdrewrite direction type.\n    FstArgError: Unknown cdrewrite mode type.\n    FstOpError: Operation failed.\n  ";
static PyObject *__pyx_pw_6pynini_11cdrewrite(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_tau = 0;
  PyObject *__pyx_v_lambda_ = 0;
  PyObject *__pyx_v_rho = 0;
  PyObject *__pyx_v_sigma_star = 0;
  PyObject *__pyx_v_direction = 0;
  PyObject *__pyx_v_mode = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cdrewrite (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_tau,&__pyx_n_s_lambda,&__pyx_n_s_rho,&__pyx_n_s_sigma_star,&__pyx_n_s_direction,&__pyx_n_s_mode,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[4] = ((PyObject *)__pyx_n_b_ltr);
    values[5] = ((PyObject *)__pyx_n_b_obl);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tau)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lambda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cdrewrite", 0, 4, 6, 1); __PYX_ERR(0, 993, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rho)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cdrewrite", 0, 4, 6, 2); __PYX_ERR(0, 993, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sigma_star)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cdrewrite", 0, 4, 6, 3); __PYX_ERR(0, 993, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_direction);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mode);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "cdrewrite") < 0)) __PYX_ERR(0, 993, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_tau = values[0];
    __pyx_v_lambda_ = values[1];
    __pyx_v_rho = values[2];
    __pyx_v_sigma_star = values[3];
    __pyx_v_direction = values[4];
    __pyx_v_mode = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cdrewrite", 0, 4, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 993, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.cdrewrite", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_10cdrewrite(__pyx_self, __pyx_v_tau, __pyx_v_lambda_, __pyx_v_rho, __pyx_v_sigma_star, __pyx_v_direction, __pyx_v_mode);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_10cdrewrite(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_tau, PyObject *__pyx_v_lambda_, PyObject *__pyx_v_rho, PyObject *__pyx_v_sigma_star, PyObject *__pyx_v_direction, PyObject *__pyx_v_mode) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_6pynini_cdrewrite __pyx_t_2;
  __Pyx_RefNannySetupContext("cdrewrite", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 2;
  __pyx_t_2.direction = __pyx_v_direction;
  __pyx_t_2.mode = __pyx_v_mode;
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini_cdrewrite(__pyx_v_tau, __pyx_v_lambda_, __pyx_v_rho, __pyx_v_sigma_star, 0, &__pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 993, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.cdrewrite", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1047
 * 
 * 
 * cpdef Fst epsilon_machine(arc_type=b"standard", weight=None):             # <<<<<<<<<<<<<<
 *   """
 *   epsilon_machine(arc_type="standard")
 */

static PyObject *__pyx_pw_6pynini_13epsilon_machine(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static struct __pyx_obj_6pynini_Fst *__pyx_f_6pynini_epsilon_machine(CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_6pynini_epsilon_machine *__pyx_optional_args) {
  PyObject *__pyx_v_arc_type = ((PyObject *)__pyx_n_b_standard);
  PyObject *__pyx_v_weight = ((PyObject *)Py_None);
  struct __pyx_obj_6pynini_Fst *__pyx_v_result = 0;
  __pyx_t_10basictypes_int64 __pyx_v_state;
  struct __pyx_obj_6pynini_Fst *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  fst::script::WeightClass __pyx_t_2;
  __Pyx_RefNannySetupContext("epsilon_machine", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_arc_type = __pyx_optional_args->arc_type;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_weight = __pyx_optional_args->weight;
      }
    }
  }

  /* "pynini.pyx":1067
 *     FstArgError: Unknown arc type.
 *   """
 *   cdef Fst result = Fst(arc_type)             # <<<<<<<<<<<<<<
 *   cdef int64 state = result._mfst.get().AddState()
 *   result._mfst.get().SetStart(state)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_v_arc_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":1068
 *   """
 *   cdef Fst result = Fst(arc_type)
 *   cdef int64 state = result._mfst.get().AddState()             # <<<<<<<<<<<<<<
 *   result._mfst.get().SetStart(state)
 *   result._mfst.get().SetFinal(state,
 */
  __pyx_v_state = __pyx_v_result->__pyx_base._mfst.get()->AddState();

  /* "pynini.pyx":1069
 *   cdef Fst result = Fst(arc_type)
 *   cdef int64 state = result._mfst.get().AddState()
 *   result._mfst.get().SetStart(state)             # <<<<<<<<<<<<<<
 *   result._mfst.get().SetFinal(state,
 *       _get_WeightClass_or_One(result.weight_type(), weight))
 */
  (void)(__pyx_v_result->__pyx_base._mfst.get()->SetStart(__pyx_v_state));

  /* "pynini.pyx":1071
 *   result._mfst.get().SetStart(state)
 *   result._mfst.get().SetFinal(state,
 *       _get_WeightClass_or_One(result.weight_type(), weight))             # <<<<<<<<<<<<<<
 *   return result
 * 
 */
  __pyx_t_2 = __pyx_f_9pywrapfst__get_WeightClass_or_One(((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_result->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.weight_type(((struct __pyx_obj_9pywrapfst__Fst *)__pyx_v_result), 0), __pyx_v_weight); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1071, __pyx_L1_error)

  /* "pynini.pyx":1070
 *   cdef int64 state = result._mfst.get().AddState()
 *   result._mfst.get().SetStart(state)
 *   result._mfst.get().SetFinal(state,             # <<<<<<<<<<<<<<
 *       _get_WeightClass_or_One(result.weight_type(), weight))
 *   return result
 */
  (void)(__pyx_v_result->__pyx_base._mfst.get()->SetFinal(__pyx_v_state, __pyx_t_2));

  /* "pynini.pyx":1072
 *   result._mfst.get().SetFinal(state,
 *       _get_WeightClass_or_One(result.weight_type(), weight))
 *   return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "pynini.pyx":1047
 * 
 * 
 * cpdef Fst epsilon_machine(arc_type=b"standard", weight=None):             # <<<<<<<<<<<<<<
 *   """
 *   epsilon_machine(arc_type="standard")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.epsilon_machine", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_13epsilon_machine(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pynini_12epsilon_machine[] = "\n  epsilon_machine(arc_type=\"standard\")\n\n  Constructs a single-state, no-arc FST accepting epsilon.\n\n  This function creates an unweighted FST with a single state which is both\n  initial and final.\n\n  Args:\n    arc_type: An optional string indicating the arc type for the compiled FST.\n    weight: A Weight or weight string indicating the desired path weight. If\n        omitted or null, the path weight is set to semiring One.\n\n  Returns:\n    An FST.\n\n  Raises:\n    FstArgError: Unknown arc type.\n  ";
static PyObject *__pyx_pw_6pynini_13epsilon_machine(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arc_type = 0;
  PyObject *__pyx_v_weight = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("epsilon_machine (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arc_type,&__pyx_n_s_weight,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)__pyx_n_b_standard);
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_arc_type);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_weight);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "epsilon_machine") < 0)) __PYX_ERR(0, 1047, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_arc_type = values[0];
    __pyx_v_weight = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("epsilon_machine", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1047, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.epsilon_machine", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_12epsilon_machine(__pyx_self, __pyx_v_arc_type, __pyx_v_weight);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_12epsilon_machine(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_arc_type, PyObject *__pyx_v_weight) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_6pynini_epsilon_machine __pyx_t_2;
  __Pyx_RefNannySetupContext("epsilon_machine", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 2;
  __pyx_t_2.arc_type = __pyx_v_arc_type;
  __pyx_t_2.weight = __pyx_v_weight;
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini_epsilon_machine(0, &__pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1047, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.epsilon_machine", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1075
 * 
 * 
 * cpdef Fst leniently_compose(ifst1, ifst2, sigma_star, compose_filter=b"auto",             # <<<<<<<<<<<<<<
 *                             bool connect=True):
 *   """
 */

static PyObject *__pyx_pw_6pynini_15leniently_compose(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static struct __pyx_obj_6pynini_Fst *__pyx_f_6pynini_leniently_compose(PyObject *__pyx_v_ifst1, PyObject *__pyx_v_ifst2, PyObject *__pyx_v_sigma_star, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_6pynini_leniently_compose *__pyx_optional_args) {
  PyObject *__pyx_v_compose_filter = ((PyObject *)__pyx_n_b_auto);

  /* "pynini.pyx":1076
 * 
 * cpdef Fst leniently_compose(ifst1, ifst2, sigma_star, compose_filter=b"auto",
 *                             bool connect=True):             # <<<<<<<<<<<<<<
 *   """
 *   leniently_compose(ifst1, ifst2, compose_filter="auto", connect=True)
 */
  bool __pyx_v_connect = ((bool)1);
  struct __pyx_obj_6pynini_Fst *__pyx_v_ifst1_compiled = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_v_ifst2_compiled = 0;
  std::string __pyx_v_arc_type;
  struct __pyx_obj_6pynini_Fst *__pyx_v_sigma_star_compiled = NULL;
  std::unique_ptr<fst::ComposeOptions>  __pyx_v_opts;
  struct __pyx_obj_6pynini_Fst *__pyx_v_result = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  struct __pyx_opt_args_6pynini__compile_or_copy_Fst __pyx_t_6;
  std::string __pyx_t_7;
  enum fst::ComposeFilter __pyx_t_8;
  __Pyx_RefNannySetupContext("leniently_compose", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_compose_filter = __pyx_optional_args->compose_filter;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_connect = __pyx_optional_args->connect;
      }
    }
  }

  /* "pynini.pyx":1104
 *   cdef Fst ifst1_compiled
 *   cdef Fst ifst2_compiled
 *   (ifst1_compiled, ifst2_compiled) = _compile_or_copy_two_Fsts(ifst1, ifst2)             # <<<<<<<<<<<<<<
 *   cdef string arc_type = ifst1_compiled.arc_type()
 *   sigma_star_compiled = _compile_or_copy_Fst(sigma_star, arc_type)
 */
  __pyx_t_1 = __pyx_f_6pynini__compile_or_copy_two_Fsts(__pyx_v_ifst1, __pyx_v_ifst2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1104, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_3 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_4), 2) < 0) __PYX_ERR(0, 1104, __pyx_L1_error)
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 1104, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_6pynini_Fst))))) __PYX_ERR(0, 1104, __pyx_L1_error)
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_6pynini_Fst))))) __PYX_ERR(0, 1104, __pyx_L1_error)
  __pyx_v_ifst1_compiled = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_v_ifst2_compiled = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pynini.pyx":1105
 *   cdef Fst ifst2_compiled
 *   (ifst1_compiled, ifst2_compiled) = _compile_or_copy_two_Fsts(ifst1, ifst2)
 *   cdef string arc_type = ifst1_compiled.arc_type()             # <<<<<<<<<<<<<<
 *   sigma_star_compiled = _compile_or_copy_Fst(sigma_star, arc_type)
 *   cdef unique_ptr[ComposeOptions] opts
 */
  if (unlikely(((PyObject *)__pyx_v_ifst1_compiled) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "arc_type");
    __PYX_ERR(0, 1105, __pyx_L1_error)
  }
  __pyx_v_arc_type = ((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_ifst1_compiled->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.arc_type(((struct __pyx_obj_9pywrapfst__Fst *)__pyx_v_ifst1_compiled), 0);

  /* "pynini.pyx":1106
 *   (ifst1_compiled, ifst2_compiled) = _compile_or_copy_two_Fsts(ifst1, ifst2)
 *   cdef string arc_type = ifst1_compiled.arc_type()
 *   sigma_star_compiled = _compile_or_copy_Fst(sigma_star, arc_type)             # <<<<<<<<<<<<<<
 *   cdef unique_ptr[ComposeOptions] opts
 *   opts.reset(new ComposeOptions(connect,
 */
  __pyx_t_1 = __pyx_convert_PyUnicode_string_to_py_std__in_string(__pyx_v_arc_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6.__pyx_n = 1;
  __pyx_t_6.arc_type = __pyx_t_1;
  __pyx_t_3 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_sigma_star, &__pyx_t_6)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_sigma_star_compiled = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pynini.pyx":1109
 *   cdef unique_ptr[ComposeOptions] opts
 *   opts.reset(new ComposeOptions(connect,
 *       _get_compose_filter(tostring(compose_filter))))             # <<<<<<<<<<<<<<
 *   cdef Fst result = Fst(arc_type)
 *   LenientlyCompose(deref(ifst1_compiled._fst), deref(ifst2_compiled._fst),
 */
  __pyx_t_7 = __pyx_f_9pywrapfst_tostring(__pyx_v_compose_filter, NULL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1109, __pyx_L1_error)
  __pyx_t_8 = __pyx_f_9pywrapfst__get_compose_filter(__pyx_t_7); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1109, __pyx_L1_error)

  /* "pynini.pyx":1108
 *   sigma_star_compiled = _compile_or_copy_Fst(sigma_star, arc_type)
 *   cdef unique_ptr[ComposeOptions] opts
 *   opts.reset(new ComposeOptions(connect,             # <<<<<<<<<<<<<<
 *       _get_compose_filter(tostring(compose_filter))))
 *   cdef Fst result = Fst(arc_type)
 */
  __pyx_v_opts.reset(new fst::ComposeOptions(__pyx_v_connect, __pyx_t_8));

  /* "pynini.pyx":1110
 *   opts.reset(new ComposeOptions(connect,
 *       _get_compose_filter(tostring(compose_filter))))
 *   cdef Fst result = Fst(arc_type)             # <<<<<<<<<<<<<<
 *   LenientlyCompose(deref(ifst1_compiled._fst), deref(ifst2_compiled._fst),
 *                    deref(sigma_star_compiled._fst), result._mfst.get(),
 */
  __pyx_t_3 = __pyx_convert_PyUnicode_string_to_py_std__in_string(__pyx_v_arc_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":1111
 *       _get_compose_filter(tostring(compose_filter))))
 *   cdef Fst result = Fst(arc_type)
 *   LenientlyCompose(deref(ifst1_compiled._fst), deref(ifst2_compiled._fst),             # <<<<<<<<<<<<<<
 *                    deref(sigma_star_compiled._fst), result._mfst.get(),
 *                    deref(opts))
 */
  if (unlikely(((PyObject *)__pyx_v_ifst1_compiled) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_fst");
    __PYX_ERR(0, 1111, __pyx_L1_error)
  }
  if (unlikely(((PyObject *)__pyx_v_ifst2_compiled) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_fst");
    __PYX_ERR(0, 1111, __pyx_L1_error)
  }

  /* "pynini.pyx":1112
 *   cdef Fst result = Fst(arc_type)
 *   LenientlyCompose(deref(ifst1_compiled._fst), deref(ifst2_compiled._fst),
 *                    deref(sigma_star_compiled._fst), result._mfst.get(),             # <<<<<<<<<<<<<<
 *                    deref(opts))
 *   result._check_mutating_imethod()
 */
  if (unlikely(((PyObject *)__pyx_v_sigma_star_compiled) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_fst");
    __PYX_ERR(0, 1112, __pyx_L1_error)
  }

  /* "pynini.pyx":1111
 *       _get_compose_filter(tostring(compose_filter))))
 *   cdef Fst result = Fst(arc_type)
 *   LenientlyCompose(deref(ifst1_compiled._fst), deref(ifst2_compiled._fst),             # <<<<<<<<<<<<<<
 *                    deref(sigma_star_compiled._fst), result._mfst.get(),
 *                    deref(opts))
 */
  fst::script::LenientlyCompose((*__pyx_v_ifst1_compiled->__pyx_base.__pyx_base._fst), (*__pyx_v_ifst2_compiled->__pyx_base.__pyx_base._fst), (*__pyx_v_sigma_star_compiled->__pyx_base.__pyx_base._fst), __pyx_v_result->__pyx_base._mfst.get(), (*__pyx_v_opts));

  /* "pynini.pyx":1114
 *                    deref(sigma_star_compiled._fst), result._mfst.get(),
 *                    deref(opts))
 *   result._check_mutating_imethod()             # <<<<<<<<<<<<<<
 *   return result
 * 
 */
  ((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_result->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base._check_mutating_imethod(((struct __pyx_obj_9pywrapfst__MutableFst *)__pyx_v_result)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1114, __pyx_L1_error)

  /* "pynini.pyx":1115
 *                    deref(opts))
 *   result._check_mutating_imethod()
 *   return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "pynini.pyx":1075
 * 
 * 
 * cpdef Fst leniently_compose(ifst1, ifst2, sigma_star, compose_filter=b"auto",             # <<<<<<<<<<<<<<
 *                             bool connect=True):
 *   """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynini.leniently_compose", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ifst1_compiled);
  __Pyx_XDECREF((PyObject *)__pyx_v_ifst2_compiled);
  __Pyx_XDECREF((PyObject *)__pyx_v_sigma_star_compiled);
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_15leniently_compose(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pynini_14leniently_compose[] = "\n  leniently_compose(ifst1, ifst2, compose_filter=\"auto\", connect=True)\n\n  Constructively leniently-composes two FSTs.\n\n  This operation computes the lenient composition of two FSTs. The lenient\n  composition of two FSTs is the priority union of their composition and the\n  left-hand side argument, where priority union is simply union in which the\n  left-hand side argument's relations have \"priority\" over the right-hand side\n  argument's relations.\n\n  Args:\n    ifst: The input FST.\n    sigma_star: A cyclic, unweighted acceptor representing the closure over the\n        alphabet.\n    compose_filter: A string matching a known composition filter; one of:\n        \"alt_sequence\", \"auto\", \"match\", \"null\", \"sequence\", \"trivial\".\n    connect: Should output be trimmed?\n\n  Returns:\n    A leniently composed FST.\n\n  Raises:\n    FstOpError: Operation failed.\n  ";
static PyObject *__pyx_pw_6pynini_15leniently_compose(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ifst1 = 0;
  PyObject *__pyx_v_ifst2 = 0;
  PyObject *__pyx_v_sigma_star = 0;
  PyObject *__pyx_v_compose_filter = 0;
  bool __pyx_v_connect;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("leniently_compose (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ifst1,&__pyx_n_s_ifst2,&__pyx_n_s_sigma_star,&__pyx_n_s_compose_filter,&__pyx_n_s_connect,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject *)__pyx_n_b_auto);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ifst1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ifst2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("leniently_compose", 0, 3, 5, 1); __PYX_ERR(0, 1075, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sigma_star)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("leniently_compose", 0, 3, 5, 2); __PYX_ERR(0, 1075, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_compose_filter);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_connect);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "leniently_compose") < 0)) __PYX_ERR(0, 1075, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_ifst1 = values[0];
    __pyx_v_ifst2 = values[1];
    __pyx_v_sigma_star = values[2];
    __pyx_v_compose_filter = values[3];
    if (values[4]) {
      __pyx_v_connect = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_connect == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1076, __pyx_L3_error)
    } else {

      /* "pynini.pyx":1076
 * 
 * cpdef Fst leniently_compose(ifst1, ifst2, sigma_star, compose_filter=b"auto",
 *                             bool connect=True):             # <<<<<<<<<<<<<<
 *   """
 *   leniently_compose(ifst1, ifst2, compose_filter="auto", connect=True)
 */
      __pyx_v_connect = ((bool)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("leniently_compose", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1075, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.leniently_compose", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_14leniently_compose(__pyx_self, __pyx_v_ifst1, __pyx_v_ifst2, __pyx_v_sigma_star, __pyx_v_compose_filter, __pyx_v_connect);

  /* "pynini.pyx":1075
 * 
 * 
 * cpdef Fst leniently_compose(ifst1, ifst2, sigma_star, compose_filter=b"auto",             # <<<<<<<<<<<<<<
 *                             bool connect=True):
 *   """
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_14leniently_compose(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_ifst1, PyObject *__pyx_v_ifst2, PyObject *__pyx_v_sigma_star, PyObject *__pyx_v_compose_filter, bool __pyx_v_connect) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_6pynini_leniently_compose __pyx_t_2;
  __Pyx_RefNannySetupContext("leniently_compose", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 2;
  __pyx_t_2.compose_filter = __pyx_v_compose_filter;
  __pyx_t_2.connect = __pyx_v_connect;
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini_leniently_compose(__pyx_v_ifst1, __pyx_v_ifst2, __pyx_v_sigma_star, 0, &__pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.leniently_compose", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1118
 * 
 * 
 * cpdef bool matches(ifst1, ifst2, compose_filter=b"auto"):             # <<<<<<<<<<<<<<
 *   """
 *   matches(ifst1, ifst2, compose_filter="auto")
 */

static PyObject *__pyx_pw_6pynini_17matches(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static bool __pyx_f_6pynini_matches(PyObject *__pyx_v_ifst1, PyObject *__pyx_v_ifst2, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_6pynini_matches *__pyx_optional_args) {
  PyObject *__pyx_v_compose_filter = ((PyObject *)__pyx_n_b_auto);
  struct __pyx_obj_6pynini_Fst *__pyx_v_tfst = 0;
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("matches", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_compose_filter = __pyx_optional_args->compose_filter;
    }
  }

  /* "pynini.pyx":1139
 *     True if the composition of ifst1 and ifst2 is non-null, else False.
 *   """
 *   cdef Fst tfst = compose(ifst1, ifst2, compose_filter=compose_filter)             # <<<<<<<<<<<<<<
 *   # If the connected cascade FST has no start state, composition failed.
 *   return tfst._mfst.get().Start() != kNoStateId
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_compose); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_ifst1);
  __Pyx_GIVEREF(__pyx_v_ifst1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_ifst1);
  __Pyx_INCREF(__pyx_v_ifst2);
  __Pyx_GIVEREF(__pyx_v_ifst2);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_ifst2);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_compose_filter, __pyx_v_compose_filter) < 0) __PYX_ERR(0, 1139, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_6pynini_Fst))))) __PYX_ERR(0, 1139, __pyx_L1_error)
  __pyx_v_tfst = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pynini.pyx":1141
 *   cdef Fst tfst = compose(ifst1, ifst2, compose_filter=compose_filter)
 *   # If the connected cascade FST has no start state, composition failed.
 *   return tfst._mfst.get().Start() != kNoStateId             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_tfst) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mfst");
    __PYX_ERR(0, 1141, __pyx_L1_error)
  }
  __pyx_r = (__pyx_v_tfst->__pyx_base._mfst.get()->Start() != fst::kNoStateId);
  goto __pyx_L0;

  /* "pynini.pyx":1118
 * 
 * 
 * cpdef bool matches(ifst1, ifst2, compose_filter=b"auto"):             # <<<<<<<<<<<<<<
 *   """
 *   matches(ifst1, ifst2, compose_filter="auto")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("pynini.matches", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_tfst);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_17matches(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pynini_16matches[] = "\n  matches(ifst1, ifst2, compose_filter=\"auto\")\n\n  Returns whether or not two FSTs \"match\" (have a non-empty composition).\n\n  This operation computes the composition of two FSTs, connects the result,\n  and then returns True iff the composition is non-empty (has a valid start\n  state); the resulting composition is then discarded. Normally the first\n  argument is a string and the second an acceptor, but many other sensible\n  configurations are possible.\n\n  Args:\n    ifst1: The first input FST.\n    ifst2: The second input FST.\n    compose_filter: A string matching a known composition filter; one of:\n        \"alt_sequence\", \"auto\", \"match\", \"null\", \"sequence\", \"trivial\".\n\n  Returns:\n    True if the composition of ifst1 and ifst2 is non-null, else False.\n  ";
static PyObject *__pyx_pw_6pynini_17matches(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ifst1 = 0;
  PyObject *__pyx_v_ifst2 = 0;
  PyObject *__pyx_v_compose_filter = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("matches (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ifst1,&__pyx_n_s_ifst2,&__pyx_n_s_compose_filter,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)__pyx_n_b_auto);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ifst1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ifst2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("matches", 0, 2, 3, 1); __PYX_ERR(0, 1118, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_compose_filter);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "matches") < 0)) __PYX_ERR(0, 1118, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_ifst1 = values[0];
    __pyx_v_ifst2 = values[1];
    __pyx_v_compose_filter = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("matches", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1118, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.matches", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_16matches(__pyx_self, __pyx_v_ifst1, __pyx_v_ifst2, __pyx_v_compose_filter);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_16matches(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_ifst1, PyObject *__pyx_v_ifst2, PyObject *__pyx_v_compose_filter) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  struct __pyx_opt_args_6pynini_matches __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("matches", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.compose_filter = __pyx_v_compose_filter;
  __pyx_t_1 = __pyx_f_6pynini_matches(__pyx_v_ifst1, __pyx_v_ifst2, 0, &__pyx_t_2); 
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynini.matches", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1144
 * 
 * 
 * cpdef Fst string_file(filename,             # <<<<<<<<<<<<<<
 *                       arc_type=b"standard",
 *                       input_token_type=b"byte",
 */

static PyObject *__pyx_pw_6pynini_19string_file(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static struct __pyx_obj_6pynini_Fst *__pyx_f_6pynini_string_file(PyObject *__pyx_v_filename, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_6pynini_string_file *__pyx_optional_args) {
  PyObject *__pyx_v_arc_type = ((PyObject *)__pyx_n_b_standard);
  PyObject *__pyx_v_input_token_type = ((PyObject *)__pyx_n_b_byte);
  PyObject *__pyx_v_output_token_type = ((PyObject *)__pyx_n_b_byte);

  /* "pynini.pyx":1148
 *                       input_token_type=b"byte",
 *                       output_token_type=b"byte",
 *                       bool attach_input_symbols=True,             # <<<<<<<<<<<<<<
 *                       bool attach_output_symbols=True):
 *   """
 */
  bool __pyx_v_attach_input_symbols = ((bool)1);

  /* "pynini.pyx":1149
 *                       output_token_type=b"byte",
 *                       bool attach_input_symbols=True,
 *                       bool attach_output_symbols=True):             # <<<<<<<<<<<<<<
 *   """
 *   string_file(filename, arc_type="standard", input_token_type="byte",
 */
  bool __pyx_v_attach_output_symbols = ((bool)1);
  enum fst::StringTokenType __pyx_v_itype;
  __pyx_t_9pywrapfst_SymbolTable_ptr __pyx_v_isyms;
  enum fst::StringTokenType __pyx_v_otype;
  __pyx_t_9pywrapfst_SymbolTable_ptr __pyx_v_osyms;
  struct __pyx_obj_6pynini_Fst *__pyx_v_result = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  std::string __pyx_t_5;
  enum fst::StringTokenType __pyx_t_6;
  __Pyx_RefNannySetupContext("string_file", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_arc_type = __pyx_optional_args->arc_type;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_input_token_type = __pyx_optional_args->input_token_type;
        if (__pyx_optional_args->__pyx_n > 2) {
          __pyx_v_output_token_type = __pyx_optional_args->output_token_type;
          if (__pyx_optional_args->__pyx_n > 3) {
            __pyx_v_attach_input_symbols = __pyx_optional_args->attach_input_symbols;
            if (__pyx_optional_args->__pyx_n > 4) {
              __pyx_v_attach_output_symbols = __pyx_optional_args->attach_output_symbols;
            }
          }
        }
      }
    }
  }

  /* "pynini.pyx":1196
 *   """
 *   cdef StringTokenType itype
 *   cdef SymbolTable_ptr isyms = NULL             # <<<<<<<<<<<<<<
 *   if isinstance(input_token_type, pywrapfst._SymbolTable):
 *     itype = SYMBOL
 */
  __pyx_v_isyms = NULL;

  /* "pynini.pyx":1197
 *   cdef StringTokenType itype
 *   cdef SymbolTable_ptr isyms = NULL
 *   if isinstance(input_token_type, pywrapfst._SymbolTable):             # <<<<<<<<<<<<<<
 *     itype = SYMBOL
 *     isyms = (<SymbolTable_ptr> (<_SymbolTable> input_token_type)._table)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_SymbolTable); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = PyObject_IsInstance(__pyx_v_input_token_type, __pyx_t_2); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 1197, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "pynini.pyx":1198
 *   cdef SymbolTable_ptr isyms = NULL
 *   if isinstance(input_token_type, pywrapfst._SymbolTable):
 *     itype = SYMBOL             # <<<<<<<<<<<<<<
 *     isyms = (<SymbolTable_ptr> (<_SymbolTable> input_token_type)._table)
 *   else:
 */
    __pyx_v_itype = fst::SYMBOL;

    /* "pynini.pyx":1199
 *   if isinstance(input_token_type, pywrapfst._SymbolTable):
 *     itype = SYMBOL
 *     isyms = (<SymbolTable_ptr> (<_SymbolTable> input_token_type)._table)             # <<<<<<<<<<<<<<
 *   else:
 *     itype = _get_token_type(tostring(input_token_type))
 */
    if (unlikely(__pyx_v_input_token_type == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_table");
      __PYX_ERR(0, 1199, __pyx_L1_error)
    }
    __pyx_v_isyms = ((__pyx_t_9pywrapfst_SymbolTable_ptr)((struct __pyx_obj_9pywrapfst__SymbolTable *)__pyx_v_input_token_type)->_table);

    /* "pynini.pyx":1197
 *   cdef StringTokenType itype
 *   cdef SymbolTable_ptr isyms = NULL
 *   if isinstance(input_token_type, pywrapfst._SymbolTable):             # <<<<<<<<<<<<<<
 *     itype = SYMBOL
 *     isyms = (<SymbolTable_ptr> (<_SymbolTable> input_token_type)._table)
 */
    goto __pyx_L3;
  }

  /* "pynini.pyx":1201
 *     isyms = (<SymbolTable_ptr> (<_SymbolTable> input_token_type)._table)
 *   else:
 *     itype = _get_token_type(tostring(input_token_type))             # <<<<<<<<<<<<<<
 *   cdef StringTokenType otype
 *   cdef SymbolTable_ptr osyms = NULL
 */
  /*else*/ {
    __pyx_t_5 = __pyx_f_9pywrapfst_tostring(__pyx_v_input_token_type, NULL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1201, __pyx_L1_error)
    __pyx_t_6 = __pyx_f_6pynini__get_token_type(__pyx_t_5); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1201, __pyx_L1_error)
    __pyx_v_itype = __pyx_t_6;
  }
  __pyx_L3:;

  /* "pynini.pyx":1203
 *     itype = _get_token_type(tostring(input_token_type))
 *   cdef StringTokenType otype
 *   cdef SymbolTable_ptr osyms = NULL             # <<<<<<<<<<<<<<
 *   if isinstance(output_token_type, pywrapfst._SymbolTable):
 *     osyms = (<SymbolTable_ptr> (<_SymbolTable> output_token_type)._table)
 */
  __pyx_v_osyms = NULL;

  /* "pynini.pyx":1204
 *   cdef StringTokenType otype
 *   cdef SymbolTable_ptr osyms = NULL
 *   if isinstance(output_token_type, pywrapfst._SymbolTable):             # <<<<<<<<<<<<<<
 *     osyms = (<SymbolTable_ptr> (<_SymbolTable> output_token_type)._table)
 *     otype = SYMBOL
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_SymbolTable); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = PyObject_IsInstance(__pyx_v_output_token_type, __pyx_t_1); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 1204, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_4 != 0);
  if (__pyx_t_3) {

    /* "pynini.pyx":1205
 *   cdef SymbolTable_ptr osyms = NULL
 *   if isinstance(output_token_type, pywrapfst._SymbolTable):
 *     osyms = (<SymbolTable_ptr> (<_SymbolTable> output_token_type)._table)             # <<<<<<<<<<<<<<
 *     otype = SYMBOL
 *   else:
 */
    if (unlikely(__pyx_v_output_token_type == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_table");
      __PYX_ERR(0, 1205, __pyx_L1_error)
    }
    __pyx_v_osyms = ((__pyx_t_9pywrapfst_SymbolTable_ptr)((struct __pyx_obj_9pywrapfst__SymbolTable *)__pyx_v_output_token_type)->_table);

    /* "pynini.pyx":1206
 *   if isinstance(output_token_type, pywrapfst._SymbolTable):
 *     osyms = (<SymbolTable_ptr> (<_SymbolTable> output_token_type)._table)
 *     otype = SYMBOL             # <<<<<<<<<<<<<<
 *   else:
 *     otype = _get_token_type(tostring(output_token_type))
 */
    __pyx_v_otype = fst::SYMBOL;

    /* "pynini.pyx":1204
 *   cdef StringTokenType otype
 *   cdef SymbolTable_ptr osyms = NULL
 *   if isinstance(output_token_type, pywrapfst._SymbolTable):             # <<<<<<<<<<<<<<
 *     osyms = (<SymbolTable_ptr> (<_SymbolTable> output_token_type)._table)
 *     otype = SYMBOL
 */
    goto __pyx_L4;
  }

  /* "pynini.pyx":1208
 *     otype = SYMBOL
 *   else:
 *     otype = _get_token_type(tostring(output_token_type))             # <<<<<<<<<<<<<<
 *   cdef Fst result = Fst(arc_type)
 *   if not StringFile(tostring(filename), result._mfst.get(),
 */
  /*else*/ {
    __pyx_t_5 = __pyx_f_9pywrapfst_tostring(__pyx_v_output_token_type, NULL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1208, __pyx_L1_error)
    __pyx_t_6 = __pyx_f_6pynini__get_token_type(__pyx_t_5); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1208, __pyx_L1_error)
    __pyx_v_otype = __pyx_t_6;
  }
  __pyx_L4:;

  /* "pynini.pyx":1209
 *   else:
 *     otype = _get_token_type(tostring(output_token_type))
 *   cdef Fst result = Fst(arc_type)             # <<<<<<<<<<<<<<
 *   if not StringFile(tostring(filename), result._mfst.get(),
 *                     itype, otype, isyms, osyms, attach_input_symbols,
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_v_arc_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":1210
 *     otype = _get_token_type(tostring(output_token_type))
 *   cdef Fst result = Fst(arc_type)
 *   if not StringFile(tostring(filename), result._mfst.get(),             # <<<<<<<<<<<<<<
 *                     itype, otype, isyms, osyms, attach_input_symbols,
 *                     attach_output_symbols):
 */
  __pyx_t_5 = __pyx_f_9pywrapfst_tostring(__pyx_v_filename, NULL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1210, __pyx_L1_error)

  /* "pynini.pyx":1212
 *   if not StringFile(tostring(filename), result._mfst.get(),
 *                     itype, otype, isyms, osyms, attach_input_symbols,
 *                     attach_output_symbols):             # <<<<<<<<<<<<<<
 *     raise FstIOError("Read failed")
 *   return result
 */
  __pyx_t_3 = ((!(fst::script::StringFile(__pyx_t_5, __pyx_v_result->__pyx_base._mfst.get(), __pyx_v_itype, __pyx_v_otype, __pyx_v_isyms, __pyx_v_osyms, __pyx_v_attach_input_symbols, __pyx_v_attach_output_symbols) != 0)) != 0);

  /* "pynini.pyx":1210
 *     otype = _get_token_type(tostring(output_token_type))
 *   cdef Fst result = Fst(arc_type)
 *   if not StringFile(tostring(filename), result._mfst.get(),             # <<<<<<<<<<<<<<
 *                     itype, otype, isyms, osyms, attach_input_symbols,
 *                     attach_output_symbols):
 */
  if (unlikely(__pyx_t_3)) {

    /* "pynini.pyx":1213
 *                     itype, otype, isyms, osyms, attach_input_symbols,
 *                     attach_output_symbols):
 *     raise FstIOError("Read failed")             # <<<<<<<<<<<<<<
 *   return result
 * 
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstIOError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1213, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1213, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1213, __pyx_L1_error)

    /* "pynini.pyx":1210
 *     otype = _get_token_type(tostring(output_token_type))
 *   cdef Fst result = Fst(arc_type)
 *   if not StringFile(tostring(filename), result._mfst.get(),             # <<<<<<<<<<<<<<
 *                     itype, otype, isyms, osyms, attach_input_symbols,
 *                     attach_output_symbols):
 */
  }

  /* "pynini.pyx":1214
 *                     attach_output_symbols):
 *     raise FstIOError("Read failed")
 *   return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "pynini.pyx":1144
 * 
 * 
 * cpdef Fst string_file(filename,             # <<<<<<<<<<<<<<
 *                       arc_type=b"standard",
 *                       input_token_type=b"byte",
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pynini.string_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_19string_file(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pynini_18string_file[] = "\n  string_file(filename, arc_type=\"standard\", input_token_type=\"byte\",\n              output_token_type=\"byte\")\n\n  Creates a transducer that maps between elements of mappings read from\n  a tab-delimited file.\n\n  The first column is interpreted as the input string to a transduction.\n\n  The second column, separated from the first by a single tab character, is\n  interpreted as the output string for the transduction; an acceptor can be\n  modeled by using identical first and second columns.\n\n  An optional third column, separated from the second by a single tab character,\n  is interpreted as a weight for the transduction; if not specified the weight\n  defaults to semiring One. Note that weights are never permitted in the second\n  column.\n\n  The comment character is #, and has scope until the end of the line. Any\n  preceding whitespace before a comment is ignored. To use the '#' literal\n  (i.e., to ensure it is not interpreted as the start of a comment) escape it\n  with \\; the escaping \\ in the string \"\\#\" also ignored.\n\n  Args:\n    filename: The path to a TSV file formatted as described above.\n    arc_type: A string indicating the arc type.\n    input_token_type: A string indicating how the input strings are to be\n        encoded as arc labels---one of: \"utf8\" (encodes strings as a UTF-8\n        encoded Unicode strings), \"byte\" (encodes strings as raw bytes)---or a\n        SymbolTable.\n    output_token_type: A string indicating how the output strings are to be\n        encoded as arc labels---one of: \"utf8\" (encodes strings as a UTF-8\n        encoded Unicode strings), \"byte\" (encodes strings as raw bytes)---or a\n        SymbolTable.\n    attach_input_symbols: should the symbol table used to compile the\n        input-side acceptor be attached to the FST?\n    attach_output_symbols: should the symbol table used to compile the\n        output-side acceptor be attached to the FST?\n\n  Returns:\n    An FST.\n\n  Raises:\n    F""stIOError: Read failed.\n  ";
static PyObject *__pyx_pw_6pynini_19string_file(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_arc_type = 0;
  PyObject *__pyx_v_input_token_type = 0;
  PyObject *__pyx_v_output_token_type = 0;
  bool __pyx_v_attach_input_symbols;
  bool __pyx_v_attach_output_symbols;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("string_file (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_arc_type,&__pyx_n_s_input_token_type,&__pyx_n_s_output_token_type,&__pyx_n_s_attach_input_symbols,&__pyx_n_s_attach_output_symbols,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[1] = ((PyObject *)__pyx_n_b_standard);
    values[2] = ((PyObject *)__pyx_n_b_byte);
    values[3] = ((PyObject *)__pyx_n_b_byte);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_arc_type);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_input_token_type);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_output_token_type);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attach_input_symbols);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attach_output_symbols);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "string_file") < 0)) __PYX_ERR(0, 1144, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = values[0];
    __pyx_v_arc_type = values[1];
    __pyx_v_input_token_type = values[2];
    __pyx_v_output_token_type = values[3];
    if (values[4]) {
      __pyx_v_attach_input_symbols = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_attach_input_symbols == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1148, __pyx_L3_error)
    } else {

      /* "pynini.pyx":1148
 *                       input_token_type=b"byte",
 *                       output_token_type=b"byte",
 *                       bool attach_input_symbols=True,             # <<<<<<<<<<<<<<
 *                       bool attach_output_symbols=True):
 *   """
 */
      __pyx_v_attach_input_symbols = ((bool)1);
    }
    if (values[5]) {
      __pyx_v_attach_output_symbols = __Pyx_PyObject_IsTrue(values[5]); if (unlikely((__pyx_v_attach_output_symbols == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1149, __pyx_L3_error)
    } else {

      /* "pynini.pyx":1149
 *                       output_token_type=b"byte",
 *                       bool attach_input_symbols=True,
 *                       bool attach_output_symbols=True):             # <<<<<<<<<<<<<<
 *   """
 *   string_file(filename, arc_type="standard", input_token_type="byte",
 */
      __pyx_v_attach_output_symbols = ((bool)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("string_file", 0, 1, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1144, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.string_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_18string_file(__pyx_self, __pyx_v_filename, __pyx_v_arc_type, __pyx_v_input_token_type, __pyx_v_output_token_type, __pyx_v_attach_input_symbols, __pyx_v_attach_output_symbols);

  /* "pynini.pyx":1144
 * 
 * 
 * cpdef Fst string_file(filename,             # <<<<<<<<<<<<<<
 *                       arc_type=b"standard",
 *                       input_token_type=b"byte",
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_18string_file(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_arc_type, PyObject *__pyx_v_input_token_type, PyObject *__pyx_v_output_token_type, bool __pyx_v_attach_input_symbols, bool __pyx_v_attach_output_symbols) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_6pynini_string_file __pyx_t_2;
  __Pyx_RefNannySetupContext("string_file", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 5;
  __pyx_t_2.arc_type = __pyx_v_arc_type;
  __pyx_t_2.input_token_type = __pyx_v_input_token_type;
  __pyx_t_2.output_token_type = __pyx_v_output_token_type;
  __pyx_t_2.attach_input_symbols = __pyx_v_attach_input_symbols;
  __pyx_t_2.attach_output_symbols = __pyx_v_attach_output_symbols;
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini_string_file(__pyx_v_filename, 0, &__pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.string_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1217
 * 
 * 
 * cpdef Fst string_map(lines,             # <<<<<<<<<<<<<<
 *                      arc_type=b"standard",
 *                      input_token_type=b"byte",
 */

static PyObject *__pyx_pw_6pynini_21string_map(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static struct __pyx_obj_6pynini_Fst *__pyx_f_6pynini_string_map(PyObject *__pyx_v_lines, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_6pynini_string_map *__pyx_optional_args) {
  PyObject *__pyx_v_arc_type = ((PyObject *)__pyx_n_b_standard);
  PyObject *__pyx_v_input_token_type = ((PyObject *)__pyx_n_b_byte);
  PyObject *__pyx_v_output_token_type = ((PyObject *)__pyx_n_b_byte);

  /* "pynini.pyx":1221
 *                      input_token_type=b"byte",
 *                      output_token_type=b"byte",
 *                      bool attach_input_symbols=True,             # <<<<<<<<<<<<<<
 *                      bool attach_output_symbols=True):
 *   """
 */
  bool __pyx_v_attach_input_symbols = ((bool)1);

  /* "pynini.pyx":1222
 *                      output_token_type=b"byte",
 *                      bool attach_input_symbols=True,
 *                      bool attach_output_symbols=True):             # <<<<<<<<<<<<<<
 *   """
 *   string_map(lines, arc_type="standard",
 */
  bool __pyx_v_attach_output_symbols = ((bool)1);
  enum fst::StringTokenType __pyx_v_itype;
  __pyx_t_9pywrapfst_SymbolTable_ptr __pyx_v_isyms;
  enum fst::StringTokenType __pyx_v_otype;
  __pyx_t_9pywrapfst_SymbolTable_ptr __pyx_v_osyms;
  struct __pyx_obj_6pynini_Fst *__pyx_v_result = 0;
  std::vector<std::string>  __pyx_v_string_line;
  std::vector<std::vector<std::string> >  __pyx_v_string_lines;
  PyObject *__pyx_v_line = NULL;
  PyObject *__pyx_v_elem = NULL;
  struct __pyx_obj_6pynini_Fst *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  std::string __pyx_t_5;
  enum fst::StringTokenType __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  PyObject *(*__pyx_t_12)(PyObject *);
  __Pyx_RefNannySetupContext("string_map", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_arc_type = __pyx_optional_args->arc_type;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_input_token_type = __pyx_optional_args->input_token_type;
        if (__pyx_optional_args->__pyx_n > 2) {
          __pyx_v_output_token_type = __pyx_optional_args->output_token_type;
          if (__pyx_optional_args->__pyx_n > 3) {
            __pyx_v_attach_input_symbols = __pyx_optional_args->attach_input_symbols;
            if (__pyx_optional_args->__pyx_n > 4) {
              __pyx_v_attach_output_symbols = __pyx_optional_args->attach_output_symbols;
            }
          }
        }
      }
    }
  }
  __Pyx_INCREF(__pyx_v_lines);

  /* "pynini.pyx":1268
 *   """
 *   cdef StringTokenType itype
 *   cdef SymbolTable_ptr isyms = NULL             # <<<<<<<<<<<<<<
 *   if isinstance(input_token_type, pywrapfst._SymbolTable):
 *     itype = SYMBOL
 */
  __pyx_v_isyms = NULL;

  /* "pynini.pyx":1269
 *   cdef StringTokenType itype
 *   cdef SymbolTable_ptr isyms = NULL
 *   if isinstance(input_token_type, pywrapfst._SymbolTable):             # <<<<<<<<<<<<<<
 *     itype = SYMBOL
 *     isyms = (<SymbolTable_ptr> (<_SymbolTable> input_token_type)._table)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_SymbolTable); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = PyObject_IsInstance(__pyx_v_input_token_type, __pyx_t_2); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 1269, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "pynini.pyx":1270
 *   cdef SymbolTable_ptr isyms = NULL
 *   if isinstance(input_token_type, pywrapfst._SymbolTable):
 *     itype = SYMBOL             # <<<<<<<<<<<<<<
 *     isyms = (<SymbolTable_ptr> (<_SymbolTable> input_token_type)._table)
 *   else:
 */
    __pyx_v_itype = fst::SYMBOL;

    /* "pynini.pyx":1271
 *   if isinstance(input_token_type, pywrapfst._SymbolTable):
 *     itype = SYMBOL
 *     isyms = (<SymbolTable_ptr> (<_SymbolTable> input_token_type)._table)             # <<<<<<<<<<<<<<
 *   else:
 *     itype = _get_token_type(tostring(input_token_type))
 */
    if (unlikely(__pyx_v_input_token_type == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_table");
      __PYX_ERR(0, 1271, __pyx_L1_error)
    }
    __pyx_v_isyms = ((__pyx_t_9pywrapfst_SymbolTable_ptr)((struct __pyx_obj_9pywrapfst__SymbolTable *)__pyx_v_input_token_type)->_table);

    /* "pynini.pyx":1269
 *   cdef StringTokenType itype
 *   cdef SymbolTable_ptr isyms = NULL
 *   if isinstance(input_token_type, pywrapfst._SymbolTable):             # <<<<<<<<<<<<<<
 *     itype = SYMBOL
 *     isyms = (<SymbolTable_ptr> (<_SymbolTable> input_token_type)._table)
 */
    goto __pyx_L3;
  }

  /* "pynini.pyx":1273
 *     isyms = (<SymbolTable_ptr> (<_SymbolTable> input_token_type)._table)
 *   else:
 *     itype = _get_token_type(tostring(input_token_type))             # <<<<<<<<<<<<<<
 *   cdef StringTokenType otype
 *   cdef SymbolTable_ptr osyms = NULL
 */
  /*else*/ {
    __pyx_t_5 = __pyx_f_9pywrapfst_tostring(__pyx_v_input_token_type, NULL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1273, __pyx_L1_error)
    __pyx_t_6 = __pyx_f_6pynini__get_token_type(__pyx_t_5); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1273, __pyx_L1_error)
    __pyx_v_itype = __pyx_t_6;
  }
  __pyx_L3:;

  /* "pynini.pyx":1275
 *     itype = _get_token_type(tostring(input_token_type))
 *   cdef StringTokenType otype
 *   cdef SymbolTable_ptr osyms = NULL             # <<<<<<<<<<<<<<
 *   if isinstance(output_token_type, pywrapfst._SymbolTable):
 *     otype = SYMBOL
 */
  __pyx_v_osyms = NULL;

  /* "pynini.pyx":1276
 *   cdef StringTokenType otype
 *   cdef SymbolTable_ptr osyms = NULL
 *   if isinstance(output_token_type, pywrapfst._SymbolTable):             # <<<<<<<<<<<<<<
 *     otype = SYMBOL
 *     osyms = (<SymbolTable_ptr> (<_SymbolTable> output_token_type)._table)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_SymbolTable); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = PyObject_IsInstance(__pyx_v_output_token_type, __pyx_t_1); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 1276, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_4 != 0);
  if (__pyx_t_3) {

    /* "pynini.pyx":1277
 *   cdef SymbolTable_ptr osyms = NULL
 *   if isinstance(output_token_type, pywrapfst._SymbolTable):
 *     otype = SYMBOL             # <<<<<<<<<<<<<<
 *     osyms = (<SymbolTable_ptr> (<_SymbolTable> output_token_type)._table)
 *   else:
 */
    __pyx_v_otype = fst::SYMBOL;

    /* "pynini.pyx":1278
 *   if isinstance(output_token_type, pywrapfst._SymbolTable):
 *     otype = SYMBOL
 *     osyms = (<SymbolTable_ptr> (<_SymbolTable> output_token_type)._table)             # <<<<<<<<<<<<<<
 *   else:
 *     otype = _get_token_type(tostring(output_token_type))
 */
    if (unlikely(__pyx_v_output_token_type == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_table");
      __PYX_ERR(0, 1278, __pyx_L1_error)
    }
    __pyx_v_osyms = ((__pyx_t_9pywrapfst_SymbolTable_ptr)((struct __pyx_obj_9pywrapfst__SymbolTable *)__pyx_v_output_token_type)->_table);

    /* "pynini.pyx":1276
 *   cdef StringTokenType otype
 *   cdef SymbolTable_ptr osyms = NULL
 *   if isinstance(output_token_type, pywrapfst._SymbolTable):             # <<<<<<<<<<<<<<
 *     otype = SYMBOL
 *     osyms = (<SymbolTable_ptr> (<_SymbolTable> output_token_type)._table)
 */
    goto __pyx_L4;
  }

  /* "pynini.pyx":1280
 *     osyms = (<SymbolTable_ptr> (<_SymbolTable> output_token_type)._table)
 *   else:
 *     otype = _get_token_type(tostring(output_token_type))             # <<<<<<<<<<<<<<
 *   cdef Fst result = Fst(arc_type)
 *   # Allows this to work with dictionary-like objects by extracting
 */
  /*else*/ {
    __pyx_t_5 = __pyx_f_9pywrapfst_tostring(__pyx_v_output_token_type, NULL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1280, __pyx_L1_error)
    __pyx_t_6 = __pyx_f_6pynini__get_token_type(__pyx_t_5); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1280, __pyx_L1_error)
    __pyx_v_otype = __pyx_t_6;
  }
  __pyx_L4:;

  /* "pynini.pyx":1281
 *   else:
 *     otype = _get_token_type(tostring(output_token_type))
 *   cdef Fst result = Fst(arc_type)             # <<<<<<<<<<<<<<
 *   # Allows this to work with dictionary-like objects by extracting
 *   # key-value pairs form it.
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_v_arc_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":1284
 *   # Allows this to work with dictionary-like objects by extracting
 *   # key-value pairs form it.
 *   if hasattr(lines, "items"):             # <<<<<<<<<<<<<<
 *     lines = lines.items()
 *   cdef vector[string] string_line
 */
  __pyx_t_3 = __Pyx_HasAttr(__pyx_v_lines, __pyx_n_s_items); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 1284, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "pynini.pyx":1285
 *   # key-value pairs form it.
 *   if hasattr(lines, "items"):
 *     lines = lines.items()             # <<<<<<<<<<<<<<
 *   cdef vector[string] string_line
 *   cdef vector[vector[string]] string_lines
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_lines, __pyx_n_s_items); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (__pyx_t_7) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1285, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1285, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_lines, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pynini.pyx":1284
 *   # Allows this to work with dictionary-like objects by extracting
 *   # key-value pairs form it.
 *   if hasattr(lines, "items"):             # <<<<<<<<<<<<<<
 *     lines = lines.items()
 *   cdef vector[string] string_line
 */
  }

  /* "pynini.pyx":1288
 *   cdef vector[string] string_line
 *   cdef vector[vector[string]] string_lines
 *   for line in lines:             # <<<<<<<<<<<<<<
 *     if hasattr(line, "__iter__") and type(line) is not str:
 *       for elem in line:
 */
  if (likely(PyList_CheckExact(__pyx_v_lines)) || PyTuple_CheckExact(__pyx_v_lines)) {
    __pyx_t_1 = __pyx_v_lines; __Pyx_INCREF(__pyx_t_1); __pyx_t_8 = 0;
    __pyx_t_9 = NULL;
  } else {
    __pyx_t_8 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_lines); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1288, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1288, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_9)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_8); __Pyx_INCREF(__pyx_t_2); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 1288, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1288, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_8); __Pyx_INCREF(__pyx_t_2); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 1288, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1288, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_9(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1288, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_line, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pynini.pyx":1289
 *   cdef vector[vector[string]] string_lines
 *   for line in lines:
 *     if hasattr(line, "__iter__") and type(line) is not str:             # <<<<<<<<<<<<<<
 *       for elem in line:
 *         string_line.push_back(tostring(elem))
 */
    __pyx_t_3 = __Pyx_HasAttr(__pyx_v_line, __pyx_n_s_iter); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 1289, __pyx_L1_error)
    __pyx_t_10 = (__pyx_t_3 != 0);
    if (__pyx_t_10) {
    } else {
      __pyx_t_4 = __pyx_t_10;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_10 = (((PyObject *)Py_TYPE(__pyx_v_line)) != ((PyObject *)(&PyString_Type)));
    __pyx_t_3 = (__pyx_t_10 != 0);
    __pyx_t_4 = __pyx_t_3;
    __pyx_L9_bool_binop_done:;
    if (__pyx_t_4) {

      /* "pynini.pyx":1290
 *   for line in lines:
 *     if hasattr(line, "__iter__") and type(line) is not str:
 *       for elem in line:             # <<<<<<<<<<<<<<
 *         string_line.push_back(tostring(elem))
 *     else:
 */
      if (likely(PyList_CheckExact(__pyx_v_line)) || PyTuple_CheckExact(__pyx_v_line)) {
        __pyx_t_2 = __pyx_v_line; __Pyx_INCREF(__pyx_t_2); __pyx_t_11 = 0;
        __pyx_t_12 = NULL;
      } else {
        __pyx_t_11 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_line); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1290, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_12 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1290, __pyx_L1_error)
      }
      for (;;) {
        if (likely(!__pyx_t_12)) {
          if (likely(PyList_CheckExact(__pyx_t_2))) {
            if (__pyx_t_11 >= PyList_GET_SIZE(__pyx_t_2)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_7 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_11); __Pyx_INCREF(__pyx_t_7); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 1290, __pyx_L1_error)
            #else
            __pyx_t_7 = PySequence_ITEM(__pyx_t_2, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1290, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            #endif
          } else {
            if (__pyx_t_11 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_11); __Pyx_INCREF(__pyx_t_7); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 1290, __pyx_L1_error)
            #else
            __pyx_t_7 = PySequence_ITEM(__pyx_t_2, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1290, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            #endif
          }
        } else {
          __pyx_t_7 = __pyx_t_12(__pyx_t_2);
          if (unlikely(!__pyx_t_7)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1290, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_7);
        }
        __Pyx_XDECREF_SET(__pyx_v_elem, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "pynini.pyx":1291
 *     if hasattr(line, "__iter__") and type(line) is not str:
 *       for elem in line:
 *         string_line.push_back(tostring(elem))             # <<<<<<<<<<<<<<
 *     else:
 *       string_line.push_back(tostring(line))
 */
        __pyx_t_5 = __pyx_f_9pywrapfst_tostring(__pyx_v_elem, NULL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1291, __pyx_L1_error)
        try {
          __pyx_v_string_line.push_back(__pyx_t_5);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 1291, __pyx_L1_error)
        }

        /* "pynini.pyx":1290
 *   for line in lines:
 *     if hasattr(line, "__iter__") and type(line) is not str:
 *       for elem in line:             # <<<<<<<<<<<<<<
 *         string_line.push_back(tostring(elem))
 *     else:
 */
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "pynini.pyx":1289
 *   cdef vector[vector[string]] string_lines
 *   for line in lines:
 *     if hasattr(line, "__iter__") and type(line) is not str:             # <<<<<<<<<<<<<<
 *       for elem in line:
 *         string_line.push_back(tostring(elem))
 */
      goto __pyx_L8;
    }

    /* "pynini.pyx":1293
 *         string_line.push_back(tostring(elem))
 *     else:
 *       string_line.push_back(tostring(line))             # <<<<<<<<<<<<<<
 *     string_lines.push_back(string_line)
 *     string_line.clear()
 */
    /*else*/ {
      __pyx_t_5 = __pyx_f_9pywrapfst_tostring(__pyx_v_line, NULL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1293, __pyx_L1_error)
      try {
        __pyx_v_string_line.push_back(__pyx_t_5);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 1293, __pyx_L1_error)
      }
    }
    __pyx_L8:;

    /* "pynini.pyx":1294
 *     else:
 *       string_line.push_back(tostring(line))
 *     string_lines.push_back(string_line)             # <<<<<<<<<<<<<<
 *     string_line.clear()
 *   if not StringMap(string_lines, result._mfst.get(), itype, otype, isyms, osyms,
 */
    try {
      __pyx_v_string_lines.push_back(__pyx_v_string_line);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1294, __pyx_L1_error)
    }

    /* "pynini.pyx":1295
 *       string_line.push_back(tostring(line))
 *     string_lines.push_back(string_line)
 *     string_line.clear()             # <<<<<<<<<<<<<<
 *   if not StringMap(string_lines, result._mfst.get(), itype, otype, isyms, osyms,
 *                    attach_input_symbols, attach_output_symbols):
 */
    __pyx_v_string_line.clear();

    /* "pynini.pyx":1288
 *   cdef vector[string] string_line
 *   cdef vector[vector[string]] string_lines
 *   for line in lines:             # <<<<<<<<<<<<<<
 *     if hasattr(line, "__iter__") and type(line) is not str:
 *       for elem in line:
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":1296
 *     string_lines.push_back(string_line)
 *     string_line.clear()
 *   if not StringMap(string_lines, result._mfst.get(), itype, otype, isyms, osyms,             # <<<<<<<<<<<<<<
 *                    attach_input_symbols, attach_output_symbols):
 *     raise FstArgError("String map compilation failed")
 */
  __pyx_t_4 = ((!(fst::script::StringMap(__pyx_v_string_lines, __pyx_v_result->__pyx_base._mfst.get(), __pyx_v_itype, __pyx_v_otype, __pyx_v_isyms, __pyx_v_osyms, __pyx_v_attach_input_symbols, __pyx_v_attach_output_symbols) != 0)) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "pynini.pyx":1298
 *   if not StringMap(string_lines, result._mfst.get(), itype, otype, isyms, osyms,
 *                    attach_input_symbols, attach_output_symbols):
 *     raise FstArgError("String map compilation failed")             # <<<<<<<<<<<<<<
 *   return result
 * 
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstArgError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1298, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1298, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1298, __pyx_L1_error)

    /* "pynini.pyx":1296
 *     string_lines.push_back(string_line)
 *     string_line.clear()
 *   if not StringMap(string_lines, result._mfst.get(), itype, otype, isyms, osyms,             # <<<<<<<<<<<<<<
 *                    attach_input_symbols, attach_output_symbols):
 *     raise FstArgError("String map compilation failed")
 */
  }

  /* "pynini.pyx":1299
 *                    attach_input_symbols, attach_output_symbols):
 *     raise FstArgError("String map compilation failed")
 *   return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "pynini.pyx":1217
 * 
 * 
 * cpdef Fst string_map(lines,             # <<<<<<<<<<<<<<
 *                      arc_type=b"standard",
 *                      input_token_type=b"byte",
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pynini.string_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_line);
  __Pyx_XDECREF(__pyx_v_elem);
  __Pyx_XDECREF(__pyx_v_lines);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_21string_map(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pynini_20string_map[] = "\n  string_map(lines, arc_type=\"standard\",\n             input_token_type=\"byte\", output_token_type=\"byte\",\n             attach_input_symbols=True,\n             attach_output_symbols=True)\n\n  Creates a transducer that maps between elements of mappings read from\n  an iterable.\n\n  The first element in each iterable is interpreted as the input string.\n\n  The optional second element is interpreted as the output string for the\n  transduction; if not specified it defaults to the value of the first element.\n\n  An optional third element is interpreted as a weight for the transduction;\n  if not specified it defaults to semiring One.\n\n  Args:\n    lines: An iterable of indexables of size one, two, or three. If the\n        iterable implements .items, this is used to extract the\n        indexables. The first element in each indexable is interpreted as the\n        input string, the second (optional) as the output string, defaulting\n        to the input string, and the third (optional) as a string to be\n        parsed as a weight, defaulting to semiring One.\n    arc_type: A string indicating the arc type.\n    input_token_type: A string indicating how the input strings are to be\n        encoded as arc labels---one of: \"utf8\" (encodes strings as a UTF-8\n        encoded Unicode strings), \"byte\" (encodes strings as raw bytes)---or a\n        SymbolTable.\n    output_token_type: A string indicating how the output strings are to be\n        encoded as arc labels---one of: \"utf8\" (encodes strings as a UTF-8\n        encoded Unicode strings), \"byte\" (encodes strings as raw bytes)---or a\n        SymbolTable.\n    attach_symbols: should the symbol table used to compile the\n        input-side acceptor be attached to the FST?\n    attach_output_symbols: should the symbol table used to compile the\n        output-side acceptor be attached to the FST?\n\n  Returns:\n    An FST.\n\n  Raises:\n    FstArgError: String map compilation failed.\n  ";
static PyObject *__pyx_pw_6pynini_21string_map(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_lines = 0;
  PyObject *__pyx_v_arc_type = 0;
  PyObject *__pyx_v_input_token_type = 0;
  PyObject *__pyx_v_output_token_type = 0;
  bool __pyx_v_attach_input_symbols;
  bool __pyx_v_attach_output_symbols;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("string_map (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_lines,&__pyx_n_s_arc_type,&__pyx_n_s_input_token_type,&__pyx_n_s_output_token_type,&__pyx_n_s_attach_input_symbols,&__pyx_n_s_attach_output_symbols,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[1] = ((PyObject *)__pyx_n_b_standard);
    values[2] = ((PyObject *)__pyx_n_b_byte);
    values[3] = ((PyObject *)__pyx_n_b_byte);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lines)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_arc_type);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_input_token_type);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_output_token_type);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attach_input_symbols);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attach_output_symbols);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "string_map") < 0)) __PYX_ERR(0, 1217, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_lines = values[0];
    __pyx_v_arc_type = values[1];
    __pyx_v_input_token_type = values[2];
    __pyx_v_output_token_type = values[3];
    if (values[4]) {
      __pyx_v_attach_input_symbols = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_attach_input_symbols == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1221, __pyx_L3_error)
    } else {

      /* "pynini.pyx":1221
 *                      input_token_type=b"byte",
 *                      output_token_type=b"byte",
 *                      bool attach_input_symbols=True,             # <<<<<<<<<<<<<<
 *                      bool attach_output_symbols=True):
 *   """
 */
      __pyx_v_attach_input_symbols = ((bool)1);
    }
    if (values[5]) {
      __pyx_v_attach_output_symbols = __Pyx_PyObject_IsTrue(values[5]); if (unlikely((__pyx_v_attach_output_symbols == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1222, __pyx_L3_error)
    } else {

      /* "pynini.pyx":1222
 *                      output_token_type=b"byte",
 *                      bool attach_input_symbols=True,
 *                      bool attach_output_symbols=True):             # <<<<<<<<<<<<<<
 *   """
 *   string_map(lines, arc_type="standard",
 */
      __pyx_v_attach_output_symbols = ((bool)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("string_map", 0, 1, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1217, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.string_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_20string_map(__pyx_self, __pyx_v_lines, __pyx_v_arc_type, __pyx_v_input_token_type, __pyx_v_output_token_type, __pyx_v_attach_input_symbols, __pyx_v_attach_output_symbols);

  /* "pynini.pyx":1217
 * 
 * 
 * cpdef Fst string_map(lines,             # <<<<<<<<<<<<<<
 *                      arc_type=b"standard",
 *                      input_token_type=b"byte",
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_20string_map(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_lines, PyObject *__pyx_v_arc_type, PyObject *__pyx_v_input_token_type, PyObject *__pyx_v_output_token_type, bool __pyx_v_attach_input_symbols, bool __pyx_v_attach_output_symbols) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_6pynini_string_map __pyx_t_2;
  __Pyx_RefNannySetupContext("string_map", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 5;
  __pyx_t_2.arc_type = __pyx_v_arc_type;
  __pyx_t_2.input_token_type = __pyx_v_input_token_type;
  __pyx_t_2.output_token_type = __pyx_v_output_token_type;
  __pyx_t_2.attach_input_symbols = __pyx_v_attach_input_symbols;
  __pyx_t_2.attach_output_symbols = __pyx_v_attach_output_symbols;
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini_string_map(__pyx_v_lines, 0, &__pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.string_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1302
 * 
 * 
 * def get_byte_symbol_table():             # <<<<<<<<<<<<<<
 *   """Returns a symbol table containing all bytes."""
 *   return _init_SymbolTable(GetByteSymbolTable())
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_23get_byte_symbol_table(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pynini_22get_byte_symbol_table[] = "Returns a symbol table containing all bytes.";
static PyMethodDef __pyx_mdef_6pynini_23get_byte_symbol_table = {"get_byte_symbol_table", (PyCFunction)__pyx_pw_6pynini_23get_byte_symbol_table, METH_NOARGS, __pyx_doc_6pynini_22get_byte_symbol_table};
static PyObject *__pyx_pw_6pynini_23get_byte_symbol_table(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_byte_symbol_table (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_22get_byte_symbol_table(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_22get_byte_symbol_table(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_byte_symbol_table", 0);

  /* "pynini.pyx":1304
 * def get_byte_symbol_table():
 *   """Returns a symbol table containing all bytes."""
 *   return _init_SymbolTable(GetByteSymbolTable())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_9pywrapfst__init_SymbolTable(fst::GetByteSymbolTable())); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":1302
 * 
 * 
 * def get_byte_symbol_table():             # <<<<<<<<<<<<<<
 *   """Returns a symbol table containing all bytes."""
 *   return _init_SymbolTable(GetByteSymbolTable())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.get_byte_symbol_table", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1310
 * 
 * 
 * def _1arg_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg, *args, **kwargs):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_25_1arg_patch(PyObject *__pyx_self, PyObject *__pyx_v_fnc); /*proto*/
static PyMethodDef __pyx_mdef_6pynini_25_1arg_patch = {"_1arg_patch", (PyCFunction)__pyx_pw_6pynini_25_1arg_patch, METH_O, 0};
static PyObject *__pyx_pw_6pynini_25_1arg_patch(PyObject *__pyx_self, PyObject *__pyx_v_fnc) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_1arg_patch (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_24_1arg_patch(__pyx_self, ((PyObject *)__pyx_v_fnc));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1312
 * def _1arg_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst fst = _compile_or_copy_Fst(arg)
 *     return _init_Fst_from_MutableFst(fnc(fst, *args, **kwargs))
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_11_1arg_patch_1patch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6pynini_11_1arg_patch_1patch = {"patch", (PyCFunction)__pyx_pw_6pynini_11_1arg_patch_1patch, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6pynini_11_1arg_patch_1patch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("patch (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arg,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_arg)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "patch") < 0)) __PYX_ERR(0, 1312, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_arg = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("patch", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1312, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynini._1arg_patch.patch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_11_1arg_patch_patch(__pyx_self, __pyx_v_arg, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_11_1arg_patch_patch(PyObject *__pyx_self, PyObject *__pyx_v_arg, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  struct __pyx_obj_6pynini___pyx_scope_struct___1arg_patch *__pyx_cur_scope;
  struct __pyx_obj_6pynini___pyx_scope_struct___1arg_patch *__pyx_outer_scope;
  struct __pyx_obj_6pynini_Fst *__pyx_v_fst = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("patch", 0);
  __pyx_outer_scope = (struct __pyx_obj_6pynini___pyx_scope_struct___1arg_patch *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "pynini.pyx":1313
 *   @functools.wraps(fnc)
 *   def patch(arg, *args, **kwargs):
 *     cdef Fst fst = _compile_or_copy_Fst(arg)             # <<<<<<<<<<<<<<
 *     return _init_Fst_from_MutableFst(fnc(fst, *args, **kwargs))
 *   return patch
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_arg, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_fst = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":1314
 *   def patch(arg, *args, **kwargs):
 *     cdef Fst fst = _compile_or_copy_Fst(arg)
 *     return _init_Fst_from_MutableFst(fnc(fst, *args, **kwargs))             # <<<<<<<<<<<<<<
 *   return patch
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_v_fnc)) { __Pyx_RaiseClosureNameError("fnc"); __PYX_ERR(0, 1314, __pyx_L1_error) }
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_fst));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_fst));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_fst));
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_v_args); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_cur_scope->__pyx_v_fnc, __pyx_t_2, __pyx_v_kwargs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9pywrapfst__MutableFst))))) __PYX_ERR(0, 1314, __pyx_L1_error)
  __pyx_t_2 = ((PyObject *)__pyx_f_6pynini__init_Fst_from_MutableFst(((struct __pyx_obj_9pywrapfst__MutableFst *)__pyx_t_1))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":1312
 * def _1arg_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst fst = _compile_or_copy_Fst(arg)
 *     return _init_Fst_from_MutableFst(fnc(fst, *args, **kwargs))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pynini._1arg_patch.patch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_fst);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1310
 * 
 * 
 * def _1arg_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg, *args, **kwargs):
 */

static PyObject *__pyx_pf_6pynini_24_1arg_patch(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fnc) {
  struct __pyx_obj_6pynini___pyx_scope_struct___1arg_patch *__pyx_cur_scope;
  PyObject *__pyx_v_patch = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("_1arg_patch", 0);
  __pyx_cur_scope = (struct __pyx_obj_6pynini___pyx_scope_struct___1arg_patch *)__pyx_tp_new_6pynini___pyx_scope_struct___1arg_patch(__pyx_ptype_6pynini___pyx_scope_struct___1arg_patch, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6pynini___pyx_scope_struct___1arg_patch *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1310, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_fnc = __pyx_v_fnc;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fnc);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fnc);

  /* "pynini.pyx":1311
 * 
 * def _1arg_patch(fnc):
 *   @functools.wraps(fnc)             # <<<<<<<<<<<<<<
 *   def patch(arg, *args, **kwargs):
 *     cdef Fst fst = _compile_or_copy_Fst(arg)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_functools); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_wraps); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_cur_scope->__pyx_v_fnc); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_cur_scope->__pyx_v_fnc};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1311, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_cur_scope->__pyx_v_fnc};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1311, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1311, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fnc);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fnc);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_cur_scope->__pyx_v_fnc);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1311, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pynini.pyx":1312
 * def _1arg_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst fst = _compile_or_copy_Fst(arg)
 *     return _init_Fst_from_MutableFst(fnc(fst, *args, **kwargs))
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6pynini_11_1arg_patch_1patch, 0, __pyx_n_s_1arg_patch_locals_patch, ((PyObject*)__pyx_cur_scope), __pyx_n_s_pynini, __pyx_d, ((PyObject *)__pyx_codeobj__11)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1311, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1311, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1311, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1311, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1311, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_patch = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pynini.pyx":1315
 *     cdef Fst fst = _compile_or_copy_Fst(arg)
 *     return _init_Fst_from_MutableFst(fnc(fst, *args, **kwargs))
 *   return patch             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_patch);
  __pyx_r = __pyx_v_patch;
  goto __pyx_L0;

  /* "pynini.pyx":1310
 * 
 * 
 * def _1arg_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg, *args, **kwargs):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynini._1arg_patch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_patch);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1331
 * 
 * 
 * def _shortestdistance_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg, *args, **kwargs):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_27_shortestdistance_patch(PyObject *__pyx_self, PyObject *__pyx_v_fnc); /*proto*/
static PyMethodDef __pyx_mdef_6pynini_27_shortestdistance_patch = {"_shortestdistance_patch", (PyCFunction)__pyx_pw_6pynini_27_shortestdistance_patch, METH_O, 0};
static PyObject *__pyx_pw_6pynini_27_shortestdistance_patch(PyObject *__pyx_self, PyObject *__pyx_v_fnc) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_shortestdistance_patch (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_26_shortestdistance_patch(__pyx_self, ((PyObject *)__pyx_v_fnc));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1333
 * def _shortestdistance_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst fst = _compile_or_copy_Fst(arg)
 *     return fnc(fst, *args, **kwargs)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_23_shortestdistance_patch_1patch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6pynini_23_shortestdistance_patch_1patch = {"patch", (PyCFunction)__pyx_pw_6pynini_23_shortestdistance_patch_1patch, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6pynini_23_shortestdistance_patch_1patch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("patch (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arg,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_arg)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "patch") < 0)) __PYX_ERR(0, 1333, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_arg = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("patch", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1333, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynini._shortestdistance_patch.patch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_23_shortestdistance_patch_patch(__pyx_self, __pyx_v_arg, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_23_shortestdistance_patch_patch(PyObject *__pyx_self, PyObject *__pyx_v_arg, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  struct __pyx_obj_6pynini___pyx_scope_struct_1__shortestdistance_patch *__pyx_cur_scope;
  struct __pyx_obj_6pynini___pyx_scope_struct_1__shortestdistance_patch *__pyx_outer_scope;
  struct __pyx_obj_6pynini_Fst *__pyx_v_fst = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("patch", 0);
  __pyx_outer_scope = (struct __pyx_obj_6pynini___pyx_scope_struct_1__shortestdistance_patch *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "pynini.pyx":1334
 *   @functools.wraps(fnc)
 *   def patch(arg, *args, **kwargs):
 *     cdef Fst fst = _compile_or_copy_Fst(arg)             # <<<<<<<<<<<<<<
 *     return fnc(fst, *args, **kwargs)
 *   return patch
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_arg, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_fst = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":1335
 *   def patch(arg, *args, **kwargs):
 *     cdef Fst fst = _compile_or_copy_Fst(arg)
 *     return fnc(fst, *args, **kwargs)             # <<<<<<<<<<<<<<
 *   return patch
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_v_fnc)) { __Pyx_RaiseClosureNameError("fnc"); __PYX_ERR(0, 1335, __pyx_L1_error) }
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_fst));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_fst));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_fst));
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_v_args); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_cur_scope->__pyx_v_fnc, __pyx_t_2, __pyx_v_kwargs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":1333
 * def _shortestdistance_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst fst = _compile_or_copy_Fst(arg)
 *     return fnc(fst, *args, **kwargs)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pynini._shortestdistance_patch.patch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_fst);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1331
 * 
 * 
 * def _shortestdistance_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg, *args, **kwargs):
 */

static PyObject *__pyx_pf_6pynini_26_shortestdistance_patch(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fnc) {
  struct __pyx_obj_6pynini___pyx_scope_struct_1__shortestdistance_patch *__pyx_cur_scope;
  PyObject *__pyx_v_patch = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("_shortestdistance_patch", 0);
  __pyx_cur_scope = (struct __pyx_obj_6pynini___pyx_scope_struct_1__shortestdistance_patch *)__pyx_tp_new_6pynini___pyx_scope_struct_1__shortestdistance_patch(__pyx_ptype_6pynini___pyx_scope_struct_1__shortestdistance_patch, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6pynini___pyx_scope_struct_1__shortestdistance_patch *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1331, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_fnc = __pyx_v_fnc;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fnc);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fnc);

  /* "pynini.pyx":1332
 * 
 * def _shortestdistance_patch(fnc):
 *   @functools.wraps(fnc)             # <<<<<<<<<<<<<<
 *   def patch(arg, *args, **kwargs):
 *     cdef Fst fst = _compile_or_copy_Fst(arg)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_functools); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_wraps); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_cur_scope->__pyx_v_fnc); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1332, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_cur_scope->__pyx_v_fnc};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1332, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_cur_scope->__pyx_v_fnc};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1332, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1332, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fnc);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fnc);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_cur_scope->__pyx_v_fnc);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1332, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pynini.pyx":1333
 * def _shortestdistance_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst fst = _compile_or_copy_Fst(arg)
 *     return fnc(fst, *args, **kwargs)
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6pynini_23_shortestdistance_patch_1patch, 0, __pyx_n_s_shortestdistance_patch_locals_p, ((PyObject*)__pyx_cur_scope), __pyx_n_s_pynini, __pyx_d, ((PyObject *)__pyx_codeobj__13)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1332, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1332, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1332, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1332, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1332, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_patch = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pynini.pyx":1336
 *     cdef Fst fst = _compile_or_copy_Fst(arg)
 *     return fnc(fst, *args, **kwargs)
 *   return patch             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_patch);
  __pyx_r = __pyx_v_patch;
  goto __pyx_L0;

  /* "pynini.pyx":1331
 * 
 * 
 * def _shortestdistance_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg, *args, **kwargs):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynini._shortestdistance_patch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_patch);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1347
 * 
 * 
 * def _compose_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_29_compose_patch(PyObject *__pyx_self, PyObject *__pyx_v_fnc); /*proto*/
static PyMethodDef __pyx_mdef_6pynini_29_compose_patch = {"_compose_patch", (PyCFunction)__pyx_pw_6pynini_29_compose_patch, METH_O, 0};
static PyObject *__pyx_pw_6pynini_29_compose_patch(PyObject *__pyx_self, PyObject *__pyx_v_fnc) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_compose_patch (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_28_compose_patch(__pyx_self, ((PyObject *)__pyx_v_fnc));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1349
 * def _compose_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst lhs
 *     cdef Fst rhs
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_14_compose_patch_1patch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6pynini_14_compose_patch_1patch = {"patch", (PyCFunction)__pyx_pw_6pynini_14_compose_patch_1patch, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6pynini_14_compose_patch_1patch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg1 = 0;
  PyObject *__pyx_v_arg2 = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("patch (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 2) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 2, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arg1,&__pyx_n_s_arg2,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_arg1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_arg2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("patch", 0, 2, 2, 1); __PYX_ERR(0, 1349, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 2) ? pos_args : 2;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "patch") < 0)) __PYX_ERR(0, 1349, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_arg1 = values[0];
    __pyx_v_arg2 = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("patch", 0, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1349, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynini._compose_patch.patch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_14_compose_patch_patch(__pyx_self, __pyx_v_arg1, __pyx_v_arg2, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_14_compose_patch_patch(PyObject *__pyx_self, PyObject *__pyx_v_arg1, PyObject *__pyx_v_arg2, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  struct __pyx_obj_6pynini___pyx_scope_struct_2__compose_patch *__pyx_cur_scope;
  struct __pyx_obj_6pynini___pyx_scope_struct_2__compose_patch *__pyx_outer_scope;
  struct __pyx_obj_6pynini_Fst *__pyx_v_lhs = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_v_rhs = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  __Pyx_RefNannySetupContext("patch", 0);
  __pyx_outer_scope = (struct __pyx_obj_6pynini___pyx_scope_struct_2__compose_patch *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "pynini.pyx":1352
 *     cdef Fst lhs
 *     cdef Fst rhs
 *     (lhs, rhs) = _compile_or_copy_two_Fsts(arg1, arg2)             # <<<<<<<<<<<<<<
 *     MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 *                  MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS)
 */
  __pyx_t_1 = __pyx_f_6pynini__compile_or_copy_two_Fsts(__pyx_v_arg1, __pyx_v_arg2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1352, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_3 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_4), 2) < 0) __PYX_ERR(0, 1352, __pyx_L1_error)
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 1352, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_6pynini_Fst))))) __PYX_ERR(0, 1352, __pyx_L1_error)
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_6pynini_Fst))))) __PYX_ERR(0, 1352, __pyx_L1_error)
  __pyx_v_lhs = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_v_rhs = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pynini.pyx":1353
 *     cdef Fst rhs
 *     (lhs, rhs) = _compile_or_copy_two_Fsts(arg1, arg2)
 *     MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),             # <<<<<<<<<<<<<<
 *                  MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS)
 *     _maybe_arcsort(lhs._mfst.get(), rhs._mfst.get())
 */
  if (unlikely(((PyObject *)__pyx_v_lhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mfst");
    __PYX_ERR(0, 1353, __pyx_L1_error)
  }
  if (unlikely(((PyObject *)__pyx_v_rhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mfst");
    __PYX_ERR(0, 1353, __pyx_L1_error)
  }

  /* "pynini.pyx":1354
 *     (lhs, rhs) = _compile_or_copy_two_Fsts(arg1, arg2)
 *     MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 *                  MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS)             # <<<<<<<<<<<<<<
 *     _maybe_arcsort(lhs._mfst.get(), rhs._mfst.get())
 *     lhs = _init_Fst_from_MutableFst(fnc(lhs, rhs, *args, **kwargs))
 */
  fst::script::MergeSymbols(__pyx_v_lhs->__pyx_base._mfst.get(), __pyx_v_rhs->__pyx_base._mfst.get(), fst::MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS);

  /* "pynini.pyx":1355
 *     MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 *                  MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS)
 *     _maybe_arcsort(lhs._mfst.get(), rhs._mfst.get())             # <<<<<<<<<<<<<<
 *     lhs = _init_Fst_from_MutableFst(fnc(lhs, rhs, *args, **kwargs))
 *     return lhs
 */
  if (unlikely(((PyObject *)__pyx_v_lhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mfst");
    __PYX_ERR(0, 1355, __pyx_L1_error)
  }
  if (unlikely(((PyObject *)__pyx_v_rhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mfst");
    __PYX_ERR(0, 1355, __pyx_L1_error)
  }
  __pyx_f_6pynini__maybe_arcsort(__pyx_v_lhs->__pyx_base._mfst.get(), __pyx_v_rhs->__pyx_base._mfst.get());

  /* "pynini.pyx":1356
 *                  MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS)
 *     _maybe_arcsort(lhs._mfst.get(), rhs._mfst.get())
 *     lhs = _init_Fst_from_MutableFst(fnc(lhs, rhs, *args, **kwargs))             # <<<<<<<<<<<<<<
 *     return lhs
 *   return patch
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_fnc)) { __Pyx_RaiseClosureNameError("fnc"); __PYX_ERR(0, 1356, __pyx_L1_error) }
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_lhs));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_lhs));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_lhs));
  __Pyx_INCREF(((PyObject *)__pyx_v_rhs));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_rhs));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_rhs));
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_v_args); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_cur_scope->__pyx_v_fnc, __pyx_t_3, __pyx_v_kwargs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9pywrapfst__MutableFst))))) __PYX_ERR(0, 1356, __pyx_L1_error)
  __pyx_t_3 = ((PyObject *)__pyx_f_6pynini__init_Fst_from_MutableFst(((struct __pyx_obj_9pywrapfst__MutableFst *)__pyx_t_1))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF_SET(__pyx_v_lhs, ((struct __pyx_obj_6pynini_Fst *)__pyx_t_3));
  __pyx_t_3 = 0;

  /* "pynini.pyx":1357
 *     _maybe_arcsort(lhs._mfst.get(), rhs._mfst.get())
 *     lhs = _init_Fst_from_MutableFst(fnc(lhs, rhs, *args, **kwargs))
 *     return lhs             # <<<<<<<<<<<<<<
 *   return patch
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_lhs));
  __pyx_r = ((PyObject *)__pyx_v_lhs);
  goto __pyx_L0;

  /* "pynini.pyx":1349
 * def _compose_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst lhs
 *     cdef Fst rhs
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynini._compose_patch.patch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_lhs);
  __Pyx_XDECREF((PyObject *)__pyx_v_rhs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1347
 * 
 * 
 * def _compose_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */

static PyObject *__pyx_pf_6pynini_28_compose_patch(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fnc) {
  struct __pyx_obj_6pynini___pyx_scope_struct_2__compose_patch *__pyx_cur_scope;
  PyObject *__pyx_v_patch = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("_compose_patch", 0);
  __pyx_cur_scope = (struct __pyx_obj_6pynini___pyx_scope_struct_2__compose_patch *)__pyx_tp_new_6pynini___pyx_scope_struct_2__compose_patch(__pyx_ptype_6pynini___pyx_scope_struct_2__compose_patch, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6pynini___pyx_scope_struct_2__compose_patch *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1347, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_fnc = __pyx_v_fnc;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fnc);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fnc);

  /* "pynini.pyx":1348
 * 
 * def _compose_patch(fnc):
 *   @functools.wraps(fnc)             # <<<<<<<<<<<<<<
 *   def patch(arg1, arg2, *args, **kwargs):
 *     cdef Fst lhs
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_functools); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_wraps); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_cur_scope->__pyx_v_fnc); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1348, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_cur_scope->__pyx_v_fnc};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1348, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_cur_scope->__pyx_v_fnc};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1348, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1348, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fnc);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fnc);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_cur_scope->__pyx_v_fnc);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1348, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pynini.pyx":1349
 * def _compose_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst lhs
 *     cdef Fst rhs
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6pynini_14_compose_patch_1patch, 0, __pyx_n_s_compose_patch_locals_patch, ((PyObject*)__pyx_cur_scope), __pyx_n_s_pynini, __pyx_d, ((PyObject *)__pyx_codeobj__15)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1348, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1348, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1348, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1348, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1348, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_patch = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pynini.pyx":1358
 *     lhs = _init_Fst_from_MutableFst(fnc(lhs, rhs, *args, **kwargs))
 *     return lhs
 *   return patch             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_patch);
  __pyx_r = __pyx_v_patch;
  goto __pyx_L0;

  /* "pynini.pyx":1347
 * 
 * 
 * def _compose_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynini._compose_patch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_patch);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1365
 * 
 * 
 * def _difference_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_31_difference_patch(PyObject *__pyx_self, PyObject *__pyx_v_fnc); /*proto*/
static PyMethodDef __pyx_mdef_6pynini_31_difference_patch = {"_difference_patch", (PyCFunction)__pyx_pw_6pynini_31_difference_patch, METH_O, 0};
static PyObject *__pyx_pw_6pynini_31_difference_patch(PyObject *__pyx_self, PyObject *__pyx_v_fnc) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_difference_patch (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_30_difference_patch(__pyx_self, ((PyObject *)__pyx_v_fnc));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1367
 * def _difference_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst lhs
 *     cdef Fst rhs
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_17_difference_patch_1patch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6pynini_17_difference_patch_1patch = {"patch", (PyCFunction)__pyx_pw_6pynini_17_difference_patch_1patch, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6pynini_17_difference_patch_1patch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg1 = 0;
  PyObject *__pyx_v_arg2 = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("patch (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 2) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 2, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arg1,&__pyx_n_s_arg2,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_arg1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_arg2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("patch", 0, 2, 2, 1); __PYX_ERR(0, 1367, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 2) ? pos_args : 2;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "patch") < 0)) __PYX_ERR(0, 1367, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_arg1 = values[0];
    __pyx_v_arg2 = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("patch", 0, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1367, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynini._difference_patch.patch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_17_difference_patch_patch(__pyx_self, __pyx_v_arg1, __pyx_v_arg2, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_17_difference_patch_patch(PyObject *__pyx_self, PyObject *__pyx_v_arg1, PyObject *__pyx_v_arg2, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  struct __pyx_obj_6pynini___pyx_scope_struct_3__difference_patch *__pyx_cur_scope;
  struct __pyx_obj_6pynini___pyx_scope_struct_3__difference_patch *__pyx_outer_scope;
  struct __pyx_obj_6pynini_Fst *__pyx_v_lhs = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_v_rhs = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("patch", 0);
  __pyx_outer_scope = (struct __pyx_obj_6pynini___pyx_scope_struct_3__difference_patch *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "pynini.pyx":1370
 *     cdef Fst lhs
 *     cdef Fst rhs
 *     (lhs, rhs) = _compile_or_copy_two_Fsts(arg1, arg2)             # <<<<<<<<<<<<<<
 *     if rhs._mfst.get().Properties(kDifferenceRhs, True) != kDifferenceRhs:
 *       raise FstOpError("2nd argument must be an unweighted acceptor")
 */
  __pyx_t_1 = __pyx_f_6pynini__compile_or_copy_two_Fsts(__pyx_v_arg1, __pyx_v_arg2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1370, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1370, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1370, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1370, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_3 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_4), 2) < 0) __PYX_ERR(0, 1370, __pyx_L1_error)
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 1370, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_6pynini_Fst))))) __PYX_ERR(0, 1370, __pyx_L1_error)
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_6pynini_Fst))))) __PYX_ERR(0, 1370, __pyx_L1_error)
  __pyx_v_lhs = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_v_rhs = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pynini.pyx":1371
 *     cdef Fst rhs
 *     (lhs, rhs) = _compile_or_copy_two_Fsts(arg1, arg2)
 *     if rhs._mfst.get().Properties(kDifferenceRhs, True) != kDifferenceRhs:             # <<<<<<<<<<<<<<
 *       raise FstOpError("2nd argument must be an unweighted acceptor")
 *     MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 */
  if (unlikely(((PyObject *)__pyx_v_rhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mfst");
    __PYX_ERR(0, 1371, __pyx_L1_error)
  }
  __pyx_t_6 = ((__pyx_v_rhs->__pyx_base._mfst.get()->Properties(__pyx_v_6pynini_kDifferenceRhs, 1) != __pyx_v_6pynini_kDifferenceRhs) != 0);
  if (unlikely(__pyx_t_6)) {

    /* "pynini.pyx":1372
 *     (lhs, rhs) = _compile_or_copy_two_Fsts(arg1, arg2)
 *     if rhs._mfst.get().Properties(kDifferenceRhs, True) != kDifferenceRhs:
 *       raise FstOpError("2nd argument must be an unweighted acceptor")             # <<<<<<<<<<<<<<
 *     MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 *                  MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS)
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstOpError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1372, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1372, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1372, __pyx_L1_error)

    /* "pynini.pyx":1371
 *     cdef Fst rhs
 *     (lhs, rhs) = _compile_or_copy_two_Fsts(arg1, arg2)
 *     if rhs._mfst.get().Properties(kDifferenceRhs, True) != kDifferenceRhs:             # <<<<<<<<<<<<<<
 *       raise FstOpError("2nd argument must be an unweighted acceptor")
 *     MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 */
  }

  /* "pynini.pyx":1373
 *     if rhs._mfst.get().Properties(kDifferenceRhs, True) != kDifferenceRhs:
 *       raise FstOpError("2nd argument must be an unweighted acceptor")
 *     MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),             # <<<<<<<<<<<<<<
 *                  MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS)
 *     MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 */
  if (unlikely(((PyObject *)__pyx_v_lhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mfst");
    __PYX_ERR(0, 1373, __pyx_L1_error)
  }
  if (unlikely(((PyObject *)__pyx_v_rhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mfst");
    __PYX_ERR(0, 1373, __pyx_L1_error)
  }

  /* "pynini.pyx":1374
 *       raise FstOpError("2nd argument must be an unweighted acceptor")
 *     MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 *                  MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS)             # <<<<<<<<<<<<<<
 *     MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 *                  MERGE_INPUT_AND_OUTPUT_SYMBOLS)
 */
  fst::script::MergeSymbols(__pyx_v_lhs->__pyx_base._mfst.get(), __pyx_v_rhs->__pyx_base._mfst.get(), fst::MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS);

  /* "pynini.pyx":1375
 *     MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 *                  MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS)
 *     MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),             # <<<<<<<<<<<<<<
 *                  MERGE_INPUT_AND_OUTPUT_SYMBOLS)
 *     # Makes RHS epsilon-free and deterministic.
 */
  if (unlikely(((PyObject *)__pyx_v_lhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mfst");
    __PYX_ERR(0, 1375, __pyx_L1_error)
  }
  if (unlikely(((PyObject *)__pyx_v_rhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mfst");
    __PYX_ERR(0, 1375, __pyx_L1_error)
  }

  /* "pynini.pyx":1376
 *                  MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS)
 *     MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 *                  MERGE_INPUT_AND_OUTPUT_SYMBOLS)             # <<<<<<<<<<<<<<
 *     # Makes RHS epsilon-free and deterministic.
 *     OptimizeDifferenceRhs(rhs._mfst.get(), True)
 */
  fst::script::MergeSymbols(__pyx_v_lhs->__pyx_base._mfst.get(), __pyx_v_rhs->__pyx_base._mfst.get(), fst::MERGE_INPUT_AND_OUTPUT_SYMBOLS);

  /* "pynini.pyx":1378
 *                  MERGE_INPUT_AND_OUTPUT_SYMBOLS)
 *     # Makes RHS epsilon-free and deterministic.
 *     OptimizeDifferenceRhs(rhs._mfst.get(), True)             # <<<<<<<<<<<<<<
 *     return _init_Fst_from_MutableFst(fnc(lhs, rhs, *args, **kwargs))
 *   return patch
 */
  if (unlikely(((PyObject *)__pyx_v_rhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mfst");
    __PYX_ERR(0, 1378, __pyx_L1_error)
  }
  fst::script::OptimizeDifferenceRhs(__pyx_v_rhs->__pyx_base._mfst.get(), 1);

  /* "pynini.pyx":1379
 *     # Makes RHS epsilon-free and deterministic.
 *     OptimizeDifferenceRhs(rhs._mfst.get(), True)
 *     return _init_Fst_from_MutableFst(fnc(lhs, rhs, *args, **kwargs))             # <<<<<<<<<<<<<<
 *   return patch
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_v_fnc)) { __Pyx_RaiseClosureNameError("fnc"); __PYX_ERR(0, 1379, __pyx_L1_error) }
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_lhs));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_lhs));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_lhs));
  __Pyx_INCREF(((PyObject *)__pyx_v_rhs));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_rhs));
  PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_v_rhs));
  __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_cur_scope->__pyx_v_fnc, __pyx_t_1, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_9pywrapfst__MutableFst))))) __PYX_ERR(0, 1379, __pyx_L1_error)
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini__init_Fst_from_MutableFst(((struct __pyx_obj_9pywrapfst__MutableFst *)__pyx_t_3))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":1367
 * def _difference_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst lhs
 *     cdef Fst rhs
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynini._difference_patch.patch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_lhs);
  __Pyx_XDECREF((PyObject *)__pyx_v_rhs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1365
 * 
 * 
 * def _difference_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */

static PyObject *__pyx_pf_6pynini_30_difference_patch(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fnc) {
  struct __pyx_obj_6pynini___pyx_scope_struct_3__difference_patch *__pyx_cur_scope;
  PyObject *__pyx_v_patch = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("_difference_patch", 0);
  __pyx_cur_scope = (struct __pyx_obj_6pynini___pyx_scope_struct_3__difference_patch *)__pyx_tp_new_6pynini___pyx_scope_struct_3__difference_patch(__pyx_ptype_6pynini___pyx_scope_struct_3__difference_patch, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6pynini___pyx_scope_struct_3__difference_patch *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1365, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_fnc = __pyx_v_fnc;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fnc);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fnc);

  /* "pynini.pyx":1366
 * 
 * def _difference_patch(fnc):
 *   @functools.wraps(fnc)             # <<<<<<<<<<<<<<
 *   def patch(arg1, arg2, *args, **kwargs):
 *     cdef Fst lhs
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_functools); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_wraps); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_cur_scope->__pyx_v_fnc); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_cur_scope->__pyx_v_fnc};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1366, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_cur_scope->__pyx_v_fnc};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1366, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1366, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fnc);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fnc);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_cur_scope->__pyx_v_fnc);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1366, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pynini.pyx":1367
 * def _difference_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst lhs
 *     cdef Fst rhs
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6pynini_17_difference_patch_1patch, 0, __pyx_n_s_difference_patch_locals_patch, ((PyObject*)__pyx_cur_scope), __pyx_n_s_pynini, __pyx_d, ((PyObject *)__pyx_codeobj__18)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1366, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1366, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1366, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1366, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1366, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_patch = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pynini.pyx":1380
 *     OptimizeDifferenceRhs(rhs._mfst.get(), True)
 *     return _init_Fst_from_MutableFst(fnc(lhs, rhs, *args, **kwargs))
 *   return patch             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_patch);
  __pyx_r = __pyx_v_patch;
  goto __pyx_L0;

  /* "pynini.pyx":1365
 * 
 * 
 * def _difference_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynini._difference_patch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_patch);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1389
 * 
 * 
 * def _comp_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_33_comp_patch(PyObject *__pyx_self, PyObject *__pyx_v_fnc); /*proto*/
static PyMethodDef __pyx_mdef_6pynini_33_comp_patch = {"_comp_patch", (PyCFunction)__pyx_pw_6pynini_33_comp_patch, METH_O, 0};
static PyObject *__pyx_pw_6pynini_33_comp_patch(PyObject *__pyx_self, PyObject *__pyx_v_fnc) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_comp_patch (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_32_comp_patch(__pyx_self, ((PyObject *)__pyx_v_fnc));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1391
 * def _comp_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst lhs
 *     cdef Fst rhs
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_11_comp_patch_1patch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6pynini_11_comp_patch_1patch = {"patch", (PyCFunction)__pyx_pw_6pynini_11_comp_patch_1patch, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6pynini_11_comp_patch_1patch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg1 = 0;
  PyObject *__pyx_v_arg2 = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("patch (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 2) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 2, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arg1,&__pyx_n_s_arg2,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_arg1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_arg2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("patch", 0, 2, 2, 1); __PYX_ERR(0, 1391, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 2) ? pos_args : 2;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "patch") < 0)) __PYX_ERR(0, 1391, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_arg1 = values[0];
    __pyx_v_arg2 = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("patch", 0, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1391, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynini._comp_patch.patch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_11_comp_patch_patch(__pyx_self, __pyx_v_arg1, __pyx_v_arg2, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_11_comp_patch_patch(PyObject *__pyx_self, PyObject *__pyx_v_arg1, PyObject *__pyx_v_arg2, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  struct __pyx_obj_6pynini___pyx_scope_struct_4__comp_patch *__pyx_cur_scope;
  struct __pyx_obj_6pynini___pyx_scope_struct_4__comp_patch *__pyx_outer_scope;
  struct __pyx_obj_6pynini_Fst *__pyx_v_lhs = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_v_rhs = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  __Pyx_RefNannySetupContext("patch", 0);
  __pyx_outer_scope = (struct __pyx_obj_6pynini___pyx_scope_struct_4__comp_patch *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "pynini.pyx":1394
 *     cdef Fst lhs
 *     cdef Fst rhs
 *     (lhs, rhs) = _compile_or_copy_two_Fsts(arg1, arg2)             # <<<<<<<<<<<<<<
 *     return fnc(lhs, rhs, *args, **kwargs)
 *   return patch
 */
  __pyx_t_1 = __pyx_f_6pynini__compile_or_copy_two_Fsts(__pyx_v_arg1, __pyx_v_arg2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1394, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1394, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1394, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1394, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1394, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_3 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_4), 2) < 0) __PYX_ERR(0, 1394, __pyx_L1_error)
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 1394, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_6pynini_Fst))))) __PYX_ERR(0, 1394, __pyx_L1_error)
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_6pynini_Fst))))) __PYX_ERR(0, 1394, __pyx_L1_error)
  __pyx_v_lhs = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_v_rhs = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pynini.pyx":1395
 *     cdef Fst rhs
 *     (lhs, rhs) = _compile_or_copy_two_Fsts(arg1, arg2)
 *     return fnc(lhs, rhs, *args, **kwargs)             # <<<<<<<<<<<<<<
 *   return patch
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_v_fnc)) { __Pyx_RaiseClosureNameError("fnc"); __PYX_ERR(0, 1395, __pyx_L1_error) }
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_lhs));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_lhs));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_lhs));
  __Pyx_INCREF(((PyObject *)__pyx_v_rhs));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_rhs));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_rhs));
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_v_args); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_cur_scope->__pyx_v_fnc, __pyx_t_3, __pyx_v_kwargs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":1391
 * def _comp_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst lhs
 *     cdef Fst rhs
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynini._comp_patch.patch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_lhs);
  __Pyx_XDECREF((PyObject *)__pyx_v_rhs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1389
 * 
 * 
 * def _comp_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */

static PyObject *__pyx_pf_6pynini_32_comp_patch(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fnc) {
  struct __pyx_obj_6pynini___pyx_scope_struct_4__comp_patch *__pyx_cur_scope;
  PyObject *__pyx_v_patch = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("_comp_patch", 0);
  __pyx_cur_scope = (struct __pyx_obj_6pynini___pyx_scope_struct_4__comp_patch *)__pyx_tp_new_6pynini___pyx_scope_struct_4__comp_patch(__pyx_ptype_6pynini___pyx_scope_struct_4__comp_patch, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6pynini___pyx_scope_struct_4__comp_patch *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1389, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_fnc = __pyx_v_fnc;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fnc);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fnc);

  /* "pynini.pyx":1390
 * 
 * def _comp_patch(fnc):
 *   @functools.wraps(fnc)             # <<<<<<<<<<<<<<
 *   def patch(arg1, arg2, *args, **kwargs):
 *     cdef Fst lhs
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_functools); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_wraps); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_cur_scope->__pyx_v_fnc); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1390, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_cur_scope->__pyx_v_fnc};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1390, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_cur_scope->__pyx_v_fnc};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1390, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1390, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fnc);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fnc);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_cur_scope->__pyx_v_fnc);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1390, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pynini.pyx":1391
 * def _comp_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst lhs
 *     cdef Fst rhs
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6pynini_11_comp_patch_1patch, 0, __pyx_n_s_comp_patch_locals_patch, ((PyObject*)__pyx_cur_scope), __pyx_n_s_pynini, __pyx_d, ((PyObject *)__pyx_codeobj__20)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1390, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1390, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1390, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1390, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1390, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_patch = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pynini.pyx":1396
 *     (lhs, rhs) = _compile_or_copy_two_Fsts(arg1, arg2)
 *     return fnc(lhs, rhs, *args, **kwargs)
 *   return patch             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_patch);
  __pyx_r = __pyx_v_patch;
  goto __pyx_L0;

  /* "pynini.pyx":1389
 * 
 * 
 * def _comp_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynini._comp_patch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_patch);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1406
 * 
 * 
 * def _comp_merge_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_35_comp_merge_patch(PyObject *__pyx_self, PyObject *__pyx_v_fnc); /*proto*/
static PyMethodDef __pyx_mdef_6pynini_35_comp_merge_patch = {"_comp_merge_patch", (PyCFunction)__pyx_pw_6pynini_35_comp_merge_patch, METH_O, 0};
static PyObject *__pyx_pw_6pynini_35_comp_merge_patch(PyObject *__pyx_self, PyObject *__pyx_v_fnc) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_comp_merge_patch (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_34_comp_merge_patch(__pyx_self, ((PyObject *)__pyx_v_fnc));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1408
 * def _comp_merge_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst lhs
 *     cdef Fst rhs
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_17_comp_merge_patch_1patch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6pynini_17_comp_merge_patch_1patch = {"patch", (PyCFunction)__pyx_pw_6pynini_17_comp_merge_patch_1patch, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6pynini_17_comp_merge_patch_1patch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg1 = 0;
  PyObject *__pyx_v_arg2 = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("patch (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 2) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 2, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arg1,&__pyx_n_s_arg2,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_arg1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_arg2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("patch", 0, 2, 2, 1); __PYX_ERR(0, 1408, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 2) ? pos_args : 2;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "patch") < 0)) __PYX_ERR(0, 1408, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_arg1 = values[0];
    __pyx_v_arg2 = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("patch", 0, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1408, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynini._comp_merge_patch.patch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_17_comp_merge_patch_patch(__pyx_self, __pyx_v_arg1, __pyx_v_arg2, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_17_comp_merge_patch_patch(PyObject *__pyx_self, PyObject *__pyx_v_arg1, PyObject *__pyx_v_arg2, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  struct __pyx_obj_6pynini___pyx_scope_struct_5__comp_merge_patch *__pyx_cur_scope;
  struct __pyx_obj_6pynini___pyx_scope_struct_5__comp_merge_patch *__pyx_outer_scope;
  struct __pyx_obj_6pynini_Fst *__pyx_v_lhs = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_v_rhs = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  __Pyx_RefNannySetupContext("patch", 0);
  __pyx_outer_scope = (struct __pyx_obj_6pynini___pyx_scope_struct_5__comp_merge_patch *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "pynini.pyx":1411
 *     cdef Fst lhs
 *     cdef Fst rhs
 *     (lhs, rhs) = _compile_or_copy_two_Fsts(arg1, arg2)             # <<<<<<<<<<<<<<
 *     MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 *                  MERGE_INPUT_AND_OUTPUT_SYMBOLS)
 */
  __pyx_t_1 = __pyx_f_6pynini__compile_or_copy_two_Fsts(__pyx_v_arg1, __pyx_v_arg2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1411, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1411, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1411, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1411, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_3 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_4), 2) < 0) __PYX_ERR(0, 1411, __pyx_L1_error)
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 1411, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_6pynini_Fst))))) __PYX_ERR(0, 1411, __pyx_L1_error)
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_6pynini_Fst))))) __PYX_ERR(0, 1411, __pyx_L1_error)
  __pyx_v_lhs = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_v_rhs = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pynini.pyx":1412
 *     cdef Fst rhs
 *     (lhs, rhs) = _compile_or_copy_two_Fsts(arg1, arg2)
 *     MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),             # <<<<<<<<<<<<<<
 *                  MERGE_INPUT_AND_OUTPUT_SYMBOLS)
 *     return fnc(lhs, rhs, *args, **kwargs)
 */
  if (unlikely(((PyObject *)__pyx_v_lhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mfst");
    __PYX_ERR(0, 1412, __pyx_L1_error)
  }
  if (unlikely(((PyObject *)__pyx_v_rhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mfst");
    __PYX_ERR(0, 1412, __pyx_L1_error)
  }

  /* "pynini.pyx":1413
 *     (lhs, rhs) = _compile_or_copy_two_Fsts(arg1, arg2)
 *     MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 *                  MERGE_INPUT_AND_OUTPUT_SYMBOLS)             # <<<<<<<<<<<<<<
 *     return fnc(lhs, rhs, *args, **kwargs)
 *   return patch
 */
  fst::script::MergeSymbols(__pyx_v_lhs->__pyx_base._mfst.get(), __pyx_v_rhs->__pyx_base._mfst.get(), fst::MERGE_INPUT_AND_OUTPUT_SYMBOLS);

  /* "pynini.pyx":1414
 *     MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 *                  MERGE_INPUT_AND_OUTPUT_SYMBOLS)
 *     return fnc(lhs, rhs, *args, **kwargs)             # <<<<<<<<<<<<<<
 *   return patch
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_v_fnc)) { __Pyx_RaiseClosureNameError("fnc"); __PYX_ERR(0, 1414, __pyx_L1_error) }
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_lhs));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_lhs));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_lhs));
  __Pyx_INCREF(((PyObject *)__pyx_v_rhs));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_rhs));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_rhs));
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_v_args); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_cur_scope->__pyx_v_fnc, __pyx_t_3, __pyx_v_kwargs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":1408
 * def _comp_merge_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst lhs
 *     cdef Fst rhs
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynini._comp_merge_patch.patch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_lhs);
  __Pyx_XDECREF((PyObject *)__pyx_v_rhs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1406
 * 
 * 
 * def _comp_merge_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */

static PyObject *__pyx_pf_6pynini_34_comp_merge_patch(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fnc) {
  struct __pyx_obj_6pynini___pyx_scope_struct_5__comp_merge_patch *__pyx_cur_scope;
  PyObject *__pyx_v_patch = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("_comp_merge_patch", 0);
  __pyx_cur_scope = (struct __pyx_obj_6pynini___pyx_scope_struct_5__comp_merge_patch *)__pyx_tp_new_6pynini___pyx_scope_struct_5__comp_merge_patch(__pyx_ptype_6pynini___pyx_scope_struct_5__comp_merge_patch, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6pynini___pyx_scope_struct_5__comp_merge_patch *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1406, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_fnc = __pyx_v_fnc;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fnc);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fnc);

  /* "pynini.pyx":1407
 * 
 * def _comp_merge_patch(fnc):
 *   @functools.wraps(fnc)             # <<<<<<<<<<<<<<
 *   def patch(arg1, arg2, *args, **kwargs):
 *     cdef Fst lhs
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_functools); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_wraps); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_cur_scope->__pyx_v_fnc); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1407, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_cur_scope->__pyx_v_fnc};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1407, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_cur_scope->__pyx_v_fnc};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1407, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1407, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fnc);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fnc);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_cur_scope->__pyx_v_fnc);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1407, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pynini.pyx":1408
 * def _comp_merge_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst lhs
 *     cdef Fst rhs
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6pynini_17_comp_merge_patch_1patch, 0, __pyx_n_s_comp_merge_patch_locals_patch, ((PyObject*)__pyx_cur_scope), __pyx_n_s_pynini, __pyx_d, ((PyObject *)__pyx_codeobj__22)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1407, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1407, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1407, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1407, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1407, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_patch = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pynini.pyx":1415
 *                  MERGE_INPUT_AND_OUTPUT_SYMBOLS)
 *     return fnc(lhs, rhs, *args, **kwargs)
 *   return patch             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_patch);
  __pyx_r = __pyx_v_patch;
  goto __pyx_L0;

  /* "pynini.pyx":1406
 * 
 * 
 * def _comp_merge_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynini._comp_merge_patch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_patch);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1422
 * 
 * 
 * def replace(root,             # <<<<<<<<<<<<<<
 *             replacements,
 *             call_arc_labeling=b"neither",
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_37replace(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pynini_36replace[] = "\n  replace(root, replacements, call_arc_labeling=\"neither\",\n          return_arc_labeling=\"neither\", epsilon_on_replace=False,\n          return_label=0)\n\n  Constructively replaces arcs in an FST with other FST(s).\n\n  This operation performs the dynamic replacement of arcs in one FST with\n  other FSTs, allowing for the definition of FSTs analogous to RTNs. The output\n  FST is the result of recursively replacing each arc in all input FSTs that\n  matches some \"non-terminal\" with a corresponding FST. More precisely, an arc\n  from state s to state d with nonterminal output label n in an input FST is\n  replaced by redirecting this \"call\" arc to the initial state of a copy of the\n  the replacement FST and then adding \"return\" arcs from each final state of\n  the replacement FST to d in the input FST. If there are cyclic dependencies\n  among the replacement rules, the resulting FST does not have a finite\n  expansion and an exception will be raised.\n\n  Args:\n    root: The root FST.\n    replacements: An iterable containing label/FST pairs. If the iterable\n       implements .items, this is used to extract the pairs.\n    call_arc_labeling: A string indicating which call arc labels should be\n        non-epsilon. One of: \"input\" (default), \"output\", \"both\", \"neither\".\n        This value is set to \"neither\" if epsilon_on_replace is True.\n    return_arc_labeling: A string indicating which return arc labels should be\n        non-epsilon. One of: \"input\", \"output\", \"both\", \"neither\" (default).\n        This value is set to \"neither\" if epsilon_on_replace is True.\n    epsilon_on_replace: Should call and return arcs be epsilon arcs? If True,\n        this effectively overrides call_arc_labeling and return_arc_labeling,\n        setting both to \"neither\".\n    return_label: The integer label for return arcs.\n\n  Returns:\n    A replaced FST.\n\n  Raises:\n    KeyError: Nonterminal symbol not found.\n    FstOpError: Operation fai""led.\n\n  See also: `pdt_replace`.\n  ";
static PyMethodDef __pyx_mdef_6pynini_37replace = {"replace", (PyCFunction)__pyx_pw_6pynini_37replace, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pynini_36replace};
static PyObject *__pyx_pw_6pynini_37replace(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_root = 0;
  PyObject *__pyx_v_replacements = 0;
  PyObject *__pyx_v_call_arc_labeling = 0;
  PyObject *__pyx_v_return_arc_labeling = 0;
  bool __pyx_v_epsilon_on_replace;
  __pyx_t_10basictypes_int64 __pyx_v_return_label;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("replace (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_root,&__pyx_n_s_replacements,&__pyx_n_s_call_arc_labeling,&__pyx_n_s_return_arc_labeling,&__pyx_n_s_epsilon_on_replace,&__pyx_n_s_return_label,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[2] = ((PyObject *)__pyx_n_b_neither);
    values[3] = ((PyObject *)__pyx_n_b_neither);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_root)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_replacements)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("replace", 0, 2, 6, 1); __PYX_ERR(0, 1422, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_call_arc_labeling);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_return_arc_labeling);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_epsilon_on_replace);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_return_label);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "replace") < 0)) __PYX_ERR(0, 1422, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_root = values[0];
    __pyx_v_replacements = values[1];
    __pyx_v_call_arc_labeling = values[2];
    __pyx_v_return_arc_labeling = values[3];
    if (values[4]) {
      __pyx_v_epsilon_on_replace = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_epsilon_on_replace == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1426, __pyx_L3_error)
    } else {

      /* "pynini.pyx":1426
 *             call_arc_labeling=b"neither",
 *             return_arc_labeling=b"neither",
 *             bool epsilon_on_replace=False,             # <<<<<<<<<<<<<<
 *             int64 return_label=0):
 *   """
 */
      __pyx_v_epsilon_on_replace = ((bool)0);
    }
    if (values[5]) {
      __pyx_v_return_label = __Pyx_PyInt_As_int64_t(values[5]); if (unlikely((__pyx_v_return_label == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1427, __pyx_L3_error)
    } else {
      __pyx_v_return_label = ((__pyx_t_10basictypes_int64)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("replace", 0, 2, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1422, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.replace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_36replace(__pyx_self, __pyx_v_root, __pyx_v_replacements, __pyx_v_call_arc_labeling, __pyx_v_return_arc_labeling, __pyx_v_epsilon_on_replace, __pyx_v_return_label);

  /* "pynini.pyx":1422
 * 
 * 
 * def replace(root,             # <<<<<<<<<<<<<<
 *             replacements,
 *             call_arc_labeling=b"neither",
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_36replace(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root, PyObject *__pyx_v_replacements, PyObject *__pyx_v_call_arc_labeling, PyObject *__pyx_v_return_arc_labeling, bool __pyx_v_epsilon_on_replace, __pyx_t_10basictypes_int64 __pyx_v_return_label) {
  struct __pyx_obj_6pynini_Fst *__pyx_v_root_fst = 0;
  std::string __pyx_v_arc_type;
  std::string __pyx_v_nonterm;
  struct __pyx_obj_6pynini_Fst *__pyx_v_replacement = 0;
  std::vector<__pyx_t_15pynini_includes_StringFstClassPair>  __pyx_v_pairs;
  PyObject *__pyx_v_nt = NULL;
  PyObject *__pyx_v_rep = NULL;
  enum fst::ReplaceLabelType __pyx_v_cal;
  enum fst::ReplaceLabelType __pyx_v_ral;
  std::unique_ptr<fst::script::ReplaceOptions>  __pyx_v_opts;
  struct __pyx_obj_6pynini_Fst *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  struct __pyx_opt_args_6pynini__compile_or_copy_Fst __pyx_t_12;
  std::string __pyx_t_13;
  __pyx_t_15pynini_includes_StringFstClassPair __pyx_t_14;
  enum fst::ReplaceLabelType __pyx_t_15;
  __Pyx_RefNannySetupContext("replace", 0);
  __Pyx_INCREF(__pyx_v_replacements);

  /* "pynini.pyx":1470
 *   See also: `pdt_replace`.
 *   """
 *   cdef Fst root_fst = _compile_or_copy_Fst(root)             # <<<<<<<<<<<<<<
 *   cdef string arc_type = root_fst.arc_type()
 *   if hasattr(replacements, "items"):
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_root, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1470, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_root_fst = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":1471
 *   """
 *   cdef Fst root_fst = _compile_or_copy_Fst(root)
 *   cdef string arc_type = root_fst.arc_type()             # <<<<<<<<<<<<<<
 *   if hasattr(replacements, "items"):
 *     replacements = replacements.items()
 */
  if (unlikely(((PyObject *)__pyx_v_root_fst) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "arc_type");
    __PYX_ERR(0, 1471, __pyx_L1_error)
  }
  __pyx_v_arc_type = ((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_root_fst->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.arc_type(((struct __pyx_obj_9pywrapfst__Fst *)__pyx_v_root_fst), 0);

  /* "pynini.pyx":1472
 *   cdef Fst root_fst = _compile_or_copy_Fst(root)
 *   cdef string arc_type = root_fst.arc_type()
 *   if hasattr(replacements, "items"):             # <<<<<<<<<<<<<<
 *     replacements = replacements.items()
 *   # This has the pleasant effect of preventing Python from garbage-collecting
 */
  __pyx_t_2 = __Pyx_HasAttr(__pyx_v_replacements, __pyx_n_s_items); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 1472, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "pynini.pyx":1473
 *   cdef string arc_type = root_fst.arc_type()
 *   if hasattr(replacements, "items"):
 *     replacements = replacements.items()             # <<<<<<<<<<<<<<
 *   # This has the pleasant effect of preventing Python from garbage-collecting
 *   # these FSTs until we're ready.
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_replacements, __pyx_n_s_items); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1473, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1473, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1473, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_replacements, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pynini.pyx":1472
 *   cdef Fst root_fst = _compile_or_copy_Fst(root)
 *   cdef string arc_type = root_fst.arc_type()
 *   if hasattr(replacements, "items"):             # <<<<<<<<<<<<<<
 *     replacements = replacements.items()
 *   # This has the pleasant effect of preventing Python from garbage-collecting
 */
  }

  /* "pynini.pyx":1477
 *   # these FSTs until we're ready.
 *   # TODO(kbg): Is there a better way?
 *   replacements = [(nt, _compile_or_copy_Fst(rep, arc_type)) for             # <<<<<<<<<<<<<<
 *                   (nt, rep) in replacements]
 *   cdef string nonterm
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "pynini.pyx":1478
 *   # TODO(kbg): Is there a better way?
 *   replacements = [(nt, _compile_or_copy_Fst(rep, arc_type)) for
 *                   (nt, rep) in replacements]             # <<<<<<<<<<<<<<
 *   cdef string nonterm
 *   cdef Fst replacement
 */
  if (likely(PyList_CheckExact(__pyx_v_replacements)) || PyTuple_CheckExact(__pyx_v_replacements)) {
    __pyx_t_4 = __pyx_v_replacements; __Pyx_INCREF(__pyx_t_4); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_replacements); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1478, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1478, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1478, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1478, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1478, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1478, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_7(__pyx_t_4);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1478, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {
      PyObject* sequence = __pyx_t_5;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1478, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_8 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_9 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_9);
      #else
      __pyx_t_8 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1478, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1478, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      #endif
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_10 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1478, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_11 = Py_TYPE(__pyx_t_10)->tp_iternext;
      index = 0; __pyx_t_8 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_8)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_8);
      index = 1; __pyx_t_9 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_9)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_9);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_10), 2) < 0) __PYX_ERR(0, 1478, __pyx_L1_error)
      __pyx_t_11 = NULL;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L7_unpacking_done;
      __pyx_L6_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_11 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1478, __pyx_L1_error)
      __pyx_L7_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_nt, __pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_XDECREF_SET(__pyx_v_rep, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "pynini.pyx":1477
 *   # these FSTs until we're ready.
 *   # TODO(kbg): Is there a better way?
 *   replacements = [(nt, _compile_or_copy_Fst(rep, arc_type)) for             # <<<<<<<<<<<<<<
 *                   (nt, rep) in replacements]
 *   cdef string nonterm
 */
    __pyx_t_5 = __pyx_convert_PyUnicode_string_to_py_std__in_string(__pyx_v_arc_type); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1477, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_12.__pyx_n = 1;
    __pyx_t_12.arc_type = __pyx_t_5;
    __pyx_t_9 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_rep, &__pyx_t_12)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1477, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1477, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_nt);
    __Pyx_GIVEREF(__pyx_v_nt);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_nt);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_9);
    __pyx_t_9 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 1477, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF_SET(__pyx_v_replacements, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":1482
 *   cdef Fst replacement
 *   cdef vector[StringFstClassPair] pairs
 *   pairs.reserve(len(replacements))             # <<<<<<<<<<<<<<
 *   for (nt, rep) in replacements:
 *     nonterm = tostring(nt)
 */
  __pyx_t_6 = PyObject_Length(__pyx_v_replacements); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1482, __pyx_L1_error)
  __pyx_v_pairs.reserve(__pyx_t_6);

  /* "pynini.pyx":1483
 *   cdef vector[StringFstClassPair] pairs
 *   pairs.reserve(len(replacements))
 *   for (nt, rep) in replacements:             # <<<<<<<<<<<<<<
 *     nonterm = tostring(nt)
 *     replacement = rep
 */
  if (likely(PyList_CheckExact(__pyx_v_replacements)) || PyTuple_CheckExact(__pyx_v_replacements)) {
    __pyx_t_1 = __pyx_v_replacements; __Pyx_INCREF(__pyx_t_1); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_replacements); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1483, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1483, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1483, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1483, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1483, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1483, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_7(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1483, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1483, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_9 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_9);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1483, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_9 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1483, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1483, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_11 = Py_TYPE(__pyx_t_8)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_11(__pyx_t_8); if (unlikely(!__pyx_t_5)) goto __pyx_L10_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_9 = __pyx_t_11(__pyx_t_8); if (unlikely(!__pyx_t_9)) goto __pyx_L10_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_9);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_8), 2) < 0) __PYX_ERR(0, 1483, __pyx_L1_error)
      __pyx_t_11 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L11_unpacking_done;
      __pyx_L10_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_11 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1483, __pyx_L1_error)
      __pyx_L11_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_nt, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_rep, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "pynini.pyx":1484
 *   pairs.reserve(len(replacements))
 *   for (nt, rep) in replacements:
 *     nonterm = tostring(nt)             # <<<<<<<<<<<<<<
 *     replacement = rep
 *     pairs.push_back(StringFstClassPair(nonterm, replacement._fst.get()))
 */
    __pyx_t_13 = __pyx_f_9pywrapfst_tostring(__pyx_v_nt, NULL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1484, __pyx_L1_error)
    __pyx_v_nonterm = __pyx_t_13;

    /* "pynini.pyx":1485
 *   for (nt, rep) in replacements:
 *     nonterm = tostring(nt)
 *     replacement = rep             # <<<<<<<<<<<<<<
 *     pairs.push_back(StringFstClassPair(nonterm, replacement._fst.get()))
 *   cdef ReplaceLabelType cal = _get_replace_label_type(
 */
    if (!(likely(((__pyx_v_rep) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_rep, __pyx_ptype_6pynini_Fst))))) __PYX_ERR(0, 1485, __pyx_L1_error)
    __pyx_t_4 = __pyx_v_rep;
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_XDECREF_SET(__pyx_v_replacement, ((struct __pyx_obj_6pynini_Fst *)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "pynini.pyx":1486
 *     nonterm = tostring(nt)
 *     replacement = rep
 *     pairs.push_back(StringFstClassPair(nonterm, replacement._fst.get()))             # <<<<<<<<<<<<<<
 *   cdef ReplaceLabelType cal = _get_replace_label_type(
 *       tostring(call_arc_labeling), epsilon_on_replace)
 */
    if (unlikely(((PyObject *)__pyx_v_replacement) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_fst");
      __PYX_ERR(0, 1486, __pyx_L1_error)
    }
    try {
      __pyx_t_14 = __pyx_t_15pynini_includes_StringFstClassPair(__pyx_v_nonterm, __pyx_v_replacement->__pyx_base.__pyx_base._fst.get());
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1486, __pyx_L1_error)
    }
    try {
      __pyx_v_pairs.push_back(__pyx_t_14);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1486, __pyx_L1_error)
    }

    /* "pynini.pyx":1483
 *   cdef vector[StringFstClassPair] pairs
 *   pairs.reserve(len(replacements))
 *   for (nt, rep) in replacements:             # <<<<<<<<<<<<<<
 *     nonterm = tostring(nt)
 *     replacement = rep
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":1488
 *     pairs.push_back(StringFstClassPair(nonterm, replacement._fst.get()))
 *   cdef ReplaceLabelType cal = _get_replace_label_type(
 *       tostring(call_arc_labeling), epsilon_on_replace)             # <<<<<<<<<<<<<<
 *   cdef ReplaceLabelType ral = _get_replace_label_type(
 *       tostring(return_arc_labeling), epsilon_on_replace)
 */
  __pyx_t_13 = __pyx_f_9pywrapfst_tostring(__pyx_v_call_arc_labeling, NULL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1488, __pyx_L1_error)

  /* "pynini.pyx":1487
 *     replacement = rep
 *     pairs.push_back(StringFstClassPair(nonterm, replacement._fst.get()))
 *   cdef ReplaceLabelType cal = _get_replace_label_type(             # <<<<<<<<<<<<<<
 *       tostring(call_arc_labeling), epsilon_on_replace)
 *   cdef ReplaceLabelType ral = _get_replace_label_type(
 */
  __pyx_t_15 = __pyx_f_9pywrapfst__get_replace_label_type(__pyx_t_13, __pyx_v_epsilon_on_replace); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1487, __pyx_L1_error)
  __pyx_v_cal = __pyx_t_15;

  /* "pynini.pyx":1490
 *       tostring(call_arc_labeling), epsilon_on_replace)
 *   cdef ReplaceLabelType ral = _get_replace_label_type(
 *       tostring(return_arc_labeling), epsilon_on_replace)             # <<<<<<<<<<<<<<
 *   cdef unique_ptr[ReplaceOptions] opts
 *   opts.reset(new ReplaceOptions(-1, cal, ral, return_label))
 */
  __pyx_t_13 = __pyx_f_9pywrapfst_tostring(__pyx_v_return_arc_labeling, NULL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1490, __pyx_L1_error)

  /* "pynini.pyx":1489
 *   cdef ReplaceLabelType cal = _get_replace_label_type(
 *       tostring(call_arc_labeling), epsilon_on_replace)
 *   cdef ReplaceLabelType ral = _get_replace_label_type(             # <<<<<<<<<<<<<<
 *       tostring(return_arc_labeling), epsilon_on_replace)
 *   cdef unique_ptr[ReplaceOptions] opts
 */
  __pyx_t_15 = __pyx_f_9pywrapfst__get_replace_label_type(__pyx_t_13, __pyx_v_epsilon_on_replace); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1489, __pyx_L1_error)
  __pyx_v_ral = __pyx_t_15;

  /* "pynini.pyx":1492
 *       tostring(return_arc_labeling), epsilon_on_replace)
 *   cdef unique_ptr[ReplaceOptions] opts
 *   opts.reset(new ReplaceOptions(-1, cal, ral, return_label))             # <<<<<<<<<<<<<<
 *   cdef Fst result = Fst(arc_type)
 *   PyniniReplace(deref(root_fst._fst), pairs, result._mfst.get(), deref(opts))
 */
  __pyx_v_opts.reset(new fst::script::ReplaceOptions(-1L, __pyx_v_cal, __pyx_v_ral, __pyx_v_return_label));

  /* "pynini.pyx":1493
 *   cdef unique_ptr[ReplaceOptions] opts
 *   opts.reset(new ReplaceOptions(-1, cal, ral, return_label))
 *   cdef Fst result = Fst(arc_type)             # <<<<<<<<<<<<<<
 *   PyniniReplace(deref(root_fst._fst), pairs, result._mfst.get(), deref(opts))
 *   result._check_mutating_imethod()
 */
  __pyx_t_1 = __pyx_convert_PyUnicode_string_to_py_std__in_string(__pyx_v_arc_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_result = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pynini.pyx":1494
 *   opts.reset(new ReplaceOptions(-1, cal, ral, return_label))
 *   cdef Fst result = Fst(arc_type)
 *   PyniniReplace(deref(root_fst._fst), pairs, result._mfst.get(), deref(opts))             # <<<<<<<<<<<<<<
 *   result._check_mutating_imethod()
 *   return result
 */
  if (unlikely(((PyObject *)__pyx_v_root_fst) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_fst");
    __PYX_ERR(0, 1494, __pyx_L1_error)
  }
  fst::script::PyniniReplace((*__pyx_v_root_fst->__pyx_base.__pyx_base._fst), __pyx_v_pairs, __pyx_v_result->__pyx_base._mfst.get(), (*__pyx_v_opts));

  /* "pynini.pyx":1495
 *   cdef Fst result = Fst(arc_type)
 *   PyniniReplace(deref(root_fst._fst), pairs, result._mfst.get(), deref(opts))
 *   result._check_mutating_imethod()             # <<<<<<<<<<<<<<
 *   return result
 * 
 */
  ((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_result->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base._check_mutating_imethod(((struct __pyx_obj_9pywrapfst__MutableFst *)__pyx_v_result)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1495, __pyx_L1_error)

  /* "pynini.pyx":1496
 *   PyniniReplace(deref(root_fst._fst), pairs, result._mfst.get(), deref(opts))
 *   result._check_mutating_imethod()
 *   return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "pynini.pyx":1422
 * 
 * 
 * def replace(root,             # <<<<<<<<<<<<<<
 *             replacements,
 *             call_arc_labeling=b"neither",
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("pynini.replace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_root_fst);
  __Pyx_XDECREF((PyObject *)__pyx_v_replacement);
  __Pyx_XDECREF(__pyx_v_nt);
  __Pyx_XDECREF(__pyx_v_rep);
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_replacements);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1499
 * 
 * 
 * def union(*args):             # <<<<<<<<<<<<<<
 *   """
 *   union(*args)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_39union(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pynini_38union[] = "\n  union(*args)\n\n  Computes the union (sum) of two or more FSTs.\n\n  This operation computes the union (sum) of two FSTs. If A transduces string\n  x to y with weight a and B transduces string w to v with weight b, then their\n  union transduces x to y with weight a and w to v with weight b.\n\n  Args:\n   *args: Two or more input FSTs.\n\n  Returns:\n    An FST.\n  ";
static PyMethodDef __pyx_mdef_6pynini_39union = {"union", (PyCFunction)__pyx_pw_6pynini_39union, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pynini_38union};
static PyObject *__pyx_pw_6pynini_39union(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("union (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "union", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_6pynini_38union(__pyx_self, __pyx_v_args);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_38union(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_args) {
  PyObject *__pyx_v_first = NULL;
  PyObject *__pyx_v_rest = NULL;
  struct __pyx_obj_6pynini_Fst *__pyx_v_lhs = 0;
  PyObject *__pyx_v_rhs = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  __Pyx_RefNannySetupContext("union", 0);

  /* "pynini.pyx":1515
 *     An FST.
 *   """
 *   (first, *rest) = args             # <<<<<<<<<<<<<<
 *   if len(args) < 1:
 *     raise FstArgError("Expected at least 2 positional arguments "
 */
  {
    Py_ssize_t index = -1;
    PyObject** temps[2] = {&__pyx_t_1};
    __pyx_t_2 = PyObject_GetIter(__pyx_v_args); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1515, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = Py_TYPE(__pyx_t_2)->tp_iternext;
    for (index=0; index < 1; index++) {
      PyObject* item = __pyx_t_3(__pyx_t_2); if (unlikely(!item)) goto __pyx_L3_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 1515, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_t_4 = PySequence_List(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_first = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_rest = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pynini.pyx":1516
 *   """
 *   (first, *rest) = args
 *   if len(args) < 1:             # <<<<<<<<<<<<<<
 *     raise FstArgError("Expected at least 2 positional arguments "
 *                          "({} given)".format(len(rest) + 1))
 */
  __pyx_t_5 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1516, __pyx_L1_error)
  __pyx_t_6 = ((__pyx_t_5 < 1) != 0);
  if (unlikely(__pyx_t_6)) {

    /* "pynini.pyx":1517
 *   (first, *rest) = args
 *   if len(args) < 1:
 *     raise FstArgError("Expected at least 2 positional arguments "             # <<<<<<<<<<<<<<
 *                          "({} given)".format(len(rest) + 1))
 *   cdef Fst lhs = _compile_or_copy_Fst(first)
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstArgError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);

    /* "pynini.pyx":1518
 *   if len(args) < 1:
 *     raise FstArgError("Expected at least 2 positional arguments "
 *                          "({} given)".format(len(rest) + 1))             # <<<<<<<<<<<<<<
 *   cdef Fst lhs = _compile_or_copy_Fst(first)
 *   for rhs in rest:
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Expected_at_least_2_positional_a, __pyx_n_s_format); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1518, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = PyObject_Length(__pyx_v_rest); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1518, __pyx_L1_error)
    __pyx_t_8 = PyInt_FromSsize_t((__pyx_t_5 + 1)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1518, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    if (!__pyx_t_9) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1518, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_8};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1518, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_8};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1518, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      {
        __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1518, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9); __pyx_t_9 = NULL;
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_t_8);
        __pyx_t_8 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_10, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1518, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1517, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_2};
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1517, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_2};
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1517, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else
      #endif
      {
        __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1517, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_7); __pyx_t_7 = NULL;
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_10, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1517, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 1517, __pyx_L1_error)

    /* "pynini.pyx":1516
 *   """
 *   (first, *rest) = args
 *   if len(args) < 1:             # <<<<<<<<<<<<<<
 *     raise FstArgError("Expected at least 2 positional arguments "
 *                          "({} given)".format(len(rest) + 1))
 */
  }

  /* "pynini.pyx":1519
 *     raise FstArgError("Expected at least 2 positional arguments "
 *                          "({} given)".format(len(rest) + 1))
 *   cdef Fst lhs = _compile_or_copy_Fst(first)             # <<<<<<<<<<<<<<
 *   for rhs in rest:
 *     lhs.union(rhs)
 */
  __pyx_t_4 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_first, NULL)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_lhs = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pynini.pyx":1520
 *                          "({} given)".format(len(rest) + 1))
 *   cdef Fst lhs = _compile_or_copy_Fst(first)
 *   for rhs in rest:             # <<<<<<<<<<<<<<
 *     lhs.union(rhs)
 *   return lhs
 */
  if (likely(PyList_CheckExact(__pyx_v_rest)) || PyTuple_CheckExact(__pyx_v_rest)) {
    __pyx_t_4 = __pyx_v_rest; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_11 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_rest); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1520, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_11 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1520, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_11)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1520, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1520, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1520, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1520, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_11(__pyx_t_4);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1520, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_rhs, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pynini.pyx":1521
 *   cdef Fst lhs = _compile_or_copy_Fst(first)
 *   for rhs in rest:
 *     lhs.union(rhs)             # <<<<<<<<<<<<<<
 *   return lhs
 * 
 */
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_lhs), __pyx_n_s_union); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1521, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_10);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_10, function);
      }
    }
    if (!__pyx_t_2) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_v_rhs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1521, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_10)) {
        PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_rhs};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_10, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1521, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_10)) {
        PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_rhs};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_10, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1521, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1521, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2); __pyx_t_2 = NULL;
        __Pyx_INCREF(__pyx_v_rhs);
        __Pyx_GIVEREF(__pyx_v_rhs);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v_rhs);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1521, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pynini.pyx":1520
 *                          "({} given)".format(len(rest) + 1))
 *   cdef Fst lhs = _compile_or_copy_Fst(first)
 *   for rhs in rest:             # <<<<<<<<<<<<<<
 *     lhs.union(rhs)
 *   return lhs
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pynini.pyx":1522
 *   for rhs in rest:
 *     lhs.union(rhs)
 *   return lhs             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_lhs));
  __pyx_r = ((PyObject *)__pyx_v_lhs);
  goto __pyx_L0;

  /* "pynini.pyx":1499
 * 
 * 
 * def union(*args):             # <<<<<<<<<<<<<<
 *   """
 *   union(*args)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("pynini.union", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_first);
  __Pyx_XDECREF(__pyx_v_rest);
  __Pyx_XDECREF((PyObject *)__pyx_v_lhs);
  __Pyx_XDECREF(__pyx_v_rhs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1546
 *   cdef vector[pair[int64, int64]] _parens
 * 
 *   def __repr__(self):             # <<<<<<<<<<<<<<
 *     return "<PdtParentheses at 0x{:x}>".format(id(self))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_14PdtParentheses_1__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pynini_14PdtParentheses_1__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_14PdtParentheses___repr__(((struct __pyx_obj_6pynini_PdtParentheses *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_14PdtParentheses___repr__(struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "pynini.pyx":1547
 * 
 *   def __repr__(self):
 *     return "<PdtParentheses at 0x{:x}>".format(id(self))             # <<<<<<<<<<<<<<
 * 
 *   def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_PdtParentheses_at_0x_x, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1547, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_id, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1547, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1547, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1547, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1547, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1547, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1547, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":1546
 *   cdef vector[pair[int64, int64]] _parens
 * 
 *   def __repr__(self):             # <<<<<<<<<<<<<<
 *     return "<PdtParentheses at 0x{:x}>".format(id(self))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynini.PdtParentheses.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1549
 *     return "<PdtParentheses at 0x{:x}>".format(id(self))
 * 
 *   def __len__(self):             # <<<<<<<<<<<<<<
 *     return self._parens.size()
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_6pynini_14PdtParentheses_3__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_6pynini_14PdtParentheses_3__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_14PdtParentheses_2__len__(((struct __pyx_obj_6pynini_PdtParentheses *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_6pynini_14PdtParentheses_2__len__(struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "pynini.pyx":1550
 * 
 *   def __len__(self):
 *     return self._parens.size()             # <<<<<<<<<<<<<<
 * 
 *   def __iter__(self):
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_parens");
    __PYX_ERR(0, 1550, __pyx_L1_error)
  }
  __pyx_r = __pyx_v_self->_parens.size();
  goto __pyx_L0;

  /* "pynini.pyx":1549
 *     return "<PdtParentheses at 0x{:x}>".format(id(self))
 * 
 *   def __len__(self):             # <<<<<<<<<<<<<<
 *     return self._parens.size()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pynini.PdtParentheses.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6pynini_14PdtParentheses_6generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "pynini.pyx":1552
 *     return self._parens.size()
 * 
 *   def __iter__(self):             # <<<<<<<<<<<<<<
 *     cdef size_t i = 0
 *     for i in range(self._parens.size()):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_14PdtParentheses_5__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pynini_14PdtParentheses_5__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_14PdtParentheses_4__iter__(((struct __pyx_obj_6pynini_PdtParentheses *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_14PdtParentheses_4__iter__(struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_self) {
  struct __pyx_obj_6pynini___pyx_scope_struct_6___iter__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);
  __pyx_cur_scope = (struct __pyx_obj_6pynini___pyx_scope_struct_6___iter__ *)__pyx_tp_new_6pynini___pyx_scope_struct_6___iter__(__pyx_ptype_6pynini___pyx_scope_struct_6___iter__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6pynini___pyx_scope_struct_6___iter__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1552, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6pynini_14PdtParentheses_6generator, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter, __pyx_n_s_PdtParentheses___iter, __pyx_n_s_pynini); if (unlikely(!gen)) __PYX_ERR(0, 1552, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pynini.PdtParentheses.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6pynini_14PdtParentheses_6generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6pynini___pyx_scope_struct_6___iter__ *__pyx_cur_scope = ((struct __pyx_obj_6pynini___pyx_scope_struct_6___iter__ *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  std::vector<std::pair<__pyx_t_10basictypes_int64,__pyx_t_10basictypes_int64> > ::size_type __pyx_t_1;
  std::vector<std::pair<__pyx_t_10basictypes_int64,__pyx_t_10basictypes_int64> > ::size_type __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1552, __pyx_L1_error)

  /* "pynini.pyx":1553
 * 
 *   def __iter__(self):
 *     cdef size_t i = 0             # <<<<<<<<<<<<<<
 *     for i in range(self._parens.size()):
 *       yield (self._parens[i].first, self._parens[i].second)
 */
  __pyx_cur_scope->__pyx_v_i = 0;

  /* "pynini.pyx":1554
 *   def __iter__(self):
 *     cdef size_t i = 0
 *     for i in range(self._parens.size()):             # <<<<<<<<<<<<<<
 *       yield (self._parens[i].first, self._parens[i].second)
 * 
 */
  if (unlikely(((PyObject *)__pyx_cur_scope->__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_parens");
    __PYX_ERR(0, 1554, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_cur_scope->__pyx_v_self->_parens.size();
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_cur_scope->__pyx_v_i = __pyx_t_3;

    /* "pynini.pyx":1555
 *     cdef size_t i = 0
 *     for i in range(self._parens.size()):
 *       yield (self._parens[i].first, self._parens[i].second)             # <<<<<<<<<<<<<<
 * 
 *   cpdef PdtParentheses copy(self):
 */
    if (unlikely(((PyObject *)__pyx_cur_scope->__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_parens");
      __PYX_ERR(0, 1555, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyInt_From_int64_t((__pyx_cur_scope->__pyx_v_self->_parens[__pyx_cur_scope->__pyx_v_i]).first); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1555, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(((PyObject *)__pyx_cur_scope->__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_parens");
      __PYX_ERR(0, 1555, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyInt_From_int64_t((__pyx_cur_scope->__pyx_v_self->_parens[__pyx_cur_scope->__pyx_v_i]).second); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1555, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1555, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1555, __pyx_L1_error)
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "pynini.pyx":1552
 *     return self._parens.size()
 * 
 *   def __iter__(self):             # <<<<<<<<<<<<<<
 *     cdef size_t i = 0
 *     for i in range(self._parens.size()):
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1557
 *       yield (self._parens[i].first, self._parens[i].second)
 * 
 *   cpdef PdtParentheses copy(self):             # <<<<<<<<<<<<<<
 *     """
 *     copy(self)
 */

static PyObject *__pyx_pw_6pynini_14PdtParentheses_8copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static struct __pyx_obj_6pynini_PdtParentheses *__pyx_f_6pynini_14PdtParentheses_copy(struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_self, int __pyx_skip_dispatch) {
  struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_result = 0;
  struct __pyx_obj_6pynini_PdtParentheses *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  std::vector<std::pair<__pyx_t_10basictypes_int64,__pyx_t_10basictypes_int64> >  __pyx_t_5;
  __Pyx_RefNannySetupContext("copy", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_copy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1557, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_14PdtParentheses_8copy)) {
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1557, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1557, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_6pynini_PdtParentheses))))) __PYX_ERR(0, 1557, __pyx_L1_error)
      __pyx_r = ((struct __pyx_obj_6pynini_PdtParentheses *)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":1566
 *       A deep copy of the PdtParentheses object.
 *     """
 *     cpdef PdtParentheses result = PdtParentheses.__new__(PdtParentheses)             # <<<<<<<<<<<<<<
 *     result._parens = self._parens
 *     return result
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_6pynini_PdtParentheses(((PyTypeObject *)__pyx_ptype_6pynini_PdtParentheses), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1566, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_result = ((struct __pyx_obj_6pynini_PdtParentheses *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":1567
 *     """
 *     cpdef PdtParentheses result = PdtParentheses.__new__(PdtParentheses)
 *     result._parens = self._parens             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_parens");
    __PYX_ERR(0, 1567, __pyx_L1_error)
  }
  __pyx_t_5 = __pyx_v_self->_parens;
  if (unlikely(((PyObject *)__pyx_v_result) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_parens");
    __PYX_ERR(0, 1567, __pyx_L1_error)
  }
  __pyx_v_result->_parens = __pyx_t_5;

  /* "pynini.pyx":1568
 *     cpdef PdtParentheses result = PdtParentheses.__new__(PdtParentheses)
 *     result._parens = self._parens
 *     return result             # <<<<<<<<<<<<<<
 * 
 *   cpdef void add_pair(self, int64 push, int64 pop):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "pynini.pyx":1557
 *       yield (self._parens[i].first, self._parens[i].second)
 * 
 *   cpdef PdtParentheses copy(self):             # <<<<<<<<<<<<<<
 *     """
 *     copy(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynini.PdtParentheses.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_14PdtParentheses_8copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pynini_14PdtParentheses_7copy[] = "\n    copy(self)\n\n    Makes a copy of this PdtParentheses object.\n\n    Returns:\n      A deep copy of the PdtParentheses object.\n    ";
static PyObject *__pyx_pw_6pynini_14PdtParentheses_8copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_14PdtParentheses_7copy(((struct __pyx_obj_6pynini_PdtParentheses *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_14PdtParentheses_7copy(struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("copy", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini_14PdtParentheses_copy(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1557, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.PdtParentheses.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1570
 *     return result
 * 
 *   cpdef void add_pair(self, int64 push, int64 pop):             # <<<<<<<<<<<<<<
 *     """
 *     add_pair(self, push, pop)
 */

static PyObject *__pyx_pw_6pynini_14PdtParentheses_10add_pair(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static void __pyx_f_6pynini_14PdtParentheses_add_pair(struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_self, __pyx_t_10basictypes_int64 __pyx_v_push, __pyx_t_10basictypes_int64 __pyx_v_pop, int __pyx_skip_dispatch) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  std::pair<__pyx_t_10basictypes_int64,__pyx_t_10basictypes_int64>  __pyx_t_9;
  __Pyx_RefNannySetupContext("add_pair", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1570, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_14PdtParentheses_10add_pair)) {
      __pyx_t_3 = __Pyx_PyInt_From_int64_t(__pyx_v_push); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1570, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyInt_From_int64_t(__pyx_v_pop); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1570, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_5 = __pyx_t_1; __pyx_t_6 = NULL;
      __pyx_t_7 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_7 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_3, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1570, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_3, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1570, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1570, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (__pyx_t_6) {
          __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_4);
        __pyx_t_3 = 0;
        __pyx_t_4 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1570, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":1580
 *       pop: An arc label to be interpreted as a "pop" operation.
 *     """
 *     self._parens.push_back(pair[int64, int64](push, pop))             # <<<<<<<<<<<<<<
 * 
 *   @classmethod
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_parens");
    __PYX_ERR(0, 1580, __pyx_L1_error)
  }
  try {
    __pyx_t_9 = std::pair<__pyx_t_10basictypes_int64,__pyx_t_10basictypes_int64> (__pyx_v_push, __pyx_v_pop);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1580, __pyx_L1_error)
  }
  try {
    __pyx_v_self->_parens.push_back(__pyx_t_9);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1580, __pyx_L1_error)
  }

  /* "pynini.pyx":1570
 *     return result
 * 
 *   cpdef void add_pair(self, int64 push, int64 pop):             # <<<<<<<<<<<<<<
 *     """
 *     add_pair(self, push, pop)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_WriteUnraisable("pynini.PdtParentheses.add_pair", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_14PdtParentheses_10add_pair(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pynini_14PdtParentheses_9add_pair[] = "\n    add_pair(self, push, pop)\n\n    Adds a pair of parentheses to the set.\n\n    Args:\n      push: An arc label to be interpreted as a \"push\" operation.\n      pop: An arc label to be interpreted as a \"pop\" operation.\n    ";
static PyObject *__pyx_pw_6pynini_14PdtParentheses_10add_pair(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_10basictypes_int64 __pyx_v_push;
  __pyx_t_10basictypes_int64 __pyx_v_pop;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_pair (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_push,&__pyx_n_s_pop,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_push)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pop)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_pair", 1, 2, 2, 1); __PYX_ERR(0, 1570, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_pair") < 0)) __PYX_ERR(0, 1570, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_push = __Pyx_PyInt_As_int64_t(values[0]); if (unlikely((__pyx_v_push == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1570, __pyx_L3_error)
    __pyx_v_pop = __Pyx_PyInt_As_int64_t(values[1]); if (unlikely((__pyx_v_pop == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1570, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_pair", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1570, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.PdtParentheses.add_pair", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_14PdtParentheses_9add_pair(((struct __pyx_obj_6pynini_PdtParentheses *)__pyx_v_self), __pyx_v_push, __pyx_v_pop);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_14PdtParentheses_9add_pair(struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_self, __pyx_t_10basictypes_int64 __pyx_v_push, __pyx_t_10basictypes_int64 __pyx_v_pop) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("add_pair", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_f_6pynini_14PdtParentheses_add_pair(__pyx_v_self, __pyx_v_push, __pyx_v_pop, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.PdtParentheses.add_pair", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1583
 * 
 *   @classmethod
 *   def read(cls, filename):             # <<<<<<<<<<<<<<
 *     """
 *     PdtParentheses.read(filename)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_14PdtParentheses_12read(PyObject *__pyx_v_cls, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_6pynini_14PdtParentheses_11read[] = "\n    PdtParentheses.read(filename)\n\n    Reads parentheses pairs from a text file.\n\n    This class method creates a new PdtParentheses object from a pairs of\n    integer labels in a text file.\n\n    Args:\n      filename: The string location of the input file.\n\n    Returns:\n      A new PdtParentheses instance.\n\n    Raises:\n      FstIOError: Read failed.\n    ";
static PyObject *__pyx_pw_6pynini_14PdtParentheses_12read(PyObject *__pyx_v_cls, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_14PdtParentheses_11read(((PyTypeObject*)__pyx_v_cls), ((PyObject *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_14PdtParentheses_11read(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_filename) {
  struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("read", 0);

  /* "pynini.pyx":1601
 *       FstIOError: Read failed.
 *     """
 *     cdef PdtParentheses result = PdtParentheses.__new__(PdtParentheses)             # <<<<<<<<<<<<<<
 *     if not ReadLabelPairs[int64](tostring(filename), addr(result._parens),
 *                                  False):
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_6pynini_PdtParentheses(((PyTypeObject *)__pyx_ptype_6pynini_PdtParentheses), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1601, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_result = ((struct __pyx_obj_6pynini_PdtParentheses *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":1602
 *     """
 *     cdef PdtParentheses result = PdtParentheses.__new__(PdtParentheses)
 *     if not ReadLabelPairs[int64](tostring(filename), addr(result._parens),             # <<<<<<<<<<<<<<
 *                                  False):
 *       raise FstIOError("Read failed: {!r}".format(filename))
 */
  __pyx_t_2 = __pyx_f_9pywrapfst_tostring(__pyx_v_filename, NULL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1602, __pyx_L1_error)
  if (unlikely(((PyObject *)__pyx_v_result) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_parens");
    __PYX_ERR(0, 1602, __pyx_L1_error)
  }

  /* "pynini.pyx":1603
 *     cdef PdtParentheses result = PdtParentheses.__new__(PdtParentheses)
 *     if not ReadLabelPairs[int64](tostring(filename), addr(result._parens),
 *                                  False):             # <<<<<<<<<<<<<<
 *       raise FstIOError("Read failed: {!r}".format(filename))
 *     return result
 */
  __pyx_t_3 = ((!(fst::ReadLabelPairs<__pyx_t_10basictypes_int64>(__pyx_t_2, (&__pyx_v_result->_parens), 0) != 0)) != 0);

  /* "pynini.pyx":1602
 *     """
 *     cdef PdtParentheses result = PdtParentheses.__new__(PdtParentheses)
 *     if not ReadLabelPairs[int64](tostring(filename), addr(result._parens),             # <<<<<<<<<<<<<<
 *                                  False):
 *       raise FstIOError("Read failed: {!r}".format(filename))
 */
  if (unlikely(__pyx_t_3)) {

    /* "pynini.pyx":1604
 *     if not ReadLabelPairs[int64](tostring(filename), addr(result._parens),
 *                                  False):
 *       raise FstIOError("Read failed: {!r}".format(filename))             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstIOError); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1604, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Read_failed_r, __pyx_n_s_format); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1604, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_filename); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1604, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_v_filename};
        __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1604, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_5);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_v_filename};
        __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1604, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_5);
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1604, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
        __Pyx_INCREF(__pyx_v_filename);
        __Pyx_GIVEREF(__pyx_v_filename);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_v_filename);
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1604, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1604, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_5};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1604, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_5};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1604, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1604, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1604, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 1604, __pyx_L1_error)

    /* "pynini.pyx":1602
 *     """
 *     cdef PdtParentheses result = PdtParentheses.__new__(PdtParentheses)
 *     if not ReadLabelPairs[int64](tostring(filename), addr(result._parens),             # <<<<<<<<<<<<<<
 *                                  False):
 *       raise FstIOError("Read failed: {!r}".format(filename))
 */
  }

  /* "pynini.pyx":1605
 *                                  False):
 *       raise FstIOError("Read failed: {!r}".format(filename))
 *     return result             # <<<<<<<<<<<<<<
 * 
 *   cpdef void write(self, filename) except *:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "pynini.pyx":1583
 * 
 *   @classmethod
 *   def read(cls, filename):             # <<<<<<<<<<<<<<
 *     """
 *     PdtParentheses.read(filename)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pynini.PdtParentheses.read", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1607
 *     return result
 * 
 *   cpdef void write(self, filename) except *:             # <<<<<<<<<<<<<<
 *     """
 *     write(self, filename)
 */

static PyObject *__pyx_pw_6pynini_14PdtParentheses_14write(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static void __pyx_f_6pynini_14PdtParentheses_write(struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_self, PyObject *__pyx_v_filename, int __pyx_skip_dispatch) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  std::string __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("write", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_write); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1607, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_14PdtParentheses_14write)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_filename); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1607, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_filename};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1607, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_filename};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1607, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        {
          __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1607, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
          __Pyx_INCREF(__pyx_v_filename);
          __Pyx_GIVEREF(__pyx_v_filename);
          PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_filename);
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1607, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":1621
 *       FstIOError: Write failed.
 *     """
 *     if not WriteLabelPairs[int64](tostring(filename), self._parens):             # <<<<<<<<<<<<<<
 *       raise FstIOError("Write failed: {!r}".format(filename))
 * 
 */
  __pyx_t_6 = __pyx_f_9pywrapfst_tostring(__pyx_v_filename, NULL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1621, __pyx_L1_error)
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_parens");
    __PYX_ERR(0, 1621, __pyx_L1_error)
  }
  __pyx_t_7 = ((!(fst::WriteLabelPairs<__pyx_t_10basictypes_int64>(__pyx_t_6, __pyx_v_self->_parens) != 0)) != 0);
  if (unlikely(__pyx_t_7)) {

    /* "pynini.pyx":1622
 *     """
 *     if not WriteLabelPairs[int64](tostring(filename), self._parens):
 *       raise FstIOError("Write failed: {!r}".format(filename))             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstIOError); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1622, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Write_failed_r, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1622, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_filename); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1622, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_filename};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1622, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_filename};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1622, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1622, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(__pyx_v_filename);
        __Pyx_GIVEREF(__pyx_v_filename);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_v_filename);
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1622, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1622, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1622, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1622, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1622, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1622, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 1622, __pyx_L1_error)

    /* "pynini.pyx":1621
 *       FstIOError: Write failed.
 *     """
 *     if not WriteLabelPairs[int64](tostring(filename), self._parens):             # <<<<<<<<<<<<<<
 *       raise FstIOError("Write failed: {!r}".format(filename))
 * 
 */
  }

  /* "pynini.pyx":1607
 *     return result
 * 
 *   cpdef void write(self, filename) except *:             # <<<<<<<<<<<<<<
 *     """
 *     write(self, filename)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pynini.PdtParentheses.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_14PdtParentheses_14write(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_6pynini_14PdtParentheses_13write[] = "\n    write(self, filename)\n\n    Writes parentheses pairs to text file.\n\n    This method writes the PdtParentheses object to a text file.\n\n    Args:\n      filename: The string location of the output file.\n\n    Raises:\n      FstIOError: Write failed.\n    ";
static PyObject *__pyx_pw_6pynini_14PdtParentheses_14write(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_14PdtParentheses_13write(((struct __pyx_obj_6pynini_PdtParentheses *)__pyx_v_self), ((PyObject *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_14PdtParentheses_13write(struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("write", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_f_6pynini_14PdtParentheses_write(__pyx_v_self, __pyx_v_filename, 1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1607, __pyx_L1_error)
  __pyx_t_1 = __Pyx_void_to_None(NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.PdtParentheses.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef bint use_setstate
 *     state = (self._parens,)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_14PdtParentheses_16__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6pynini_14PdtParentheses_16__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_14PdtParentheses_15__reduce_cython__(((struct __pyx_obj_6pynini_PdtParentheses *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_14PdtParentheses_15__reduce_cython__(struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_self) {
  int __pyx_v_use_setstate;
  PyObject *__pyx_v_state = NULL;
  PyObject *__pyx_v__dict = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     cdef bint use_setstate
 *     state = (self._parens,)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_parens");
    __PYX_ERR(1, 3, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c___pyx_t_10basictypes_int64_2c___pyx_t_10basictypes_int64_3e___(__pyx_v_self->_parens); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_state = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "(tree fragment)":4
 *     cdef bint use_setstate
 *     state = (self._parens,)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_2 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v__dict = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "(tree fragment)":5
 *     state = (self._parens,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_3 = (__pyx_v__dict != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":6
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v__dict);
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "(tree fragment)":7
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":5
 *     state = (self._parens,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":9
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_PdtParentheses, (type(self), 0x078cdb7, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":10
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_PdtParentheses, (type(self), 0x078cdb7, None), state
 *     else:
 */
  __pyx_t_4 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":11
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_PdtParentheses, (type(self), 0x078cdb7, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_PdtParentheses, (type(self), 0x078cdb7, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_pyx_unpickle_PdtParentheses); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 11, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 11, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_7916983);
    __Pyx_GIVEREF(__pyx_int_7916983);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_7916983);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_2, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 11, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":10
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_PdtParentheses, (type(self), 0x078cdb7, None), state
 *     else:
 */
  }

  /* "(tree fragment)":13
 *         return __pyx_unpickle_PdtParentheses, (type(self), 0x078cdb7, None), state
 *     else:
 *         return __pyx_unpickle_PdtParentheses, (type(self), 0x078cdb7, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_PdtParentheses__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_pyx_unpickle_PdtParentheses); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_7916983);
    __Pyx_GIVEREF(__pyx_int_7916983);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_7916983);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
    __pyx_t_5 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef bint use_setstate
 *     state = (self._parens,)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynini.PdtParentheses.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":14
 *     else:
 *         return __pyx_unpickle_PdtParentheses, (type(self), 0x078cdb7, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PdtParentheses__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_14PdtParentheses_18__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_6pynini_14PdtParentheses_18__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_14PdtParentheses_17__setstate_cython__(((struct __pyx_obj_6pynini_PdtParentheses *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_14PdtParentheses_17__setstate_cython__(struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":15
 *         return __pyx_unpickle_PdtParentheses, (type(self), 0x078cdb7, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_PdtParentheses__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_6pynini___pyx_unpickle_PdtParentheses__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":14
 *     else:
 *         return __pyx_unpickle_PdtParentheses, (type(self), 0x078cdb7, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PdtParentheses__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.PdtParentheses.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1625
 * 
 * 
 * def pdt_compose(ifst1,             # <<<<<<<<<<<<<<
 *                 ifst2,
 *                 PdtParentheses parens,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_41pdt_compose(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pynini_40pdt_compose[] = "\n  pdt_compose(ifst1, ifst2, parens, compose_filter=\"paren\", left_pdt=True)\n\n  Composes a PDT with an FST.\n\n  This operation composes a PDT with an FST. The input PDT is defined by the\n  combination of an FST and a PdtParentheses object specifying the stack\n  symbols. The caller should also specify whether the left-hand or the\n  right-hand FST argument is to be interpreted as a PDT.\n\n  Args:\n    ifst1: The left-hand-side input FST or PDT.\n    ifst2: The right-hand-side input FST or PDT.\n    parens: A PdtParentheses object specifying the input PDT's stack symbols.\n    compose_filter: A string indicating the desired PDT composition filter; one\n        of: \"paren\" (keeps parentheses), \"expand\" (expands and removes\n        parentheses), \"expand_paren\" (expands and keeps parentheses).\n    left_pdt: If true, the first argument is interpreted as a PDT and the\n        second argument is interpreted as an FST; if false, the second\n        argument is interpreted as a PDT and the first argument is interpreted\n        as an FST.\n\n  Returns:\n    The FST component of an PDT produced by composition.\n\n  Raises:\n    FstOpError: Operation failed.\n  ";
static PyMethodDef __pyx_mdef_6pynini_41pdt_compose = {"pdt_compose", (PyCFunction)__pyx_pw_6pynini_41pdt_compose, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pynini_40pdt_compose};
static PyObject *__pyx_pw_6pynini_41pdt_compose(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ifst1 = 0;
  PyObject *__pyx_v_ifst2 = 0;
  struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_parens = 0;
  PyObject *__pyx_v_compose_filter = 0;
  bool __pyx_v_left_pdt;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pdt_compose (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ifst1,&__pyx_n_s_ifst2,&__pyx_n_s_parens,&__pyx_n_s_compose_filter,&__pyx_n_s_left_pdt,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject *)__pyx_n_b_paren);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ifst1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ifst2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pdt_compose", 0, 3, 5, 1); __PYX_ERR(0, 1625, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parens)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pdt_compose", 0, 3, 5, 2); __PYX_ERR(0, 1625, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_compose_filter);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_left_pdt);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "pdt_compose") < 0)) __PYX_ERR(0, 1625, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_ifst1 = values[0];
    __pyx_v_ifst2 = values[1];
    __pyx_v_parens = ((struct __pyx_obj_6pynini_PdtParentheses *)values[2]);
    __pyx_v_compose_filter = values[3];
    if (values[4]) {
      __pyx_v_left_pdt = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_left_pdt == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1629, __pyx_L3_error)
    } else {

      /* "pynini.pyx":1629
 *                 PdtParentheses parens,
 *                 compose_filter=b"paren",
 *                 bool left_pdt=True):             # <<<<<<<<<<<<<<
 *   """
 *   pdt_compose(ifst1, ifst2, parens, compose_filter="paren", left_pdt=True)
 */
      __pyx_v_left_pdt = ((bool)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pdt_compose", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1625, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.pdt_compose", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parens), __pyx_ptype_6pynini_PdtParentheses, 1, "parens", 0))) __PYX_ERR(0, 1627, __pyx_L1_error)
  __pyx_r = __pyx_pf_6pynini_40pdt_compose(__pyx_self, __pyx_v_ifst1, __pyx_v_ifst2, __pyx_v_parens, __pyx_v_compose_filter, __pyx_v_left_pdt);

  /* "pynini.pyx":1625
 * 
 * 
 * def pdt_compose(ifst1,             # <<<<<<<<<<<<<<
 *                 ifst2,
 *                 PdtParentheses parens,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_40pdt_compose(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_ifst1, PyObject *__pyx_v_ifst2, struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_parens, PyObject *__pyx_v_compose_filter, bool __pyx_v_left_pdt) {
  struct __pyx_obj_6pynini_Fst *__pyx_v_lhs = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_v_rhs = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_v_result = 0;
  enum fst::PdtComposeFilter __pyx_v_compose_filter_enum;
  std::unique_ptr<fst::PdtComposeOptions>  __pyx_v_opts;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  std::string __pyx_t_6;
  enum fst::PdtComposeFilter __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("pdt_compose", 0);

  /* "pynini.pyx":1660
 *   cdef Fst lhs
 *   cdef Fst rhs
 *   (lhs, rhs) = _compile_or_copy_two_Fsts(ifst1, ifst2)             # <<<<<<<<<<<<<<
 *   _maybe_arcsort(lhs._mfst.get(), rhs._mfst.get())
 *   MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 */
  __pyx_t_1 = __pyx_f_6pynini__compile_or_copy_two_Fsts(__pyx_v_ifst1, __pyx_v_ifst2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1660, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1660, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1660, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1660, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_3 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_4), 2) < 0) __PYX_ERR(0, 1660, __pyx_L1_error)
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 1660, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_6pynini_Fst))))) __PYX_ERR(0, 1660, __pyx_L1_error)
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_6pynini_Fst))))) __PYX_ERR(0, 1660, __pyx_L1_error)
  __pyx_v_lhs = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_v_rhs = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pynini.pyx":1661
 *   cdef Fst rhs
 *   (lhs, rhs) = _compile_or_copy_two_Fsts(ifst1, ifst2)
 *   _maybe_arcsort(lhs._mfst.get(), rhs._mfst.get())             # <<<<<<<<<<<<<<
 *   MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 *                MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS)
 */
  if (unlikely(((PyObject *)__pyx_v_lhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mfst");
    __PYX_ERR(0, 1661, __pyx_L1_error)
  }
  if (unlikely(((PyObject *)__pyx_v_rhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mfst");
    __PYX_ERR(0, 1661, __pyx_L1_error)
  }
  __pyx_f_6pynini__maybe_arcsort(__pyx_v_lhs->__pyx_base._mfst.get(), __pyx_v_rhs->__pyx_base._mfst.get());

  /* "pynini.pyx":1662
 *   (lhs, rhs) = _compile_or_copy_two_Fsts(ifst1, ifst2)
 *   _maybe_arcsort(lhs._mfst.get(), rhs._mfst.get())
 *   MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),             # <<<<<<<<<<<<<<
 *                MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS)
 *   cdef Fst result = Fst(lhs.arc_type())
 */
  if (unlikely(((PyObject *)__pyx_v_lhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mfst");
    __PYX_ERR(0, 1662, __pyx_L1_error)
  }
  if (unlikely(((PyObject *)__pyx_v_rhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mfst");
    __PYX_ERR(0, 1662, __pyx_L1_error)
  }

  /* "pynini.pyx":1663
 *   _maybe_arcsort(lhs._mfst.get(), rhs._mfst.get())
 *   MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 *                MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS)             # <<<<<<<<<<<<<<
 *   cdef Fst result = Fst(lhs.arc_type())
 *   cdef PdtComposeFilter compose_filter_enum = _get_pdt_compose_filter(
 */
  fst::script::MergeSymbols(__pyx_v_lhs->__pyx_base._mfst.get(), __pyx_v_rhs->__pyx_base._mfst.get(), fst::MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS);

  /* "pynini.pyx":1664
 *   MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 *                MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS)
 *   cdef Fst result = Fst(lhs.arc_type())             # <<<<<<<<<<<<<<
 *   cdef PdtComposeFilter compose_filter_enum = _get_pdt_compose_filter(
 *       tostring(compose_filter))
 */
  if (unlikely(((PyObject *)__pyx_v_lhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "arc_type");
    __PYX_ERR(0, 1664, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_convert_PyUnicode_string_to_py_std__in_string(((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_lhs->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.arc_type(((struct __pyx_obj_9pywrapfst__Fst *)__pyx_v_lhs), 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1664, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1664, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_result = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pynini.pyx":1666
 *   cdef Fst result = Fst(lhs.arc_type())
 *   cdef PdtComposeFilter compose_filter_enum = _get_pdt_compose_filter(
 *       tostring(compose_filter))             # <<<<<<<<<<<<<<
 *   cdef unique_ptr[PdtComposeOptions] opts
 *   opts.reset(new PdtComposeOptions(True, compose_filter_enum))
 */
  __pyx_t_6 = __pyx_f_9pywrapfst_tostring(__pyx_v_compose_filter, NULL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1666, __pyx_L1_error)

  /* "pynini.pyx":1665
 *                MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS)
 *   cdef Fst result = Fst(lhs.arc_type())
 *   cdef PdtComposeFilter compose_filter_enum = _get_pdt_compose_filter(             # <<<<<<<<<<<<<<
 *       tostring(compose_filter))
 *   cdef unique_ptr[PdtComposeOptions] opts
 */
  __pyx_t_7 = __pyx_f_6pynini__get_pdt_compose_filter(__pyx_t_6); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1665, __pyx_L1_error)
  __pyx_v_compose_filter_enum = __pyx_t_7;

  /* "pynini.pyx":1668
 *       tostring(compose_filter))
 *   cdef unique_ptr[PdtComposeOptions] opts
 *   opts.reset(new PdtComposeOptions(True, compose_filter_enum))             # <<<<<<<<<<<<<<
 *   PdtCompose(deref(lhs._fst), deref(rhs._fst), parens._parens,
 *              result._mfst.get(), deref(opts), left_pdt)
 */
  __pyx_v_opts.reset(new fst::PdtComposeOptions(1, __pyx_v_compose_filter_enum));

  /* "pynini.pyx":1669
 *   cdef unique_ptr[PdtComposeOptions] opts
 *   opts.reset(new PdtComposeOptions(True, compose_filter_enum))
 *   PdtCompose(deref(lhs._fst), deref(rhs._fst), parens._parens,             # <<<<<<<<<<<<<<
 *              result._mfst.get(), deref(opts), left_pdt)
 *   result._check_mutating_imethod()
 */
  if (unlikely(((PyObject *)__pyx_v_lhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_fst");
    __PYX_ERR(0, 1669, __pyx_L1_error)
  }
  if (unlikely(((PyObject *)__pyx_v_rhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_fst");
    __PYX_ERR(0, 1669, __pyx_L1_error)
  }
  if (unlikely(((PyObject *)__pyx_v_parens) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_parens");
    __PYX_ERR(0, 1669, __pyx_L1_error)
  }

  /* "pynini.pyx":1670
 *   opts.reset(new PdtComposeOptions(True, compose_filter_enum))
 *   PdtCompose(deref(lhs._fst), deref(rhs._fst), parens._parens,
 *              result._mfst.get(), deref(opts), left_pdt)             # <<<<<<<<<<<<<<
 *   result._check_mutating_imethod()
 *   # If the "expand" filter is selected, all parentheses have been mapped to
 */
  fst::script::PdtCompose((*__pyx_v_lhs->__pyx_base.__pyx_base._fst), (*__pyx_v_rhs->__pyx_base.__pyx_base._fst), __pyx_v_parens->_parens, __pyx_v_result->__pyx_base._mfst.get(), (*__pyx_v_opts), __pyx_v_left_pdt);

  /* "pynini.pyx":1671
 *   PdtCompose(deref(lhs._fst), deref(rhs._fst), parens._parens,
 *              result._mfst.get(), deref(opts), left_pdt)
 *   result._check_mutating_imethod()             # <<<<<<<<<<<<<<
 *   # If the "expand" filter is selected, all parentheses have been mapped to
 *   # epsilon. This conveniently removes the arcs that result.
 */
  ((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_result->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base._check_mutating_imethod(((struct __pyx_obj_9pywrapfst__MutableFst *)__pyx_v_result)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1671, __pyx_L1_error)

  /* "pynini.pyx":1674
 *   # If the "expand" filter is selected, all parentheses have been mapped to
 *   # epsilon. This conveniently removes the arcs that result.
 *   if compose_filter_enum == EXPAND_FILTER:             # <<<<<<<<<<<<<<
 *     result.rmepsilon()
 *   # Otherwise, we need to add the parentheses to the result.
 */
  __pyx_t_8 = ((__pyx_v_compose_filter_enum == fst::EXPAND_FILTER) != 0);
  if (__pyx_t_8) {

    /* "pynini.pyx":1675
 *   # epsilon. This conveniently removes the arcs that result.
 *   if compose_filter_enum == EXPAND_FILTER:
 *     result.rmepsilon()             # <<<<<<<<<<<<<<
 *   # Otherwise, we need to add the parentheses to the result.
 *   else:
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_result), __pyx_n_s_rmepsilon); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1675, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (__pyx_t_2) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1675, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1675, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pynini.pyx":1674
 *   # If the "expand" filter is selected, all parentheses have been mapped to
 *   # epsilon. This conveniently removes the arcs that result.
 *   if compose_filter_enum == EXPAND_FILTER:             # <<<<<<<<<<<<<<
 *     result.rmepsilon()
 *   # Otherwise, we need to add the parentheses to the result.
 */
    goto __pyx_L5;
  }

  /* "pynini.pyx":1678
 *   # Otherwise, we need to add the parentheses to the result.
 *   else:
 *     _add_parentheses_symbols(result._mfst.get(), parens._parens, left_pdt)             # <<<<<<<<<<<<<<
 *   return result
 * 
 */
  /*else*/ {
    if (unlikely(((PyObject *)__pyx_v_parens) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_parens");
      __PYX_ERR(0, 1678, __pyx_L1_error)
    }
    __pyx_f_6pynini__add_parentheses_symbols(__pyx_v_result->__pyx_base._mfst.get(), __pyx_v_parens->_parens, __pyx_v_left_pdt); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1678, __pyx_L1_error)
  }
  __pyx_L5:;

  /* "pynini.pyx":1679
 *   else:
 *     _add_parentheses_symbols(result._mfst.get(), parens._parens, left_pdt)
 *   return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "pynini.pyx":1625
 * 
 * 
 * def pdt_compose(ifst1,             # <<<<<<<<<<<<<<
 *                 ifst2,
 *                 PdtParentheses parens,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynini.pdt_compose", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_lhs);
  __Pyx_XDECREF((PyObject *)__pyx_v_rhs);
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1682
 * 
 * 
 * def pdt_expand(ipdt,             # <<<<<<<<<<<<<<
 *                PdtParentheses parens,
 *                bool connect=True,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_43pdt_expand(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pynini_42pdt_expand[] = "\n  pdt_expand(ipdt, parens, connect=True, keep_parentheses=False, weight=None)\n\n  Expands a bounded-stack PDT to an FST.\n\n  This operation converts a bounded-stack PDT into the equivalent FST. The\n  input PDT is defined by the combination of an FST and a PdtParentheses object\n  specifying the PDT stack symbols.\n\n  If the input PDT does not have a bounded stack, then it is impossible to\n  expand the PDT into an FST and this operation will not terminate.\n\n  Args:\n    ipdt: The FST component of the input PDT.\n    parens: A PdtParentheses object specifying the input PDT's stack symbols.\n    connect: Should the output FST be trimmed?\n    keep_parentheses: Should the output FST preserve parentheses arcs?\n    weight: A Weight or weight string indicating the desired weight threshold;\n        paths with weights below this threshold will be pruned. If omitted or\n        null, no paths are pruned.\n\n  Returns:\n    An FST produced by expanding the bounded-stack PDT.\n\n  Raises:\n    FstOpError: Operation failed.\n  ";
static PyMethodDef __pyx_mdef_6pynini_43pdt_expand = {"pdt_expand", (PyCFunction)__pyx_pw_6pynini_43pdt_expand, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pynini_42pdt_expand};
static PyObject *__pyx_pw_6pynini_43pdt_expand(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ipdt = 0;
  struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_parens = 0;
  bool __pyx_v_connect;
  bool __pyx_v_keep_parentheses;
  PyObject *__pyx_v_weight = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pdt_expand (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ipdt,&__pyx_n_s_parens,&__pyx_n_s_connect,&__pyx_n_s_keep_parentheses,&__pyx_n_s_weight,0};
    PyObject* values[5] = {0,0,0,0,0};

    /* "pynini.pyx":1686
 *                bool connect=True,
 *                bool keep_parentheses=False,
 *                weight=None):             # <<<<<<<<<<<<<<
 *   """
 *   pdt_expand(ipdt, parens, connect=True, keep_parentheses=False, weight=None)
 */
    values[4] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ipdt)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parens)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pdt_expand", 0, 2, 5, 1); __PYX_ERR(0, 1682, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_connect);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_keep_parentheses);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_weight);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "pdt_expand") < 0)) __PYX_ERR(0, 1682, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_ipdt = values[0];
    __pyx_v_parens = ((struct __pyx_obj_6pynini_PdtParentheses *)values[1]);
    if (values[2]) {
      __pyx_v_connect = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_connect == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1684, __pyx_L3_error)
    } else {

      /* "pynini.pyx":1684
 * def pdt_expand(ipdt,
 *                PdtParentheses parens,
 *                bool connect=True,             # <<<<<<<<<<<<<<
 *                bool keep_parentheses=False,
 *                weight=None):
 */
      __pyx_v_connect = ((bool)1);
    }
    if (values[3]) {
      __pyx_v_keep_parentheses = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_keep_parentheses == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1685, __pyx_L3_error)
    } else {

      /* "pynini.pyx":1685
 *                PdtParentheses parens,
 *                bool connect=True,
 *                bool keep_parentheses=False,             # <<<<<<<<<<<<<<
 *                weight=None):
 *   """
 */
      __pyx_v_keep_parentheses = ((bool)0);
    }
    __pyx_v_weight = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pdt_expand", 0, 2, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1682, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.pdt_expand", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parens), __pyx_ptype_6pynini_PdtParentheses, 1, "parens", 0))) __PYX_ERR(0, 1683, __pyx_L1_error)
  __pyx_r = __pyx_pf_6pynini_42pdt_expand(__pyx_self, __pyx_v_ipdt, __pyx_v_parens, __pyx_v_connect, __pyx_v_keep_parentheses, __pyx_v_weight);

  /* "pynini.pyx":1682
 * 
 * 
 * def pdt_expand(ipdt,             # <<<<<<<<<<<<<<
 *                PdtParentheses parens,
 *                bool connect=True,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_42pdt_expand(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_ipdt, struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_parens, bool __pyx_v_connect, bool __pyx_v_keep_parentheses, PyObject *__pyx_v_weight) {
  struct __pyx_obj_6pynini_Fst *__pyx_v_pdt = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_v_result = 0;
  fst::script::WeightClass __pyx_v_wc;
  std::unique_ptr<fst::script::PdtExpandOptions>  __pyx_v_opts;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  fst::script::WeightClass __pyx_t_3;
  __Pyx_RefNannySetupContext("pdt_expand", 0);

  /* "pynini.pyx":1714
 *     FstOpError: Operation failed.
 *   """
 *   cdef Fst pdt = _compile_or_copy_Fst(ipdt)             # <<<<<<<<<<<<<<
 *   cdef Fst result = Fst(pdt.arc_type())
 *   cdef WeightClass wc = _get_WeightClass_or_Zero(result.weight_type(), weight)
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_ipdt, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_pdt = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":1715
 *   """
 *   cdef Fst pdt = _compile_or_copy_Fst(ipdt)
 *   cdef Fst result = Fst(pdt.arc_type())             # <<<<<<<<<<<<<<
 *   cdef WeightClass wc = _get_WeightClass_or_Zero(result.weight_type(), weight)
 *   cdef unique_ptr[PdtExpandOptions] opts
 */
  if (unlikely(((PyObject *)__pyx_v_pdt) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "arc_type");
    __PYX_ERR(0, 1715, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_convert_PyUnicode_string_to_py_std__in_string(((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_pdt->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.arc_type(((struct __pyx_obj_9pywrapfst__Fst *)__pyx_v_pdt), 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_result = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pynini.pyx":1716
 *   cdef Fst pdt = _compile_or_copy_Fst(ipdt)
 *   cdef Fst result = Fst(pdt.arc_type())
 *   cdef WeightClass wc = _get_WeightClass_or_Zero(result.weight_type(), weight)             # <<<<<<<<<<<<<<
 *   cdef unique_ptr[PdtExpandOptions] opts
 *   opts.reset(new PdtExpandOptions(connect, keep_parentheses, wc))
 */
  __pyx_t_3 = __pyx_f_9pywrapfst__get_WeightClass_or_Zero(((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_result->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.weight_type(((struct __pyx_obj_9pywrapfst__Fst *)__pyx_v_result), 0), __pyx_v_weight); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1716, __pyx_L1_error)
  __pyx_v_wc = __pyx_t_3;

  /* "pynini.pyx":1718
 *   cdef WeightClass wc = _get_WeightClass_or_Zero(result.weight_type(), weight)
 *   cdef unique_ptr[PdtExpandOptions] opts
 *   opts.reset(new PdtExpandOptions(connect, keep_parentheses, wc))             # <<<<<<<<<<<<<<
 *   PdtExpand(deref(pdt._fst), parens._parens, result._mfst.get(), deref(opts))
 *   result._check_mutating_imethod()
 */
  __pyx_v_opts.reset(new fst::script::PdtExpandOptions(__pyx_v_connect, __pyx_v_keep_parentheses, __pyx_v_wc));

  /* "pynini.pyx":1719
 *   cdef unique_ptr[PdtExpandOptions] opts
 *   opts.reset(new PdtExpandOptions(connect, keep_parentheses, wc))
 *   PdtExpand(deref(pdt._fst), parens._parens, result._mfst.get(), deref(opts))             # <<<<<<<<<<<<<<
 *   result._check_mutating_imethod()
 *   return result
 */
  if (unlikely(((PyObject *)__pyx_v_pdt) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_fst");
    __PYX_ERR(0, 1719, __pyx_L1_error)
  }
  if (unlikely(((PyObject *)__pyx_v_parens) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_parens");
    __PYX_ERR(0, 1719, __pyx_L1_error)
  }
  fst::script::PdtExpand((*__pyx_v_pdt->__pyx_base.__pyx_base._fst), __pyx_v_parens->_parens, __pyx_v_result->__pyx_base._mfst.get(), (*__pyx_v_opts));

  /* "pynini.pyx":1720
 *   opts.reset(new PdtExpandOptions(connect, keep_parentheses, wc))
 *   PdtExpand(deref(pdt._fst), parens._parens, result._mfst.get(), deref(opts))
 *   result._check_mutating_imethod()             # <<<<<<<<<<<<<<
 *   return result
 * 
 */
  ((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_result->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base._check_mutating_imethod(((struct __pyx_obj_9pywrapfst__MutableFst *)__pyx_v_result)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1720, __pyx_L1_error)

  /* "pynini.pyx":1721
 *   PdtExpand(deref(pdt._fst), parens._parens, result._mfst.get(), deref(opts))
 *   result._check_mutating_imethod()
 *   return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "pynini.pyx":1682
 * 
 * 
 * def pdt_expand(ipdt,             # <<<<<<<<<<<<<<
 *                PdtParentheses parens,
 *                bool connect=True,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pynini.pdt_expand", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_pdt);
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1724
 * 
 * 
 * def pdt_replace(root, replacements, pdt_parser_type=b"left"):             # <<<<<<<<<<<<<<
 *   """
 *   pdt_replace(root, replacements, pdt_parser_type="left")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_45pdt_replace(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pynini_44pdt_replace[] = "\n  pdt_replace(root, replacements, pdt_parser_type=\"left\")\n\n  Constructively replaces arcs in an FST with other FST(s), producing a PDT.\n\n  This operation performs the dynamic replacement of arcs in one FST with\n  another FST, allowing the definition of a PDT analogues to RTNs. The output\n  PDT, defined by the combination of an FST and a PdtParentheses object\n  specifying the PDT stack symbols, is the result of recursively replacing each\n  arc in an input FST that matches some \"non-terminal\" with a corresponding\n  FST, inserting parentheses where necessary. More precisely, an arc from\n  state s to state d with nonterminal output label n in an input FST is\n  replaced by redirecting this \"call\" arc to the initial state of a copy of the\n  replacement FST and then adding \"return\" arcs from each final state of the\n  replacement FST to d in the input FST. Unlike `replace`, this operation is\n  capable of handling cyclic dependencies among replacement rules, which is\n  accomplished by adding \"push\" stack symbols to \"call\" arcs and \"pop\" stack\n  symbols to \"return\" arcs.\n\n  Args:\n    root: The root FST.\n    replacements: An iterable containing string/FST pairs. If the iterable\n       implements .items, this is used to extract the pairs.\n    pdt_parser_type: A string matching a known PdtParserType. One of: \"left\"\n        (default), \"left_sr\".\n\n  Returns:\n   An (Fst, PdtParentheses) pair defining a PDT resulting from PDT replacement.\n\n  Raises:\n    FstOpError: Operation failed.\n\n  See also: `replace`.\n  ";
static PyMethodDef __pyx_mdef_6pynini_45pdt_replace = {"pdt_replace", (PyCFunction)__pyx_pw_6pynini_45pdt_replace, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pynini_44pdt_replace};
static PyObject *__pyx_pw_6pynini_45pdt_replace(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_root = 0;
  PyObject *__pyx_v_replacements = 0;
  PyObject *__pyx_v_pdt_parser_type = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pdt_replace (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_root,&__pyx_n_s_replacements,&__pyx_n_s_pdt_parser_type,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)__pyx_n_b_left);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_root)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_replacements)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pdt_replace", 0, 2, 3, 1); __PYX_ERR(0, 1724, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pdt_parser_type);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "pdt_replace") < 0)) __PYX_ERR(0, 1724, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_root = values[0];
    __pyx_v_replacements = values[1];
    __pyx_v_pdt_parser_type = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pdt_replace", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1724, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.pdt_replace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_44pdt_replace(__pyx_self, __pyx_v_root, __pyx_v_replacements, __pyx_v_pdt_parser_type);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_44pdt_replace(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root, PyObject *__pyx_v_replacements, PyObject *__pyx_v_pdt_parser_type) {
  struct __pyx_obj_6pynini_Fst *__pyx_v_root_fst = 0;
  std::string __pyx_v_arc_type;
  std::string __pyx_v_nonterm;
  struct __pyx_obj_6pynini_Fst *__pyx_v_replacement = 0;
  std::vector<__pyx_t_15pynini_includes_StringFstClassPair>  __pyx_v_pairs;
  PyObject *__pyx_v_nt = NULL;
  PyObject *__pyx_v_rep = NULL;
  struct __pyx_obj_6pynini_Fst *__pyx_v_result = 0;
  struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_parens = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  struct __pyx_opt_args_6pynini__compile_or_copy_Fst __pyx_t_12;
  std::string __pyx_t_13;
  __pyx_t_15pynini_includes_StringFstClassPair __pyx_t_14;
  enum fst::PdtParserType __pyx_t_15;
  __Pyx_RefNannySetupContext("pdt_replace", 0);
  __Pyx_INCREF(__pyx_v_replacements);

  /* "pynini.pyx":1759
 *   See also: `replace`.
 *   """
 *   cdef Fst root_fst = _compile_or_copy_Fst(root)             # <<<<<<<<<<<<<<
 *   cdef string arc_type = root_fst.arc_type()
 *   if hasattr(replacements, "items"):
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_root, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1759, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_root_fst = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":1760
 *   """
 *   cdef Fst root_fst = _compile_or_copy_Fst(root)
 *   cdef string arc_type = root_fst.arc_type()             # <<<<<<<<<<<<<<
 *   if hasattr(replacements, "items"):
 *     replacements = replacements.items()
 */
  if (unlikely(((PyObject *)__pyx_v_root_fst) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "arc_type");
    __PYX_ERR(0, 1760, __pyx_L1_error)
  }
  __pyx_v_arc_type = ((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_root_fst->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.arc_type(((struct __pyx_obj_9pywrapfst__Fst *)__pyx_v_root_fst), 0);

  /* "pynini.pyx":1761
 *   cdef Fst root_fst = _compile_or_copy_Fst(root)
 *   cdef string arc_type = root_fst.arc_type()
 *   if hasattr(replacements, "items"):             # <<<<<<<<<<<<<<
 *     replacements = replacements.items()
 *   # This has the pleasant effect of preventing Python from garbage-collecting
 */
  __pyx_t_2 = __Pyx_HasAttr(__pyx_v_replacements, __pyx_n_s_items); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 1761, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "pynini.pyx":1762
 *   cdef string arc_type = root_fst.arc_type()
 *   if hasattr(replacements, "items"):
 *     replacements = replacements.items()             # <<<<<<<<<<<<<<
 *   # This has the pleasant effect of preventing Python from garbage-collecting
 *   # these FSTs until we're ready.
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_replacements, __pyx_n_s_items); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1762, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1762, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1762, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_replacements, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pynini.pyx":1761
 *   cdef Fst root_fst = _compile_or_copy_Fst(root)
 *   cdef string arc_type = root_fst.arc_type()
 *   if hasattr(replacements, "items"):             # <<<<<<<<<<<<<<
 *     replacements = replacements.items()
 *   # This has the pleasant effect of preventing Python from garbage-collecting
 */
  }

  /* "pynini.pyx":1766
 *   # these FSTs until we're ready.
 *   # TODO(kbg): Is there a better way?
 *   replacements = [(nt, _compile_or_copy_Fst(rep, arc_type)) for             # <<<<<<<<<<<<<<
 *                   (nt, rep) in replacements]
 *   cdef string nonterm
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1766, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "pynini.pyx":1767
 *   # TODO(kbg): Is there a better way?
 *   replacements = [(nt, _compile_or_copy_Fst(rep, arc_type)) for
 *                   (nt, rep) in replacements]             # <<<<<<<<<<<<<<
 *   cdef string nonterm
 *   cdef Fst replacement
 */
  if (likely(PyList_CheckExact(__pyx_v_replacements)) || PyTuple_CheckExact(__pyx_v_replacements)) {
    __pyx_t_4 = __pyx_v_replacements; __Pyx_INCREF(__pyx_t_4); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_replacements); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1767, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1767, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1767, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1767, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1767, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1767, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_7(__pyx_t_4);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1767, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {
      PyObject* sequence = __pyx_t_5;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1767, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_8 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_9 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_9);
      #else
      __pyx_t_8 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1767, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1767, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      #endif
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_10 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1767, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_11 = Py_TYPE(__pyx_t_10)->tp_iternext;
      index = 0; __pyx_t_8 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_8)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_8);
      index = 1; __pyx_t_9 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_9)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_9);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_10), 2) < 0) __PYX_ERR(0, 1767, __pyx_L1_error)
      __pyx_t_11 = NULL;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L7_unpacking_done;
      __pyx_L6_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_11 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1767, __pyx_L1_error)
      __pyx_L7_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_nt, __pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_XDECREF_SET(__pyx_v_rep, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "pynini.pyx":1766
 *   # these FSTs until we're ready.
 *   # TODO(kbg): Is there a better way?
 *   replacements = [(nt, _compile_or_copy_Fst(rep, arc_type)) for             # <<<<<<<<<<<<<<
 *                   (nt, rep) in replacements]
 *   cdef string nonterm
 */
    __pyx_t_5 = __pyx_convert_PyUnicode_string_to_py_std__in_string(__pyx_v_arc_type); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1766, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_12.__pyx_n = 1;
    __pyx_t_12.arc_type = __pyx_t_5;
    __pyx_t_9 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_rep, &__pyx_t_12)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1766, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1766, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_nt);
    __Pyx_GIVEREF(__pyx_v_nt);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_nt);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_9);
    __pyx_t_9 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 1766, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF_SET(__pyx_v_replacements, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":1771
 *   cdef Fst replacement
 *   cdef vector[StringFstClassPair] pairs
 *   pairs.reserve(len(replacements))             # <<<<<<<<<<<<<<
 *   for (nt, rep) in replacements:
 *     nonterm = tostring(nt)
 */
  __pyx_t_6 = PyObject_Length(__pyx_v_replacements); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1771, __pyx_L1_error)
  __pyx_v_pairs.reserve(__pyx_t_6);

  /* "pynini.pyx":1772
 *   cdef vector[StringFstClassPair] pairs
 *   pairs.reserve(len(replacements))
 *   for (nt, rep) in replacements:             # <<<<<<<<<<<<<<
 *     nonterm = tostring(nt)
 *     replacement = rep
 */
  if (likely(PyList_CheckExact(__pyx_v_replacements)) || PyTuple_CheckExact(__pyx_v_replacements)) {
    __pyx_t_1 = __pyx_v_replacements; __Pyx_INCREF(__pyx_t_1); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_replacements); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1772, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1772, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1772, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1772, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1772, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1772, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_7(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1772, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1772, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_9 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_9);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1772, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_9 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1772, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1772, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_11 = Py_TYPE(__pyx_t_8)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_11(__pyx_t_8); if (unlikely(!__pyx_t_5)) goto __pyx_L10_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_9 = __pyx_t_11(__pyx_t_8); if (unlikely(!__pyx_t_9)) goto __pyx_L10_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_9);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_8), 2) < 0) __PYX_ERR(0, 1772, __pyx_L1_error)
      __pyx_t_11 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L11_unpacking_done;
      __pyx_L10_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_11 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1772, __pyx_L1_error)
      __pyx_L11_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_nt, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_rep, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "pynini.pyx":1773
 *   pairs.reserve(len(replacements))
 *   for (nt, rep) in replacements:
 *     nonterm = tostring(nt)             # <<<<<<<<<<<<<<
 *     replacement = rep
 *     pairs.push_back(StringFstClassPair(nonterm, replacement._fst.get()))
 */
    __pyx_t_13 = __pyx_f_9pywrapfst_tostring(__pyx_v_nt, NULL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1773, __pyx_L1_error)
    __pyx_v_nonterm = __pyx_t_13;

    /* "pynini.pyx":1774
 *   for (nt, rep) in replacements:
 *     nonterm = tostring(nt)
 *     replacement = rep             # <<<<<<<<<<<<<<
 *     pairs.push_back(StringFstClassPair(nonterm, replacement._fst.get()))
 *   cdef Fst result = Fst(arc_type)
 */
    if (!(likely(((__pyx_v_rep) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_rep, __pyx_ptype_6pynini_Fst))))) __PYX_ERR(0, 1774, __pyx_L1_error)
    __pyx_t_4 = __pyx_v_rep;
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_XDECREF_SET(__pyx_v_replacement, ((struct __pyx_obj_6pynini_Fst *)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "pynini.pyx":1775
 *     nonterm = tostring(nt)
 *     replacement = rep
 *     pairs.push_back(StringFstClassPair(nonterm, replacement._fst.get()))             # <<<<<<<<<<<<<<
 *   cdef Fst result = Fst(arc_type)
 *   cdef PdtParentheses parens = PdtParentheses()
 */
    if (unlikely(((PyObject *)__pyx_v_replacement) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_fst");
      __PYX_ERR(0, 1775, __pyx_L1_error)
    }
    try {
      __pyx_t_14 = __pyx_t_15pynini_includes_StringFstClassPair(__pyx_v_nonterm, __pyx_v_replacement->__pyx_base.__pyx_base._fst.get());
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1775, __pyx_L1_error)
    }
    try {
      __pyx_v_pairs.push_back(__pyx_t_14);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1775, __pyx_L1_error)
    }

    /* "pynini.pyx":1772
 *   cdef vector[StringFstClassPair] pairs
 *   pairs.reserve(len(replacements))
 *   for (nt, rep) in replacements:             # <<<<<<<<<<<<<<
 *     nonterm = tostring(nt)
 *     replacement = rep
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":1776
 *     replacement = rep
 *     pairs.push_back(StringFstClassPair(nonterm, replacement._fst.get()))
 *   cdef Fst result = Fst(arc_type)             # <<<<<<<<<<<<<<
 *   cdef PdtParentheses parens = PdtParentheses()
 *   PyniniPdtReplace(deref(root_fst._fst), pairs, result._mfst.get(),
 */
  __pyx_t_1 = __pyx_convert_PyUnicode_string_to_py_std__in_string(__pyx_v_arc_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_result = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pynini.pyx":1777
 *     pairs.push_back(StringFstClassPair(nonterm, replacement._fst.get()))
 *   cdef Fst result = Fst(arc_type)
 *   cdef PdtParentheses parens = PdtParentheses()             # <<<<<<<<<<<<<<
 *   PyniniPdtReplace(deref(root_fst._fst), pairs, result._mfst.get(),
 *                    addr(parens._parens),
 */
  __pyx_t_4 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6pynini_PdtParentheses)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_parens = ((struct __pyx_obj_6pynini_PdtParentheses *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pynini.pyx":1778
 *   cdef Fst result = Fst(arc_type)
 *   cdef PdtParentheses parens = PdtParentheses()
 *   PyniniPdtReplace(deref(root_fst._fst), pairs, result._mfst.get(),             # <<<<<<<<<<<<<<
 *                    addr(parens._parens),
 *                    _get_pdt_parser_type(tostring(pdt_parser_type)))
 */
  if (unlikely(((PyObject *)__pyx_v_root_fst) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_fst");
    __PYX_ERR(0, 1778, __pyx_L1_error)
  }

  /* "pynini.pyx":1780
 *   PyniniPdtReplace(deref(root_fst._fst), pairs, result._mfst.get(),
 *                    addr(parens._parens),
 *                    _get_pdt_parser_type(tostring(pdt_parser_type)))             # <<<<<<<<<<<<<<
 *   result._check_mutating_imethod()
 *   return (result, parens)
 */
  __pyx_t_13 = __pyx_f_9pywrapfst_tostring(__pyx_v_pdt_parser_type, NULL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1780, __pyx_L1_error)
  __pyx_t_15 = __pyx_f_6pynini__get_pdt_parser_type(__pyx_t_13); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1780, __pyx_L1_error)

  /* "pynini.pyx":1778
 *   cdef Fst result = Fst(arc_type)
 *   cdef PdtParentheses parens = PdtParentheses()
 *   PyniniPdtReplace(deref(root_fst._fst), pairs, result._mfst.get(),             # <<<<<<<<<<<<<<
 *                    addr(parens._parens),
 *                    _get_pdt_parser_type(tostring(pdt_parser_type)))
 */
  fst::script::PyniniPdtReplace((*__pyx_v_root_fst->__pyx_base.__pyx_base._fst), __pyx_v_pairs, __pyx_v_result->__pyx_base._mfst.get(), (&__pyx_v_parens->_parens), __pyx_t_15);

  /* "pynini.pyx":1781
 *                    addr(parens._parens),
 *                    _get_pdt_parser_type(tostring(pdt_parser_type)))
 *   result._check_mutating_imethod()             # <<<<<<<<<<<<<<
 *   return (result, parens)
 * 
 */
  ((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_result->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base._check_mutating_imethod(((struct __pyx_obj_9pywrapfst__MutableFst *)__pyx_v_result)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1781, __pyx_L1_error)

  /* "pynini.pyx":1782
 *                    _get_pdt_parser_type(tostring(pdt_parser_type)))
 *   result._check_mutating_imethod()
 *   return (result, parens)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1782, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_result));
  PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_v_result));
  __Pyx_INCREF(((PyObject *)__pyx_v_parens));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_parens));
  PyTuple_SET_ITEM(__pyx_t_4, 1, ((PyObject *)__pyx_v_parens));
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":1724
 * 
 * 
 * def pdt_replace(root, replacements, pdt_parser_type=b"left"):             # <<<<<<<<<<<<<<
 *   """
 *   pdt_replace(root, replacements, pdt_parser_type="left")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("pynini.pdt_replace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_root_fst);
  __Pyx_XDECREF((PyObject *)__pyx_v_replacement);
  __Pyx_XDECREF(__pyx_v_nt);
  __Pyx_XDECREF(__pyx_v_rep);
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XDECREF((PyObject *)__pyx_v_parens);
  __Pyx_XDECREF(__pyx_v_replacements);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1785
 * 
 * 
 * def pdt_reverse(ipdt, PdtParentheses parens):             # <<<<<<<<<<<<<<
 *   """
 *   pdt_reverse(ipdt, parens)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_47pdt_reverse(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pynini_46pdt_reverse[] = "\n  pdt_reverse(ipdt, parens)\n\n  Reverses a PDT.\n\n  This operation reverses an PDT. The input PDT is defined by the combination\n  of an FST and a PdtParentheses object specifying the PDT stack symbols.\n\n  Args:\n    ipdt: The FST component of the input PDT.\n    parens: A PdtParentheses object specifying the input PDT's stack symbols.\n\n  Returns:\n    The FST component of a PDT resulting from reversing the input PDT.\n  ";
static PyMethodDef __pyx_mdef_6pynini_47pdt_reverse = {"pdt_reverse", (PyCFunction)__pyx_pw_6pynini_47pdt_reverse, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pynini_46pdt_reverse};
static PyObject *__pyx_pw_6pynini_47pdt_reverse(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ipdt = 0;
  struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_parens = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pdt_reverse (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ipdt,&__pyx_n_s_parens,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ipdt)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parens)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pdt_reverse", 1, 2, 2, 1); __PYX_ERR(0, 1785, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "pdt_reverse") < 0)) __PYX_ERR(0, 1785, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_ipdt = values[0];
    __pyx_v_parens = ((struct __pyx_obj_6pynini_PdtParentheses *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pdt_reverse", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1785, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.pdt_reverse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parens), __pyx_ptype_6pynini_PdtParentheses, 1, "parens", 0))) __PYX_ERR(0, 1785, __pyx_L1_error)
  __pyx_r = __pyx_pf_6pynini_46pdt_reverse(__pyx_self, __pyx_v_ipdt, __pyx_v_parens);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_46pdt_reverse(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_ipdt, struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_parens) {
  struct __pyx_obj_6pynini_Fst *__pyx_v_pdt = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("pdt_reverse", 0);

  /* "pynini.pyx":1801
 *     The FST component of a PDT resulting from reversing the input PDT.
 *   """
 *   cdef Fst pdt = _compile_or_copy_Fst(ipdt)             # <<<<<<<<<<<<<<
 *   cdef Fst result = Fst(pdt.arc_type())
 *   PdtReverse(deref(pdt._fst), parens._parens, result._mfst.get())
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_ipdt, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1801, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_pdt = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":1802
 *   """
 *   cdef Fst pdt = _compile_or_copy_Fst(ipdt)
 *   cdef Fst result = Fst(pdt.arc_type())             # <<<<<<<<<<<<<<
 *   PdtReverse(deref(pdt._fst), parens._parens, result._mfst.get())
 *   result._check_mutating_imethod()
 */
  if (unlikely(((PyObject *)__pyx_v_pdt) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "arc_type");
    __PYX_ERR(0, 1802, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_convert_PyUnicode_string_to_py_std__in_string(((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_pdt->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.arc_type(((struct __pyx_obj_9pywrapfst__Fst *)__pyx_v_pdt), 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1802, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1802, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_result = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pynini.pyx":1803
 *   cdef Fst pdt = _compile_or_copy_Fst(ipdt)
 *   cdef Fst result = Fst(pdt.arc_type())
 *   PdtReverse(deref(pdt._fst), parens._parens, result._mfst.get())             # <<<<<<<<<<<<<<
 *   result._check_mutating_imethod()
 *   return result
 */
  if (unlikely(((PyObject *)__pyx_v_pdt) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_fst");
    __PYX_ERR(0, 1803, __pyx_L1_error)
  }
  if (unlikely(((PyObject *)__pyx_v_parens) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_parens");
    __PYX_ERR(0, 1803, __pyx_L1_error)
  }
  fst::script::PdtReverse((*__pyx_v_pdt->__pyx_base.__pyx_base._fst), __pyx_v_parens->_parens, __pyx_v_result->__pyx_base._mfst.get());

  /* "pynini.pyx":1804
 *   cdef Fst result = Fst(pdt.arc_type())
 *   PdtReverse(deref(pdt._fst), parens._parens, result._mfst.get())
 *   result._check_mutating_imethod()             # <<<<<<<<<<<<<<
 *   return result
 * 
 */
  ((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_result->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base._check_mutating_imethod(((struct __pyx_obj_9pywrapfst__MutableFst *)__pyx_v_result)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1804, __pyx_L1_error)

  /* "pynini.pyx":1805
 *   PdtReverse(deref(pdt._fst), parens._parens, result._mfst.get())
 *   result._check_mutating_imethod()
 *   return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "pynini.pyx":1785
 * 
 * 
 * def pdt_reverse(ipdt, PdtParentheses parens):             # <<<<<<<<<<<<<<
 *   """
 *   pdt_reverse(ipdt, parens)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pynini.pdt_reverse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_pdt);
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1808
 * 
 * 
 * def pdt_shortestpath(ipdt,             # <<<<<<<<<<<<<<
 *                      PdtParentheses parens,
 *                      queue_type=b"fifo",
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_49pdt_shortestpath(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pynini_48pdt_shortestpath[] = "\n  pdt_shortestpath(ipdt, parens, queue_type=\"fifo\", keep_parentheses=False,\n                   path_gc=True)\n\n  Computes the shortest path through a bounded-stack PDT.\n\n  This operation computes the shortest path through a PDT. The input PDT is\n  defined by the combination of an FST and a PdtParentheses object specifying\n  the PDT stack symbols.\n\n  Args:\n    ipdt: The FST component of an input PDT.\n    parens: A PdtParentheses object specifying the input PDT's stack symbols.\n    queue_type: A string matching a known queue type; one of: \"fifo\" (default),\n        \"lifo\", \"state\".\n    keep_parentheses: Should the output FST preserve parentheses arcs?\n    path_gc: Should shortest path data be garbage-collected?\n\n  Returns:\n    A string FST representing the shortest path.\n\n  Raises:\n    FstOpError: Operation failed.\n  ";
static PyMethodDef __pyx_mdef_6pynini_49pdt_shortestpath = {"pdt_shortestpath", (PyCFunction)__pyx_pw_6pynini_49pdt_shortestpath, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pynini_48pdt_shortestpath};
static PyObject *__pyx_pw_6pynini_49pdt_shortestpath(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ipdt = 0;
  struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_parens = 0;
  PyObject *__pyx_v_queue_type = 0;
  bool __pyx_v_keep_parentheses;
  bool __pyx_v_path_gc;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pdt_shortestpath (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ipdt,&__pyx_n_s_parens,&__pyx_n_s_queue_type,&__pyx_n_s_keep_parentheses,&__pyx_n_s_path_gc,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[2] = ((PyObject *)__pyx_n_b_fifo);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ipdt)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parens)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pdt_shortestpath", 0, 2, 5, 1); __PYX_ERR(0, 1808, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_queue_type);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_keep_parentheses);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_path_gc);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "pdt_shortestpath") < 0)) __PYX_ERR(0, 1808, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_ipdt = values[0];
    __pyx_v_parens = ((struct __pyx_obj_6pynini_PdtParentheses *)values[1]);
    __pyx_v_queue_type = values[2];
    if (values[3]) {
      __pyx_v_keep_parentheses = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_keep_parentheses == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1811, __pyx_L3_error)
    } else {

      /* "pynini.pyx":1811
 *                      PdtParentheses parens,
 *                      queue_type=b"fifo",
 *                      bool keep_parentheses=False,             # <<<<<<<<<<<<<<
 *                      bool path_gc=True):
 *   """
 */
      __pyx_v_keep_parentheses = ((bool)0);
    }
    if (values[4]) {
      __pyx_v_path_gc = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_path_gc == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1812, __pyx_L3_error)
    } else {

      /* "pynini.pyx":1812
 *                      queue_type=b"fifo",
 *                      bool keep_parentheses=False,
 *                      bool path_gc=True):             # <<<<<<<<<<<<<<
 *   """
 *   pdt_shortestpath(ipdt, parens, queue_type="fifo", keep_parentheses=False,
 */
      __pyx_v_path_gc = ((bool)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pdt_shortestpath", 0, 2, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1808, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.pdt_shortestpath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parens), __pyx_ptype_6pynini_PdtParentheses, 1, "parens", 0))) __PYX_ERR(0, 1809, __pyx_L1_error)
  __pyx_r = __pyx_pf_6pynini_48pdt_shortestpath(__pyx_self, __pyx_v_ipdt, __pyx_v_parens, __pyx_v_queue_type, __pyx_v_keep_parentheses, __pyx_v_path_gc);

  /* "pynini.pyx":1808
 * 
 * 
 * def pdt_shortestpath(ipdt,             # <<<<<<<<<<<<<<
 *                      PdtParentheses parens,
 *                      queue_type=b"fifo",
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_48pdt_shortestpath(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_ipdt, struct __pyx_obj_6pynini_PdtParentheses *__pyx_v_parens, PyObject *__pyx_v_queue_type, bool __pyx_v_keep_parentheses, bool __pyx_v_path_gc) {
  struct __pyx_obj_6pynini_Fst *__pyx_v_pdt = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_v_result = 0;
  std::unique_ptr<fst::script::PdtShortestPathOptions>  __pyx_v_opts;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  std::string __pyx_t_3;
  enum fst::QueueType __pyx_t_4;
  __Pyx_RefNannySetupContext("pdt_shortestpath", 0);

  /* "pynini.pyx":1837
 *     FstOpError: Operation failed.
 *   """
 *   cdef Fst pdt = _compile_or_copy_Fst(ipdt)             # <<<<<<<<<<<<<<
 *   cdef Fst result = Fst(pdt.arc_type())
 *   cdef unique_ptr[PdtShortestPathOptions] opts
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_ipdt, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1837, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_pdt = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":1838
 *   """
 *   cdef Fst pdt = _compile_or_copy_Fst(ipdt)
 *   cdef Fst result = Fst(pdt.arc_type())             # <<<<<<<<<<<<<<
 *   cdef unique_ptr[PdtShortestPathOptions] opts
 *   opts.reset(new PdtShortestPathOptions(
 */
  if (unlikely(((PyObject *)__pyx_v_pdt) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "arc_type");
    __PYX_ERR(0, 1838, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_convert_PyUnicode_string_to_py_std__in_string(((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_pdt->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.arc_type(((struct __pyx_obj_9pywrapfst__Fst *)__pyx_v_pdt), 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1838, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1838, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_result = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pynini.pyx":1841
 *   cdef unique_ptr[PdtShortestPathOptions] opts
 *   opts.reset(new PdtShortestPathOptions(
 *         _get_queue_type(tostring(queue_type)), keep_parentheses, path_gc))             # <<<<<<<<<<<<<<
 *   PdtShortestPath(deref(pdt._fst), parens._parens, result._mfst.get(),
 *                   deref(opts))
 */
  __pyx_t_3 = __pyx_f_9pywrapfst_tostring(__pyx_v_queue_type, NULL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1841, __pyx_L1_error)
  __pyx_t_4 = __pyx_f_9pywrapfst__get_queue_type(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1841, __pyx_L1_error)

  /* "pynini.pyx":1840
 *   cdef Fst result = Fst(pdt.arc_type())
 *   cdef unique_ptr[PdtShortestPathOptions] opts
 *   opts.reset(new PdtShortestPathOptions(             # <<<<<<<<<<<<<<
 *         _get_queue_type(tostring(queue_type)), keep_parentheses, path_gc))
 *   PdtShortestPath(deref(pdt._fst), parens._parens, result._mfst.get(),
 */
  __pyx_v_opts.reset(new fst::script::PdtShortestPathOptions(__pyx_t_4, __pyx_v_keep_parentheses, __pyx_v_path_gc));

  /* "pynini.pyx":1842
 *   opts.reset(new PdtShortestPathOptions(
 *         _get_queue_type(tostring(queue_type)), keep_parentheses, path_gc))
 *   PdtShortestPath(deref(pdt._fst), parens._parens, result._mfst.get(),             # <<<<<<<<<<<<<<
 *                   deref(opts))
 *   result._check_mutating_imethod()
 */
  if (unlikely(((PyObject *)__pyx_v_pdt) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_fst");
    __PYX_ERR(0, 1842, __pyx_L1_error)
  }
  if (unlikely(((PyObject *)__pyx_v_parens) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_parens");
    __PYX_ERR(0, 1842, __pyx_L1_error)
  }

  /* "pynini.pyx":1843
 *         _get_queue_type(tostring(queue_type)), keep_parentheses, path_gc))
 *   PdtShortestPath(deref(pdt._fst), parens._parens, result._mfst.get(),
 *                   deref(opts))             # <<<<<<<<<<<<<<
 *   result._check_mutating_imethod()
 *   return result
 */
  fst::script::PdtShortestPath((*__pyx_v_pdt->__pyx_base.__pyx_base._fst), __pyx_v_parens->_parens, __pyx_v_result->__pyx_base._mfst.get(), (*__pyx_v_opts));

  /* "pynini.pyx":1844
 *   PdtShortestPath(deref(pdt._fst), parens._parens, result._mfst.get(),
 *                   deref(opts))
 *   result._check_mutating_imethod()             # <<<<<<<<<<<<<<
 *   return result
 * 
 */
  ((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_result->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base._check_mutating_imethod(((struct __pyx_obj_9pywrapfst__MutableFst *)__pyx_v_result)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1844, __pyx_L1_error)

  /* "pynini.pyx":1845
 *                   deref(opts))
 *   result._check_mutating_imethod()
 *   return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "pynini.pyx":1808
 * 
 * 
 * def pdt_shortestpath(ipdt,             # <<<<<<<<<<<<<<
 *                      PdtParentheses parens,
 *                      queue_type=b"fifo",
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pynini.pdt_shortestpath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_pdt);
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1871
 *   cdef vector[int64] _assign
 * 
 *   def __repr__(self):             # <<<<<<<<<<<<<<
 *     return "<MPdtParentheses at 0x{:x}>".format(id(self))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_15MPdtParentheses_1__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pynini_15MPdtParentheses_1__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_15MPdtParentheses___repr__(((struct __pyx_obj_6pynini_MPdtParentheses *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_15MPdtParentheses___repr__(struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "pynini.pyx":1872
 * 
 *   def __repr__(self):
 *     return "<MPdtParentheses at 0x{:x}>".format(id(self))             # <<<<<<<<<<<<<<
 * 
 *   def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_MPdtParentheses_at_0x_x, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1872, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_id, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1872, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1872, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1872, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1872, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1872, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1872, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":1871
 *   cdef vector[int64] _assign
 * 
 *   def __repr__(self):             # <<<<<<<<<<<<<<
 *     return "<MPdtParentheses at 0x{:x}>".format(id(self))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynini.MPdtParentheses.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1874
 *     return "<MPdtParentheses at 0x{:x}>".format(id(self))
 * 
 *   def __len__(self):             # <<<<<<<<<<<<<<
 *     return self._parens.size()
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_6pynini_15MPdtParentheses_3__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_6pynini_15MPdtParentheses_3__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_15MPdtParentheses_2__len__(((struct __pyx_obj_6pynini_MPdtParentheses *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_6pynini_15MPdtParentheses_2__len__(struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "pynini.pyx":1875
 * 
 *   def __len__(self):
 *     return self._parens.size()             # <<<<<<<<<<<<<<
 * 
 *   def __iter__(self):
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_parens");
    __PYX_ERR(0, 1875, __pyx_L1_error)
  }
  __pyx_r = __pyx_v_self->_parens.size();
  goto __pyx_L0;

  /* "pynini.pyx":1874
 *     return "<MPdtParentheses at 0x{:x}>".format(id(self))
 * 
 *   def __len__(self):             # <<<<<<<<<<<<<<
 *     return self._parens.size()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pynini.MPdtParentheses.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6pynini_15MPdtParentheses_6generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "pynini.pyx":1877
 *     return self._parens.size()
 * 
 *   def __iter__(self):             # <<<<<<<<<<<<<<
 *     cdef size_t i = 0
 *     for i in range(self._parens.size()):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_15MPdtParentheses_5__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pynini_15MPdtParentheses_5__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_15MPdtParentheses_4__iter__(((struct __pyx_obj_6pynini_MPdtParentheses *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_15MPdtParentheses_4__iter__(struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_self) {
  struct __pyx_obj_6pynini___pyx_scope_struct_7___iter__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);
  __pyx_cur_scope = (struct __pyx_obj_6pynini___pyx_scope_struct_7___iter__ *)__pyx_tp_new_6pynini___pyx_scope_struct_7___iter__(__pyx_ptype_6pynini___pyx_scope_struct_7___iter__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6pynini___pyx_scope_struct_7___iter__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1877, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6pynini_15MPdtParentheses_6generator1, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter, __pyx_n_s_MPdtParentheses___iter, __pyx_n_s_pynini); if (unlikely(!gen)) __PYX_ERR(0, 1877, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pynini.MPdtParentheses.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6pynini_15MPdtParentheses_6generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6pynini___pyx_scope_struct_7___iter__ *__pyx_cur_scope = ((struct __pyx_obj_6pynini___pyx_scope_struct_7___iter__ *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  std::vector<std::pair<__pyx_t_10basictypes_int64,__pyx_t_10basictypes_int64> > ::size_type __pyx_t_1;
  std::vector<std::pair<__pyx_t_10basictypes_int64,__pyx_t_10basictypes_int64> > ::size_type __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1877, __pyx_L1_error)

  /* "pynini.pyx":1878
 * 
 *   def __iter__(self):
 *     cdef size_t i = 0             # <<<<<<<<<<<<<<
 *     for i in range(self._parens.size()):
 *       yield (self._parens[i].first, self._parens[i].second, self._assign[i])
 */
  __pyx_cur_scope->__pyx_v_i = 0;

  /* "pynini.pyx":1879
 *   def __iter__(self):
 *     cdef size_t i = 0
 *     for i in range(self._parens.size()):             # <<<<<<<<<<<<<<
 *       yield (self._parens[i].first, self._parens[i].second, self._assign[i])
 * 
 */
  if (unlikely(((PyObject *)__pyx_cur_scope->__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_parens");
    __PYX_ERR(0, 1879, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_cur_scope->__pyx_v_self->_parens.size();
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_cur_scope->__pyx_v_i = __pyx_t_3;

    /* "pynini.pyx":1880
 *     cdef size_t i = 0
 *     for i in range(self._parens.size()):
 *       yield (self._parens[i].first, self._parens[i].second, self._assign[i])             # <<<<<<<<<<<<<<
 * 
 *   cpdef MPdtParentheses copy(self):
 */
    if (unlikely(((PyObject *)__pyx_cur_scope->__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_parens");
      __PYX_ERR(0, 1880, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyInt_From_int64_t((__pyx_cur_scope->__pyx_v_self->_parens[__pyx_cur_scope->__pyx_v_i]).first); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1880, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(((PyObject *)__pyx_cur_scope->__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_parens");
      __PYX_ERR(0, 1880, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyInt_From_int64_t((__pyx_cur_scope->__pyx_v_self->_parens[__pyx_cur_scope->__pyx_v_i]).second); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1880, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(((PyObject *)__pyx_cur_scope->__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_assign");
      __PYX_ERR(0, 1880, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_PyInt_From_int64_t((__pyx_cur_scope->__pyx_v_self->_assign[__pyx_cur_scope->__pyx_v_i])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1880, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1880, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_6);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_r = __pyx_t_7;
    __pyx_t_7 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1880, __pyx_L1_error)
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "pynini.pyx":1877
 *     return self._parens.size()
 * 
 *   def __iter__(self):             # <<<<<<<<<<<<<<
 *     cdef size_t i = 0
 *     for i in range(self._parens.size()):
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1882
 *       yield (self._parens[i].first, self._parens[i].second, self._assign[i])
 * 
 *   cpdef MPdtParentheses copy(self):             # <<<<<<<<<<<<<<
 *     """
 *     copy(self)
 */

static PyObject *__pyx_pw_6pynini_15MPdtParentheses_8copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static struct __pyx_obj_6pynini_MPdtParentheses *__pyx_f_6pynini_15MPdtParentheses_copy(struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_self, int __pyx_skip_dispatch) {
  struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_result = 0;
  struct __pyx_obj_6pynini_MPdtParentheses *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  std::vector<std::pair<__pyx_t_10basictypes_int64,__pyx_t_10basictypes_int64> >  __pyx_t_5;
  std::vector<__pyx_t_10basictypes_int64>  __pyx_t_6;
  __Pyx_RefNannySetupContext("copy", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_copy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1882, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_15MPdtParentheses_8copy)) {
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1882, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1882, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_6pynini_MPdtParentheses))))) __PYX_ERR(0, 1882, __pyx_L1_error)
      __pyx_r = ((struct __pyx_obj_6pynini_MPdtParentheses *)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":1891
 *       A deep copy of the MPdtParentheses object.
 *     """
 *     cpdef MPdtParentheses result = MPdtParentheses.__new__(MPdtParentheses)             # <<<<<<<<<<<<<<
 *     result._parens = self._parens
 *     result._assign = self._assign
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_6pynini_MPdtParentheses(((PyTypeObject *)__pyx_ptype_6pynini_MPdtParentheses), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1891, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_result = ((struct __pyx_obj_6pynini_MPdtParentheses *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":1892
 *     """
 *     cpdef MPdtParentheses result = MPdtParentheses.__new__(MPdtParentheses)
 *     result._parens = self._parens             # <<<<<<<<<<<<<<
 *     result._assign = self._assign
 *     return result
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_parens");
    __PYX_ERR(0, 1892, __pyx_L1_error)
  }
  __pyx_t_5 = __pyx_v_self->_parens;
  if (unlikely(((PyObject *)__pyx_v_result) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_parens");
    __PYX_ERR(0, 1892, __pyx_L1_error)
  }
  __pyx_v_result->_parens = __pyx_t_5;

  /* "pynini.pyx":1893
 *     cpdef MPdtParentheses result = MPdtParentheses.__new__(MPdtParentheses)
 *     result._parens = self._parens
 *     result._assign = self._assign             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_assign");
    __PYX_ERR(0, 1893, __pyx_L1_error)
  }
  __pyx_t_6 = __pyx_v_self->_assign;
  if (unlikely(((PyObject *)__pyx_v_result) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_assign");
    __PYX_ERR(0, 1893, __pyx_L1_error)
  }
  __pyx_v_result->_assign = __pyx_t_6;

  /* "pynini.pyx":1894
 *     result._parens = self._parens
 *     result._assign = self._assign
 *     return result             # <<<<<<<<<<<<<<
 * 
 *   cpdef void add_triple(self, int64 push, int64 pop, int64 assignment):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "pynini.pyx":1882
 *       yield (self._parens[i].first, self._parens[i].second, self._assign[i])
 * 
 *   cpdef MPdtParentheses copy(self):             # <<<<<<<<<<<<<<
 *     """
 *     copy(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynini.MPdtParentheses.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_15MPdtParentheses_8copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pynini_15MPdtParentheses_7copy[] = "\n    copy(self)\n\n    Makes a copy of this MPdtParentheses object.\n\n    Returns:\n      A deep copy of the MPdtParentheses object.\n    ";
static PyObject *__pyx_pw_6pynini_15MPdtParentheses_8copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_15MPdtParentheses_7copy(((struct __pyx_obj_6pynini_MPdtParentheses *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_15MPdtParentheses_7copy(struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("copy", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini_15MPdtParentheses_copy(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1882, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.MPdtParentheses.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1896
 *     return result
 * 
 *   cpdef void add_triple(self, int64 push, int64 pop, int64 assignment):             # <<<<<<<<<<<<<<
 *     """
 *     add_triple(self, push, pop, assignment)
 */

static PyObject *__pyx_pw_6pynini_15MPdtParentheses_10add_triple(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static void __pyx_f_6pynini_15MPdtParentheses_add_triple(struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_self, __pyx_t_10basictypes_int64 __pyx_v_push, __pyx_t_10basictypes_int64 __pyx_v_pop, __pyx_t_10basictypes_int64 __pyx_v_assignment, int __pyx_skip_dispatch) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  std::pair<__pyx_t_10basictypes_int64,__pyx_t_10basictypes_int64>  __pyx_t_10;
  __Pyx_RefNannySetupContext("add_triple", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_triple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1896, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_15MPdtParentheses_10add_triple)) {
      __pyx_t_3 = __Pyx_PyInt_From_int64_t(__pyx_v_push); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1896, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyInt_From_int64_t(__pyx_v_pop); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1896, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyInt_From_int64_t(__pyx_v_assignment); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1896, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_6 = __pyx_t_1; __pyx_t_7 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_8 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_t_3, __pyx_t_4, __pyx_t_5};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1896, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_t_3, __pyx_t_4, __pyx_t_5};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1896, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1896, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (__pyx_t_7) {
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_8, __pyx_t_5);
        __pyx_t_3 = 0;
        __pyx_t_4 = 0;
        __pyx_t_5 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1896, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":1909
 *           assigned to.
 *     """
 *     self._parens.push_back(pair[int64, int64](push, pop))             # <<<<<<<<<<<<<<
 *     self._assign.push_back(assignment)
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_parens");
    __PYX_ERR(0, 1909, __pyx_L1_error)
  }
  try {
    __pyx_t_10 = std::pair<__pyx_t_10basictypes_int64,__pyx_t_10basictypes_int64> (__pyx_v_push, __pyx_v_pop);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1909, __pyx_L1_error)
  }
  try {
    __pyx_v_self->_parens.push_back(__pyx_t_10);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1909, __pyx_L1_error)
  }

  /* "pynini.pyx":1910
 *     """
 *     self._parens.push_back(pair[int64, int64](push, pop))
 *     self._assign.push_back(assignment)             # <<<<<<<<<<<<<<
 * 
 *   @classmethod
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_assign");
    __PYX_ERR(0, 1910, __pyx_L1_error)
  }
  try {
    __pyx_v_self->_assign.push_back(__pyx_v_assignment);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1910, __pyx_L1_error)
  }

  /* "pynini.pyx":1896
 *     return result
 * 
 *   cpdef void add_triple(self, int64 push, int64 pop, int64 assignment):             # <<<<<<<<<<<<<<
 *     """
 *     add_triple(self, push, pop, assignment)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_WriteUnraisable("pynini.MPdtParentheses.add_triple", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_15MPdtParentheses_10add_triple(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pynini_15MPdtParentheses_9add_triple[] = "\n    add_triple(self, push, pop, assignment)\n\n    Adds a triple of (left parenthesis, right parenthesis, stack assignment)\n    triples to the object.\n\n    Args:\n      push: An arc label to be interpreted as a \"push\" operation.\n      pop: An arc label to be interpreted as a \"pop\" operation.\n      assignment: An arc label indicating what stack the parentheses pair is\n          assigned to.\n    ";
static PyObject *__pyx_pw_6pynini_15MPdtParentheses_10add_triple(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_10basictypes_int64 __pyx_v_push;
  __pyx_t_10basictypes_int64 __pyx_v_pop;
  __pyx_t_10basictypes_int64 __pyx_v_assignment;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_triple (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_push,&__pyx_n_s_pop,&__pyx_n_s_assignment,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_push)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pop)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_triple", 1, 3, 3, 1); __PYX_ERR(0, 1896, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_assignment)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_triple", 1, 3, 3, 2); __PYX_ERR(0, 1896, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_triple") < 0)) __PYX_ERR(0, 1896, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_push = __Pyx_PyInt_As_int64_t(values[0]); if (unlikely((__pyx_v_push == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1896, __pyx_L3_error)
    __pyx_v_pop = __Pyx_PyInt_As_int64_t(values[1]); if (unlikely((__pyx_v_pop == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1896, __pyx_L3_error)
    __pyx_v_assignment = __Pyx_PyInt_As_int64_t(values[2]); if (unlikely((__pyx_v_assignment == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1896, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_triple", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1896, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.MPdtParentheses.add_triple", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_15MPdtParentheses_9add_triple(((struct __pyx_obj_6pynini_MPdtParentheses *)__pyx_v_self), __pyx_v_push, __pyx_v_pop, __pyx_v_assignment);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_15MPdtParentheses_9add_triple(struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_self, __pyx_t_10basictypes_int64 __pyx_v_push, __pyx_t_10basictypes_int64 __pyx_v_pop, __pyx_t_10basictypes_int64 __pyx_v_assignment) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("add_triple", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_f_6pynini_15MPdtParentheses_add_triple(__pyx_v_self, __pyx_v_push, __pyx_v_pop, __pyx_v_assignment, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1896, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.MPdtParentheses.add_triple", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1913
 * 
 *   @classmethod
 *   def read(cls, filename):             # <<<<<<<<<<<<<<
 *     """
 *     MPdtParentheses.read(filename)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_15MPdtParentheses_12read(PyObject *__pyx_v_cls, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_6pynini_15MPdtParentheses_11read[] = "\n    MPdtParentheses.read(filename)\n\n    Reads parentheses/assignment triples from a text file.\n\n    This class method creates a new MPdtParentheses object from a pairs of\n    integer labels in a text file.\n\n    Args:\n      filename: The string location of the input file.\n\n    Returns:\n      A new MPdtParentheses instance.\n\n    Raises:\n      FstIOError: Read failed.\n    ";
static PyObject *__pyx_pw_6pynini_15MPdtParentheses_12read(PyObject *__pyx_v_cls, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_15MPdtParentheses_11read(((PyTypeObject*)__pyx_v_cls), ((PyObject *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_15MPdtParentheses_11read(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_filename) {
  struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("read", 0);

  /* "pynini.pyx":1931
 *       FstIOError: Read failed.
 *     """
 *     cdef MPdtParentheses result = MPdtParentheses.__new__(MPdtParentheses)             # <<<<<<<<<<<<<<
 *     if not ReadLabelTriples[int64](tostring(filename), addr(result._parens),
 *                                    addr(result._assign), False):
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_6pynini_MPdtParentheses(((PyTypeObject *)__pyx_ptype_6pynini_MPdtParentheses), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1931, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_result = ((struct __pyx_obj_6pynini_MPdtParentheses *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":1932
 *     """
 *     cdef MPdtParentheses result = MPdtParentheses.__new__(MPdtParentheses)
 *     if not ReadLabelTriples[int64](tostring(filename), addr(result._parens),             # <<<<<<<<<<<<<<
 *                                    addr(result._assign), False):
 *       raise FstIOError("Read failed: {!r}".format(filename))
 */
  __pyx_t_2 = __pyx_f_9pywrapfst_tostring(__pyx_v_filename, NULL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1932, __pyx_L1_error)
  if (unlikely(((PyObject *)__pyx_v_result) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_parens");
    __PYX_ERR(0, 1932, __pyx_L1_error)
  }

  /* "pynini.pyx":1933
 *     cdef MPdtParentheses result = MPdtParentheses.__new__(MPdtParentheses)
 *     if not ReadLabelTriples[int64](tostring(filename), addr(result._parens),
 *                                    addr(result._assign), False):             # <<<<<<<<<<<<<<
 *       raise FstIOError("Read failed: {!r}".format(filename))
 *     return result
 */
  if (unlikely(((PyObject *)__pyx_v_result) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_assign");
    __PYX_ERR(0, 1933, __pyx_L1_error)
  }

  /* "pynini.pyx":1932
 *     """
 *     cdef MPdtParentheses result = MPdtParentheses.__new__(MPdtParentheses)
 *     if not ReadLabelTriples[int64](tostring(filename), addr(result._parens),             # <<<<<<<<<<<<<<
 *                                    addr(result._assign), False):
 *       raise FstIOError("Read failed: {!r}".format(filename))
 */
  __pyx_t_3 = ((!(fst::ReadLabelTriples<__pyx_t_10basictypes_int64>(__pyx_t_2, (&__pyx_v_result->_parens), ((std::vector<__pyx_t_10basictypes_int64>  *)(&__pyx_v_result->_assign)), 0) != 0)) != 0);
  if (unlikely(__pyx_t_3)) {

    /* "pynini.pyx":1934
 *     if not ReadLabelTriples[int64](tostring(filename), addr(result._parens),
 *                                    addr(result._assign), False):
 *       raise FstIOError("Read failed: {!r}".format(filename))             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstIOError); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1934, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Read_failed_r, __pyx_n_s_format); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1934, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_filename); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1934, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_v_filename};
        __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1934, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_5);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_v_filename};
        __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1934, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_5);
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1934, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
        __Pyx_INCREF(__pyx_v_filename);
        __Pyx_GIVEREF(__pyx_v_filename);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_v_filename);
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1934, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1934, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_5};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1934, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_5};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1934, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1934, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1934, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 1934, __pyx_L1_error)

    /* "pynini.pyx":1932
 *     """
 *     cdef MPdtParentheses result = MPdtParentheses.__new__(MPdtParentheses)
 *     if not ReadLabelTriples[int64](tostring(filename), addr(result._parens),             # <<<<<<<<<<<<<<
 *                                    addr(result._assign), False):
 *       raise FstIOError("Read failed: {!r}".format(filename))
 */
  }

  /* "pynini.pyx":1935
 *                                    addr(result._assign), False):
 *       raise FstIOError("Read failed: {!r}".format(filename))
 *     return result             # <<<<<<<<<<<<<<
 * 
 *   cpdef void write(self, filename) except *:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "pynini.pyx":1913
 * 
 *   @classmethod
 *   def read(cls, filename):             # <<<<<<<<<<<<<<
 *     """
 *     MPdtParentheses.read(filename)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pynini.MPdtParentheses.read", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1937
 *     return result
 * 
 *   cpdef void write(self, filename) except *:             # <<<<<<<<<<<<<<
 *     """
 *     write(self, filename)
 */

static PyObject *__pyx_pw_6pynini_15MPdtParentheses_14write(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static void __pyx_f_6pynini_15MPdtParentheses_write(struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_self, PyObject *__pyx_v_filename, int __pyx_skip_dispatch) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  std::string __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("write", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_write); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1937, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_15MPdtParentheses_14write)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_filename); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1937, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_filename};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1937, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_filename};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1937, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        {
          __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1937, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
          __Pyx_INCREF(__pyx_v_filename);
          __Pyx_GIVEREF(__pyx_v_filename);
          PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_filename);
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1937, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":1951
 *       FstIOError: Write failed.
 *     """
 *     if not WriteLabelTriples[int64](tostring(filename), self._parens,             # <<<<<<<<<<<<<<
 *                                     self._assign):
 *       raise FstIOError("Write failed: {!r}".format(filename))
 */
  __pyx_t_6 = __pyx_f_9pywrapfst_tostring(__pyx_v_filename, NULL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1951, __pyx_L1_error)
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_parens");
    __PYX_ERR(0, 1951, __pyx_L1_error)
  }

  /* "pynini.pyx":1952
 *     """
 *     if not WriteLabelTriples[int64](tostring(filename), self._parens,
 *                                     self._assign):             # <<<<<<<<<<<<<<
 *       raise FstIOError("Write failed: {!r}".format(filename))
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_assign");
    __PYX_ERR(0, 1952, __pyx_L1_error)
  }

  /* "pynini.pyx":1951
 *       FstIOError: Write failed.
 *     """
 *     if not WriteLabelTriples[int64](tostring(filename), self._parens,             # <<<<<<<<<<<<<<
 *                                     self._assign):
 *       raise FstIOError("Write failed: {!r}".format(filename))
 */
  __pyx_t_7 = ((!(fst::WriteLabelTriples<__pyx_t_10basictypes_int64>(__pyx_t_6, __pyx_v_self->_parens, ((std::vector<__pyx_t_10basictypes_int64>  &)__pyx_v_self->_assign)) != 0)) != 0);
  if (unlikely(__pyx_t_7)) {

    /* "pynini.pyx":1953
 *     if not WriteLabelTriples[int64](tostring(filename), self._parens,
 *                                     self._assign):
 *       raise FstIOError("Write failed: {!r}".format(filename))             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstIOError); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1953, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Write_failed_r, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1953, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_filename); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1953, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_filename};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1953, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_filename};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1953, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1953, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(__pyx_v_filename);
        __Pyx_GIVEREF(__pyx_v_filename);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_v_filename);
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1953, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1953, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1953, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1953, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1953, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1953, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 1953, __pyx_L1_error)

    /* "pynini.pyx":1951
 *       FstIOError: Write failed.
 *     """
 *     if not WriteLabelTriples[int64](tostring(filename), self._parens,             # <<<<<<<<<<<<<<
 *                                     self._assign):
 *       raise FstIOError("Write failed: {!r}".format(filename))
 */
  }

  /* "pynini.pyx":1937
 *     return result
 * 
 *   cpdef void write(self, filename) except *:             # <<<<<<<<<<<<<<
 *     """
 *     write(self, filename)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pynini.MPdtParentheses.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_15MPdtParentheses_14write(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_6pynini_15MPdtParentheses_13write[] = "\n    write(self, filename)\n\n    Writes parentheses triples to a text file.\n\n    This method writes the MPdtParentheses object to a text file.\n\n    Args:\n      filename: The string location of the output file.\n\n    Raises:\n      FstIOError: Write failed.\n    ";
static PyObject *__pyx_pw_6pynini_15MPdtParentheses_14write(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_15MPdtParentheses_13write(((struct __pyx_obj_6pynini_MPdtParentheses *)__pyx_v_self), ((PyObject *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_15MPdtParentheses_13write(struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("write", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_f_6pynini_15MPdtParentheses_write(__pyx_v_self, __pyx_v_filename, 1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1937, __pyx_L1_error)
  __pyx_t_1 = __Pyx_void_to_None(NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.MPdtParentheses.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef bint use_setstate
 *     state = (self._assign, self._parens)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_15MPdtParentheses_16__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6pynini_15MPdtParentheses_16__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_15MPdtParentheses_15__reduce_cython__(((struct __pyx_obj_6pynini_MPdtParentheses *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_15MPdtParentheses_15__reduce_cython__(struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_self) {
  int __pyx_v_use_setstate;
  PyObject *__pyx_v_state = NULL;
  PyObject *__pyx_v__dict = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     cdef bint use_setstate
 *     state = (self._assign, self._parens)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_assign");
    __PYX_ERR(1, 3, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_convert_vector_to_py___pyx_t_10basictypes_int64(__pyx_v_self->_assign); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_parens");
    __PYX_ERR(1, 3, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c___pyx_t_10basictypes_int64_2c___pyx_t_10basictypes_int64_3e___(__pyx_v_self->_parens); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_v_state = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":4
 *     cdef bint use_setstate
 *     state = (self._assign, self._parens)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_3 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v__dict = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":5
 *     state = (self._assign, self._parens)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_4 = (__pyx_v__dict != Py_None);
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "(tree fragment)":6
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v__dict);
    __pyx_t_2 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "(tree fragment)":7
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":5
 *     state = (self._assign, self._parens)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":9
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_MPdtParentheses, (type(self), 0x7925043, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":10
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_MPdtParentheses, (type(self), 0x7925043, None), state
 *     else:
 */
  __pyx_t_5 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_5) {

    /* "(tree fragment)":11
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_MPdtParentheses, (type(self), 0x7925043, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_MPdtParentheses, (type(self), 0x7925043, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_pyx_unpickle_MPdtParentheses); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 11, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 11, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_127029315);
    __Pyx_GIVEREF(__pyx_int_127029315);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_127029315);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_3, 2, Py_None);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 11, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":10
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_MPdtParentheses, (type(self), 0x7925043, None), state
 *     else:
 */
  }

  /* "(tree fragment)":13
 *         return __pyx_unpickle_MPdtParentheses, (type(self), 0x7925043, None), state
 *     else:
 *         return __pyx_unpickle_MPdtParentheses, (type(self), 0x7925043, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_MPdtParentheses__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_pyx_unpickle_MPdtParentheses); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_127029315);
    __Pyx_GIVEREF(__pyx_int_127029315);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_127029315);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_state);
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_3 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef bint use_setstate
 *     state = (self._assign, self._parens)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynini.MPdtParentheses.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":14
 *     else:
 *         return __pyx_unpickle_MPdtParentheses, (type(self), 0x7925043, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_MPdtParentheses__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_15MPdtParentheses_18__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_6pynini_15MPdtParentheses_18__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_15MPdtParentheses_17__setstate_cython__(((struct __pyx_obj_6pynini_MPdtParentheses *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_15MPdtParentheses_17__setstate_cython__(struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":15
 *         return __pyx_unpickle_MPdtParentheses, (type(self), 0x7925043, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_MPdtParentheses__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_6pynini___pyx_unpickle_MPdtParentheses__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":14
 *     else:
 *         return __pyx_unpickle_MPdtParentheses, (type(self), 0x7925043, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_MPdtParentheses__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.MPdtParentheses.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":1956
 * 
 * 
 * cpdef Fst mpdt_compose(ifst1, ifst2, MPdtParentheses parens,             # <<<<<<<<<<<<<<
 *                        compose_filter=b"paren", bool left_mpdt=True):
 *   """
 */

static PyObject *__pyx_pw_6pynini_51mpdt_compose(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static struct __pyx_obj_6pynini_Fst *__pyx_f_6pynini_mpdt_compose(PyObject *__pyx_v_ifst1, PyObject *__pyx_v_ifst2, struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_parens, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_6pynini_mpdt_compose *__pyx_optional_args) {
  PyObject *__pyx_v_compose_filter = ((PyObject *)__pyx_n_b_paren);

  /* "pynini.pyx":1957
 * 
 * cpdef Fst mpdt_compose(ifst1, ifst2, MPdtParentheses parens,
 *                        compose_filter=b"paren", bool left_mpdt=True):             # <<<<<<<<<<<<<<
 *   """
 *   mpdt_compose(ifst1, ifst2, parens, compose_filter="paren", left_mpdt=True)
 */
  bool __pyx_v_left_mpdt = ((bool)1);
  struct __pyx_obj_6pynini_Fst *__pyx_v_lhs = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_v_rhs = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_v_result = 0;
  enum fst::PdtComposeFilter __pyx_v_compose_filter_enum;
  std::unique_ptr<fst::MPdtComposeOptions>  __pyx_v_opts;
  struct __pyx_obj_6pynini_Fst *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  std::string __pyx_t_6;
  enum fst::PdtComposeFilter __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("mpdt_compose", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_compose_filter = __pyx_optional_args->compose_filter;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_left_mpdt = __pyx_optional_args->left_mpdt;
      }
    }
  }

  /* "pynini.pyx":1991
 *   cdef Fst lhs
 *   cdef Fst rhs
 *   (lhs, rhs) = _compile_or_copy_two_Fsts(ifst1, ifst2)             # <<<<<<<<<<<<<<
 *   _maybe_arcsort(lhs._mfst.get(), rhs._mfst.get())
 *   MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 */
  __pyx_t_1 = __pyx_f_6pynini__compile_or_copy_two_Fsts(__pyx_v_ifst1, __pyx_v_ifst2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1991, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1991, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1991, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1991, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1991, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_3 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_4), 2) < 0) __PYX_ERR(0, 1991, __pyx_L1_error)
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 1991, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_6pynini_Fst))))) __PYX_ERR(0, 1991, __pyx_L1_error)
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_6pynini_Fst))))) __PYX_ERR(0, 1991, __pyx_L1_error)
  __pyx_v_lhs = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_v_rhs = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pynini.pyx":1992
 *   cdef Fst rhs
 *   (lhs, rhs) = _compile_or_copy_two_Fsts(ifst1, ifst2)
 *   _maybe_arcsort(lhs._mfst.get(), rhs._mfst.get())             # <<<<<<<<<<<<<<
 *   MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 *                MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS)
 */
  if (unlikely(((PyObject *)__pyx_v_lhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mfst");
    __PYX_ERR(0, 1992, __pyx_L1_error)
  }
  if (unlikely(((PyObject *)__pyx_v_rhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mfst");
    __PYX_ERR(0, 1992, __pyx_L1_error)
  }
  __pyx_f_6pynini__maybe_arcsort(__pyx_v_lhs->__pyx_base._mfst.get(), __pyx_v_rhs->__pyx_base._mfst.get());

  /* "pynini.pyx":1993
 *   (lhs, rhs) = _compile_or_copy_two_Fsts(ifst1, ifst2)
 *   _maybe_arcsort(lhs._mfst.get(), rhs._mfst.get())
 *   MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),             # <<<<<<<<<<<<<<
 *                MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS)
 *   cdef Fst result = Fst(lhs.arc_type())
 */
  if (unlikely(((PyObject *)__pyx_v_lhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mfst");
    __PYX_ERR(0, 1993, __pyx_L1_error)
  }
  if (unlikely(((PyObject *)__pyx_v_rhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mfst");
    __PYX_ERR(0, 1993, __pyx_L1_error)
  }

  /* "pynini.pyx":1994
 *   _maybe_arcsort(lhs._mfst.get(), rhs._mfst.get())
 *   MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 *                MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS)             # <<<<<<<<<<<<<<
 *   cdef Fst result = Fst(lhs.arc_type())
 *   cdef PdtComposeFilter compose_filter_enum = _get_pdt_compose_filter(
 */
  fst::script::MergeSymbols(__pyx_v_lhs->__pyx_base._mfst.get(), __pyx_v_rhs->__pyx_base._mfst.get(), fst::MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS);

  /* "pynini.pyx":1995
 *   MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 *                MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS)
 *   cdef Fst result = Fst(lhs.arc_type())             # <<<<<<<<<<<<<<
 *   cdef PdtComposeFilter compose_filter_enum = _get_pdt_compose_filter(
 *       tostring(compose_filter))
 */
  if (unlikely(((PyObject *)__pyx_v_lhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "arc_type");
    __PYX_ERR(0, 1995, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_convert_PyUnicode_string_to_py_std__in_string(((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_lhs->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.arc_type(((struct __pyx_obj_9pywrapfst__Fst *)__pyx_v_lhs), 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1995, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1995, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_result = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pynini.pyx":1997
 *   cdef Fst result = Fst(lhs.arc_type())
 *   cdef PdtComposeFilter compose_filter_enum = _get_pdt_compose_filter(
 *       tostring(compose_filter))             # <<<<<<<<<<<<<<
 *   cdef unique_ptr[MPdtComposeOptions] opts
 *   opts.reset(new MPdtComposeOptions(True, compose_filter_enum))
 */
  __pyx_t_6 = __pyx_f_9pywrapfst_tostring(__pyx_v_compose_filter, NULL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1997, __pyx_L1_error)

  /* "pynini.pyx":1996
 *                MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS)
 *   cdef Fst result = Fst(lhs.arc_type())
 *   cdef PdtComposeFilter compose_filter_enum = _get_pdt_compose_filter(             # <<<<<<<<<<<<<<
 *       tostring(compose_filter))
 *   cdef unique_ptr[MPdtComposeOptions] opts
 */
  __pyx_t_7 = __pyx_f_6pynini__get_pdt_compose_filter(__pyx_t_6); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1996, __pyx_L1_error)
  __pyx_v_compose_filter_enum = __pyx_t_7;

  /* "pynini.pyx":1999
 *       tostring(compose_filter))
 *   cdef unique_ptr[MPdtComposeOptions] opts
 *   opts.reset(new MPdtComposeOptions(True, compose_filter_enum))             # <<<<<<<<<<<<<<
 *   MPdtCompose(deref(lhs._fst), deref(rhs._fst), parens._parens,
 *               parens._assign, result._mfst.get(), deref(opts), left_mpdt)
 */
  __pyx_v_opts.reset(new fst::MPdtComposeOptions(1, __pyx_v_compose_filter_enum));

  /* "pynini.pyx":2000
 *   cdef unique_ptr[MPdtComposeOptions] opts
 *   opts.reset(new MPdtComposeOptions(True, compose_filter_enum))
 *   MPdtCompose(deref(lhs._fst), deref(rhs._fst), parens._parens,             # <<<<<<<<<<<<<<
 *               parens._assign, result._mfst.get(), deref(opts), left_mpdt)
 *   if result._fst.get().Properties(kError, True) == kError:
 */
  if (unlikely(((PyObject *)__pyx_v_lhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_fst");
    __PYX_ERR(0, 2000, __pyx_L1_error)
  }
  if (unlikely(((PyObject *)__pyx_v_rhs) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_fst");
    __PYX_ERR(0, 2000, __pyx_L1_error)
  }
  if (unlikely(((PyObject *)__pyx_v_parens) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_parens");
    __PYX_ERR(0, 2000, __pyx_L1_error)
  }

  /* "pynini.pyx":2001
 *   opts.reset(new MPdtComposeOptions(True, compose_filter_enum))
 *   MPdtCompose(deref(lhs._fst), deref(rhs._fst), parens._parens,
 *               parens._assign, result._mfst.get(), deref(opts), left_mpdt)             # <<<<<<<<<<<<<<
 *   if result._fst.get().Properties(kError, True) == kError:
 *     raise FstOpError("Operation failed")
 */
  if (unlikely(((PyObject *)__pyx_v_parens) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_assign");
    __PYX_ERR(0, 2001, __pyx_L1_error)
  }

  /* "pynini.pyx":2000
 *   cdef unique_ptr[MPdtComposeOptions] opts
 *   opts.reset(new MPdtComposeOptions(True, compose_filter_enum))
 *   MPdtCompose(deref(lhs._fst), deref(rhs._fst), parens._parens,             # <<<<<<<<<<<<<<
 *               parens._assign, result._mfst.get(), deref(opts), left_mpdt)
 *   if result._fst.get().Properties(kError, True) == kError:
 */
  fst::script::MPdtCompose((*__pyx_v_lhs->__pyx_base.__pyx_base._fst), (*__pyx_v_rhs->__pyx_base.__pyx_base._fst), __pyx_v_parens->_parens, __pyx_v_parens->_assign, __pyx_v_result->__pyx_base._mfst.get(), (*__pyx_v_opts), __pyx_v_left_mpdt);

  /* "pynini.pyx":2002
 *   MPdtCompose(deref(lhs._fst), deref(rhs._fst), parens._parens,
 *               parens._assign, result._mfst.get(), deref(opts), left_mpdt)
 *   if result._fst.get().Properties(kError, True) == kError:             # <<<<<<<<<<<<<<
 *     raise FstOpError("Operation failed")
 *   # If the "expand" filter is selected, all parentheses have been mapped to
 */
  __pyx_t_8 = ((__pyx_v_result->__pyx_base.__pyx_base._fst.get()->Properties(fst::kError, 1) == fst::kError) != 0);
  if (unlikely(__pyx_t_8)) {

    /* "pynini.pyx":2003
 *               parens._assign, result._mfst.get(), deref(opts), left_mpdt)
 *   if result._fst.get().Properties(kError, True) == kError:
 *     raise FstOpError("Operation failed")             # <<<<<<<<<<<<<<
 *   # If the "expand" filter is selected, all parentheses have been mapped to
 *   # epsilon. This conveniently removes the arcs that result.
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstOpError); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2003, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2003, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 2003, __pyx_L1_error)

    /* "pynini.pyx":2002
 *   MPdtCompose(deref(lhs._fst), deref(rhs._fst), parens._parens,
 *               parens._assign, result._mfst.get(), deref(opts), left_mpdt)
 *   if result._fst.get().Properties(kError, True) == kError:             # <<<<<<<<<<<<<<
 *     raise FstOpError("Operation failed")
 *   # If the "expand" filter is selected, all parentheses have been mapped to
 */
  }

  /* "pynini.pyx":2006
 *   # If the "expand" filter is selected, all parentheses have been mapped to
 *   # epsilon. This conveniently removes the arcs that result.
 *   if compose_filter_enum == EXPAND_FILTER:             # <<<<<<<<<<<<<<
 *     result.rmepsilon()
 *   # Otherwise, we need to add the parentheses to the result.
 */
  __pyx_t_8 = ((__pyx_v_compose_filter_enum == fst::EXPAND_FILTER) != 0);
  if (__pyx_t_8) {

    /* "pynini.pyx":2007
 *   # epsilon. This conveniently removes the arcs that result.
 *   if compose_filter_enum == EXPAND_FILTER:
 *     result.rmepsilon()             # <<<<<<<<<<<<<<
 *   # Otherwise, we need to add the parentheses to the result.
 *   else:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_result), __pyx_n_s_rmepsilon); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2007, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (__pyx_t_2) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2007, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2007, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pynini.pyx":2006
 *   # If the "expand" filter is selected, all parentheses have been mapped to
 *   # epsilon. This conveniently removes the arcs that result.
 *   if compose_filter_enum == EXPAND_FILTER:             # <<<<<<<<<<<<<<
 *     result.rmepsilon()
 *   # Otherwise, we need to add the parentheses to the result.
 */
    goto __pyx_L6;
  }

  /* "pynini.pyx":2010
 *   # Otherwise, we need to add the parentheses to the result.
 *   else:
 *     _add_parentheses_symbols(result._mfst.get(), parens._parens, left_mpdt)             # <<<<<<<<<<<<<<
 *   return result
 * 
 */
  /*else*/ {
    if (unlikely(((PyObject *)__pyx_v_parens) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_parens");
      __PYX_ERR(0, 2010, __pyx_L1_error)
    }
    __pyx_f_6pynini__add_parentheses_symbols(__pyx_v_result->__pyx_base._mfst.get(), __pyx_v_parens->_parens, __pyx_v_left_mpdt); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2010, __pyx_L1_error)
  }
  __pyx_L6:;

  /* "pynini.pyx":2011
 *   else:
 *     _add_parentheses_symbols(result._mfst.get(), parens._parens, left_mpdt)
 *   return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "pynini.pyx":1956
 * 
 * 
 * cpdef Fst mpdt_compose(ifst1, ifst2, MPdtParentheses parens,             # <<<<<<<<<<<<<<
 *                        compose_filter=b"paren", bool left_mpdt=True):
 *   """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynini.mpdt_compose", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_lhs);
  __Pyx_XDECREF((PyObject *)__pyx_v_rhs);
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_51mpdt_compose(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pynini_50mpdt_compose[] = "\n  mpdt_compose(ifst1, ifst2, parens, compose_filter=\"paren\", left_mpdt=True)\n\n  Composes a MPDT with an FST.\n\n  This operation composes a MPDT with an FST. The input MPDT is defined by the\n  combination of an FST and a MPdtParentheses object specifying the stack\n  symbols and assignments. The caller should also specify whether the left-hand\n  or the right-hand FST argument is to be interpreted as a MPDT.\n\n  Args:\n    ifst1: The left-hand-side input FST or MPDT.\n    ifst2: The right-hand-side input FST or MPDT.\n    parens: A MPdtParentheses object specifying the input MPDT's stack\n        operations and assignments.\n    compose_filter: A string indicating the desired MPDT composition filter; one\n        of: \"paren\" (keeps parentheses), \"expand\" (expands and removes\n        parentheses), \"expand_paren\" (expands and keeps parentheses).\n    left_mpdt: If true, the first argument is interpreted as a MPDT and the\n        second argument is interpreted as an FST; if false, the second\n        argument is interpreted as a MPDT and the first argument is interpreted\n        as an FST.\n\n  Returns:\n    The FST component of an MPDT produced by composition.\n\n  Raises:\n    FstOpError: Operation failed.\n\n  See also: `compose`.\n  ";
static PyObject *__pyx_pw_6pynini_51mpdt_compose(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ifst1 = 0;
  PyObject *__pyx_v_ifst2 = 0;
  struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_parens = 0;
  PyObject *__pyx_v_compose_filter = 0;
  bool __pyx_v_left_mpdt;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mpdt_compose (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ifst1,&__pyx_n_s_ifst2,&__pyx_n_s_parens,&__pyx_n_s_compose_filter,&__pyx_n_s_left_mpdt,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject *)__pyx_n_b_paren);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ifst1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ifst2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("mpdt_compose", 0, 3, 5, 1); __PYX_ERR(0, 1956, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parens)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("mpdt_compose", 0, 3, 5, 2); __PYX_ERR(0, 1956, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_compose_filter);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_left_mpdt);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "mpdt_compose") < 0)) __PYX_ERR(0, 1956, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_ifst1 = values[0];
    __pyx_v_ifst2 = values[1];
    __pyx_v_parens = ((struct __pyx_obj_6pynini_MPdtParentheses *)values[2]);
    __pyx_v_compose_filter = values[3];
    if (values[4]) {
      __pyx_v_left_mpdt = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_left_mpdt == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1957, __pyx_L3_error)
    } else {

      /* "pynini.pyx":1957
 * 
 * cpdef Fst mpdt_compose(ifst1, ifst2, MPdtParentheses parens,
 *                        compose_filter=b"paren", bool left_mpdt=True):             # <<<<<<<<<<<<<<
 *   """
 *   mpdt_compose(ifst1, ifst2, parens, compose_filter="paren", left_mpdt=True)
 */
      __pyx_v_left_mpdt = ((bool)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpdt_compose", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1956, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.mpdt_compose", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parens), __pyx_ptype_6pynini_MPdtParentheses, 1, "parens", 0))) __PYX_ERR(0, 1956, __pyx_L1_error)
  __pyx_r = __pyx_pf_6pynini_50mpdt_compose(__pyx_self, __pyx_v_ifst1, __pyx_v_ifst2, __pyx_v_parens, __pyx_v_compose_filter, __pyx_v_left_mpdt);

  /* "pynini.pyx":1956
 * 
 * 
 * cpdef Fst mpdt_compose(ifst1, ifst2, MPdtParentheses parens,             # <<<<<<<<<<<<<<
 *                        compose_filter=b"paren", bool left_mpdt=True):
 *   """
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_50mpdt_compose(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_ifst1, PyObject *__pyx_v_ifst2, struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_parens, PyObject *__pyx_v_compose_filter, bool __pyx_v_left_mpdt) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_6pynini_mpdt_compose __pyx_t_2;
  __Pyx_RefNannySetupContext("mpdt_compose", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 2;
  __pyx_t_2.compose_filter = __pyx_v_compose_filter;
  __pyx_t_2.left_mpdt = __pyx_v_left_mpdt;
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini_mpdt_compose(__pyx_v_ifst1, __pyx_v_ifst2, __pyx_v_parens, 0, &__pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1956, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.mpdt_compose", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2014
 * 
 * 
 * def mpdt_expand(impdt, MPdtParentheses parens, bool connect=True,             # <<<<<<<<<<<<<<
 *                 bool keep_parentheses=False):
 *   """
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_53mpdt_expand(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pynini_52mpdt_expand[] = "\n  mpdt_expand(impdt, parens, connect=True, keep_parentheses=False):\n\n  Expands a bounded-stack MPDT to an FST.\n\n  This operation converts a bounded-stack MPDT into the equivalent FST. The\n  input MPDT is defined by the combination of an FST and a MPdtParentheses\n  object specifying the MPDT stack symbols and assignments.\n\n  If the input MPDT does not have a bounded stack, then it is impossible to\n  expand the MPDT into an FST and this operation will not terminate.\n\n  Args:\n    impdt: The FST component of the input MPDT.\n    parens: A MPdtParentheses object specifying the input PDT's stack\n        symbols and assignments.\n    connect: Should the output FST be trimmed?\n    keep_parentheses: Should the output FST preserve parentheses arcs?\n\n  Returns:\n    An FST produced by expanding the bounded-stack MPDT.\n\n  Raises:\n    FstOpError: Operation failed.\n  ";
static PyMethodDef __pyx_mdef_6pynini_53mpdt_expand = {"mpdt_expand", (PyCFunction)__pyx_pw_6pynini_53mpdt_expand, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pynini_52mpdt_expand};
static PyObject *__pyx_pw_6pynini_53mpdt_expand(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_impdt = 0;
  struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_parens = 0;
  bool __pyx_v_connect;
  bool __pyx_v_keep_parentheses;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mpdt_expand (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_impdt,&__pyx_n_s_parens,&__pyx_n_s_connect,&__pyx_n_s_keep_parentheses,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_impdt)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parens)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("mpdt_expand", 0, 2, 4, 1); __PYX_ERR(0, 2014, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_connect);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_keep_parentheses);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "mpdt_expand") < 0)) __PYX_ERR(0, 2014, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_impdt = values[0];
    __pyx_v_parens = ((struct __pyx_obj_6pynini_MPdtParentheses *)values[1]);
    if (values[2]) {
      __pyx_v_connect = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_connect == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2014, __pyx_L3_error)
    } else {
      __pyx_v_connect = ((bool)1);
    }
    if (values[3]) {
      __pyx_v_keep_parentheses = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_keep_parentheses == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2015, __pyx_L3_error)
    } else {

      /* "pynini.pyx":2015
 * 
 * def mpdt_expand(impdt, MPdtParentheses parens, bool connect=True,
 *                 bool keep_parentheses=False):             # <<<<<<<<<<<<<<
 *   """
 *   mpdt_expand(impdt, parens, connect=True, keep_parentheses=False):
 */
      __pyx_v_keep_parentheses = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpdt_expand", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2014, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.mpdt_expand", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parens), __pyx_ptype_6pynini_MPdtParentheses, 1, "parens", 0))) __PYX_ERR(0, 2014, __pyx_L1_error)
  __pyx_r = __pyx_pf_6pynini_52mpdt_expand(__pyx_self, __pyx_v_impdt, __pyx_v_parens, __pyx_v_connect, __pyx_v_keep_parentheses);

  /* "pynini.pyx":2014
 * 
 * 
 * def mpdt_expand(impdt, MPdtParentheses parens, bool connect=True,             # <<<<<<<<<<<<<<
 *                 bool keep_parentheses=False):
 *   """
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_52mpdt_expand(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_impdt, struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_parens, bool __pyx_v_connect, bool __pyx_v_keep_parentheses) {
  struct __pyx_obj_6pynini_Fst *__pyx_v_mpdt = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_v_result = 0;
  std::unique_ptr<fst::MPdtExpandOptions>  __pyx_v_opts;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("mpdt_expand", 0);

  /* "pynini.pyx":2041
 *     FstOpError: Operation failed.
 *   """
 *   cdef Fst mpdt = _compile_or_copy_Fst(impdt)             # <<<<<<<<<<<<<<
 *   cdef Fst result = Fst(mpdt.arc_type())
 *   cdef unique_ptr[MPdtExpandOptions] opts
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_impdt, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2041, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_mpdt = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":2042
 *   """
 *   cdef Fst mpdt = _compile_or_copy_Fst(impdt)
 *   cdef Fst result = Fst(mpdt.arc_type())             # <<<<<<<<<<<<<<
 *   cdef unique_ptr[MPdtExpandOptions] opts
 *   opts.reset(new MPdtExpandOptions(connect, keep_parentheses))
 */
  if (unlikely(((PyObject *)__pyx_v_mpdt) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "arc_type");
    __PYX_ERR(0, 2042, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_convert_PyUnicode_string_to_py_std__in_string(((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_mpdt->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.arc_type(((struct __pyx_obj_9pywrapfst__Fst *)__pyx_v_mpdt), 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2042, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2042, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_result = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pynini.pyx":2044
 *   cdef Fst result = Fst(mpdt.arc_type())
 *   cdef unique_ptr[MPdtExpandOptions] opts
 *   opts.reset(new MPdtExpandOptions(connect, keep_parentheses))             # <<<<<<<<<<<<<<
 *   MPdtExpand(deref(mpdt._fst), parens._parens, parens._assign,
 *              result._mfst.get(), deref(opts))
 */
  __pyx_v_opts.reset(new fst::MPdtExpandOptions(__pyx_v_connect, __pyx_v_keep_parentheses));

  /* "pynini.pyx":2045
 *   cdef unique_ptr[MPdtExpandOptions] opts
 *   opts.reset(new MPdtExpandOptions(connect, keep_parentheses))
 *   MPdtExpand(deref(mpdt._fst), parens._parens, parens._assign,             # <<<<<<<<<<<<<<
 *              result._mfst.get(), deref(opts))
 *   result._check_mutating_imethod()
 */
  if (unlikely(((PyObject *)__pyx_v_mpdt) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_fst");
    __PYX_ERR(0, 2045, __pyx_L1_error)
  }
  if (unlikely(((PyObject *)__pyx_v_parens) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_parens");
    __PYX_ERR(0, 2045, __pyx_L1_error)
  }
  if (unlikely(((PyObject *)__pyx_v_parens) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_assign");
    __PYX_ERR(0, 2045, __pyx_L1_error)
  }

  /* "pynini.pyx":2046
 *   opts.reset(new MPdtExpandOptions(connect, keep_parentheses))
 *   MPdtExpand(deref(mpdt._fst), parens._parens, parens._assign,
 *              result._mfst.get(), deref(opts))             # <<<<<<<<<<<<<<
 *   result._check_mutating_imethod()
 *   return result
 */
  fst::script::MPdtExpand((*__pyx_v_mpdt->__pyx_base.__pyx_base._fst), __pyx_v_parens->_parens, __pyx_v_parens->_assign, __pyx_v_result->__pyx_base._mfst.get(), (*__pyx_v_opts));

  /* "pynini.pyx":2047
 *   MPdtExpand(deref(mpdt._fst), parens._parens, parens._assign,
 *              result._mfst.get(), deref(opts))
 *   result._check_mutating_imethod()             # <<<<<<<<<<<<<<
 *   return result
 * 
 */
  ((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_result->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base._check_mutating_imethod(((struct __pyx_obj_9pywrapfst__MutableFst *)__pyx_v_result)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2047, __pyx_L1_error)

  /* "pynini.pyx":2048
 *              result._mfst.get(), deref(opts))
 *   result._check_mutating_imethod()
 *   return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "pynini.pyx":2014
 * 
 * 
 * def mpdt_expand(impdt, MPdtParentheses parens, bool connect=True,             # <<<<<<<<<<<<<<
 *                 bool keep_parentheses=False):
 *   """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pynini.mpdt_expand", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mpdt);
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2051
 * 
 * 
 * def mpdt_reverse(impdt, MPdtParentheses parens):             # <<<<<<<<<<<<<<
 *   """
 *   mpdt_reverse(impdt, parens)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_55mpdt_reverse(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pynini_54mpdt_reverse[] = "\n  mpdt_reverse(impdt, parens)\n\n  Reverses a MPDT.\n\n  This operation reverses an MPDT. The input MPDT is defined by the combination\n  of an FST and a MPdtParentheses object specifying the MPDT stack symbols\n  and assignments. Unlike PDT reversal, which only modifies the FST component,\n  this operation also reverses the stack assignments. assignments.\n\n  Args:\n    impdt: The FST component of the input MPDT.\n    parens: A MPdtParentheses object specifying the input MPDT's stack symbols\n        and assignments.\n\n  Returns:\n    A (Fst, MPdtParentheses) pair specifying the reversed MPDT.\n  ";
static PyMethodDef __pyx_mdef_6pynini_55mpdt_reverse = {"mpdt_reverse", (PyCFunction)__pyx_pw_6pynini_55mpdt_reverse, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pynini_54mpdt_reverse};
static PyObject *__pyx_pw_6pynini_55mpdt_reverse(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_impdt = 0;
  struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_parens = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mpdt_reverse (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_impdt,&__pyx_n_s_parens,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_impdt)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parens)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("mpdt_reverse", 1, 2, 2, 1); __PYX_ERR(0, 2051, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "mpdt_reverse") < 0)) __PYX_ERR(0, 2051, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_impdt = values[0];
    __pyx_v_parens = ((struct __pyx_obj_6pynini_MPdtParentheses *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpdt_reverse", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2051, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.mpdt_reverse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parens), __pyx_ptype_6pynini_MPdtParentheses, 1, "parens", 0))) __PYX_ERR(0, 2051, __pyx_L1_error)
  __pyx_r = __pyx_pf_6pynini_54mpdt_reverse(__pyx_self, __pyx_v_impdt, __pyx_v_parens);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_54mpdt_reverse(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_impdt, struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_parens) {
  struct __pyx_obj_6pynini_Fst *__pyx_v_mpdt = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_v_result_fst = 0;
  struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v_result_parens = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("mpdt_reverse", 0);

  /* "pynini.pyx":2070
 *     A (Fst, MPdtParentheses) pair specifying the reversed MPDT.
 *   """
 *   cdef Fst mpdt = _compile_or_copy_Fst(impdt)             # <<<<<<<<<<<<<<
 *   cdef Fst result_fst = Fst(mpdt.arc_type())
 *   cdef MPdtParentheses result_parens = parens.copy()
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_impdt, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2070, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_mpdt = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":2071
 *   """
 *   cdef Fst mpdt = _compile_or_copy_Fst(impdt)
 *   cdef Fst result_fst = Fst(mpdt.arc_type())             # <<<<<<<<<<<<<<
 *   cdef MPdtParentheses result_parens = parens.copy()
 *   MPdtReverse(deref(mpdt._fst), result_parens._parens,
 */
  if (unlikely(((PyObject *)__pyx_v_mpdt) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "arc_type");
    __PYX_ERR(0, 2071, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_convert_PyUnicode_string_to_py_std__in_string(((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_mpdt->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.arc_type(((struct __pyx_obj_9pywrapfst__Fst *)__pyx_v_mpdt), 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2071, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2071, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_result_fst = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pynini.pyx":2072
 *   cdef Fst mpdt = _compile_or_copy_Fst(impdt)
 *   cdef Fst result_fst = Fst(mpdt.arc_type())
 *   cdef MPdtParentheses result_parens = parens.copy()             # <<<<<<<<<<<<<<
 *   MPdtReverse(deref(mpdt._fst), result_parens._parens,
 *               addr(result_parens._assign), result_fst._mfst.get())
 */
  if (unlikely(((PyObject *)__pyx_v_parens) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "copy");
    __PYX_ERR(0, 2072, __pyx_L1_error)
  }
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_6pynini_MPdtParentheses *)__pyx_v_parens->__pyx_vtab)->copy(__pyx_v_parens, 0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2072, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_result_parens = ((struct __pyx_obj_6pynini_MPdtParentheses *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pynini.pyx":2073
 *   cdef Fst result_fst = Fst(mpdt.arc_type())
 *   cdef MPdtParentheses result_parens = parens.copy()
 *   MPdtReverse(deref(mpdt._fst), result_parens._parens,             # <<<<<<<<<<<<<<
 *               addr(result_parens._assign), result_fst._mfst.get())
 *   result_fst._check_mutating_imethod()
 */
  if (unlikely(((PyObject *)__pyx_v_mpdt) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_fst");
    __PYX_ERR(0, 2073, __pyx_L1_error)
  }
  if (unlikely(((PyObject *)__pyx_v_result_parens) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_parens");
    __PYX_ERR(0, 2073, __pyx_L1_error)
  }

  /* "pynini.pyx":2074
 *   cdef MPdtParentheses result_parens = parens.copy()
 *   MPdtReverse(deref(mpdt._fst), result_parens._parens,
 *               addr(result_parens._assign), result_fst._mfst.get())             # <<<<<<<<<<<<<<
 *   result_fst._check_mutating_imethod()
 *   return (result_fst, result_parens)
 */
  if (unlikely(((PyObject *)__pyx_v_result_parens) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_assign");
    __PYX_ERR(0, 2074, __pyx_L1_error)
  }

  /* "pynini.pyx":2073
 *   cdef Fst result_fst = Fst(mpdt.arc_type())
 *   cdef MPdtParentheses result_parens = parens.copy()
 *   MPdtReverse(deref(mpdt._fst), result_parens._parens,             # <<<<<<<<<<<<<<
 *               addr(result_parens._assign), result_fst._mfst.get())
 *   result_fst._check_mutating_imethod()
 */
  fst::script::MPdtReverse((*__pyx_v_mpdt->__pyx_base.__pyx_base._fst), __pyx_v_result_parens->_parens, (&__pyx_v_result_parens->_assign), __pyx_v_result_fst->__pyx_base._mfst.get());

  /* "pynini.pyx":2075
 *   MPdtReverse(deref(mpdt._fst), result_parens._parens,
 *               addr(result_parens._assign), result_fst._mfst.get())
 *   result_fst._check_mutating_imethod()             # <<<<<<<<<<<<<<
 *   return (result_fst, result_parens)
 * 
 */
  ((struct __pyx_vtabstruct_6pynini_Fst *)__pyx_v_result_fst->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base._check_mutating_imethod(((struct __pyx_obj_9pywrapfst__MutableFst *)__pyx_v_result_fst)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2075, __pyx_L1_error)

  /* "pynini.pyx":2076
 *               addr(result_parens._assign), result_fst._mfst.get())
 *   result_fst._check_mutating_imethod()
 *   return (result_fst, result_parens)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2076, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_result_fst));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_result_fst));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_result_fst));
  __Pyx_INCREF(((PyObject *)__pyx_v_result_parens));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_result_parens));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_result_parens));
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":2051
 * 
 * 
 * def mpdt_reverse(impdt, MPdtParentheses parens):             # <<<<<<<<<<<<<<
 *   """
 *   mpdt_reverse(impdt, parens)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pynini.mpdt_reverse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mpdt);
  __Pyx_XDECREF((PyObject *)__pyx_v_result_fst);
  __Pyx_XDECREF((PyObject *)__pyx_v_result_parens);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2114
 *   cdef unique_ptr[StringPathIteratorClass] _paths
 * 
 *   def __repr__(self):             # <<<<<<<<<<<<<<
 *     return "<StringPathIterator at 0x{:x}>".format(id(self))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_18StringPathIterator_1__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pynini_18StringPathIterator_1__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_18StringPathIterator___repr__(((struct __pyx_obj_6pynini_StringPathIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_18StringPathIterator___repr__(struct __pyx_obj_6pynini_StringPathIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "pynini.pyx":2115
 * 
 *   def __repr__(self):
 *     return "<StringPathIterator at 0x{:x}>".format(id(self))             # <<<<<<<<<<<<<<
 * 
 *   def __init__(self, ifst, input_token_type=b"byte",
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_StringPathIterator_at_0x_x, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_id, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2115, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2115, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2115, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2115, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2115, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":2114
 *   cdef unique_ptr[StringPathIteratorClass] _paths
 * 
 *   def __repr__(self):             # <<<<<<<<<<<<<<
 *     return "<StringPathIterator at 0x{:x}>".format(id(self))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynini.StringPathIterator.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2117
 *     return "<StringPathIterator at 0x{:x}>".format(id(self))
 * 
 *   def __init__(self, ifst, input_token_type=b"byte",             # <<<<<<<<<<<<<<
 *                output_token_type=b"byte"):
 *     # Sorts out the token type arguments.
 */

/* Python wrapper */
static int __pyx_pw_6pynini_18StringPathIterator_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pynini_18StringPathIterator_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ifst = 0;
  PyObject *__pyx_v_input_token_type = 0;
  PyObject *__pyx_v_output_token_type = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ifst,&__pyx_n_s_input_token_type,&__pyx_n_s_output_token_type,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)__pyx_n_b_byte);
    values[2] = ((PyObject *)__pyx_n_b_byte);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ifst)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_input_token_type);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_output_token_type);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 2117, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_ifst = values[0];
    __pyx_v_input_token_type = values[1];
    __pyx_v_output_token_type = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2117, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.StringPathIterator.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_18StringPathIterator_2__init__(((struct __pyx_obj_6pynini_StringPathIterator *)__pyx_v_self), __pyx_v_ifst, __pyx_v_input_token_type, __pyx_v_output_token_type);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pynini_18StringPathIterator_2__init__(struct __pyx_obj_6pynini_StringPathIterator *__pyx_v_self, PyObject *__pyx_v_ifst, PyObject *__pyx_v_input_token_type, PyObject *__pyx_v_output_token_type) {
  enum fst::StringTokenType __pyx_v_itype;
  __pyx_t_9pywrapfst_SymbolTable_ptr __pyx_v_isyms;
  enum fst::StringTokenType __pyx_v_otype;
  __pyx_t_9pywrapfst_SymbolTable_ptr __pyx_v_osyms;
  struct __pyx_obj_6pynini_Fst *__pyx_v_ifst_compiled = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  std::string __pyx_t_5;
  enum fst::StringTokenType __pyx_t_6;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pynini.pyx":2121
 *     # Sorts out the token type arguments.
 *     cdef StringTokenType itype
 *     cdef SymbolTable_ptr isyms = NULL             # <<<<<<<<<<<<<<
 *     if isinstance(input_token_type, pywrapfst._SymbolTable):
 *       itype = SYMBOL
 */
  __pyx_v_isyms = NULL;

  /* "pynini.pyx":2122
 *     cdef StringTokenType itype
 *     cdef SymbolTable_ptr isyms = NULL
 *     if isinstance(input_token_type, pywrapfst._SymbolTable):             # <<<<<<<<<<<<<<
 *       itype = SYMBOL
 *       isyms = (<SymbolTable_ptr> (<_SymbolTable> input_token_type)._table)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_SymbolTable); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = PyObject_IsInstance(__pyx_v_input_token_type, __pyx_t_2); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 2122, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "pynini.pyx":2123
 *     cdef SymbolTable_ptr isyms = NULL
 *     if isinstance(input_token_type, pywrapfst._SymbolTable):
 *       itype = SYMBOL             # <<<<<<<<<<<<<<
 *       isyms = (<SymbolTable_ptr> (<_SymbolTable> input_token_type)._table)
 *     else:
 */
    __pyx_v_itype = fst::SYMBOL;

    /* "pynini.pyx":2124
 *     if isinstance(input_token_type, pywrapfst._SymbolTable):
 *       itype = SYMBOL
 *       isyms = (<SymbolTable_ptr> (<_SymbolTable> input_token_type)._table)             # <<<<<<<<<<<<<<
 *     else:
 *       itype = _get_token_type(tostring(input_token_type))
 */
    if (unlikely(__pyx_v_input_token_type == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_table");
      __PYX_ERR(0, 2124, __pyx_L1_error)
    }
    __pyx_v_isyms = ((__pyx_t_9pywrapfst_SymbolTable_ptr)((struct __pyx_obj_9pywrapfst__SymbolTable *)__pyx_v_input_token_type)->_table);

    /* "pynini.pyx":2122
 *     cdef StringTokenType itype
 *     cdef SymbolTable_ptr isyms = NULL
 *     if isinstance(input_token_type, pywrapfst._SymbolTable):             # <<<<<<<<<<<<<<
 *       itype = SYMBOL
 *       isyms = (<SymbolTable_ptr> (<_SymbolTable> input_token_type)._table)
 */
    goto __pyx_L3;
  }

  /* "pynini.pyx":2126
 *       isyms = (<SymbolTable_ptr> (<_SymbolTable> input_token_type)._table)
 *     else:
 *       itype = _get_token_type(tostring(input_token_type))             # <<<<<<<<<<<<<<
 *     cdef StringTokenType otype
 *     cdef SymbolTable_ptr osyms = NULL
 */
  /*else*/ {
    __pyx_t_5 = __pyx_f_9pywrapfst_tostring(__pyx_v_input_token_type, NULL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2126, __pyx_L1_error)
    __pyx_t_6 = __pyx_f_6pynini__get_token_type(__pyx_t_5); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2126, __pyx_L1_error)
    __pyx_v_itype = __pyx_t_6;
  }
  __pyx_L3:;

  /* "pynini.pyx":2128
 *       itype = _get_token_type(tostring(input_token_type))
 *     cdef StringTokenType otype
 *     cdef SymbolTable_ptr osyms = NULL             # <<<<<<<<<<<<<<
 *     if isinstance(output_token_type, pywrapfst._SymbolTable):
 *       otype = SYMBOL
 */
  __pyx_v_osyms = NULL;

  /* "pynini.pyx":2129
 *     cdef StringTokenType otype
 *     cdef SymbolTable_ptr osyms = NULL
 *     if isinstance(output_token_type, pywrapfst._SymbolTable):             # <<<<<<<<<<<<<<
 *       otype = SYMBOL
 *       osyms = (<SymbolTable_ptr> (<_SymbolTable> output_token_type)._table)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_SymbolTable); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = PyObject_IsInstance(__pyx_v_output_token_type, __pyx_t_1); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 2129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_4 != 0);
  if (__pyx_t_3) {

    /* "pynini.pyx":2130
 *     cdef SymbolTable_ptr osyms = NULL
 *     if isinstance(output_token_type, pywrapfst._SymbolTable):
 *       otype = SYMBOL             # <<<<<<<<<<<<<<
 *       osyms = (<SymbolTable_ptr> (<_SymbolTable> output_token_type)._table)
 *     else:
 */
    __pyx_v_otype = fst::SYMBOL;

    /* "pynini.pyx":2131
 *     if isinstance(output_token_type, pywrapfst._SymbolTable):
 *       otype = SYMBOL
 *       osyms = (<SymbolTable_ptr> (<_SymbolTable> output_token_type)._table)             # <<<<<<<<<<<<<<
 *     else:
 *       otype = _get_token_type(tostring(output_token_type))
 */
    if (unlikely(__pyx_v_output_token_type == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_table");
      __PYX_ERR(0, 2131, __pyx_L1_error)
    }
    __pyx_v_osyms = ((__pyx_t_9pywrapfst_SymbolTable_ptr)((struct __pyx_obj_9pywrapfst__SymbolTable *)__pyx_v_output_token_type)->_table);

    /* "pynini.pyx":2129
 *     cdef StringTokenType otype
 *     cdef SymbolTable_ptr osyms = NULL
 *     if isinstance(output_token_type, pywrapfst._SymbolTable):             # <<<<<<<<<<<<<<
 *       otype = SYMBOL
 *       osyms = (<SymbolTable_ptr> (<_SymbolTable> output_token_type)._table)
 */
    goto __pyx_L4;
  }

  /* "pynini.pyx":2133
 *       osyms = (<SymbolTable_ptr> (<_SymbolTable> output_token_type)._table)
 *     else:
 *       otype = _get_token_type(tostring(output_token_type))             # <<<<<<<<<<<<<<
 *     cdef Fst ifst_compiled = _compile_or_copy_Fst(ifst)
 *     self._paths.reset(new StringPathIteratorClass(deref(ifst_compiled._fst),
 */
  /*else*/ {
    __pyx_t_5 = __pyx_f_9pywrapfst_tostring(__pyx_v_output_token_type, NULL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2133, __pyx_L1_error)
    __pyx_t_6 = __pyx_f_6pynini__get_token_type(__pyx_t_5); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2133, __pyx_L1_error)
    __pyx_v_otype = __pyx_t_6;
  }
  __pyx_L4:;

  /* "pynini.pyx":2134
 *     else:
 *       otype = _get_token_type(tostring(output_token_type))
 *     cdef Fst ifst_compiled = _compile_or_copy_Fst(ifst)             # <<<<<<<<<<<<<<
 *     self._paths.reset(new StringPathIteratorClass(deref(ifst_compiled._fst),
 *                                                   itype, otype, isyms, osyms))
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_ifst, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ifst_compiled = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":2135
 *       otype = _get_token_type(tostring(output_token_type))
 *     cdef Fst ifst_compiled = _compile_or_copy_Fst(ifst)
 *     self._paths.reset(new StringPathIteratorClass(deref(ifst_compiled._fst),             # <<<<<<<<<<<<<<
 *                                                   itype, otype, isyms, osyms))
 *     if self._paths.get().Error():
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_paths");
    __PYX_ERR(0, 2135, __pyx_L1_error)
  }
  if (unlikely(((PyObject *)__pyx_v_ifst_compiled) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_fst");
    __PYX_ERR(0, 2135, __pyx_L1_error)
  }

  /* "pynini.pyx":2136
 *     cdef Fst ifst_compiled = _compile_or_copy_Fst(ifst)
 *     self._paths.reset(new StringPathIteratorClass(deref(ifst_compiled._fst),
 *                                                   itype, otype, isyms, osyms))             # <<<<<<<<<<<<<<
 *     if self._paths.get().Error():
 *       raise FstArgError("FST is not acyclic")
 */
  __pyx_v_self->_paths.reset(new fst::script::StringPathIteratorClass((*__pyx_v_ifst_compiled->__pyx_base.__pyx_base._fst), __pyx_v_itype, __pyx_v_otype, __pyx_v_isyms, __pyx_v_osyms));

  /* "pynini.pyx":2137
 *     self._paths.reset(new StringPathIteratorClass(deref(ifst_compiled._fst),
 *                                                   itype, otype, isyms, osyms))
 *     if self._paths.get().Error():             # <<<<<<<<<<<<<<
 *       raise FstArgError("FST is not acyclic")
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_paths");
    __PYX_ERR(0, 2137, __pyx_L1_error)
  }
  __pyx_t_3 = (__pyx_v_self->_paths.get()->Error() != 0);
  if (unlikely(__pyx_t_3)) {

    /* "pynini.pyx":2138
 *                                                   itype, otype, isyms, osyms))
 *     if self._paths.get().Error():
 *       raise FstArgError("FST is not acyclic")             # <<<<<<<<<<<<<<
 * 
 *   # This just registers this class as a possible iterator.
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstArgError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2138, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2138, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 2138, __pyx_L1_error)

    /* "pynini.pyx":2137
 *     self._paths.reset(new StringPathIteratorClass(deref(ifst_compiled._fst),
 *                                                   itype, otype, isyms, osyms))
 *     if self._paths.get().Error():             # <<<<<<<<<<<<<<
 *       raise FstArgError("FST is not acyclic")
 * 
 */
  }

  /* "pynini.pyx":2117
 *     return "<StringPathIterator at 0x{:x}>".format(id(self))
 * 
 *   def __init__(self, ifst, input_token_type=b"byte",             # <<<<<<<<<<<<<<
 *                output_token_type=b"byte"):
 *     # Sorts out the token type arguments.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pynini.StringPathIterator.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ifst_compiled);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2141
 * 
 *   # This just registers this class as a possible iterator.
 *   def __iter__(self):             # <<<<<<<<<<<<<<
 *     return self
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_18StringPathIterator_5__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pynini_18StringPathIterator_5__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_18StringPathIterator_4__iter__(((struct __pyx_obj_6pynini_StringPathIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_18StringPathIterator_4__iter__(struct __pyx_obj_6pynini_StringPathIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "pynini.pyx":2142
 *   # This just registers this class as a possible iterator.
 *   def __iter__(self):
 *     return self             # <<<<<<<<<<<<<<
 * 
 *   # Magic method used to get a Pythonic API out of the C++ API.
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pynini.pyx":2141
 * 
 *   # This just registers this class as a possible iterator.
 *   def __iter__(self):             # <<<<<<<<<<<<<<
 *     return self
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2145
 * 
 *   # Magic method used to get a Pythonic API out of the C++ API.
 *   def __next__(self):             # <<<<<<<<<<<<<<
 *     if self.done():
 *       raise StopIteration
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_18StringPathIterator_7__next__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pynini_18StringPathIterator_7__next__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__next__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_18StringPathIterator_6__next__(((struct __pyx_obj_6pynini_StringPathIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_18StringPathIterator_6__next__(struct __pyx_obj_6pynini_StringPathIterator *__pyx_v_self) {
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__next__", 0);

  /* "pynini.pyx":2146
 *   # Magic method used to get a Pythonic API out of the C++ API.
 *   def __next__(self):
 *     if self.done():             # <<<<<<<<<<<<<<
 *       raise StopIteration
 *     result = (self.istring(), self.ostring(), self.weight())
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "done");
    __PYX_ERR(0, 2146, __pyx_L1_error)
  }
  __pyx_t_1 = (((struct __pyx_vtabstruct_6pynini_StringPathIterator *)__pyx_v_self->__pyx_vtab)->done(__pyx_v_self, 0) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "pynini.pyx":2147
 *   def __next__(self):
 *     if self.done():
 *       raise StopIteration             # <<<<<<<<<<<<<<
 *     result = (self.istring(), self.ostring(), self.weight())
 *     self.next()
 */
    __Pyx_Raise(__pyx_builtin_StopIteration, 0, 0, 0);
    __PYX_ERR(0, 2147, __pyx_L1_error)

    /* "pynini.pyx":2146
 *   # Magic method used to get a Pythonic API out of the C++ API.
 *   def __next__(self):
 *     if self.done():             # <<<<<<<<<<<<<<
 *       raise StopIteration
 *     result = (self.istring(), self.ostring(), self.weight())
 */
  }

  /* "pynini.pyx":2148
 *     if self.done():
 *       raise StopIteration
 *     result = (self.istring(), self.ostring(), self.weight())             # <<<<<<<<<<<<<<
 *     self.next()
 *     return result
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "istring");
    __PYX_ERR(0, 2148, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_PyUnicode_string_to_py_std__in_string(((struct __pyx_vtabstruct_6pynini_StringPathIterator *)__pyx_v_self->__pyx_vtab)->istring(__pyx_v_self, 0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "ostring");
    __PYX_ERR(0, 2148, __pyx_L1_error)
  }
  __pyx_t_3 = __pyx_convert_PyUnicode_string_to_py_std__in_string(((struct __pyx_vtabstruct_6pynini_StringPathIterator *)__pyx_v_self->__pyx_vtab)->ostring(__pyx_v_self, 0)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "weight");
    __PYX_ERR(0, 2148, __pyx_L1_error)
  }
  __pyx_t_4 = ((PyObject *)((struct __pyx_vtabstruct_6pynini_StringPathIterator *)__pyx_v_self->__pyx_vtab)->weight(__pyx_v_self, 0)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_v_result = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "pynini.pyx":2149
 *       raise StopIteration
 *     result = (self.istring(), self.ostring(), self.weight())
 *     self.next()             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "next");
    __PYX_ERR(0, 2149, __pyx_L1_error)
  }
  ((struct __pyx_vtabstruct_6pynini_StringPathIterator *)__pyx_v_self->__pyx_vtab)->next(__pyx_v_self, 0);

  /* "pynini.pyx":2150
 *     result = (self.istring(), self.ostring(), self.weight())
 *     self.next()
 *     return result             # <<<<<<<<<<<<<<
 * 
 *   cpdef bool done(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "pynini.pyx":2145
 * 
 *   # Magic method used to get a Pythonic API out of the C++ API.
 *   def __next__(self):             # <<<<<<<<<<<<<<
 *     if self.done():
 *       raise StopIteration
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynini.StringPathIterator.__next__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2152
 *     return result
 * 
 *   cpdef bool done(self):             # <<<<<<<<<<<<<<
 *     """
 *     done(self)
 */

static PyObject *__pyx_pw_6pynini_18StringPathIterator_9done(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static bool __pyx_f_6pynini_18StringPathIterator_done(struct __pyx_obj_6pynini_StringPathIterator *__pyx_v_self, int __pyx_skip_dispatch) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  bool __pyx_t_5;
  __Pyx_RefNannySetupContext("done", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_done); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2152, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_18StringPathIterator_9done)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2152, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2152, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2152, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":2161
 *       True if the iterator is exhausted, False otherwise.
 *     """
 *     return self._paths.get().Done()             # <<<<<<<<<<<<<<
 * 
 *   cpdef void next(self):
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_paths");
    __PYX_ERR(0, 2161, __pyx_L1_error)
  }
  __pyx_r = __pyx_v_self->_paths.get()->Done();
  goto __pyx_L0;

  /* "pynini.pyx":2152
 *     return result
 * 
 *   cpdef bool done(self):             # <<<<<<<<<<<<<<
 *     """
 *     done(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("pynini.StringPathIterator.done", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_18StringPathIterator_9done(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pynini_18StringPathIterator_8done[] = "\n    done(self)\n\n    Indicates whether the iterator is exhausted or not.\n\n    Returns:\n      True if the iterator is exhausted, False otherwise.\n    ";
static PyObject *__pyx_pw_6pynini_18StringPathIterator_9done(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("done (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_18StringPathIterator_8done(((struct __pyx_obj_6pynini_StringPathIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_18StringPathIterator_8done(struct __pyx_obj_6pynini_StringPathIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("done", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_6pynini_18StringPathIterator_done(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.StringPathIterator.done", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2163
 *     return self._paths.get().Done()
 * 
 *   cpdef void next(self):             # <<<<<<<<<<<<<<
 *     """
 *     next(self)
 */

static PyObject *__pyx_pw_6pynini_18StringPathIterator_11next(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static void __pyx_f_6pynini_18StringPathIterator_next(struct __pyx_obj_6pynini_StringPathIterator *__pyx_v_self, int __pyx_skip_dispatch) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("next", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_next); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2163, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_18StringPathIterator_11next)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2163, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2163, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":2169
 *     Advances the iterator.
 *     """
 *     self._paths.get().Next()             # <<<<<<<<<<<<<<
 * 
 *   cpdef void reset(self):
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_paths");
    __PYX_ERR(0, 2169, __pyx_L1_error)
  }
  __pyx_v_self->_paths.get()->Next();

  /* "pynini.pyx":2163
 *     return self._paths.get().Done()
 * 
 *   cpdef void next(self):             # <<<<<<<<<<<<<<
 *     """
 *     next(self)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("pynini.StringPathIterator.next", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_18StringPathIterator_11next(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pynini_18StringPathIterator_10next[] = "\n    next(self)\n\n    Advances the iterator.\n    ";
static PyObject *__pyx_pw_6pynini_18StringPathIterator_11next(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("next (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_18StringPathIterator_10next(((struct __pyx_obj_6pynini_StringPathIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_18StringPathIterator_10next(struct __pyx_obj_6pynini_StringPathIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("next", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_f_6pynini_18StringPathIterator_next(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.StringPathIterator.next", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2171
 *     self._paths.get().Next()
 * 
 *   cpdef void reset(self):             # <<<<<<<<<<<<<<
 *     """
 *     reset(self)
 */

static PyObject *__pyx_pw_6pynini_18StringPathIterator_13reset(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static void __pyx_f_6pynini_18StringPathIterator_reset(struct __pyx_obj_6pynini_StringPathIterator *__pyx_v_self, int __pyx_skip_dispatch) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("reset", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_reset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2171, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_18StringPathIterator_13reset)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2171, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2171, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":2177
 *     Resets the iterator to the initial position.
 *     """
 *     self._paths.get().Reset()             # <<<<<<<<<<<<<<
 * 
 *   cpdef bool error(self):
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_paths");
    __PYX_ERR(0, 2177, __pyx_L1_error)
  }
  __pyx_v_self->_paths.get()->Reset();

  /* "pynini.pyx":2171
 *     self._paths.get().Next()
 * 
 *   cpdef void reset(self):             # <<<<<<<<<<<<<<
 *     """
 *     reset(self)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("pynini.StringPathIterator.reset", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_18StringPathIterator_13reset(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pynini_18StringPathIterator_12reset[] = "\n    reset(self)\n\n    Resets the iterator to the initial position.\n    ";
static PyObject *__pyx_pw_6pynini_18StringPathIterator_13reset(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reset (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_18StringPathIterator_12reset(((struct __pyx_obj_6pynini_StringPathIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_18StringPathIterator_12reset(struct __pyx_obj_6pynini_StringPathIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("reset", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_f_6pynini_18StringPathIterator_reset(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.StringPathIterator.reset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2179
 *     self._paths.get().Reset()
 * 
 *   cpdef bool error(self):             # <<<<<<<<<<<<<<
 *     """
 *     error(self)
 */

static PyObject *__pyx_pw_6pynini_18StringPathIterator_15error(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static bool __pyx_f_6pynini_18StringPathIterator_error(struct __pyx_obj_6pynini_StringPathIterator *__pyx_v_self, int __pyx_skip_dispatch) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  bool __pyx_t_5;
  __Pyx_RefNannySetupContext("error", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_error); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_18StringPathIterator_15error)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2179, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2179, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2179, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":2188
 *       True if the StringPathIterator is in an errorful state, False otherwise.
 *     """
 *     return self._paths.get().Error()             # <<<<<<<<<<<<<<
 * 
 *   cpdef string istring(self):
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_paths");
    __PYX_ERR(0, 2188, __pyx_L1_error)
  }
  __pyx_r = __pyx_v_self->_paths.get()->Error();
  goto __pyx_L0;

  /* "pynini.pyx":2179
 *     self._paths.get().Reset()
 * 
 *   cpdef bool error(self):             # <<<<<<<<<<<<<<
 *     """
 *     error(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("pynini.StringPathIterator.error", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_18StringPathIterator_15error(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pynini_18StringPathIterator_14error[] = "\n    error(self)\n\n    Indicates whether the StringPathIterator has encountered an error.\n\n    Returns:\n      True if the StringPathIterator is in an errorful state, False otherwise.\n    ";
static PyObject *__pyx_pw_6pynini_18StringPathIterator_15error(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("error (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_18StringPathIterator_14error(((struct __pyx_obj_6pynini_StringPathIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_18StringPathIterator_14error(struct __pyx_obj_6pynini_StringPathIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("error", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_6pynini_18StringPathIterator_error(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.StringPathIterator.error", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2190
 *     return self._paths.get().Error()
 * 
 *   cpdef string istring(self):             # <<<<<<<<<<<<<<
 *     """
 *     istring(self)
 */

static PyObject *__pyx_pw_6pynini_18StringPathIterator_17istring(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static std::string __pyx_f_6pynini_18StringPathIterator_istring(struct __pyx_obj_6pynini_StringPathIterator *__pyx_v_self, int __pyx_skip_dispatch) {
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  __Pyx_RefNannySetupContext("istring", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_istring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2190, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_18StringPathIterator_17istring)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2190, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2190, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2190, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":2199
 *       The path's input string.
 *     """
 *     return self._paths.get().IString()             # <<<<<<<<<<<<<<
 * 
 *   def istrings(self):
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_paths");
    __PYX_ERR(0, 2199, __pyx_L1_error)
  }
  __pyx_r = __pyx_v_self->_paths.get()->IString();
  goto __pyx_L0;

  /* "pynini.pyx":2190
 *     return self._paths.get().Error()
 * 
 *   cpdef string istring(self):             # <<<<<<<<<<<<<<
 *     """
 *     istring(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("pynini.StringPathIterator.istring", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_18StringPathIterator_17istring(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pynini_18StringPathIterator_16istring[] = "\n    istring(self)\n\n    Returns the current path's input string.\n\n    Returns:\n      The path's input string.\n    ";
static PyObject *__pyx_pw_6pynini_18StringPathIterator_17istring(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("istring (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_18StringPathIterator_16istring(((struct __pyx_obj_6pynini_StringPathIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_18StringPathIterator_16istring(struct __pyx_obj_6pynini_StringPathIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("istring", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyUnicode_string_to_py_std__in_string(__pyx_f_6pynini_18StringPathIterator_istring(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.StringPathIterator.istring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6pynini_18StringPathIterator_20generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "pynini.pyx":2201
 *     return self._paths.get().IString()
 * 
 *   def istrings(self):             # <<<<<<<<<<<<<<
 *     """
 *     istrings(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_18StringPathIterator_19istrings(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pynini_18StringPathIterator_18istrings[] = "\n    istrings(self)\n\n    Generates all input strings in the FST.\n\n    This method returns a generator over all input strings in the path. The\n    caller is responsible for resetting the iterator if desired.\n\n    Yields:\n      All input strings.\n    ";
static PyObject *__pyx_pw_6pynini_18StringPathIterator_19istrings(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("istrings (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_18StringPathIterator_18istrings(((struct __pyx_obj_6pynini_StringPathIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_18StringPathIterator_18istrings(struct __pyx_obj_6pynini_StringPathIterator *__pyx_v_self) {
  struct __pyx_obj_6pynini___pyx_scope_struct_8_istrings *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("istrings", 0);
  __pyx_cur_scope = (struct __pyx_obj_6pynini___pyx_scope_struct_8_istrings *)__pyx_tp_new_6pynini___pyx_scope_struct_8_istrings(__pyx_ptype_6pynini___pyx_scope_struct_8_istrings, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6pynini___pyx_scope_struct_8_istrings *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 2201, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6pynini_18StringPathIterator_20generator2, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_istrings, __pyx_n_s_StringPathIterator_istrings, __pyx_n_s_pynini); if (unlikely(!gen)) __PYX_ERR(0, 2201, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pynini.StringPathIterator.istrings", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6pynini_18StringPathIterator_20generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6pynini___pyx_scope_struct_8_istrings *__pyx_cur_scope = ((struct __pyx_obj_6pynini___pyx_scope_struct_8_istrings *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("istrings", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 2201, __pyx_L1_error)

  /* "pynini.pyx":2213
 *       All input strings.
 *     """
 *     while not self._paths.get().Done():             # <<<<<<<<<<<<<<
 *       yield self.istring()
 *       self._paths.get().Next()
 */
  while (1) {
    if (unlikely(((PyObject *)__pyx_cur_scope->__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_paths");
      __PYX_ERR(0, 2213, __pyx_L1_error)
    }
    __pyx_t_1 = ((!(__pyx_cur_scope->__pyx_v_self->_paths.get()->Done() != 0)) != 0);
    if (!__pyx_t_1) break;

    /* "pynini.pyx":2214
 *     """
 *     while not self._paths.get().Done():
 *       yield self.istring()             # <<<<<<<<<<<<<<
 *       self._paths.get().Next()
 * 
 */
    if (unlikely(((PyObject *)__pyx_cur_scope->__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "istring");
      __PYX_ERR(0, 2214, __pyx_L1_error)
    }
    __pyx_t_2 = __pyx_convert_PyUnicode_string_to_py_std__in_string(((struct __pyx_vtabstruct_6pynini_StringPathIterator *)__pyx_cur_scope->__pyx_v_self->__pyx_vtab)->istring(__pyx_cur_scope->__pyx_v_self, 0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2214, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 2214, __pyx_L1_error)

    /* "pynini.pyx":2215
 *     while not self._paths.get().Done():
 *       yield self.istring()
 *       self._paths.get().Next()             # <<<<<<<<<<<<<<
 * 
 *   cpdef string ostring(self):
 */
    if (unlikely(((PyObject *)__pyx_cur_scope->__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_paths");
      __PYX_ERR(0, 2215, __pyx_L1_error)
    }
    __pyx_cur_scope->__pyx_v_self->_paths.get()->Next();
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "pynini.pyx":2201
 *     return self._paths.get().IString()
 * 
 *   def istrings(self):             # <<<<<<<<<<<<<<
 *     """
 *     istrings(self)
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("istrings", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2217
 *       self._paths.get().Next()
 * 
 *   cpdef string ostring(self):             # <<<<<<<<<<<<<<
 *     """
 *     ostring(self)
 */

static PyObject *__pyx_pw_6pynini_18StringPathIterator_22ostring(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static std::string __pyx_f_6pynini_18StringPathIterator_ostring(struct __pyx_obj_6pynini_StringPathIterator *__pyx_v_self, int __pyx_skip_dispatch) {
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  __Pyx_RefNannySetupContext("ostring", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ostring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_18StringPathIterator_22ostring)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2217, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2217, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2217, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":2226
 *       The path's output string.
 *     """
 *     return self._paths.get().OString()             # <<<<<<<<<<<<<<
 * 
 *   def ostrings(self):
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_paths");
    __PYX_ERR(0, 2226, __pyx_L1_error)
  }
  __pyx_r = __pyx_v_self->_paths.get()->OString();
  goto __pyx_L0;

  /* "pynini.pyx":2217
 *       self._paths.get().Next()
 * 
 *   cpdef string ostring(self):             # <<<<<<<<<<<<<<
 *     """
 *     ostring(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("pynini.StringPathIterator.ostring", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_18StringPathIterator_22ostring(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pynini_18StringPathIterator_21ostring[] = "\n    ostring(self)\n\n    Returns the current path's output string.\n\n    Returns:\n      The path's output string.\n    ";
static PyObject *__pyx_pw_6pynini_18StringPathIterator_22ostring(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ostring (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_18StringPathIterator_21ostring(((struct __pyx_obj_6pynini_StringPathIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_18StringPathIterator_21ostring(struct __pyx_obj_6pynini_StringPathIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("ostring", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyUnicode_string_to_py_std__in_string(__pyx_f_6pynini_18StringPathIterator_ostring(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.StringPathIterator.ostring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6pynini_18StringPathIterator_25generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "pynini.pyx":2228
 *     return self._paths.get().OString()
 * 
 *   def ostrings(self):             # <<<<<<<<<<<<<<
 *     """
 *     ostrings(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_18StringPathIterator_24ostrings(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pynini_18StringPathIterator_23ostrings[] = "\n    ostrings(self)\n\n    Generates all output strings in the FST.\n\n    This method returns a generator over all output strings in the path. The\n    caller is responsible for resetting the iterator if desired.\n\n    Yields:\n      All output strings.\n    ";
static PyObject *__pyx_pw_6pynini_18StringPathIterator_24ostrings(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ostrings (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_18StringPathIterator_23ostrings(((struct __pyx_obj_6pynini_StringPathIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_18StringPathIterator_23ostrings(struct __pyx_obj_6pynini_StringPathIterator *__pyx_v_self) {
  struct __pyx_obj_6pynini___pyx_scope_struct_9_ostrings *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ostrings", 0);
  __pyx_cur_scope = (struct __pyx_obj_6pynini___pyx_scope_struct_9_ostrings *)__pyx_tp_new_6pynini___pyx_scope_struct_9_ostrings(__pyx_ptype_6pynini___pyx_scope_struct_9_ostrings, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6pynini___pyx_scope_struct_9_ostrings *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 2228, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6pynini_18StringPathIterator_25generator3, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_ostrings, __pyx_n_s_StringPathIterator_ostrings, __pyx_n_s_pynini); if (unlikely(!gen)) __PYX_ERR(0, 2228, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pynini.StringPathIterator.ostrings", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6pynini_18StringPathIterator_25generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6pynini___pyx_scope_struct_9_ostrings *__pyx_cur_scope = ((struct __pyx_obj_6pynini___pyx_scope_struct_9_ostrings *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ostrings", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 2228, __pyx_L1_error)

  /* "pynini.pyx":2240
 *       All output strings.
 *     """
 *     while not self._paths.get().Done():             # <<<<<<<<<<<<<<
 *       yield self.ostring()
 *       self._paths.get().Next()
 */
  while (1) {
    if (unlikely(((PyObject *)__pyx_cur_scope->__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_paths");
      __PYX_ERR(0, 2240, __pyx_L1_error)
    }
    __pyx_t_1 = ((!(__pyx_cur_scope->__pyx_v_self->_paths.get()->Done() != 0)) != 0);
    if (!__pyx_t_1) break;

    /* "pynini.pyx":2241
 *     """
 *     while not self._paths.get().Done():
 *       yield self.ostring()             # <<<<<<<<<<<<<<
 *       self._paths.get().Next()
 * 
 */
    if (unlikely(((PyObject *)__pyx_cur_scope->__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "ostring");
      __PYX_ERR(0, 2241, __pyx_L1_error)
    }
    __pyx_t_2 = __pyx_convert_PyUnicode_string_to_py_std__in_string(((struct __pyx_vtabstruct_6pynini_StringPathIterator *)__pyx_cur_scope->__pyx_v_self->__pyx_vtab)->ostring(__pyx_cur_scope->__pyx_v_self, 0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2241, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 2241, __pyx_L1_error)

    /* "pynini.pyx":2242
 *     while not self._paths.get().Done():
 *       yield self.ostring()
 *       self._paths.get().Next()             # <<<<<<<<<<<<<<
 * 
 *   cpdef _Weight weight(self):
 */
    if (unlikely(((PyObject *)__pyx_cur_scope->__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_paths");
      __PYX_ERR(0, 2242, __pyx_L1_error)
    }
    __pyx_cur_scope->__pyx_v_self->_paths.get()->Next();
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "pynini.pyx":2228
 *     return self._paths.get().OString()
 * 
 *   def ostrings(self):             # <<<<<<<<<<<<<<
 *     """
 *     ostrings(self)
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ostrings", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2244
 *       self._paths.get().Next()
 * 
 *   cpdef _Weight weight(self):             # <<<<<<<<<<<<<<
 *     """
 *     weight(self)
 */

static PyObject *__pyx_pw_6pynini_18StringPathIterator_27weight(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static struct __pyx_obj_9pywrapfst_Weight *__pyx_f_6pynini_18StringPathIterator_weight(struct __pyx_obj_6pynini_StringPathIterator *__pyx_v_self, int __pyx_skip_dispatch) {
  struct __pyx_obj_9pywrapfst_Weight *__pyx_v_weight = 0;
  struct __pyx_obj_9pywrapfst_Weight *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("weight", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_weight); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2244, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_18StringPathIterator_27weight)) {
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2244, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2244, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_9pywrapfst_Weight))))) __PYX_ERR(0, 2244, __pyx_L1_error)
      __pyx_r = ((struct __pyx_obj_9pywrapfst_Weight *)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":2253
 *       The path's Weight.
 *     """
 *     cdef _Weight weight = _Weight.__new__(_Weight)             # <<<<<<<<<<<<<<
 *     weight._weight.reset(new WeightClass(self._paths.get().Weight()))
 *     return weight
 */
  __pyx_t_1 = __Pyx_tp_new(((PyObject *)__pyx_ptype_9pywrapfst_Weight), __pyx_empty_tuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9pywrapfst_Weight)))) __PYX_ERR(0, 2253, __pyx_L1_error)
  __pyx_v_weight = ((struct __pyx_obj_9pywrapfst_Weight *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":2254
 *     """
 *     cdef _Weight weight = _Weight.__new__(_Weight)
 *     weight._weight.reset(new WeightClass(self._paths.get().Weight()))             # <<<<<<<<<<<<<<
 *     return weight
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_weight) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_weight");
    __PYX_ERR(0, 2254, __pyx_L1_error)
  }
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_paths");
    __PYX_ERR(0, 2254, __pyx_L1_error)
  }
  __pyx_v_weight->_weight.reset(new fst::script::WeightClass(__pyx_v_self->_paths.get()->Weight()));

  /* "pynini.pyx":2255
 *     cdef _Weight weight = _Weight.__new__(_Weight)
 *     weight._weight.reset(new WeightClass(self._paths.get().Weight()))
 *     return weight             # <<<<<<<<<<<<<<
 * 
 *   def weights(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_weight));
  __pyx_r = __pyx_v_weight;
  goto __pyx_L0;

  /* "pynini.pyx":2244
 *       self._paths.get().Next()
 * 
 *   cpdef _Weight weight(self):             # <<<<<<<<<<<<<<
 *     """
 *     weight(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynini.StringPathIterator.weight", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_weight);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_18StringPathIterator_27weight(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pynini_18StringPathIterator_26weight[] = "\n    weight(self)\n\n    Returns the current path's total weight.\n\n    Returns:\n      The path's Weight.\n    ";
static PyObject *__pyx_pw_6pynini_18StringPathIterator_27weight(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("weight (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_18StringPathIterator_26weight(((struct __pyx_obj_6pynini_StringPathIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_18StringPathIterator_26weight(struct __pyx_obj_6pynini_StringPathIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("weight", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini_18StringPathIterator_weight(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.StringPathIterator.weight", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6pynini_18StringPathIterator_30generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "pynini.pyx":2257
 *     return weight
 * 
 *   def weights(self):             # <<<<<<<<<<<<<<
 *     """
 *     weights(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_18StringPathIterator_29weights(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pynini_18StringPathIterator_28weights[] = "\n    weights(self)\n\n    Generates all path weights in the FST.\n\n    This method returns a generator over all path weights. The caller is\n    responsible for resetting the iterator if desired.\n\n    Yields:\n      All weights.\n    ";
static PyObject *__pyx_pw_6pynini_18StringPathIterator_29weights(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("weights (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_18StringPathIterator_28weights(((struct __pyx_obj_6pynini_StringPathIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_18StringPathIterator_28weights(struct __pyx_obj_6pynini_StringPathIterator *__pyx_v_self) {
  struct __pyx_obj_6pynini___pyx_scope_struct_10_weights *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("weights", 0);
  __pyx_cur_scope = (struct __pyx_obj_6pynini___pyx_scope_struct_10_weights *)__pyx_tp_new_6pynini___pyx_scope_struct_10_weights(__pyx_ptype_6pynini___pyx_scope_struct_10_weights, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6pynini___pyx_scope_struct_10_weights *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 2257, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6pynini_18StringPathIterator_30generator4, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_weights, __pyx_n_s_StringPathIterator_weights, __pyx_n_s_pynini); if (unlikely(!gen)) __PYX_ERR(0, 2257, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pynini.StringPathIterator.weights", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6pynini_18StringPathIterator_30generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6pynini___pyx_scope_struct_10_weights *__pyx_cur_scope = ((struct __pyx_obj_6pynini___pyx_scope_struct_10_weights *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("weights", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 2257, __pyx_L1_error)

  /* "pynini.pyx":2269
 *       All weights.
 *     """
 *     while not self._paths.get().Done():             # <<<<<<<<<<<<<<
 *       yield self.weight()
 *       self._paths.get().Next()
 */
  while (1) {
    if (unlikely(((PyObject *)__pyx_cur_scope->__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_paths");
      __PYX_ERR(0, 2269, __pyx_L1_error)
    }
    __pyx_t_1 = ((!(__pyx_cur_scope->__pyx_v_self->_paths.get()->Done() != 0)) != 0);
    if (!__pyx_t_1) break;

    /* "pynini.pyx":2270
 *     """
 *     while not self._paths.get().Done():
 *       yield self.weight()             # <<<<<<<<<<<<<<
 *       self._paths.get().Next()
 * 
 */
    if (unlikely(((PyObject *)__pyx_cur_scope->__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "weight");
      __PYX_ERR(0, 2270, __pyx_L1_error)
    }
    __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_6pynini_StringPathIterator *)__pyx_cur_scope->__pyx_v_self->__pyx_vtab)->weight(__pyx_cur_scope->__pyx_v_self, 0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2270, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 2270, __pyx_L1_error)

    /* "pynini.pyx":2271
 *     while not self._paths.get().Done():
 *       yield self.weight()
 *       self._paths.get().Next()             # <<<<<<<<<<<<<<
 * 
 * 
 */
    if (unlikely(((PyObject *)__pyx_cur_scope->__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_paths");
      __PYX_ERR(0, 2271, __pyx_L1_error)
    }
    __pyx_cur_scope->__pyx_v_self->_paths.get()->Next();
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "pynini.pyx":2257
 *     return weight
 * 
 *   def weights(self):             # <<<<<<<<<<<<<<
 *     """
 *     weights(self)
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("weights", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._paths cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_18StringPathIterator_32__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6pynini_18StringPathIterator_32__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_18StringPathIterator_31__reduce_cython__(((struct __pyx_obj_6pynini_StringPathIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_18StringPathIterator_31__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pynini_StringPathIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._paths cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._paths cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._paths cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.StringPathIterator.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._paths cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._paths cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_18StringPathIterator_34__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_6pynini_18StringPathIterator_34__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_18StringPathIterator_33__setstate_cython__(((struct __pyx_obj_6pynini_StringPathIterator *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_18StringPathIterator_33__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pynini_StringPathIterator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._paths cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._paths cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._paths cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._paths cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.StringPathIterator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2302
 *   # Instances holds either a FarReader or a FarWriter.
 * 
 *   def __init__(self, filename, mode=b"r", arc_type=b"standard",             # <<<<<<<<<<<<<<
 *                far_type=b"default"):
 *     self._name = tostring(filename)
 */

/* Python wrapper */
static int __pyx_pw_6pynini_3Far_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pynini_3Far_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_mode = 0;
  PyObject *__pyx_v_arc_type = 0;
  PyObject *__pyx_v_far_type = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_mode,&__pyx_n_s_arc_type,&__pyx_n_s_far_type,0};
    PyObject* values[4] = {0,0,0,0};
    values[1] = ((PyObject *)__pyx_n_b_r);
    values[2] = ((PyObject *)__pyx_n_b_standard);
    values[3] = ((PyObject *)__pyx_n_b_default);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mode);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_arc_type);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_far_type);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 2302, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = values[0];
    __pyx_v_mode = values[1];
    __pyx_v_arc_type = values[2];
    __pyx_v_far_type = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2302, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.Far.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_3Far___init__(((struct __pyx_obj_6pynini_Far *)__pyx_v_self), __pyx_v_filename, __pyx_v_mode, __pyx_v_arc_type, __pyx_v_far_type);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pynini_3Far___init__(struct __pyx_obj_6pynini_Far *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_mode, PyObject *__pyx_v_arc_type, PyObject *__pyx_v_far_type) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pynini.pyx":2304
 *   def __init__(self, filename, mode=b"r", arc_type=b"standard",
 *                far_type=b"default"):
 *     self._name = tostring(filename)             # <<<<<<<<<<<<<<
 *     self._mode = tostring(mode)[0]
 *     if self._mode == b"r":
 */
  __pyx_t_1 = __pyx_f_9pywrapfst_tostring(__pyx_v_filename, NULL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2304, __pyx_L1_error)
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_name");
    __PYX_ERR(0, 2304, __pyx_L1_error)
  }
  __pyx_v_self->_name = __pyx_t_1;

  /* "pynini.pyx":2305
 *                far_type=b"default"):
 *     self._name = tostring(filename)
 *     self._mode = tostring(mode)[0]             # <<<<<<<<<<<<<<
 *     if self._mode == b"r":
 *       self._reader = FarReader.open(self._name)
 */
  __pyx_t_1 = __pyx_f_9pywrapfst_tostring(__pyx_v_mode, NULL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2305, __pyx_L1_error)
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mode");
    __PYX_ERR(0, 2305, __pyx_L1_error)
  }
  __pyx_v_self->_mode = (__pyx_t_1[0]);

  /* "pynini.pyx":2306
 *     self._name = tostring(filename)
 *     self._mode = tostring(mode)[0]
 *     if self._mode == b"r":             # <<<<<<<<<<<<<<
 *       self._reader = FarReader.open(self._name)
 *     elif self._mode == b"w":
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mode");
    __PYX_ERR(0, 2306, __pyx_L1_error)
  }
  __pyx_t_2 = ((__pyx_v_self->_mode == 'r') != 0);
  if (__pyx_t_2) {

    /* "pynini.pyx":2307
 *     self._mode = tostring(mode)[0]
 *     if self._mode == b"r":
 *       self._reader = FarReader.open(self._name)             # <<<<<<<<<<<<<<
 *     elif self._mode == b"w":
 *       self._writer = FarWriter.create(self._name, arc_type=arc_type,
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9pywrapfst_FarReader), __pyx_n_s_open); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_name");
      __PYX_ERR(0, 2307, __pyx_L1_error)
    }
    __pyx_t_5 = __pyx_convert_PyUnicode_string_to_py_std__in_string(__pyx_v_self->_name); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2307, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_5};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2307, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_5};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2307, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2307, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2307, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_9pywrapfst_FarReader))))) __PYX_ERR(0, 2307, __pyx_L1_error)
    if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_reader");
      __PYX_ERR(0, 2307, __pyx_L1_error)
    }
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_v_self->_reader);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->_reader));
    __pyx_v_self->_reader = ((struct __pyx_obj_9pywrapfst_FarReader *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pynini.pyx":2306
 *     self._name = tostring(filename)
 *     self._mode = tostring(mode)[0]
 *     if self._mode == b"r":             # <<<<<<<<<<<<<<
 *       self._reader = FarReader.open(self._name)
 *     elif self._mode == b"w":
 */
    goto __pyx_L3;
  }

  /* "pynini.pyx":2308
 *     if self._mode == b"r":
 *       self._reader = FarReader.open(self._name)
 *     elif self._mode == b"w":             # <<<<<<<<<<<<<<
 *       self._writer = FarWriter.create(self._name, arc_type=arc_type,
 *                                       far_type=far_type)
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mode");
    __PYX_ERR(0, 2308, __pyx_L1_error)
  }
  __pyx_t_2 = ((__pyx_v_self->_mode == 'w') != 0);
  if (likely(__pyx_t_2)) {

    /* "pynini.pyx":2309
 *       self._reader = FarReader.open(self._name)
 *     elif self._mode == b"w":
 *       self._writer = FarWriter.create(self._name, arc_type=arc_type,             # <<<<<<<<<<<<<<
 *                                       far_type=far_type)
 *     else:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_9pywrapfst_FarWriter), __pyx_n_s_create); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_name");
      __PYX_ERR(0, 2309, __pyx_L1_error)
    }
    __pyx_t_4 = __pyx_convert_PyUnicode_string_to_py_std__in_string(__pyx_v_self->_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_arc_type, __pyx_v_arc_type) < 0) __PYX_ERR(0, 2309, __pyx_L1_error)

    /* "pynini.pyx":2310
 *     elif self._mode == b"w":
 *       self._writer = FarWriter.create(self._name, arc_type=arc_type,
 *                                       far_type=far_type)             # <<<<<<<<<<<<<<
 *     else:
 *       raise FstArgError("Unknown mode: {!r}".format(mode))
 */
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_far_type, __pyx_v_far_type) < 0) __PYX_ERR(0, 2309, __pyx_L1_error)

    /* "pynini.pyx":2309
 *       self._reader = FarReader.open(self._name)
 *     elif self._mode == b"w":
 *       self._writer = FarWriter.create(self._name, arc_type=arc_type,             # <<<<<<<<<<<<<<
 *                                       far_type=far_type)
 *     else:
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_9pywrapfst_FarWriter))))) __PYX_ERR(0, 2309, __pyx_L1_error)
    if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_writer");
      __PYX_ERR(0, 2309, __pyx_L1_error)
    }
    __Pyx_GIVEREF(__pyx_t_5);
    __Pyx_GOTREF(__pyx_v_self->_writer);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->_writer));
    __pyx_v_self->_writer = ((struct __pyx_obj_9pywrapfst_FarWriter *)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "pynini.pyx":2308
 *     if self._mode == b"r":
 *       self._reader = FarReader.open(self._name)
 *     elif self._mode == b"w":             # <<<<<<<<<<<<<<
 *       self._writer = FarWriter.create(self._name, arc_type=arc_type,
 *                                       far_type=far_type)
 */
    goto __pyx_L3;
  }

  /* "pynini.pyx":2312
 *                                       far_type=far_type)
 *     else:
 *       raise FstArgError("Unknown mode: {!r}".format(mode))             # <<<<<<<<<<<<<<
 * 
 *   def __repr__(self):
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstArgError); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2312, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Unknown_mode_r, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2312, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_mode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2312, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_mode};
        __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2312, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_7);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_mode};
        __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2312, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_7);
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2312, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_INCREF(__pyx_v_mode);
        __Pyx_GIVEREF(__pyx_v_mode);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_v_mode);
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2312, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_3) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2312, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_7};
        __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2312, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_7};
        __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2312, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2312, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_3); __pyx_t_3 = NULL;
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2312, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 2312, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pynini.pyx":2302
 *   # Instances holds either a FarReader or a FarWriter.
 * 
 *   def __init__(self, filename, mode=b"r", arc_type=b"standard",             # <<<<<<<<<<<<<<
 *                far_type=b"default"):
 *     self._name = tostring(filename)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pynini.Far.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2314
 *       raise FstArgError("Unknown mode: {!r}".format(mode))
 * 
 *   def __repr__(self):             # <<<<<<<<<<<<<<
 *     return "<{} Far {!r}, mode '{:c}' at 0x{:x}>".format(
 *         self.far_type(), self._name, self._mode, id(self))
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Far_3__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pynini_3Far_3__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Far_2__repr__(((struct __pyx_obj_6pynini_Far *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Far_2__repr__(struct __pyx_obj_6pynini_Far *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "pynini.pyx":2315
 * 
 *   def __repr__(self):
 *     return "<{} Far {!r}, mode '{:c}' at 0x{:x}>".format(             # <<<<<<<<<<<<<<
 *         self.far_type(), self._name, self._mode, id(self))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Far_r_mode_c_at_0x_x, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "pynini.pyx":2316
 *   def __repr__(self):
 *     return "<{} Far {!r}, mode '{:c}' at 0x{:x}>".format(
 *         self.far_type(), self._name, self._mode, id(self))             # <<<<<<<<<<<<<<
 * 
 *   cdef void _check_mode(self, char mode) except *:
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "far_type");
    __PYX_ERR(0, 2316, __pyx_L1_error)
  }
  __pyx_t_3 = __pyx_convert_PyUnicode_string_to_py_std__in_string(((struct __pyx_vtabstruct_6pynini_Far *)__pyx_v_self->__pyx_vtab)->far_type(__pyx_v_self, 0)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_name");
    __PYX_ERR(0, 2316, __pyx_L1_error)
  }
  __pyx_t_4 = __pyx_convert_PyUnicode_string_to_py_std__in_string(__pyx_v_self->_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mode");
    __PYX_ERR(0, 2316, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyInt_From_char(__pyx_v_self->_mode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_id, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_7, __pyx_t_3, __pyx_t_4, __pyx_t_5, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 4+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2315, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_7, __pyx_t_3, __pyx_t_4, __pyx_t_5, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 4+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2315, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_9 = PyTuple_New(4+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2315, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_8, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_9, 3+__pyx_t_8, __pyx_t_6);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2315, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":2314
 *       raise FstArgError("Unknown mode: {!r}".format(mode))
 * 
 *   def __repr__(self):             # <<<<<<<<<<<<<<
 *     return "<{} Far {!r}, mode '{:c}' at 0x{:x}>".format(
 *         self.far_type(), self._name, self._mode, id(self))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pynini.Far.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2318
 *         self.far_type(), self._name, self._mode, id(self))
 * 
 *   cdef void _check_mode(self, char mode) except *:             # <<<<<<<<<<<<<<
 *     if not self._mode == mode:
 *       raise FstOpError("Cannot invoke method in current mode: '{:c}'".format(
 */

static void __pyx_f_6pynini_3Far__check_mode(struct __pyx_obj_6pynini_Far *__pyx_v_self, char __pyx_v_mode) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("_check_mode", 0);

  /* "pynini.pyx":2319
 * 
 *   cdef void _check_mode(self, char mode) except *:
 *     if not self._mode == mode:             # <<<<<<<<<<<<<<
 *       raise FstOpError("Cannot invoke method in current mode: '{:c}'".format(
 *                        self._mode))
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mode");
    __PYX_ERR(0, 2319, __pyx_L1_error)
  }
  __pyx_t_1 = ((!((__pyx_v_self->_mode == __pyx_v_mode) != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "pynini.pyx":2320
 *   cdef void _check_mode(self, char mode) except *:
 *     if not self._mode == mode:
 *       raise FstOpError("Cannot invoke method in current mode: '{:c}'".format(             # <<<<<<<<<<<<<<
 *                        self._mode))
 * 
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstOpError); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2320, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Cannot_invoke_method_in_current, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2320, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);

    /* "pynini.pyx":2321
 *     if not self._mode == mode:
 *       raise FstOpError("Cannot invoke method in current mode: '{:c}'".format(
 *                        self._mode))             # <<<<<<<<<<<<<<
 * 
 *   cdef void _check_not_mode(self, char mode) except *:
 */
    if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mode");
      __PYX_ERR(0, 2321, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_PyInt_From_char(__pyx_v_self->_mode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2321, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2320, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_6};
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2320, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_6};
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2320, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2320, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2320, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2320, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2320, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2320, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2320, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2320, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 2320, __pyx_L1_error)

    /* "pynini.pyx":2319
 * 
 *   cdef void _check_mode(self, char mode) except *:
 *     if not self._mode == mode:             # <<<<<<<<<<<<<<
 *       raise FstOpError("Cannot invoke method in current mode: '{:c}'".format(
 *                        self._mode))
 */
  }

  /* "pynini.pyx":2318
 *         self.far_type(), self._name, self._mode, id(self))
 * 
 *   cdef void _check_mode(self, char mode) except *:             # <<<<<<<<<<<<<<
 *     if not self._mode == mode:
 *       raise FstOpError("Cannot invoke method in current mode: '{:c}'".format(
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pynini.Far._check_mode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "pynini.pyx":2323
 *                        self._mode))
 * 
 *   cdef void _check_not_mode(self, char mode) except *:             # <<<<<<<<<<<<<<
 *     if self._mode == mode:
 *       raise FstOpError("Cannot invoke method in current mode: '{:c}'".format(
 */

static void __pyx_f_6pynini_3Far__check_not_mode(struct __pyx_obj_6pynini_Far *__pyx_v_self, char __pyx_v_mode) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("_check_not_mode", 0);

  /* "pynini.pyx":2324
 * 
 *   cdef void _check_not_mode(self, char mode) except *:
 *     if self._mode == mode:             # <<<<<<<<<<<<<<
 *       raise FstOpError("Cannot invoke method in current mode: '{:c}'".format(
 *                        self._mode))
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mode");
    __PYX_ERR(0, 2324, __pyx_L1_error)
  }
  __pyx_t_1 = ((__pyx_v_self->_mode == __pyx_v_mode) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "pynini.pyx":2325
 *   cdef void _check_not_mode(self, char mode) except *:
 *     if self._mode == mode:
 *       raise FstOpError("Cannot invoke method in current mode: '{:c}'".format(             # <<<<<<<<<<<<<<
 *                        self._mode))
 * 
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstOpError); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2325, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Cannot_invoke_method_in_current, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2325, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);

    /* "pynini.pyx":2326
 *     if self._mode == mode:
 *       raise FstOpError("Cannot invoke method in current mode: '{:c}'".format(
 *                        self._mode))             # <<<<<<<<<<<<<<
 * 
 *   # API shared between FarReader and FarWriter.
 */
    if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mode");
      __PYX_ERR(0, 2326, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_PyInt_From_char(__pyx_v_self->_mode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2326, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2325, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_6};
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2325, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_6};
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2325, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2325, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2325, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2325, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2325, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2325, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2325, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2325, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 2325, __pyx_L1_error)

    /* "pynini.pyx":2324
 * 
 *   cdef void _check_not_mode(self, char mode) except *:
 *     if self._mode == mode:             # <<<<<<<<<<<<<<
 *       raise FstOpError("Cannot invoke method in current mode: '{:c}'".format(
 *                        self._mode))
 */
  }

  /* "pynini.pyx":2323
 *                        self._mode))
 * 
 *   cdef void _check_not_mode(self, char mode) except *:             # <<<<<<<<<<<<<<
 *     if self._mode == mode:
 *       raise FstOpError("Cannot invoke method in current mode: '{:c}'".format(
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pynini.Far._check_not_mode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "pynini.pyx":2330
 *   # API shared between FarReader and FarWriter.
 * 
 *   cpdef bool error(self) except *:             # <<<<<<<<<<<<<<
 *     """
 *     error(self)
 */

static PyObject *__pyx_pw_6pynini_3Far_5error(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static bool __pyx_f_6pynini_3Far_error(struct __pyx_obj_6pynini_Far *__pyx_v_self, int __pyx_skip_dispatch) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  bool __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("error", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_error); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2330, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_3Far_5error)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2330, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2330, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2330, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":2339
 *       True if the FAR is in an errorful state, False otherwise.
 *     """
 *     if self._mode == b"r":             # <<<<<<<<<<<<<<
 *       return self._reader.error()
 *     elif self._mode == b"w":
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mode");
    __PYX_ERR(0, 2339, __pyx_L1_error)
  }
  __pyx_t_6 = ((__pyx_v_self->_mode == 'r') != 0);
  if (__pyx_t_6) {

    /* "pynini.pyx":2340
 *     """
 *     if self._mode == b"r":
 *       return self._reader.error()             # <<<<<<<<<<<<<<
 *     elif self._mode == b"w":
 *       return self._writer.error()
 */
    if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_reader");
      __PYX_ERR(0, 2340, __pyx_L1_error)
    }
    if (unlikely(((PyObject *)__pyx_v_self->_reader) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "error");
      __PYX_ERR(0, 2340, __pyx_L1_error)
    }
    __pyx_r = ((struct __pyx_vtabstruct_9pywrapfst_FarReader *)__pyx_v_self->_reader->__pyx_vtab)->error(__pyx_v_self->_reader, 0);
    goto __pyx_L0;

    /* "pynini.pyx":2339
 *       True if the FAR is in an errorful state, False otherwise.
 *     """
 *     if self._mode == b"r":             # <<<<<<<<<<<<<<
 *       return self._reader.error()
 *     elif self._mode == b"w":
 */
  }

  /* "pynini.pyx":2341
 *     if self._mode == b"r":
 *       return self._reader.error()
 *     elif self._mode == b"w":             # <<<<<<<<<<<<<<
 *       return self._writer.error()
 *     else:
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mode");
    __PYX_ERR(0, 2341, __pyx_L1_error)
  }
  __pyx_t_6 = ((__pyx_v_self->_mode == 'w') != 0);
  if (__pyx_t_6) {

    /* "pynini.pyx":2342
 *       return self._reader.error()
 *     elif self._mode == b"w":
 *       return self._writer.error()             # <<<<<<<<<<<<<<
 *     else:
 *       return False
 */
    if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_writer");
      __PYX_ERR(0, 2342, __pyx_L1_error)
    }
    if (unlikely(((PyObject *)__pyx_v_self->_writer) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "error");
      __PYX_ERR(0, 2342, __pyx_L1_error)
    }
    __pyx_r = ((struct __pyx_vtabstruct_9pywrapfst_FarWriter *)__pyx_v_self->_writer->__pyx_vtab)->error(__pyx_v_self->_writer, 0);
    goto __pyx_L0;

    /* "pynini.pyx":2341
 *     if self._mode == b"r":
 *       return self._reader.error()
 *     elif self._mode == b"w":             # <<<<<<<<<<<<<<
 *       return self._writer.error()
 *     else:
 */
  }

  /* "pynini.pyx":2344
 *       return self._writer.error()
 *     else:
 *       return False             # <<<<<<<<<<<<<<
 * 
 *   cpdef string arc_type(self):
 */
  /*else*/ {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "pynini.pyx":2330
 *   # API shared between FarReader and FarWriter.
 * 
 *   cpdef bool error(self) except *:             # <<<<<<<<<<<<<<
 *     """
 *     error(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynini.Far.error", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Far_5error(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pynini_3Far_4error[] = "\n    error(self)\n\n    Indicates whether the FAR has encountered an error.\n\n    Returns:\n      True if the FAR is in an errorful state, False otherwise.\n    ";
static PyObject *__pyx_pw_6pynini_3Far_5error(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("error (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Far_4error(((struct __pyx_obj_6pynini_Far *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Far_4error(struct __pyx_obj_6pynini_Far *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("error", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pynini_3Far_error(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2330, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pynini.Far.error", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2346
 *       return False
 * 
 *   cpdef string arc_type(self):             # <<<<<<<<<<<<<<
 *     """
 *     arc_type(self)
 */

static PyObject *__pyx_pw_6pynini_3Far_7arc_type(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static std::string __pyx_f_6pynini_3Far_arc_type(struct __pyx_obj_6pynini_Far *__pyx_v_self, int __pyx_skip_dispatch) {
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  __Pyx_RefNannySetupContext("arc_type", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_arc_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2346, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_3Far_7arc_type)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2346, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2346, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2346, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":2352
 *     Returns a string indicating the arc type.
 *     """
 *     self._check_not_mode(b"c")             # <<<<<<<<<<<<<<
 *     return (self._reader.arc_type() if self._mode == b"r" else
 *             self._writer.arc_type())
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_check_not_mode");
    __PYX_ERR(0, 2352, __pyx_L1_error)
  }
  ((struct __pyx_vtabstruct_6pynini_Far *)__pyx_v_self->__pyx_vtab)->_check_not_mode(__pyx_v_self, 'c'); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2352, __pyx_L1_error)

  /* "pynini.pyx":2353
 *     """
 *     self._check_not_mode(b"c")
 *     return (self._reader.arc_type() if self._mode == b"r" else             # <<<<<<<<<<<<<<
 *             self._writer.arc_type())
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mode");
    __PYX_ERR(0, 2353, __pyx_L1_error)
  }
  if (((__pyx_v_self->_mode == 'r') != 0)) {
    if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_reader");
      __PYX_ERR(0, 2353, __pyx_L1_error)
    }
    if (unlikely(((PyObject *)__pyx_v_self->_reader) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "arc_type");
      __PYX_ERR(0, 2353, __pyx_L1_error)
    }
    __pyx_t_5 = ((struct __pyx_vtabstruct_9pywrapfst_FarReader *)__pyx_v_self->_reader->__pyx_vtab)->arc_type(__pyx_v_self->_reader, 0);
  } else {

    /* "pynini.pyx":2354
 *     self._check_not_mode(b"c")
 *     return (self._reader.arc_type() if self._mode == b"r" else
 *             self._writer.arc_type())             # <<<<<<<<<<<<<<
 * 
 *   cpdef bool closed(self):
 */
    if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_writer");
      __PYX_ERR(0, 2354, __pyx_L1_error)
    }
    if (unlikely(((PyObject *)__pyx_v_self->_writer) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "arc_type");
      __PYX_ERR(0, 2354, __pyx_L1_error)
    }
    __pyx_t_5 = ((struct __pyx_vtabstruct_9pywrapfst_FarWriter *)__pyx_v_self->_writer->__pyx_vtab)->arc_type(__pyx_v_self->_writer, 0);
  }
  __pyx_r = __pyx_t_5;
  goto __pyx_L0;

  /* "pynini.pyx":2346
 *       return False
 * 
 *   cpdef string arc_type(self):             # <<<<<<<<<<<<<<
 *     """
 *     arc_type(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("pynini.Far.arc_type", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Far_7arc_type(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pynini_3Far_6arc_type[] = "\n    arc_type(self)\n\n    Returns a string indicating the arc type.\n    ";
static PyObject *__pyx_pw_6pynini_3Far_7arc_type(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("arc_type (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Far_6arc_type(((struct __pyx_obj_6pynini_Far *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Far_6arc_type(struct __pyx_obj_6pynini_Far *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("arc_type", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyUnicode_string_to_py_std__in_string(__pyx_f_6pynini_3Far_arc_type(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.Far.arc_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2356
 *             self._writer.arc_type())
 * 
 *   cpdef bool closed(self):             # <<<<<<<<<<<<<<
 *     """
 *     closed(self)
 */

static PyObject *__pyx_pw_6pynini_3Far_9closed(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static bool __pyx_f_6pynini_3Far_closed(struct __pyx_obj_6pynini_Far *__pyx_v_self, int __pyx_skip_dispatch) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  bool __pyx_t_5;
  __Pyx_RefNannySetupContext("closed", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_closed); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2356, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_3Far_9closed)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2356, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2356, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2356, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":2362
 *     Indicates whether the FAR is closed for IO.
 *     """
 *     return self._mode == b"c"             # <<<<<<<<<<<<<<
 * 
 *   cpdef string far_type(self):
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mode");
    __PYX_ERR(0, 2362, __pyx_L1_error)
  }
  __pyx_r = (__pyx_v_self->_mode == 'c');
  goto __pyx_L0;

  /* "pynini.pyx":2356
 *             self._writer.arc_type())
 * 
 *   cpdef bool closed(self):             # <<<<<<<<<<<<<<
 *     """
 *     closed(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("pynini.Far.closed", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Far_9closed(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pynini_3Far_8closed[] = "\n    closed(self)\n\n    Indicates whether the FAR is closed for IO.\n    ";
static PyObject *__pyx_pw_6pynini_3Far_9closed(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("closed (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Far_8closed(((struct __pyx_obj_6pynini_Far *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Far_8closed(struct __pyx_obj_6pynini_Far *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("closed", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_6pynini_3Far_closed(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.Far.closed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2364
 *     return self._mode == b"c"
 * 
 *   cpdef string far_type(self):             # <<<<<<<<<<<<<<
 *     """far_type(self)
 * 
 */

static PyObject *__pyx_pw_6pynini_3Far_11far_type(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static std::string __pyx_f_6pynini_3Far_far_type(struct __pyx_obj_6pynini_Far *__pyx_v_self, int __pyx_skip_dispatch) {
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("far_type", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_far_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_3Far_11far_type)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2364, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2364, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2364, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":2369
 *     Returns a string indicating the FAR type.
 *     """
 *     if self._mode == b"r":             # <<<<<<<<<<<<<<
 *       return self._reader.far_type()
 *     elif self._mode == b"w":
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mode");
    __PYX_ERR(0, 2369, __pyx_L1_error)
  }
  __pyx_t_6 = ((__pyx_v_self->_mode == 'r') != 0);
  if (__pyx_t_6) {

    /* "pynini.pyx":2370
 *     """
 *     if self._mode == b"r":
 *       return self._reader.far_type()             # <<<<<<<<<<<<<<
 *     elif self._mode == b"w":
 *       return self._writer.far_type()
 */
    if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_reader");
      __PYX_ERR(0, 2370, __pyx_L1_error)
    }
    if (unlikely(((PyObject *)__pyx_v_self->_reader) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "far_type");
      __PYX_ERR(0, 2370, __pyx_L1_error)
    }
    __pyx_r = ((struct __pyx_vtabstruct_9pywrapfst_FarReader *)__pyx_v_self->_reader->__pyx_vtab)->far_type(__pyx_v_self->_reader, 0);
    goto __pyx_L0;

    /* "pynini.pyx":2369
 *     Returns a string indicating the FAR type.
 *     """
 *     if self._mode == b"r":             # <<<<<<<<<<<<<<
 *       return self._reader.far_type()
 *     elif self._mode == b"w":
 */
  }

  /* "pynini.pyx":2371
 *     if self._mode == b"r":
 *       return self._reader.far_type()
 *     elif self._mode == b"w":             # <<<<<<<<<<<<<<
 *       return self._writer.far_type()
 *     else:
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mode");
    __PYX_ERR(0, 2371, __pyx_L1_error)
  }
  __pyx_t_6 = ((__pyx_v_self->_mode == 'w') != 0);
  if (__pyx_t_6) {

    /* "pynini.pyx":2372
 *       return self._reader.far_type()
 *     elif self._mode == b"w":
 *       return self._writer.far_type()             # <<<<<<<<<<<<<<
 *     else:
 *       return b"closed"
 */
    if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_writer");
      __PYX_ERR(0, 2372, __pyx_L1_error)
    }
    if (unlikely(((PyObject *)__pyx_v_self->_writer) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "far_type");
      __PYX_ERR(0, 2372, __pyx_L1_error)
    }
    __pyx_r = ((struct __pyx_vtabstruct_9pywrapfst_FarWriter *)__pyx_v_self->_writer->__pyx_vtab)->far_type(__pyx_v_self->_writer, 0);
    goto __pyx_L0;

    /* "pynini.pyx":2371
 *     if self._mode == b"r":
 *       return self._reader.far_type()
 *     elif self._mode == b"w":             # <<<<<<<<<<<<<<
 *       return self._writer.far_type()
 *     else:
 */
  }

  /* "pynini.pyx":2374
 *       return self._writer.far_type()
 *     else:
 *       return b"closed"             # <<<<<<<<<<<<<<
 * 
 *   cpdef string mode(self):
 */
  /*else*/ {
    __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_closed); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2374, __pyx_L1_error)
    __pyx_r = __pyx_t_5;
    goto __pyx_L0;
  }

  /* "pynini.pyx":2364
 *     return self._mode == b"c"
 * 
 *   cpdef string far_type(self):             # <<<<<<<<<<<<<<
 *     """far_type(self)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("pynini.Far.far_type", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Far_11far_type(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pynini_3Far_10far_type[] = "far_type(self)\n\n    Returns a string indicating the FAR type.\n    ";
static PyObject *__pyx_pw_6pynini_3Far_11far_type(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("far_type (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Far_10far_type(((struct __pyx_obj_6pynini_Far *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Far_10far_type(struct __pyx_obj_6pynini_Far *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("far_type", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyUnicode_string_to_py_std__in_string(__pyx_f_6pynini_3Far_far_type(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.Far.far_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2376
 *       return b"closed"
 * 
 *   cpdef string mode(self):             # <<<<<<<<<<<<<<
 *     """
 *     mode(self)
 */

static PyObject *__pyx_pw_6pynini_3Far_13mode(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static std::string __pyx_f_6pynini_3Far_mode(struct __pyx_obj_6pynini_Far *__pyx_v_self, int __pyx_skip_dispatch) {
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("mode", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_mode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2376, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_3Far_13mode)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2376, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2376, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2376, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":2382
 *     Returns a char indicating the FAR's current mode.
 *     """
 *     return "{:c}".format(self._mode)             # <<<<<<<<<<<<<<
 * 
 *   cpdef string name(self):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_c, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mode");
    __PYX_ERR(0, 2382, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_From_char(__pyx_v_self->_mode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2382, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2382, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2382, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2382, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2382, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2382, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  goto __pyx_L0;

  /* "pynini.pyx":2376
 *       return b"closed"
 * 
 *   cpdef string mode(self):             # <<<<<<<<<<<<<<
 *     """
 *     mode(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_WriteUnraisable("pynini.Far.mode", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Far_13mode(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pynini_3Far_12mode[] = "\n    mode(self)\n\n    Returns a char indicating the FAR's current mode.\n    ";
static PyObject *__pyx_pw_6pynini_3Far_13mode(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mode (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Far_12mode(((struct __pyx_obj_6pynini_Far *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Far_12mode(struct __pyx_obj_6pynini_Far *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("mode", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyUnicode_string_to_py_std__in_string(__pyx_f_6pynini_3Far_mode(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.Far.mode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2384
 *     return "{:c}".format(self._mode)
 * 
 *   cpdef string name(self):             # <<<<<<<<<<<<<<
 *     """
 *     name(self)
 */

static PyObject *__pyx_pw_6pynini_3Far_15name(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static std::string __pyx_f_6pynini_3Far_name(struct __pyx_obj_6pynini_Far *__pyx_v_self, int __pyx_skip_dispatch) {
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  __Pyx_RefNannySetupContext("name", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2384, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_3Far_15name)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2384, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2384, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2384, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":2390
 *     Returns the FAR's filename.
 *     """
 *     return self._name             # <<<<<<<<<<<<<<
 * 
 *   # FarReader API.
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_name");
    __PYX_ERR(0, 2390, __pyx_L1_error)
  }
  __pyx_r = __pyx_v_self->_name;
  goto __pyx_L0;

  /* "pynini.pyx":2384
 *     return "{:c}".format(self._mode)
 * 
 *   cpdef string name(self):             # <<<<<<<<<<<<<<
 *     """
 *     name(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("pynini.Far.name", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Far_15name(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pynini_3Far_14name[] = "\n    name(self)\n\n    Returns the FAR's filename.\n    ";
static PyObject *__pyx_pw_6pynini_3Far_15name(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("name (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Far_14name(((struct __pyx_obj_6pynini_Far *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Far_14name(struct __pyx_obj_6pynini_Far *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("name", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyUnicode_string_to_py_std__in_string(__pyx_f_6pynini_3Far_name(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.Far.name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2394
 *   # FarReader API.
 * 
 *   cpdef bool done(self) except *:             # <<<<<<<<<<<<<<
 *     """
 *     done(self)
 */

static PyObject *__pyx_pw_6pynini_3Far_17done(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static bool __pyx_f_6pynini_3Far_done(struct __pyx_obj_6pynini_Far *__pyx_v_self, int __pyx_skip_dispatch) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  bool __pyx_t_5;
  __Pyx_RefNannySetupContext("done", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_done); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2394, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_3Far_17done)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2394, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2394, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2394, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":2406
 *       FstOpError: Cannot invoke method in current mode.
 *     """
 *     self._check_mode(b"r")             # <<<<<<<<<<<<<<
 *     return self._reader.done()
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_check_mode");
    __PYX_ERR(0, 2406, __pyx_L1_error)
  }
  ((struct __pyx_vtabstruct_6pynini_Far *)__pyx_v_self->__pyx_vtab)->_check_mode(__pyx_v_self, 'r'); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2406, __pyx_L1_error)

  /* "pynini.pyx":2407
 *     """
 *     self._check_mode(b"r")
 *     return self._reader.done()             # <<<<<<<<<<<<<<
 * 
 *   cpdef bool find(self, key) except *:
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_reader");
    __PYX_ERR(0, 2407, __pyx_L1_error)
  }
  if (unlikely(((PyObject *)__pyx_v_self->_reader) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "done");
    __PYX_ERR(0, 2407, __pyx_L1_error)
  }
  __pyx_r = ((struct __pyx_vtabstruct_9pywrapfst_FarReader *)__pyx_v_self->_reader->__pyx_vtab)->done(__pyx_v_self->_reader, 0);
  goto __pyx_L0;

  /* "pynini.pyx":2394
 *   # FarReader API.
 * 
 *   cpdef bool done(self) except *:             # <<<<<<<<<<<<<<
 *     """
 *     done(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynini.Far.done", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Far_17done(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pynini_3Far_16done[] = "\n    done(self)\n\n    Indicates whether the iterator is exhausted or not.\n\n    Returns:\n      True if the iterator is exhausted, False otherwise.\n\n    Raises:\n      FstOpError: Cannot invoke method in current mode.\n    ";
static PyObject *__pyx_pw_6pynini_3Far_17done(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("done (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Far_16done(((struct __pyx_obj_6pynini_Far *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Far_16done(struct __pyx_obj_6pynini_Far *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("done", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pynini_3Far_done(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2394, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2394, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pynini.Far.done", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2409
 *     return self._reader.done()
 * 
 *   cpdef bool find(self, key) except *:             # <<<<<<<<<<<<<<
 *     """
 *     find(self, key)
 */

static PyObject *__pyx_pw_6pynini_3Far_19find(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static bool __pyx_f_6pynini_3Far_find(struct __pyx_obj_6pynini_Far *__pyx_v_self, PyObject *__pyx_v_key, int __pyx_skip_dispatch) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  bool __pyx_t_6;
  __Pyx_RefNannySetupContext("find", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_find); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2409, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_3Far_19find)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_key); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2409, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_key};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2409, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_key};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2409, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        {
          __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2409, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
          __Pyx_INCREF(__pyx_v_key);
          __Pyx_GIVEREF(__pyx_v_key);
          PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_key);
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2409, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_6 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2409, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_6;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":2425
 *       FstOpError: Cannot invoke method in current mode.
 *     """
 *     self._check_mode(b"r")             # <<<<<<<<<<<<<<
 *     return self._reader.find(key)
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_check_mode");
    __PYX_ERR(0, 2425, __pyx_L1_error)
  }
  ((struct __pyx_vtabstruct_6pynini_Far *)__pyx_v_self->__pyx_vtab)->_check_mode(__pyx_v_self, 'r'); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2425, __pyx_L1_error)

  /* "pynini.pyx":2426
 *     """
 *     self._check_mode(b"r")
 *     return self._reader.find(key)             # <<<<<<<<<<<<<<
 * 
 *   cpdef Fst get_fst(self):
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_reader");
    __PYX_ERR(0, 2426, __pyx_L1_error)
  }
  if (unlikely(((PyObject *)__pyx_v_self->_reader) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "find");
    __PYX_ERR(0, 2426, __pyx_L1_error)
  }
  __pyx_t_6 = ((struct __pyx_vtabstruct_9pywrapfst_FarReader *)__pyx_v_self->_reader->__pyx_vtab)->find(__pyx_v_self->_reader, __pyx_v_key, 0); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2426, __pyx_L1_error)
  __pyx_r = __pyx_t_6;
  goto __pyx_L0;

  /* "pynini.pyx":2409
 *     return self._reader.done()
 * 
 *   cpdef bool find(self, key) except *:             # <<<<<<<<<<<<<<
 *     """
 *     find(self, key)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynini.Far.find", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Far_19find(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static char __pyx_doc_6pynini_3Far_18find[] = "\n    find(self, key)\n\n    Sets the current position to the first entry greater than or equal to the\n    key (a string) and indicates whether or not a match was found.\n\n    Args:\n      key: A string key.\n\n    Returns:\n      True if the key was found, False otherwise.\n\n    Raises:\n      FstOpError: Cannot invoke method in current mode.\n    ";
static PyObject *__pyx_pw_6pynini_3Far_19find(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("find (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Far_18find(((struct __pyx_obj_6pynini_Far *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Far_18find(struct __pyx_obj_6pynini_Far *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("find", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pynini_3Far_find(__pyx_v_self, __pyx_v_key, 1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2409, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pynini.Far.find", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2428
 *     return self._reader.find(key)
 * 
 *   cpdef Fst get_fst(self):             # <<<<<<<<<<<<<<
 *     """
 *     get_fst(self)
 */

static PyObject *__pyx_pw_6pynini_3Far_21get_fst(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static struct __pyx_obj_6pynini_Fst *__pyx_f_6pynini_3Far_get_fst(struct __pyx_obj_6pynini_Far *__pyx_v_self, int __pyx_skip_dispatch) {
  struct __pyx_obj_6pynini_Fst *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("get_fst", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_fst); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2428, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_3Far_21get_fst)) {
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2428, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2428, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_6pynini_Fst))))) __PYX_ERR(0, 2428, __pyx_L1_error)
      __pyx_r = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":2441
 *       FstOpError: Cannot invoke method in current mode.
 *     """
 *     self._check_mode(b"r")             # <<<<<<<<<<<<<<
 *     return Fst.from_pywrapfst(self._reader.get_fst())
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_check_mode");
    __PYX_ERR(0, 2441, __pyx_L1_error)
  }
  ((struct __pyx_vtabstruct_6pynini_Far *)__pyx_v_self->__pyx_vtab)->_check_mode(__pyx_v_self, 'r'); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2441, __pyx_L1_error)

  /* "pynini.pyx":2442
 *     """
 *     self._check_mode(b"r")
 *     return Fst.from_pywrapfst(self._reader.get_fst())             # <<<<<<<<<<<<<<
 * 
 *   cpdef string get_key(self) except *:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_n_s_from_pywrapfst); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_reader");
    __PYX_ERR(0, 2442, __pyx_L1_error)
  }
  if (unlikely(((PyObject *)__pyx_v_self->_reader) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get_fst");
    __PYX_ERR(0, 2442, __pyx_L1_error)
  }
  __pyx_t_3 = ((PyObject *)((struct __pyx_vtabstruct_9pywrapfst_FarReader *)__pyx_v_self->_reader->__pyx_vtab)->get_fst(__pyx_v_self->_reader, 0)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2442, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2442, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2442, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2442, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2442, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_6pynini_Fst))))) __PYX_ERR(0, 2442, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pynini.pyx":2428
 *     return self._reader.find(key)
 * 
 *   cpdef Fst get_fst(self):             # <<<<<<<<<<<<<<
 *     """
 *     get_fst(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynini.Far.get_fst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Far_21get_fst(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pynini_3Far_20get_fst[] = "\n    get_fst(self)\n\n    Returns the FST at the current position. If the FST is not mutable,\n    it is converted to a VectorFst.\n\n    Returns:\n      A copy of the FST at the current position.\n\n    Raises:\n      FstOpError: Cannot invoke method in current mode.\n    ";
static PyObject *__pyx_pw_6pynini_3Far_21get_fst(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_fst (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Far_20get_fst(((struct __pyx_obj_6pynini_Far *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Far_20get_fst(struct __pyx_obj_6pynini_Far *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_fst", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini_3Far_get_fst(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.Far.get_fst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2444
 *     return Fst.from_pywrapfst(self._reader.get_fst())
 * 
 *   cpdef string get_key(self) except *:             # <<<<<<<<<<<<<<
 *     """
 *     get_key(self)
 */

static PyObject *__pyx_pw_6pynini_3Far_23get_key(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static std::string __pyx_f_6pynini_3Far_get_key(struct __pyx_obj_6pynini_Far *__pyx_v_self, int __pyx_skip_dispatch) {
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  __Pyx_RefNannySetupContext("get_key", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2444, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_3Far_23get_key)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2444, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2444, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2444, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":2456
 *       FstOpError: Cannot invoke method in current mode.
 *     """
 *     self._check_mode(b"r")             # <<<<<<<<<<<<<<
 *     return self._reader.get_key()
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_check_mode");
    __PYX_ERR(0, 2456, __pyx_L1_error)
  }
  ((struct __pyx_vtabstruct_6pynini_Far *)__pyx_v_self->__pyx_vtab)->_check_mode(__pyx_v_self, 'r'); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2456, __pyx_L1_error)

  /* "pynini.pyx":2457
 *     """
 *     self._check_mode(b"r")
 *     return self._reader.get_key()             # <<<<<<<<<<<<<<
 * 
 *   cpdef void next(self) except *:
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_reader");
    __PYX_ERR(0, 2457, __pyx_L1_error)
  }
  if (unlikely(((PyObject *)__pyx_v_self->_reader) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get_key");
    __PYX_ERR(0, 2457, __pyx_L1_error)
  }
  __pyx_r = ((struct __pyx_vtabstruct_9pywrapfst_FarReader *)__pyx_v_self->_reader->__pyx_vtab)->get_key(__pyx_v_self->_reader, 0);
  goto __pyx_L0;

  /* "pynini.pyx":2444
 *     return Fst.from_pywrapfst(self._reader.get_fst())
 * 
 *   cpdef string get_key(self) except *:             # <<<<<<<<<<<<<<
 *     """
 *     get_key(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynini.Far.get_key", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Far_23get_key(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pynini_3Far_22get_key[] = "\n    get_key(self)\n\n    Returns the string key at the current position.\n\n    Returns:\n      The string key at the current position.\n\n    Raises:\n      FstOpError: Cannot invoke method in current mode.\n    ";
static PyObject *__pyx_pw_6pynini_3Far_23get_key(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_key (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Far_22get_key(((struct __pyx_obj_6pynini_Far *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Far_22get_key(struct __pyx_obj_6pynini_Far *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_key", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pynini_3Far_get_key(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2444, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_PyUnicode_string_to_py_std__in_string(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pynini.Far.get_key", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2459
 *     return self._reader.get_key()
 * 
 *   cpdef void next(self) except *:             # <<<<<<<<<<<<<<
 *     """
 *     next(self)
 */

static PyObject *__pyx_pw_6pynini_3Far_25next(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static void __pyx_f_6pynini_3Far_next(struct __pyx_obj_6pynini_Far *__pyx_v_self, int __pyx_skip_dispatch) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("next", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_next); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2459, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_3Far_25next)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2459, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2459, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":2468
 *       FstOpError: Cannot invoke method in current mode.
 *     """
 *     self._check_mode(b"r")             # <<<<<<<<<<<<<<
 *     self._reader.next()
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_check_mode");
    __PYX_ERR(0, 2468, __pyx_L1_error)
  }
  ((struct __pyx_vtabstruct_6pynini_Far *)__pyx_v_self->__pyx_vtab)->_check_mode(__pyx_v_self, 'r'); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2468, __pyx_L1_error)

  /* "pynini.pyx":2469
 *     """
 *     self._check_mode(b"r")
 *     self._reader.next()             # <<<<<<<<<<<<<<
 * 
 *   cpdef void reset(self) except *:
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_reader");
    __PYX_ERR(0, 2469, __pyx_L1_error)
  }
  if (unlikely(((PyObject *)__pyx_v_self->_reader) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "next");
    __PYX_ERR(0, 2469, __pyx_L1_error)
  }
  ((struct __pyx_vtabstruct_9pywrapfst_FarReader *)__pyx_v_self->_reader->__pyx_vtab)->next(__pyx_v_self->_reader, 0);

  /* "pynini.pyx":2459
 *     return self._reader.get_key()
 * 
 *   cpdef void next(self) except *:             # <<<<<<<<<<<<<<
 *     """
 *     next(self)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynini.Far.next", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Far_25next(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pynini_3Far_24next[] = "\n    next(self)\n\n    Advances the iterator.\n\n    Raises:\n      FstOpError: Cannot invoke method in current mode.\n    ";
static PyObject *__pyx_pw_6pynini_3Far_25next(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("next (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Far_24next(((struct __pyx_obj_6pynini_Far *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Far_24next(struct __pyx_obj_6pynini_Far *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("next", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_f_6pynini_3Far_next(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2459, __pyx_L1_error)
  __pyx_t_1 = __Pyx_void_to_None(NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.Far.next", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2471
 *     self._reader.next()
 * 
 *   cpdef void reset(self) except *:             # <<<<<<<<<<<<<<
 *     """
 *     reset(self)
 */

static PyObject *__pyx_pw_6pynini_3Far_27reset(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static void __pyx_f_6pynini_3Far_reset(struct __pyx_obj_6pynini_Far *__pyx_v_self, int __pyx_skip_dispatch) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("reset", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_reset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2471, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_3Far_27reset)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2471, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2471, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":2480
 *       FstOpError: Cannot invoke method in current mode.
 *     """
 *     self._check_mode(b"r")             # <<<<<<<<<<<<<<
 *     self._reader.reset()
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_check_mode");
    __PYX_ERR(0, 2480, __pyx_L1_error)
  }
  ((struct __pyx_vtabstruct_6pynini_Far *)__pyx_v_self->__pyx_vtab)->_check_mode(__pyx_v_self, 'r'); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2480, __pyx_L1_error)

  /* "pynini.pyx":2481
 *     """
 *     self._check_mode(b"r")
 *     self._reader.reset()             # <<<<<<<<<<<<<<
 * 
 *   def __getitem__(self, key):
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_reader");
    __PYX_ERR(0, 2481, __pyx_L1_error)
  }
  if (unlikely(((PyObject *)__pyx_v_self->_reader) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "reset");
    __PYX_ERR(0, 2481, __pyx_L1_error)
  }
  ((struct __pyx_vtabstruct_9pywrapfst_FarReader *)__pyx_v_self->_reader->__pyx_vtab)->reset(__pyx_v_self->_reader, 0);

  /* "pynini.pyx":2471
 *     self._reader.next()
 * 
 *   cpdef void reset(self) except *:             # <<<<<<<<<<<<<<
 *     """
 *     reset(self)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynini.Far.reset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Far_27reset(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pynini_3Far_26reset[] = "\n    reset(self)\n\n    Resets the iterator to the initial position.\n\n    Raises:\n      FstOpError: Cannot invoke method in current mode.\n    ";
static PyObject *__pyx_pw_6pynini_3Far_27reset(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reset (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Far_26reset(((struct __pyx_obj_6pynini_Far *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Far_26reset(struct __pyx_obj_6pynini_Far *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("reset", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_f_6pynini_3Far_reset(__pyx_v_self, 1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2471, __pyx_L1_error)
  __pyx_t_1 = __Pyx_void_to_None(NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.Far.reset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2483
 *     self._reader.reset()
 * 
 *   def __getitem__(self, key):             # <<<<<<<<<<<<<<
 *     if self.get_key() == tostring(key) or self._reader.find(key):
 *       return self.get_fst()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Far_29__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static PyObject *__pyx_pw_6pynini_3Far_29__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Far_28__getitem__(((struct __pyx_obj_6pynini_Far *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Far_28__getitem__(struct __pyx_obj_6pynini_Far *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  std::string __pyx_t_2;
  std::string __pyx_t_3;
  int __pyx_t_4;
  bool __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pynini.pyx":2484
 * 
 *   def __getitem__(self, key):
 *     if self.get_key() == tostring(key) or self._reader.find(key):             # <<<<<<<<<<<<<<
 *       return self.get_fst()
 *     else:
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get_key");
    __PYX_ERR(0, 2484, __pyx_L1_error)
  }
  __pyx_t_2 = ((struct __pyx_vtabstruct_6pynini_Far *)__pyx_v_self->__pyx_vtab)->get_key(__pyx_v_self, 0); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2484, __pyx_L1_error)
  __pyx_t_3 = __pyx_f_9pywrapfst_tostring(__pyx_v_key, NULL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2484, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_2 == __pyx_t_3) != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_reader");
    __PYX_ERR(0, 2484, __pyx_L1_error)
  }
  if (unlikely(((PyObject *)__pyx_v_self->_reader) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "find");
    __PYX_ERR(0, 2484, __pyx_L1_error)
  }
  __pyx_t_5 = ((struct __pyx_vtabstruct_9pywrapfst_FarReader *)__pyx_v_self->_reader->__pyx_vtab)->find(__pyx_v_self->_reader, __pyx_v_key, 0); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2484, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_5 != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (likely(__pyx_t_1)) {

    /* "pynini.pyx":2485
 *   def __getitem__(self, key):
 *     if self.get_key() == tostring(key) or self._reader.find(key):
 *       return self.get_fst()             # <<<<<<<<<<<<<<
 *     else:
 *       raise KeyError(key)
 */
    __Pyx_XDECREF(__pyx_r);
    if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get_fst");
      __PYX_ERR(0, 2485, __pyx_L1_error)
    }
    __pyx_t_6 = ((PyObject *)((struct __pyx_vtabstruct_6pynini_Far *)__pyx_v_self->__pyx_vtab)->get_fst(__pyx_v_self, 0)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2485, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "pynini.pyx":2484
 * 
 *   def __getitem__(self, key):
 *     if self.get_key() == tostring(key) or self._reader.find(key):             # <<<<<<<<<<<<<<
 *       return self.get_fst()
 *     else:
 */
  }

  /* "pynini.pyx":2487
 *       return self.get_fst()
 *     else:
 *       raise KeyError(key)             # <<<<<<<<<<<<<<
 * 
 *   # FarWriter API.
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_v_key); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2487, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 2487, __pyx_L1_error)
  }

  /* "pynini.pyx":2483
 *     self._reader.reset()
 * 
 *   def __getitem__(self, key):             # <<<<<<<<<<<<<<
 *     if self.get_key() == tostring(key) or self._reader.find(key):
 *       return self.get_fst()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pynini.Far.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2491
 *   # FarWriter API.
 * 
 *   cpdef void add(self, key, Fst fst):             # <<<<<<<<<<<<<<
 *     """
 *     add(self, key, fst)
 */

static PyObject *__pyx_pw_6pynini_3Far_31add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static void __pyx_f_6pynini_3Far_add(struct __pyx_obj_6pynini_Far *__pyx_v_self, PyObject *__pyx_v_key, struct __pyx_obj_6pynini_Fst *__pyx_v_fst, int __pyx_skip_dispatch) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("add", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2491, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_3Far_31add)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      __pyx_t_5 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_5 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_key, ((PyObject *)__pyx_v_fst)};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2491, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_key, ((PyObject *)__pyx_v_fst)};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2491, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2491, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (__pyx_t_4) {
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
        }
        __Pyx_INCREF(__pyx_v_key);
        __Pyx_GIVEREF(__pyx_v_key);
        PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_key);
        __Pyx_INCREF(((PyObject *)__pyx_v_fst));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_fst));
        PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, ((PyObject *)__pyx_v_fst));
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2491, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":2508
 *       FstOpError: Incompatible or invalid arc type.
 *     """
 *     self._check_mode(b"w")             # <<<<<<<<<<<<<<
 *     self._writer.add(key, fst)
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_check_mode");
    __PYX_ERR(0, 2508, __pyx_L1_error)
  }
  ((struct __pyx_vtabstruct_6pynini_Far *)__pyx_v_self->__pyx_vtab)->_check_mode(__pyx_v_self, 'w'); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2508, __pyx_L1_error)

  /* "pynini.pyx":2509
 *     """
 *     self._check_mode(b"w")
 *     self._writer.add(key, fst)             # <<<<<<<<<<<<<<
 * 
 *   def __setitem__(self, key, Fst fst):
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_writer");
    __PYX_ERR(0, 2509, __pyx_L1_error)
  }
  if (unlikely(((PyObject *)__pyx_v_self->_writer) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "add");
    __PYX_ERR(0, 2509, __pyx_L1_error)
  }
  ((struct __pyx_vtabstruct_9pywrapfst_FarWriter *)__pyx_v_self->_writer->__pyx_vtab)->add(__pyx_v_self->_writer, __pyx_v_key, ((struct __pyx_obj_9pywrapfst__Fst *)__pyx_v_fst), 0); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2509, __pyx_L1_error)

  /* "pynini.pyx":2491
 *   # FarWriter API.
 * 
 *   cpdef void add(self, key, Fst fst):             # <<<<<<<<<<<<<<
 *     """
 *     add(self, key, fst)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_WriteUnraisable("pynini.Far.add", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Far_31add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pynini_3Far_30add[] = "\n    add(self, key, fst)\n\n    Adds an FST to the FAR (when open for writing).\n\n    This methods adds an FST to the FAR which can be retrieved with the\n    specified string key.\n\n    Args:\n      key: The string used to key the input FST.\n      fst: The FST to write to the FAR.\n\n    Raises:\n      FstOpError: Cannot invoke method in current mode.\n      FstOpError: Incompatible or invalid arc type.\n    ";
static PyObject *__pyx_pw_6pynini_3Far_31add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_key = 0;
  struct __pyx_obj_6pynini_Fst *__pyx_v_fst = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,&__pyx_n_s_fst,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_key)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fst)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add", 1, 2, 2, 1); __PYX_ERR(0, 2491, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add") < 0)) __PYX_ERR(0, 2491, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_key = values[0];
    __pyx_v_fst = ((struct __pyx_obj_6pynini_Fst *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2491, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.Far.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fst), __pyx_ptype_6pynini_Fst, 1, "fst", 0))) __PYX_ERR(0, 2491, __pyx_L1_error)
  __pyx_r = __pyx_pf_6pynini_3Far_30add(((struct __pyx_obj_6pynini_Far *)__pyx_v_self), __pyx_v_key, __pyx_v_fst);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Far_30add(struct __pyx_obj_6pynini_Far *__pyx_v_self, PyObject *__pyx_v_key, struct __pyx_obj_6pynini_Fst *__pyx_v_fst) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("add", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_f_6pynini_3Far_add(__pyx_v_self, __pyx_v_key, __pyx_v_fst, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.Far.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2511
 *     self._writer.add(key, fst)
 * 
 *   def __setitem__(self, key, Fst fst):             # <<<<<<<<<<<<<<
 *     self._check_mode(b"w")
 *     self._writer[key] = fst
 */

/* Python wrapper */
static int __pyx_pw_6pynini_3Far_33__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_fst); /*proto*/
static int __pyx_pw_6pynini_3Far_33__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_fst) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fst), __pyx_ptype_6pynini_Fst, 1, "fst", 0))) __PYX_ERR(0, 2511, __pyx_L1_error)
  __pyx_r = __pyx_pf_6pynini_3Far_32__setitem__(((struct __pyx_obj_6pynini_Far *)__pyx_v_self), ((PyObject *)__pyx_v_key), ((struct __pyx_obj_6pynini_Fst *)__pyx_v_fst));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pynini_3Far_32__setitem__(struct __pyx_obj_6pynini_Far *__pyx_v_self, PyObject *__pyx_v_key, struct __pyx_obj_6pynini_Fst *__pyx_v_fst) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "pynini.pyx":2512
 * 
 *   def __setitem__(self, key, Fst fst):
 *     self._check_mode(b"w")             # <<<<<<<<<<<<<<
 *     self._writer[key] = fst
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_check_mode");
    __PYX_ERR(0, 2512, __pyx_L1_error)
  }
  ((struct __pyx_vtabstruct_6pynini_Far *)__pyx_v_self->__pyx_vtab)->_check_mode(__pyx_v_self, 'w'); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2512, __pyx_L1_error)

  /* "pynini.pyx":2513
 *   def __setitem__(self, key, Fst fst):
 *     self._check_mode(b"w")
 *     self._writer[key] = fst             # <<<<<<<<<<<<<<
 * 
 *   cpdef void close(self):
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_writer");
    __PYX_ERR(0, 2513, __pyx_L1_error)
  }
  if (unlikely(((PyObject *)__pyx_v_self->_writer) == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 2513, __pyx_L1_error)
  }
  if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_self->_writer), __pyx_v_key, ((PyObject *)__pyx_v_fst)) < 0)) __PYX_ERR(0, 2513, __pyx_L1_error)

  /* "pynini.pyx":2511
 *     self._writer.add(key, fst)
 * 
 *   def __setitem__(self, key, Fst fst):             # <<<<<<<<<<<<<<
 *     self._check_mode(b"w")
 *     self._writer[key] = fst
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pynini.Far.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2515
 *     self._writer[key] = fst
 * 
 *   cpdef void close(self):             # <<<<<<<<<<<<<<
 *     """
 *     close(self)
 */

static PyObject *__pyx_pw_6pynini_3Far_35close(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static void __pyx_f_6pynini_3Far_close(struct __pyx_obj_6pynini_Far *__pyx_v_self, int __pyx_skip_dispatch) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("close", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_close); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2515, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6pynini_3Far_35close)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2515, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2515, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pynini.pyx":2524
 *       FstOpError: Cannot invoke method in current mode.
 *     """
 *     self._check_mode(b"w")             # <<<<<<<<<<<<<<
 *     self._writer.close()
 *     self._mode = b"c"
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_check_mode");
    __PYX_ERR(0, 2524, __pyx_L1_error)
  }
  ((struct __pyx_vtabstruct_6pynini_Far *)__pyx_v_self->__pyx_vtab)->_check_mode(__pyx_v_self, 'w'); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2524, __pyx_L1_error)

  /* "pynini.pyx":2525
 *     """
 *     self._check_mode(b"w")
 *     self._writer.close()             # <<<<<<<<<<<<<<
 *     self._mode = b"c"
 * 
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_writer");
    __PYX_ERR(0, 2525, __pyx_L1_error)
  }
  if (unlikely(((PyObject *)__pyx_v_self->_writer) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "close");
    __PYX_ERR(0, 2525, __pyx_L1_error)
  }
  ((struct __pyx_vtabstruct_9pywrapfst_FarWriter *)__pyx_v_self->_writer->__pyx_vtab)->close(__pyx_v_self->_writer);

  /* "pynini.pyx":2526
 *     self._check_mode(b"w")
 *     self._writer.close()
 *     self._mode = b"c"             # <<<<<<<<<<<<<<
 * 
 *   # Adds support for use as a PEP-343 context manager.
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mode");
    __PYX_ERR(0, 2526, __pyx_L1_error)
  }
  __pyx_v_self->_mode = 'c';

  /* "pynini.pyx":2515
 *     self._writer[key] = fst
 * 
 *   cpdef void close(self):             # <<<<<<<<<<<<<<
 *     """
 *     close(self)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("pynini.Far.close", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Far_35close(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pynini_3Far_34close[] = "\n    close(self)\n\n    Closes the FAR and flushes to disk (when open for writing).\n\n    Raises:\n      FstOpError: Cannot invoke method in current mode.\n    ";
static PyObject *__pyx_pw_6pynini_3Far_35close(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("close (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Far_34close(((struct __pyx_obj_6pynini_Far *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Far_34close(struct __pyx_obj_6pynini_Far *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("close", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_f_6pynini_3Far_close(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.Far.close", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2530
 *   # Adds support for use as a PEP-343 context manager.
 * 
 *   def __enter__(self):             # <<<<<<<<<<<<<<
 *     return self
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Far_37__enter__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6pynini_3Far_37__enter__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__enter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Far_36__enter__(((struct __pyx_obj_6pynini_Far *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Far_36__enter__(struct __pyx_obj_6pynini_Far *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__enter__", 0);

  /* "pynini.pyx":2531
 * 
 *   def __enter__(self):
 *     return self             # <<<<<<<<<<<<<<
 * 
 *   def __exit__(self, exc, value, tb):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pynini.pyx":2530
 *   # Adds support for use as a PEP-343 context manager.
 * 
 *   def __enter__(self):             # <<<<<<<<<<<<<<
 *     return self
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2533
 *     return self
 * 
 *   def __exit__(self, exc, value, tb):             # <<<<<<<<<<<<<<
 *     if self._mode == b"w":
 *       self._writer.close()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Far_39__exit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6pynini_3Far_39__exit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_exc = 0;
  CYTHON_UNUSED PyObject *__pyx_v_value = 0;
  CYTHON_UNUSED PyObject *__pyx_v_tb = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__exit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_exc,&__pyx_n_s_value,&__pyx_n_s_tb,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_exc)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, 1); __PYX_ERR(0, 2533, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, 2); __PYX_ERR(0, 2533, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__exit__") < 0)) __PYX_ERR(0, 2533, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_exc = values[0];
    __pyx_v_value = values[1];
    __pyx_v_tb = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2533, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.Far.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_3Far_38__exit__(((struct __pyx_obj_6pynini_Far *)__pyx_v_self), __pyx_v_exc, __pyx_v_value, __pyx_v_tb);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Far_38__exit__(struct __pyx_obj_6pynini_Far *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_exc, CYTHON_UNUSED PyObject *__pyx_v_value, CYTHON_UNUSED PyObject *__pyx_v_tb) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__exit__", 0);

  /* "pynini.pyx":2534
 * 
 *   def __exit__(self, exc, value, tb):
 *     if self._mode == b"w":             # <<<<<<<<<<<<<<
 *       self._writer.close()
 *       self._mode = b"c"
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mode");
    __PYX_ERR(0, 2534, __pyx_L1_error)
  }
  __pyx_t_1 = ((__pyx_v_self->_mode == 'w') != 0);
  if (__pyx_t_1) {

    /* "pynini.pyx":2535
 *   def __exit__(self, exc, value, tb):
 *     if self._mode == b"w":
 *       self._writer.close()             # <<<<<<<<<<<<<<
 *       self._mode = b"c"
 * 
 */
    if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_writer");
      __PYX_ERR(0, 2535, __pyx_L1_error)
    }
    if (unlikely(((PyObject *)__pyx_v_self->_writer) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "close");
      __PYX_ERR(0, 2535, __pyx_L1_error)
    }
    ((struct __pyx_vtabstruct_9pywrapfst_FarWriter *)__pyx_v_self->_writer->__pyx_vtab)->close(__pyx_v_self->_writer);

    /* "pynini.pyx":2536
 *     if self._mode == b"w":
 *       self._writer.close()
 *       self._mode = b"c"             # <<<<<<<<<<<<<<
 * 
 * 
 */
    if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mode");
      __PYX_ERR(0, 2536, __pyx_L1_error)
    }
    __pyx_v_self->_mode = 'c';

    /* "pynini.pyx":2534
 * 
 *   def __exit__(self, exc, value, tb):
 *     if self._mode == b"w":             # <<<<<<<<<<<<<<
 *       self._writer.close()
 *       self._mode = b"c"
 */
  }

  /* "pynini.pyx":2533
 *     return self
 * 
 *   def __exit__(self, exc, value, tb):             # <<<<<<<<<<<<<<
 *     if self._mode == b"w":
 *       self._writer.close()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pynini.Far.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef bint use_setstate
 *     state = (self._mode, self._name, self._reader, self._writer)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Far_41__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6pynini_3Far_41__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Far_40__reduce_cython__(((struct __pyx_obj_6pynini_Far *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Far_40__reduce_cython__(struct __pyx_obj_6pynini_Far *__pyx_v_self) {
  int __pyx_v_use_setstate;
  PyObject *__pyx_v_state = NULL;
  PyObject *__pyx_v__dict = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     cdef bint use_setstate
 *     state = (self._mode, self._name, self._reader, self._writer)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mode");
    __PYX_ERR(1, 3, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyInt_From_char(__pyx_v_self->_mode); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_name");
    __PYX_ERR(1, 3, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_PyUnicode_string_to_py_std__in_string(__pyx_v_self->_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_reader");
    __PYX_ERR(1, 3, __pyx_L1_error)
  }
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_writer");
    __PYX_ERR(1, 3, __pyx_L1_error)
  }
  __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->_reader));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->_reader));
  PyTuple_SET_ITEM(__pyx_t_3, 2, ((PyObject *)__pyx_v_self->_reader));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->_writer));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->_writer));
  PyTuple_SET_ITEM(__pyx_t_3, 3, ((PyObject *)__pyx_v_self->_writer));
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "(tree fragment)":4
 *     cdef bint use_setstate
 *     state = (self._mode, self._name, self._reader, self._writer)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_3 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v__dict = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":5
 *     state = (self._mode, self._name, self._reader, self._writer)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_4 = (__pyx_v__dict != Py_None);
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "(tree fragment)":6
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v__dict);
    __pyx_t_2 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "(tree fragment)":7
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self._reader is not None or self._writer is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":5
 *     state = (self._mode, self._name, self._reader, self._writer)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":9
 *         use_setstate = True
 *     else:
 *         use_setstate = self._reader is not None or self._writer is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Far, (type(self), 0xcb2b861, None), state
 */
  /*else*/ {
    if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_reader");
      __PYX_ERR(1, 9, __pyx_L1_error)
    }
    __pyx_t_4 = (((PyObject *)__pyx_v_self->_reader) != Py_None);
    __pyx_t_6 = (__pyx_t_4 != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_5 = __pyx_t_6;
      goto __pyx_L4_bool_binop_done;
    }
    if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_writer");
      __PYX_ERR(1, 9, __pyx_L1_error)
    }
    __pyx_t_6 = (((PyObject *)__pyx_v_self->_writer) != Py_None);
    __pyx_t_4 = (__pyx_t_6 != 0);
    __pyx_t_5 = __pyx_t_4;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_5;
  }
  __pyx_L3:;

  /* "(tree fragment)":10
 *     else:
 *         use_setstate = self._reader is not None or self._writer is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Far, (type(self), 0xcb2b861, None), state
 *     else:
 */
  __pyx_t_5 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_5) {

    /* "(tree fragment)":11
 *         use_setstate = self._reader is not None or self._writer is not None
 *     if use_setstate:
 *         return __pyx_unpickle_Far, (type(self), 0xcb2b861, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Far, (type(self), 0xcb2b861, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_pyx_unpickle_Far); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 11, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 11, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_213039201);
    __Pyx_GIVEREF(__pyx_int_213039201);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_213039201);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_3, 2, Py_None);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 11, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":10
 *     else:
 *         use_setstate = self._reader is not None or self._writer is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Far, (type(self), 0xcb2b861, None), state
 *     else:
 */
  }

  /* "(tree fragment)":13
 *         return __pyx_unpickle_Far, (type(self), 0xcb2b861, None), state
 *     else:
 *         return __pyx_unpickle_Far, (type(self), 0xcb2b861, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Far__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_pyx_unpickle_Far); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_213039201);
    __Pyx_GIVEREF(__pyx_int_213039201);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_213039201);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_state);
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_3 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef bint use_setstate
 *     state = (self._mode, self._name, self._reader, self._writer)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynini.Far.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":14
 *     else:
 *         return __pyx_unpickle_Far, (type(self), 0xcb2b861, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Far__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_3Far_43__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_6pynini_3Far_43__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_3Far_42__setstate_cython__(((struct __pyx_obj_6pynini_Far *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_3Far_42__setstate_cython__(struct __pyx_obj_6pynini_Far *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Far, (type(self), 0xcb2b861, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Far__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_6pynini___pyx_unpickle_Far__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":14
 *     else:
 *         return __pyx_unpickle_Far, (type(self), 0xcb2b861, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Far__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynini.Far.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2666
 * 
 * 
 * def _copy_patch(fnc):             # <<<<<<<<<<<<<<
 *   # The junk in the `functools.wraps` decorator is due to a long-standing bug
 *   # in Python 2.7 (https://bugs.python.org/issue3445).
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_57_copy_patch(PyObject *__pyx_self, PyObject *__pyx_v_fnc); /*proto*/
static PyMethodDef __pyx_mdef_6pynini_57_copy_patch = {"_copy_patch", (PyCFunction)__pyx_pw_6pynini_57_copy_patch, METH_O, 0};
static PyObject *__pyx_pw_6pynini_57_copy_patch(PyObject *__pyx_self, PyObject *__pyx_v_fnc) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_copy_patch (wrapper)", 0);
  __pyx_r = __pyx_pf_6pynini_56_copy_patch(__pyx_self, ((PyObject *)__pyx_v_fnc));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2670
 *   # in Python 2.7 (https://bugs.python.org/issue3445).
 *   @functools.wraps(fnc, ("__name__", "__doc__"))
 *   def patch(arg1, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst result = _compile_or_copy_Fst(arg1)
 *     fnc(result, *args, **kwargs)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_11_copy_patch_1patch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6pynini_11_copy_patch_1patch = {"patch", (PyCFunction)__pyx_pw_6pynini_11_copy_patch_1patch, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6pynini_11_copy_patch_1patch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg1 = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("patch (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arg1,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_arg1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "patch") < 0)) __PYX_ERR(0, 2670, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_arg1 = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("patch", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2670, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynini._copy_patch.patch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_11_copy_patch_patch(__pyx_self, __pyx_v_arg1, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_11_copy_patch_patch(PyObject *__pyx_self, PyObject *__pyx_v_arg1, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  struct __pyx_obj_6pynini___pyx_scope_struct_11__copy_patch *__pyx_cur_scope;
  struct __pyx_obj_6pynini___pyx_scope_struct_11__copy_patch *__pyx_outer_scope;
  struct __pyx_obj_6pynini_Fst *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("patch", 0);
  __pyx_outer_scope = (struct __pyx_obj_6pynini___pyx_scope_struct_11__copy_patch *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "pynini.pyx":2671
 *   @functools.wraps(fnc, ("__name__", "__doc__"))
 *   def patch(arg1, *args, **kwargs):
 *     cdef Fst result = _compile_or_copy_Fst(arg1)             # <<<<<<<<<<<<<<
 *     fnc(result, *args, **kwargs)
 *     return result
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_6pynini__compile_or_copy_Fst(__pyx_v_arg1, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2671, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = ((struct __pyx_obj_6pynini_Fst *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pynini.pyx":2672
 *   def patch(arg1, *args, **kwargs):
 *     cdef Fst result = _compile_or_copy_Fst(arg1)
 *     fnc(result, *args, **kwargs)             # <<<<<<<<<<<<<<
 *     return result
 *   return patch
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_fnc)) { __Pyx_RaiseClosureNameError("fnc"); __PYX_ERR(0, 2672, __pyx_L1_error) }
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2672, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_result));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_result));
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_v_args); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2672, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_cur_scope->__pyx_v_fnc, __pyx_t_2, __pyx_v_kwargs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2672, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2673
 *     cdef Fst result = _compile_or_copy_Fst(arg1)
 *     fnc(result, *args, **kwargs)
 *     return result             # <<<<<<<<<<<<<<
 *   return patch
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "pynini.pyx":2670
 *   # in Python 2.7 (https://bugs.python.org/issue3445).
 *   @functools.wraps(fnc, ("__name__", "__doc__"))
 *   def patch(arg1, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst result = _compile_or_copy_Fst(arg1)
 *     fnc(result, *args, **kwargs)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pynini._copy_patch.patch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynini.pyx":2666
 * 
 * 
 * def _copy_patch(fnc):             # <<<<<<<<<<<<<<
 *   # The junk in the `functools.wraps` decorator is due to a long-standing bug
 *   # in Python 2.7 (https://bugs.python.org/issue3445).
 */

static PyObject *__pyx_pf_6pynini_56_copy_patch(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fnc) {
  struct __pyx_obj_6pynini___pyx_scope_struct_11__copy_patch *__pyx_cur_scope;
  PyObject *__pyx_v_patch = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("_copy_patch", 0);
  __pyx_cur_scope = (struct __pyx_obj_6pynini___pyx_scope_struct_11__copy_patch *)__pyx_tp_new_6pynini___pyx_scope_struct_11__copy_patch(__pyx_ptype_6pynini___pyx_scope_struct_11__copy_patch, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6pynini___pyx_scope_struct_11__copy_patch *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 2666, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_fnc = __pyx_v_fnc;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fnc);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fnc);

  /* "pynini.pyx":2669
 *   # The junk in the `functools.wraps` decorator is due to a long-standing bug
 *   # in Python 2.7 (https://bugs.python.org/issue3445).
 *   @functools.wraps(fnc, ("__name__", "__doc__"))             # <<<<<<<<<<<<<<
 *   def patch(arg1, *args, **kwargs):
 *     cdef Fst result = _compile_or_copy_Fst(arg1)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_functools); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2669, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_wraps); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2669, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_cur_scope->__pyx_v_fnc, __pyx_tuple__27};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2669, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_cur_scope->__pyx_v_fnc, __pyx_tuple__27};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2669, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2669, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fnc);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fnc);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_cur_scope->__pyx_v_fnc);
    __Pyx_INCREF(__pyx_tuple__27);
    __Pyx_GIVEREF(__pyx_tuple__27);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_tuple__27);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2669, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pynini.pyx":2670
 *   # in Python 2.7 (https://bugs.python.org/issue3445).
 *   @functools.wraps(fnc, ("__name__", "__doc__"))
 *   def patch(arg1, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst result = _compile_or_copy_Fst(arg1)
 *     fnc(result, *args, **kwargs)
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6pynini_11_copy_patch_1patch, 0, __pyx_n_s_copy_patch_locals_patch, ((PyObject*)__pyx_cur_scope), __pyx_n_s_pynini, __pyx_d, ((PyObject *)__pyx_codeobj__29)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2670, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2669, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2669, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2669, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2669, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2669, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_patch = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pynini.pyx":2674
 *     fnc(result, *args, **kwargs)
 *     return result
 *   return patch             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_patch);
  __pyx_r = __pyx_v_patch;
  goto __pyx_L0;

  /* "pynini.pyx":2666
 * 
 * 
 * def _copy_patch(fnc):             # <<<<<<<<<<<<<<
 *   # The junk in the `functools.wraps` decorator is due to a long-standing bug
 *   # in Python 2.7 (https://bugs.python.org/issue3445).
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pynini._copy_patch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_patch);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_PdtParentheses(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     if __pyx_checksum != 0x078cdb7:
 *         from pickle import PickleError as __pyx_PickleError
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_59__pyx_unpickle_PdtParentheses(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6pynini_59__pyx_unpickle_PdtParentheses = {"__pyx_unpickle_PdtParentheses", (PyCFunction)__pyx_pw_6pynini_59__pyx_unpickle_PdtParentheses, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6pynini_59__pyx_unpickle_PdtParentheses(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_PdtParentheses (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PdtParentheses", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PdtParentheses", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_PdtParentheses") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PdtParentheses", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.__pyx_unpickle_PdtParentheses", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_58__pyx_unpickle_PdtParentheses(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_58__pyx_unpickle_PdtParentheses(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = NULL;
  PyObject *__pyx_v___pyx_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("__pyx_unpickle_PdtParentheses", 0);

  /* "(tree fragment)":2
 * def __pyx_unpickle_PdtParentheses(__pyx_type, long __pyx_checksum, __pyx_state):
 *     if __pyx_checksum != 0x078cdb7:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x078cdb7 = (_parens))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0x078cdb7) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":3
 * def __pyx_unpickle_PdtParentheses(__pyx_type, long __pyx_checksum, __pyx_state):
 *     if __pyx_checksum != 0x078cdb7:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x078cdb7 = (_parens))" % __pyx_checksum)
 *     __pyx_result = PdtParentheses.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":4
 *     if __pyx_checksum != 0x078cdb7:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x078cdb7 = (_parens))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = PdtParentheses.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 4, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0x07, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 4, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 4, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 4, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 4, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 4, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 4, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 4, __pyx_L1_error)

    /* "(tree fragment)":2
 * def __pyx_unpickle_PdtParentheses(__pyx_type, long __pyx_checksum, __pyx_state):
 *     if __pyx_checksum != 0x078cdb7:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x078cdb7 = (_parens))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":5
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x078cdb7 = (_parens))" % __pyx_checksum)
 *     __pyx_result = PdtParentheses.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PdtParentheses__set_state(<PdtParentheses> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6pynini_PdtParentheses), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v___pyx_type};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v___pyx_type};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_INCREF(__pyx_v___pyx_type);
      __Pyx_GIVEREF(__pyx_v___pyx_type);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v___pyx_type);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":6
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x078cdb7 = (_parens))" % __pyx_checksum)
 *     __pyx_result = PdtParentheses.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_PdtParentheses__set_state(<PdtParentheses> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_7 = (__pyx_t_1 != 0);
  if (__pyx_t_7) {

    /* "(tree fragment)":7
 *     __pyx_result = PdtParentheses.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PdtParentheses__set_state(<PdtParentheses> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_PdtParentheses__set_state(PdtParentheses __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 7, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_6pynini___pyx_unpickle_PdtParentheses__set_state(((struct __pyx_obj_6pynini_PdtParentheses *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x078cdb7 = (_parens))" % __pyx_checksum)
 *     __pyx_result = PdtParentheses.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_PdtParentheses__set_state(<PdtParentheses> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":8
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PdtParentheses__set_state(<PdtParentheses> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_PdtParentheses__set_state(PdtParentheses __pyx_result, tuple __pyx_state):
 *     __pyx_result._parens = __pyx_state[0]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_PdtParentheses(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     if __pyx_checksum != 0x078cdb7:
 *         from pickle import PickleError as __pyx_PickleError
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pynini.__pyx_unpickle_PdtParentheses", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":9
 *         __pyx_unpickle_PdtParentheses__set_state(<PdtParentheses> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PdtParentheses__set_state(PdtParentheses __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._parens = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_6pynini___pyx_unpickle_PdtParentheses__set_state(struct __pyx_obj_6pynini_PdtParentheses *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<std::pair<__pyx_t_10basictypes_int64,__pyx_t_10basictypes_int64> >  __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_PdtParentheses__set_state", 0);

  /* "(tree fragment)":10
 *     return __pyx_result
 * cdef __pyx_unpickle_PdtParentheses__set_state(PdtParentheses __pyx_result, tuple __pyx_state):
 *     __pyx_result._parens = __pyx_state[0]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 10, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_vector_from_py_std_3a__3a_pair_3c___pyx_t_10basictypes_int64_2c___pyx_t_10basictypes_int64_3e___(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(((PyObject *)__pyx_v___pyx_result) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_parens");
    __PYX_ERR(1, 10, __pyx_L1_error)
  }
  __pyx_v___pyx_result->_parens = __pyx_t_2;

  /* "(tree fragment)":11
 * cdef __pyx_unpickle_PdtParentheses__set_state(PdtParentheses __pyx_result, tuple __pyx_state):
 *     __pyx_result._parens = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 11, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 11, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 1) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 11, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":12
 *     __pyx_result._parens = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])             # <<<<<<<<<<<<<<
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 12, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 12, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 12, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 12, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    if (!__pyx_t_9) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_8)) {
        PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_7};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
        PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_7};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      {
        __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 12, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9); __pyx_t_9 = NULL;
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":11
 * cdef __pyx_unpickle_PdtParentheses__set_state(PdtParentheses __pyx_result, tuple __pyx_state):
 *     __pyx_result._parens = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  }

  /* "(tree fragment)":9
 *         __pyx_unpickle_PdtParentheses__set_state(<PdtParentheses> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PdtParentheses__set_state(PdtParentheses __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._parens = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("pynini.__pyx_unpickle_PdtParentheses__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_MPdtParentheses(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     if __pyx_checksum != 0x7925043:
 *         from pickle import PickleError as __pyx_PickleError
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_61__pyx_unpickle_MPdtParentheses(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6pynini_61__pyx_unpickle_MPdtParentheses = {"__pyx_unpickle_MPdtParentheses", (PyCFunction)__pyx_pw_6pynini_61__pyx_unpickle_MPdtParentheses, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6pynini_61__pyx_unpickle_MPdtParentheses(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_MPdtParentheses (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_MPdtParentheses", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_MPdtParentheses", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_MPdtParentheses") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_MPdtParentheses", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.__pyx_unpickle_MPdtParentheses", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_60__pyx_unpickle_MPdtParentheses(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_60__pyx_unpickle_MPdtParentheses(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = NULL;
  PyObject *__pyx_v___pyx_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("__pyx_unpickle_MPdtParentheses", 0);

  /* "(tree fragment)":2
 * def __pyx_unpickle_MPdtParentheses(__pyx_type, long __pyx_checksum, __pyx_state):
 *     if __pyx_checksum != 0x7925043:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x7925043 = (_assign, _parens))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0x7925043) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":3
 * def __pyx_unpickle_MPdtParentheses(__pyx_type, long __pyx_checksum, __pyx_state):
 *     if __pyx_checksum != 0x7925043:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x7925043 = (_assign, _parens))" % __pyx_checksum)
 *     __pyx_result = MPdtParentheses.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":4
 *     if __pyx_checksum != 0x7925043:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x7925043 = (_assign, _parens))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = MPdtParentheses.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 4, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0x79, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 4, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 4, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 4, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 4, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 4, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 4, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 4, __pyx_L1_error)

    /* "(tree fragment)":2
 * def __pyx_unpickle_MPdtParentheses(__pyx_type, long __pyx_checksum, __pyx_state):
 *     if __pyx_checksum != 0x7925043:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x7925043 = (_assign, _parens))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":5
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x7925043 = (_assign, _parens))" % __pyx_checksum)
 *     __pyx_result = MPdtParentheses.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_MPdtParentheses__set_state(<MPdtParentheses> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6pynini_MPdtParentheses), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v___pyx_type};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v___pyx_type};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_INCREF(__pyx_v___pyx_type);
      __Pyx_GIVEREF(__pyx_v___pyx_type);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v___pyx_type);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":6
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x7925043 = (_assign, _parens))" % __pyx_checksum)
 *     __pyx_result = MPdtParentheses.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_MPdtParentheses__set_state(<MPdtParentheses> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_7 = (__pyx_t_1 != 0);
  if (__pyx_t_7) {

    /* "(tree fragment)":7
 *     __pyx_result = MPdtParentheses.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_MPdtParentheses__set_state(<MPdtParentheses> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_MPdtParentheses__set_state(MPdtParentheses __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 7, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_6pynini___pyx_unpickle_MPdtParentheses__set_state(((struct __pyx_obj_6pynini_MPdtParentheses *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x7925043 = (_assign, _parens))" % __pyx_checksum)
 *     __pyx_result = MPdtParentheses.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_MPdtParentheses__set_state(<MPdtParentheses> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":8
 *     if __pyx_state is not None:
 *         __pyx_unpickle_MPdtParentheses__set_state(<MPdtParentheses> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_MPdtParentheses__set_state(MPdtParentheses __pyx_result, tuple __pyx_state):
 *     __pyx_result._assign = __pyx_state[0]; __pyx_result._parens = __pyx_state[1]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_MPdtParentheses(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     if __pyx_checksum != 0x7925043:
 *         from pickle import PickleError as __pyx_PickleError
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pynini.__pyx_unpickle_MPdtParentheses", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":9
 *         __pyx_unpickle_MPdtParentheses__set_state(<MPdtParentheses> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_MPdtParentheses__set_state(MPdtParentheses __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._assign = __pyx_state[0]; __pyx_result._parens = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_6pynini___pyx_unpickle_MPdtParentheses__set_state(struct __pyx_obj_6pynini_MPdtParentheses *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<__pyx_t_10basictypes_int64>  __pyx_t_2;
  std::vector<std::pair<__pyx_t_10basictypes_int64,__pyx_t_10basictypes_int64> >  __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_MPdtParentheses__set_state", 0);

  /* "(tree fragment)":10
 *     return __pyx_result
 * cdef __pyx_unpickle_MPdtParentheses__set_state(MPdtParentheses __pyx_result, tuple __pyx_state):
 *     __pyx_result._assign = __pyx_state[0]; __pyx_result._parens = __pyx_state[1]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[2])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 10, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_vector_from_py___pyx_t_10basictypes_int64(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(((PyObject *)__pyx_v___pyx_result) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_assign");
    __PYX_ERR(1, 10, __pyx_L1_error)
  }
  __pyx_v___pyx_result->_assign = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 10, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_convert_vector_from_py_std_3a__3a_pair_3c___pyx_t_10basictypes_int64_2c___pyx_t_10basictypes_int64_3e___(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(((PyObject *)__pyx_v___pyx_result) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_parens");
    __PYX_ERR(1, 10, __pyx_L1_error)
  }
  __pyx_v___pyx_result->_parens = __pyx_t_3;

  /* "(tree fragment)":11
 * cdef __pyx_unpickle_MPdtParentheses__set_state(MPdtParentheses __pyx_result, tuple __pyx_state):
 *     __pyx_result._assign = __pyx_state[0]; __pyx_result._parens = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[2])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 11, __pyx_L1_error)
  }
  __pyx_t_5 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(1, 11, __pyx_L1_error)
  __pyx_t_6 = ((__pyx_t_5 > 2) != 0);
  if (__pyx_t_6) {
  } else {
    __pyx_t_4 = __pyx_t_6;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_6 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 11, __pyx_L1_error)
  __pyx_t_7 = (__pyx_t_6 != 0);
  __pyx_t_4 = __pyx_t_7;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_4) {

    /* "(tree fragment)":12
 *     __pyx_result._assign = __pyx_state[0]; __pyx_result._parens = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[2])             # <<<<<<<<<<<<<<
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 12, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_update); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 12, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 12, __pyx_L1_error)
    }
    __pyx_t_8 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 12, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    if (!__pyx_t_10) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_9)) {
        PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_t_8};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
        PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_t_8};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      {
        __pyx_t_11 = PyTuple_New(1+1); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 12, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_10); __pyx_t_10 = NULL;
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_11, 0+1, __pyx_t_8);
        __pyx_t_8 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":11
 * cdef __pyx_unpickle_MPdtParentheses__set_state(MPdtParentheses __pyx_result, tuple __pyx_state):
 *     __pyx_result._assign = __pyx_state[0]; __pyx_result._parens = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[2])
 */
  }

  /* "(tree fragment)":9
 *         __pyx_unpickle_MPdtParentheses__set_state(<MPdtParentheses> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_MPdtParentheses__set_state(MPdtParentheses __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._assign = __pyx_state[0]; __pyx_result._parens = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("pynini.__pyx_unpickle_MPdtParentheses__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Far(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     if __pyx_checksum != 0xcb2b861:
 *         from pickle import PickleError as __pyx_PickleError
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pynini_63__pyx_unpickle_Far(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6pynini_63__pyx_unpickle_Far = {"__pyx_unpickle_Far", (PyCFunction)__pyx_pw_6pynini_63__pyx_unpickle_Far, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6pynini_63__pyx_unpickle_Far(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_Far (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Far", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Far", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_Far") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Far", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynini.__pyx_unpickle_Far", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pynini_62__pyx_unpickle_Far(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pynini_62__pyx_unpickle_Far(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = NULL;
  PyObject *__pyx_v___pyx_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Far", 0);

  /* "(tree fragment)":2
 * def __pyx_unpickle_Far(__pyx_type, long __pyx_checksum, __pyx_state):
 *     if __pyx_checksum != 0xcb2b861:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xcb2b861 = (_mode, _name, _reader, _writer))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xcb2b861) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":3
 * def __pyx_unpickle_Far(__pyx_type, long __pyx_checksum, __pyx_state):
 *     if __pyx_checksum != 0xcb2b861:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xcb2b861 = (_mode, _name, _reader, _writer))" % __pyx_checksum)
 *     __pyx_result = Far.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":4
 *     if __pyx_checksum != 0xcb2b861:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xcb2b861 = (_mode, _name, _reader, _writer))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = Far.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 4, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xcb, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 4, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 4, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 4, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 4, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 4, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 4, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 4, __pyx_L1_error)

    /* "(tree fragment)":2
 * def __pyx_unpickle_Far(__pyx_type, long __pyx_checksum, __pyx_state):
 *     if __pyx_checksum != 0xcb2b861:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xcb2b861 = (_mode, _name, _reader, _writer))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":5
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xcb2b861 = (_mode, _name, _reader, _writer))" % __pyx_checksum)
 *     __pyx_result = Far.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Far__set_state(<Far> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6pynini_Far), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v___pyx_type};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v___pyx_type};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_INCREF(__pyx_v___pyx_type);
      __Pyx_GIVEREF(__pyx_v___pyx_type);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v___pyx_type);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":6
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xcb2b861 = (_mode, _name, _reader, _writer))" % __pyx_checksum)
 *     __pyx_result = Far.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Far__set_state(<Far> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_7 = (__pyx_t_1 != 0);
  if (__pyx_t_7) {

    /* "(tree fragment)":7
 *     __pyx_result = Far.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Far__set_state(<Far> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_Far__set_state(Far __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 7, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_6pynini___pyx_unpickle_Far__set_state(((struct __pyx_obj_6pynini_Far *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xcb2b861 = (_mode, _name, _reader, _writer))" % __pyx_checksum)
 *     __pyx_result = Far.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Far__set_state(<Far> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":8
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Far__set_state(<Far> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Far__set_state(Far __pyx_result, tuple __pyx_state):
 *     __pyx_result._mode = __pyx_state[0]; __pyx_result._name = __pyx_state[1]; __pyx_result._reader = __pyx_state[2]; __pyx_result._writer = __pyx_state[3]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Far(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     if __pyx_checksum != 0xcb2b861:
 *         from pickle import PickleError as __pyx_PickleError
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pynini.__pyx_unpickle_Far", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":9
 *         __pyx_unpickle_Far__set_state(<Far> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Far__set_state(Far __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._mode = __pyx_state[0]; __pyx_result._name = __pyx_state[1]; __pyx_result._reader = __pyx_state[2]; __pyx_result._writer = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_6pynini___pyx_unpickle_Far__set_state(struct __pyx_obj_6pynini_Far *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char __pyx_t_2;
  std::string __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Far__set_state", 0);

  /* "(tree fragment)":10
 *     return __pyx_result
 * cdef __pyx_unpickle_Far__set_state(Far __pyx_result, tuple __pyx_state):
 *     __pyx_result._mode = __pyx_state[0]; __pyx_result._name = __pyx_state[1]; __pyx_result._reader = __pyx_state[2]; __pyx_result._writer = __pyx_state[3]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[4])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 10, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_char(__pyx_t_1); if (unlikely((__pyx_t_2 == (char)-1) && PyErr_Occurred())) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(((PyObject *)__pyx_v___pyx_result) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_mode");
    __PYX_ERR(1, 10, __pyx_L1_error)
  }
  __pyx_v___pyx_result->_mode = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 10, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(((PyObject *)__pyx_v___pyx_result) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_name");
    __PYX_ERR(1, 10, __pyx_L1_error)
  }
  __pyx_v___pyx_result->_name = __pyx_t_3;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 10, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9pywrapfst_FarReader))))) __PYX_ERR(1, 10, __pyx_L1_error)
  if (unlikely(((PyObject *)__pyx_v___pyx_result) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_reader");
    __PYX_ERR(1, 10, __pyx_L1_error)
  }
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->_reader);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->_reader));
  __pyx_v___pyx_result->_reader = ((struct __pyx_obj_9pywrapfst_FarReader *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 10, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9pywrapfst_FarWriter))))) __PYX_ERR(1, 10, __pyx_L1_error)
  if (unlikely(((PyObject *)__pyx_v___pyx_result) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "_writer");
    __PYX_ERR(1, 10, __pyx_L1_error)
  }
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->_writer);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->_writer));
  __pyx_v___pyx_result->_writer = ((struct __pyx_obj_9pywrapfst_FarWriter *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":11
 * cdef __pyx_unpickle_Far__set_state(Far __pyx_result, tuple __pyx_state):
 *     __pyx_result._mode = __pyx_state[0]; __pyx_result._name = __pyx_state[1]; __pyx_result._reader = __pyx_state[2]; __pyx_result._writer = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[4])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 11, __pyx_L1_error)
  }
  __pyx_t_5 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(1, 11, __pyx_L1_error)
  __pyx_t_6 = ((__pyx_t_5 > 4) != 0);
  if (__pyx_t_6) {
  } else {
    __pyx_t_4 = __pyx_t_6;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_6 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 11, __pyx_L1_error)
  __pyx_t_7 = (__pyx_t_6 != 0);
  __pyx_t_4 = __pyx_t_7;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_4) {

    /* "(tree fragment)":12
 *     __pyx_result._mode = __pyx_state[0]; __pyx_result._name = __pyx_state[1]; __pyx_result._reader = __pyx_state[2]; __pyx_result._writer = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[4])             # <<<<<<<<<<<<<<
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 12, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_update); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 12, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 12, __pyx_L1_error)
    }
    __pyx_t_8 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 12, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    if (!__pyx_t_10) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_9)) {
        PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_t_8};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
        PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_t_8};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      {
        __pyx_t_11 = PyTuple_New(1+1); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 12, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_10); __pyx_t_10 = NULL;
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_11, 0+1, __pyx_t_8);
        __pyx_t_8 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":11
 * cdef __pyx_unpickle_Far__set_state(Far __pyx_result, tuple __pyx_state):
 *     __pyx_result._mode = __pyx_state[0]; __pyx_result._name = __pyx_state[1]; __pyx_result._reader = __pyx_state[2]; __pyx_result._writer = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[4])
 */
  }

  /* "(tree fragment)":9
 *         __pyx_unpickle_Far__set_state(<Far> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Far__set_state(Far __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._mode = __pyx_state[0]; __pyx_result._name = __pyx_state[1]; __pyx_result._reader = __pyx_state[2]; __pyx_result._writer = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("pynini.__pyx_unpickle_Far__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pair.to_py":158
 * 
 * @cname("__pyx_convert_pair_to_py___pyx_t_10basictypes_int64______pyx_t_10basictypes_int64")
 * cdef object __pyx_convert_pair_to_py___pyx_t_10basictypes_int64______pyx_t_10basictypes_int64(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

static PyObject *__pyx_convert_pair_to_py___pyx_t_10basictypes_int64______pyx_t_10basictypes_int64(std::pair<__pyx_t_10basictypes_int64,__pyx_t_10basictypes_int64>  const &__pyx_v_p) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_to_py___pyx_t_10basictypes_int64______pyx_t_10basictypes_int64", 0);

  /* "pair.to_py":159
 * @cname("__pyx_convert_pair_to_py___pyx_t_10basictypes_int64______pyx_t_10basictypes_int64")
 * cdef object __pyx_convert_pair_to_py___pyx_t_10basictypes_int64______pyx_t_10basictypes_int64(const pair[X,Y]& p):
 *     return p.first, p.second             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int64_t(__pyx_v_p.first); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int64_t(__pyx_v_p.second); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pair.to_py":158
 * 
 * @cname("__pyx_convert_pair_to_py___pyx_t_10basictypes_int64______pyx_t_10basictypes_int64")
 * cdef object __pyx_convert_pair_to_py___pyx_t_10basictypes_int64______pyx_t_10basictypes_int64(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.to_py.__pyx_convert_pair_to_py___pyx_t_10basictypes_int64______pyx_t_10basictypes_int64", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c___pyx_t_10basictypes_int64_2c___pyx_t_10basictypes_int64_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c___pyx_t_10basictypes_int64_2c___pyx_t_10basictypes_int64_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_pair_3c___pyx_t_10basictypes_int64_2c___pyx_t_10basictypes_int64_3e___(const std::vector<std::pair<__pyx_t_10basictypes_int64,__pyx_t_10basictypes_int64> >  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_pair_3c___pyx_t_10basictypes_int64_2c___pyx_t_10basictypes_int64_3e___", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c___pyx_t_10basictypes_int64_2c___pyx_t_10basictypes_int64_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c___pyx_t_10basictypes_int64_2c___pyx_t_10basictypes_int64_3e___(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __pyx_convert_pair_to_py___pyx_t_10basictypes_int64______pyx_t_10basictypes_int64((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c___pyx_t_10basictypes_int64_2c___pyx_t_10basictypes_int64_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c___pyx_t_10basictypes_int64_2c___pyx_t_10basictypes_int64_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_pair_3c___pyx_t_10basictypes_int64_2c___pyx_t_10basictypes_int64_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pair.from_py":145
 * 
 * @cname("__pyx_convert_pair_from_py___pyx_t_10basictypes_int64__and___pyx_t_10basictypes_int64")
 * cdef pair[X,Y] __pyx_convert_pair_from_py___pyx_t_10basictypes_int64__and___pyx_t_10basictypes_int64(object o) except *:             # <<<<<<<<<<<<<<
 *     x, y = o
 *     return pair[X,Y](<X>x, <Y>y)
 */

static std::pair<__pyx_t_10basictypes_int64,__pyx_t_10basictypes_int64>  __pyx_convert_pair_from_py___pyx_t_10basictypes_int64__and___pyx_t_10basictypes_int64(PyObject *__pyx_v_o) {
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_y = NULL;
  std::pair<__pyx_t_10basictypes_int64,__pyx_t_10basictypes_int64>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  __pyx_t_10basictypes_int64 __pyx_t_5;
  __pyx_t_10basictypes_int64 __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_from_py___pyx_t_10basictypes_int64__and___pyx_t_10basictypes_int64", 0);

  /* "pair.from_py":146
 * @cname("__pyx_convert_pair_from_py___pyx_t_10basictypes_int64__and___pyx_t_10basictypes_int64")
 * cdef pair[X,Y] __pyx_convert_pair_from_py___pyx_t_10basictypes_int64__and___pyx_t_10basictypes_int64(object o) except *:
 *     x, y = o             # <<<<<<<<<<<<<<
 *     return pair[X,Y](<X>x, <Y>y)
 * 
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_o))) || (PyList_CheckExact(__pyx_v_o))) {
    PyObject* sequence = __pyx_v_o;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(1, 146, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
  } else {
    Py_ssize_t index = -1;
    __pyx_t_3 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = Py_TYPE(__pyx_t_3)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_2 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_4(__pyx_t_3), 2) < 0) __PYX_ERR(1, 146, __pyx_L1_error)
    __pyx_t_4 = NULL;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(1, 146, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_x = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_y = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pair.from_py":147
 * cdef pair[X,Y] __pyx_convert_pair_from_py___pyx_t_10basictypes_int64__and___pyx_t_10basictypes_int64(object o) except *:
 *     x, y = o
 *     return pair[X,Y](<X>x, <Y>y)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __Pyx_PyInt_As_int64_t(__pyx_v_x); if (unlikely((__pyx_t_5 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 147, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyInt_As_int64_t(__pyx_v_y); if (unlikely((__pyx_t_6 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 147, __pyx_L1_error)
  __pyx_r = std::pair<__pyx_t_10basictypes_int64,__pyx_t_10basictypes_int64> (((__pyx_t_10basictypes_int64)__pyx_t_5), ((__pyx_t_10basictypes_int64)__pyx_t_6));
  goto __pyx_L0;

  /* "pair.from_py":145
 * 
 * @cname("__pyx_convert_pair_from_py___pyx_t_10basictypes_int64__and___pyx_t_10basictypes_int64")
 * cdef pair[X,Y] __pyx_convert_pair_from_py___pyx_t_10basictypes_int64__and___pyx_t_10basictypes_int64(object o) except *:             # <<<<<<<<<<<<<<
 *     x, y = o
 *     return pair[X,Y](<X>x, <Y>y)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.from_py.__pyx_convert_pair_from_py___pyx_t_10basictypes_int64__and___pyx_t_10basictypes_int64", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_pair_3c___pyx_t_10basictypes_int64_2c___pyx_t_10basictypes_int64_3e___")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_pair_3c___pyx_t_10basictypes_int64_2c___pyx_t_10basictypes_int64_3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<std::pair<__pyx_t_10basictypes_int64,__pyx_t_10basictypes_int64> >  __pyx_convert_vector_from_py_std_3a__3a_pair_3c___pyx_t_10basictypes_int64_2c___pyx_t_10basictypes_int64_3e___(PyObject *__pyx_v_o) {
  std::vector<std::pair<__pyx_t_10basictypes_int64,__pyx_t_10basictypes_int64> >  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<std::pair<__pyx_t_10basictypes_int64,__pyx_t_10basictypes_int64> >  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  std::pair<__pyx_t_10basictypes_int64,__pyx_t_10basictypes_int64>  __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_std_3a__3a_pair_3c___pyx_t_10basictypes_int64_2c___pyx_t_10basictypes_int64_3e___", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_pair_3c___pyx_t_10basictypes_int64_2c___pyx_t_10basictypes_int64_3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_convert_pair_from_py___pyx_t_10basictypes_int64__and___pyx_t_10basictypes_int64(__pyx_v_item); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((std::pair<__pyx_t_10basictypes_int64,__pyx_t_10basictypes_int64> )__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_pair_3c___pyx_t_10basictypes_int64_2c___pyx_t_10basictypes_int64_3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_pair_3c___pyx_t_10basictypes_int64_2c___pyx_t_10basictypes_int64_3e___")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_pair_3c___pyx_t_10basictypes_int64_2c___pyx_t_10basictypes_int64_3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_std_3a__3a_pair_3c___pyx_t_10basictypes_int64_2c___pyx_t_10basictypes_int64_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py___pyx_t_10basictypes_int64")
 * cdef object __pyx_convert_vector_to_py___pyx_t_10basictypes_int64(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py___pyx_t_10basictypes_int64(const std::vector<__pyx_t_10basictypes_int64>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py___pyx_t_10basictypes_int64", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py___pyx_t_10basictypes_int64")
 * cdef object __pyx_convert_vector_to_py___pyx_t_10basictypes_int64(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __Pyx_PyInt_From_int64_t((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py___pyx_t_10basictypes_int64")
 * cdef object __pyx_convert_vector_to_py___pyx_t_10basictypes_int64(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py___pyx_t_10basictypes_int64", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py___pyx_t_10basictypes_int64")
 * cdef vector[X] __pyx_convert_vector_from_py___pyx_t_10basictypes_int64(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<__pyx_t_10basictypes_int64>  __pyx_convert_vector_from_py___pyx_t_10basictypes_int64(PyObject *__pyx_v_o) {
  std::vector<__pyx_t_10basictypes_int64>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<__pyx_t_10basictypes_int64>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  __pyx_t_10basictypes_int64 __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py___pyx_t_10basictypes_int64", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py___pyx_t_10basictypes_int64(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_As_int64_t(__pyx_v_item); if (unlikely((__pyx_t_5 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((__pyx_t_10basictypes_int64)__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py___pyx_t_10basictypes_int64(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py___pyx_t_10basictypes_int64")
 * cdef vector[X] __pyx_convert_vector_from_py___pyx_t_10basictypes_int64(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py___pyx_t_10basictypes_int64", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char const *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((char const *)NULL))) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_6pynini_Fst __pyx_vtable_6pynini_Fst;

static PyObject *__pyx_tp_new_6pynini_Fst(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6pynini_Fst *p;
  PyObject *o = __pyx_ptype_9pywrapfst__MutableFst->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6pynini_Fst *)o);
  p->__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9pywrapfst__Fst*)__pyx_vtabptr_6pynini_Fst;
  return o;
}

static void __pyx_tp_dealloc_6pynini_Fst(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  if (likely(__pyx_ptype_9pywrapfst__MutableFst)) __pyx_ptype_9pywrapfst__MutableFst->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_6pynini_Fst);
}

static PyObject *__pyx_tp_richcompare_6pynini_Fst(PyObject *o1, PyObject *o2, int op) {
  switch (op) {
    case Py_EQ: {
      return __pyx_pw_6pynini_3Fst_25__eq__(o1, o2);
    }
    case Py_NE: {
      return __pyx_pw_6pynini_3Fst_27__ne__(o1, o2);
    }
    default: {
      return __Pyx_NewRef(Py_NotImplemented);
    }
  }
}

static PyObject *__pyx_getprop_6pynini_3Fst_plus(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pynini_3Fst_4plus_1__get__(o);
}

static PyObject *__pyx_getprop_6pynini_3Fst_ques(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pynini_3Fst_4ques_1__get__(o);
}

static PyObject *__pyx_getprop_6pynini_3Fst_star(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pynini_3Fst_4star_1__get__(o);
}

static PyMethodDef __pyx_methods_6pynini_Fst[] = {
  {"from_pywrapfst", (PyCFunction)__pyx_pw_6pynini_3Fst_3from_pywrapfst, METH_O, __pyx_doc_6pynini_3Fst_2from_pywrapfst},
  {"read", (PyCFunction)__pyx_pw_6pynini_3Fst_5read, METH_O, __pyx_doc_6pynini_3Fst_4read},
  {"read_from_string", (PyCFunction)__pyx_pw_6pynini_3Fst_7read_from_string, METH_O, __pyx_doc_6pynini_3Fst_6read_from_string},
  {"__reduce__", (PyCFunction)__pyx_pw_6pynini_3Fst_9__reduce__, METH_NOARGS, 0},
  {"paths", (PyCFunction)__pyx_pw_6pynini_3Fst_11paths, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pynini_3Fst_10paths},
  {"stringify", (PyCFunction)__pyx_pw_6pynini_3Fst_13stringify, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pynini_3Fst_12stringify},
  {"copy", (PyCFunction)__pyx_pw_6pynini_3Fst_15copy, METH_NOARGS, __pyx_doc_6pynini_3Fst_14copy},
  {"closure", (PyCFunction)__pyx_pw_6pynini_3Fst_17closure, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pynini_3Fst_16closure},
  {"concat", (PyCFunction)__pyx_pw_6pynini_3Fst_19concat, METH_O, __pyx_doc_6pynini_3Fst_18concat},
  {"optimize", (PyCFunction)__pyx_pw_6pynini_3Fst_21optimize, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pynini_3Fst_20optimize},
  {"union", (PyCFunction)__pyx_pw_6pynini_3Fst_23union, METH_O, __pyx_doc_6pynini_3Fst_22union},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6pynini_Fst[] = {
  {(char *)"plus", __pyx_getprop_6pynini_3Fst_plus, 0, (char *)"\n    plus(self)\n\n    Constructively computes +-closure.\n\n    Returns:\n      Closure-d copy.\n\n    See also: `closure`.\n    ", 0},
  {(char *)"ques", __pyx_getprop_6pynini_3Fst_ques, 0, (char *)"\n    ques(self)\n\n    Constructively computes ?-closure.\n\n    Returns:\n      Closure-d copy.\n\n    See also: `closure`.\n    ", 0},
  {(char *)"star", __pyx_getprop_6pynini_3Fst_star, 0, (char *)"\n    star(self)\n\n    Constructively computes *-closure.\n\n    Returns:\n      Closure-d copy.\n\n    See also: `closure`.\n    ", 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Fst = {
  __pyx_pw_6pynini_3Fst_29__add__, /*nb_add*/
  __pyx_pw_6pynini_3Fst_31__sub__, /*nb_subtract*/
  __pyx_pw_6pynini_3Fst_33__mul__, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  __pyx_pw_6pynini_3Fst_37__or__, /*nb_or*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  0, /*nb_index*/
  #if PY_VERSION_HEX >= 0x03050000
  __pyx_pw_6pynini_3Fst_35__matmul__, /*nb_matrix_multiply*/
  #endif
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_inplace_matrix_multiply*/
  #endif
};

static PyTypeObject __pyx_type_6pynini_Fst = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynini.Fst", /*tp_name*/
  sizeof(struct __pyx_obj_6pynini_Fst), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pynini_Fst, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_Fst, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n  Fst(arc_type=\"standard\")\n\n  This class wraps a mutable FST and exposes all destructive methods.\n\n  Args:\n    arc_type: An optional string indicating the arc type for the FST.\n  ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_tp_richcompare_6pynini_Fst, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pynini_Fst, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6pynini_Fst, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6pynini_3Fst_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pynini_Fst, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_6pynini_PdtParentheses __pyx_vtable_6pynini_PdtParentheses;

static PyObject *__pyx_tp_new_6pynini_PdtParentheses(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6pynini_PdtParentheses *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6pynini_PdtParentheses *)o);
  p->__pyx_vtab = __pyx_vtabptr_6pynini_PdtParentheses;
  new((void*)&(p->_parens)) std::vector<std::pair<__pyx_t_10basictypes_int64,__pyx_t_10basictypes_int64> > ();
  return o;
}

static void __pyx_tp_dealloc_6pynini_PdtParentheses(PyObject *o) {
  struct __pyx_obj_6pynini_PdtParentheses *p = (struct __pyx_obj_6pynini_PdtParentheses *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->_parens);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6pynini_PdtParentheses[] = {
  {"copy", (PyCFunction)__pyx_pw_6pynini_14PdtParentheses_8copy, METH_NOARGS, __pyx_doc_6pynini_14PdtParentheses_7copy},
  {"add_pair", (PyCFunction)__pyx_pw_6pynini_14PdtParentheses_10add_pair, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pynini_14PdtParentheses_9add_pair},
  {"read", (PyCFunction)__pyx_pw_6pynini_14PdtParentheses_12read, METH_O, __pyx_doc_6pynini_14PdtParentheses_11read},
  {"write", (PyCFunction)__pyx_pw_6pynini_14PdtParentheses_14write, METH_O, __pyx_doc_6pynini_14PdtParentheses_13write},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6pynini_14PdtParentheses_16__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6pynini_14PdtParentheses_18__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_PdtParentheses = {
  __pyx_pw_6pynini_14PdtParentheses_3__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_PdtParentheses = {
  __pyx_pw_6pynini_14PdtParentheses_3__len__, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6pynini_PdtParentheses = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynini.PdtParentheses", /*tp_name*/
  sizeof(struct __pyx_obj_6pynini_PdtParentheses), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pynini_PdtParentheses, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6pynini_14PdtParentheses_1__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_PdtParentheses, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_PdtParentheses, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n  PdtParentheses()\n\n  Pushdown transducer parentheses class.\n\n  This class wraps a vector of pairs of arc labels in which the first label is\n  interpreted as a \"push\" stack operation and the second represents the\n  corresponding \"pop\" operation. When efficiency is desired, the push and pop\n  indices should be contiguous.\n\n  A PDT is expressed as an (Fst, PdtParentheses) pair for the purposes of all\n  supported PDT operations.\n  ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_6pynini_14PdtParentheses_5__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pynini_PdtParentheses, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pynini_PdtParentheses, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_6pynini_MPdtParentheses __pyx_vtable_6pynini_MPdtParentheses;

static PyObject *__pyx_tp_new_6pynini_MPdtParentheses(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6pynini_MPdtParentheses *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6pynini_MPdtParentheses *)o);
  p->__pyx_vtab = __pyx_vtabptr_6pynini_MPdtParentheses;
  new((void*)&(p->_parens)) std::vector<std::pair<__pyx_t_10basictypes_int64,__pyx_t_10basictypes_int64> > ();
  new((void*)&(p->_assign)) std::vector<__pyx_t_10basictypes_int64> ();
  return o;
}

static void __pyx_tp_dealloc_6pynini_MPdtParentheses(PyObject *o) {
  struct __pyx_obj_6pynini_MPdtParentheses *p = (struct __pyx_obj_6pynini_MPdtParentheses *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->_parens);
  __Pyx_call_destructor(p->_assign);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6pynini_MPdtParentheses[] = {
  {"copy", (PyCFunction)__pyx_pw_6pynini_15MPdtParentheses_8copy, METH_NOARGS, __pyx_doc_6pynini_15MPdtParentheses_7copy},
  {"add_triple", (PyCFunction)__pyx_pw_6pynini_15MPdtParentheses_10add_triple, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pynini_15MPdtParentheses_9add_triple},
  {"read", (PyCFunction)__pyx_pw_6pynini_15MPdtParentheses_12read, METH_O, __pyx_doc_6pynini_15MPdtParentheses_11read},
  {"write", (PyCFunction)__pyx_pw_6pynini_15MPdtParentheses_14write, METH_O, __pyx_doc_6pynini_15MPdtParentheses_13write},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6pynini_15MPdtParentheses_16__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6pynini_15MPdtParentheses_18__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_MPdtParentheses = {
  __pyx_pw_6pynini_15MPdtParentheses_3__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_MPdtParentheses = {
  __pyx_pw_6pynini_15MPdtParentheses_3__len__, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6pynini_MPdtParentheses = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynini.MPdtParentheses", /*tp_name*/
  sizeof(struct __pyx_obj_6pynini_MPdtParentheses), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pynini_MPdtParentheses, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6pynini_15MPdtParentheses_1__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_MPdtParentheses, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_MPdtParentheses, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n  MPdtParentheses()\n\n  Multi-pushdown transducer parentheses class.\n\n  This class wraps a vector of pairs of arc labels in which the first label is\n  interpreted as a \"push\" stack operation and the second represents the\n  corresponding \"pop\" operation, and an equally sized vector which assigns each\n  pair to a stack. The library currently only permits two stacks (numbered 1\n  and 2) to be used.\n\n  A MPDT is expressed as an (Fst, MPdtParentheses) pair for the purposes of all\n  supported MPDT operations.\n  ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_6pynini_15MPdtParentheses_5__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pynini_MPdtParentheses, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pynini_MPdtParentheses, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_6pynini_StringPathIterator __pyx_vtable_6pynini_StringPathIterator;

static PyObject *__pyx_tp_new_6pynini_StringPathIterator(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6pynini_StringPathIterator *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6pynini_StringPathIterator *)o);
  p->__pyx_vtab = __pyx_vtabptr_6pynini_StringPathIterator;
  new((void*)&(p->_paths)) std::unique_ptr<fst::script::StringPathIteratorClass> ();
  return o;
}

static void __pyx_tp_dealloc_6pynini_StringPathIterator(PyObject *o) {
  struct __pyx_obj_6pynini_StringPathIterator *p = (struct __pyx_obj_6pynini_StringPathIterator *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->_paths);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6pynini_StringPathIterator[] = {
  {"__next__", (PyCFunction)__pyx_pw_6pynini_18StringPathIterator_7__next__, METH_NOARGS|METH_COEXIST, 0},
  {"done", (PyCFunction)__pyx_pw_6pynini_18StringPathIterator_9done, METH_NOARGS, __pyx_doc_6pynini_18StringPathIterator_8done},
  {"next", (PyCFunction)__pyx_pw_6pynini_18StringPathIterator_11next, METH_NOARGS, __pyx_doc_6pynini_18StringPathIterator_10next},
  {"reset", (PyCFunction)__pyx_pw_6pynini_18StringPathIterator_13reset, METH_NOARGS, __pyx_doc_6pynini_18StringPathIterator_12reset},
  {"error", (PyCFunction)__pyx_pw_6pynini_18StringPathIterator_15error, METH_NOARGS, __pyx_doc_6pynini_18StringPathIterator_14error},
  {"istring", (PyCFunction)__pyx_pw_6pynini_18StringPathIterator_17istring, METH_NOARGS, __pyx_doc_6pynini_18StringPathIterator_16istring},
  {"istrings", (PyCFunction)__pyx_pw_6pynini_18StringPathIterator_19istrings, METH_NOARGS, __pyx_doc_6pynini_18StringPathIterator_18istrings},
  {"ostring", (PyCFunction)__pyx_pw_6pynini_18StringPathIterator_22ostring, METH_NOARGS, __pyx_doc_6pynini_18StringPathIterator_21ostring},
  {"ostrings", (PyCFunction)__pyx_pw_6pynini_18StringPathIterator_24ostrings, METH_NOARGS, __pyx_doc_6pynini_18StringPathIterator_23ostrings},
  {"weight", (PyCFunction)__pyx_pw_6pynini_18StringPathIterator_27weight, METH_NOARGS, __pyx_doc_6pynini_18StringPathIterator_26weight},
  {"weights", (PyCFunction)__pyx_pw_6pynini_18StringPathIterator_29weights, METH_NOARGS, __pyx_doc_6pynini_18StringPathIterator_28weights},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6pynini_18StringPathIterator_32__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6pynini_18StringPathIterator_34__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6pynini_StringPathIterator = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynini.StringPathIterator", /*tp_name*/
  sizeof(struct __pyx_obj_6pynini_StringPathIterator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pynini_StringPathIterator, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6pynini_18StringPathIterator_1__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n  StringPathIterator(fst, token_type=\"byte\", isymbols=None, osymbols=None)\n\n  Iterator for string paths in acyclic FST.\n\n  This class provides an iterator over all paths (represented as pairs of\n  strings and an associated path weight) through an acyclic FST. This\n  operation is only feasible when the FST is acyclic. Depending on the\n  requested token type, the arc labels along the input and output sides of a\n  path are interpreted as UTF-8-encoded Unicode strings, raw bytes, or a\n  concatenation of string labels from a symbol table. This class is normally\n  created by invoking the `paths` method of `Fst`.\n\n  Args:\n    input_token_type: A string indicating how the input strings are to be\n        constructed from arc labels---one of: \"byte\" (interprets arc labels\n        as raw bytes), \"utf8\" (interprets arc labels as Unicode code points),\n        or a SymbolTable.\n    output_token_type: A string indicating how the output strings are to be\n        constructed from arc labels---one of: \"byte\" (interprets arc labels\n        as raw bytes), \"utf8\" (interprets arc labels as Unicode code points),\n        or a SymbolTable.\n\n  Raises:\n    FstArgError: Unknown token type.\n    FstArgError: FST is not acyclic.\n  ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_6pynini_18StringPathIterator_5__iter__, /*tp_iter*/
  __pyx_pw_6pynini_18StringPathIterator_7__next__, /*tp_iternext*/
  __pyx_methods_6pynini_StringPathIterator, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6pynini_18StringPathIterator_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pynini_StringPathIterator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_6pynini_Far __pyx_vtable_6pynini_Far;

static PyObject *__pyx_tp_new_6pynini_Far(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6pynini_Far *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6pynini_Far *)o);
  p->__pyx_vtab = __pyx_vtabptr_6pynini_Far;
  new((void*)&(p->_name)) std::string();
  p->_reader = ((struct __pyx_obj_9pywrapfst_FarReader *)Py_None); Py_INCREF(Py_None);
  p->_writer = ((struct __pyx_obj_9pywrapfst_FarWriter *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_6pynini_Far(PyObject *o) {
  struct __pyx_obj_6pynini_Far *p = (struct __pyx_obj_6pynini_Far *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->_name);
  Py_CLEAR(p->_reader);
  Py_CLEAR(p->_writer);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6pynini_Far(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pynini_Far *p = (struct __pyx_obj_6pynini_Far *)o;
  if (p->_reader) {
    e = (*v)(((PyObject *)p->_reader), a); if (e) return e;
  }
  if (p->_writer) {
    e = (*v)(((PyObject *)p->_writer), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6pynini_Far(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6pynini_Far *p = (struct __pyx_obj_6pynini_Far *)o;
  tmp = ((PyObject*)p->_reader);
  p->_reader = ((struct __pyx_obj_9pywrapfst_FarReader *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_writer);
  p->_writer = ((struct __pyx_obj_9pywrapfst_FarWriter *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_6pynini_Far(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_6pynini_Far(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_pw_6pynini_3Far_33__setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyMethodDef __pyx_methods_6pynini_Far[] = {
  {"error", (PyCFunction)__pyx_pw_6pynini_3Far_5error, METH_NOARGS, __pyx_doc_6pynini_3Far_4error},
  {"arc_type", (PyCFunction)__pyx_pw_6pynini_3Far_7arc_type, METH_NOARGS, __pyx_doc_6pynini_3Far_6arc_type},
  {"closed", (PyCFunction)__pyx_pw_6pynini_3Far_9closed, METH_NOARGS, __pyx_doc_6pynini_3Far_8closed},
  {"far_type", (PyCFunction)__pyx_pw_6pynini_3Far_11far_type, METH_NOARGS, __pyx_doc_6pynini_3Far_10far_type},
  {"mode", (PyCFunction)__pyx_pw_6pynini_3Far_13mode, METH_NOARGS, __pyx_doc_6pynini_3Far_12mode},
  {"name", (PyCFunction)__pyx_pw_6pynini_3Far_15name, METH_NOARGS, __pyx_doc_6pynini_3Far_14name},
  {"done", (PyCFunction)__pyx_pw_6pynini_3Far_17done, METH_NOARGS, __pyx_doc_6pynini_3Far_16done},
  {"find", (PyCFunction)__pyx_pw_6pynini_3Far_19find, METH_O, __pyx_doc_6pynini_3Far_18find},
  {"get_fst", (PyCFunction)__pyx_pw_6pynini_3Far_21get_fst, METH_NOARGS, __pyx_doc_6pynini_3Far_20get_fst},
  {"get_key", (PyCFunction)__pyx_pw_6pynini_3Far_23get_key, METH_NOARGS, __pyx_doc_6pynini_3Far_22get_key},
  {"next", (PyCFunction)__pyx_pw_6pynini_3Far_25next, METH_NOARGS, __pyx_doc_6pynini_3Far_24next},
  {"reset", (PyCFunction)__pyx_pw_6pynini_3Far_27reset, METH_NOARGS, __pyx_doc_6pynini_3Far_26reset},
  {"add", (PyCFunction)__pyx_pw_6pynini_3Far_31add, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pynini_3Far_30add},
  {"close", (PyCFunction)__pyx_pw_6pynini_3Far_35close, METH_NOARGS, __pyx_doc_6pynini_3Far_34close},
  {"__enter__", (PyCFunction)__pyx_pw_6pynini_3Far_37__enter__, METH_NOARGS, 0},
  {"__exit__", (PyCFunction)__pyx_pw_6pynini_3Far_39__exit__, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6pynini_3Far_41__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6pynini_3Far_43__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_Far = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_6pynini_Far, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Far = {
  0, /*mp_length*/
  __pyx_pw_6pynini_3Far_29__getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_6pynini_Far, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6pynini_Far = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynini.Far", /*tp_name*/
  sizeof(struct __pyx_obj_6pynini_Far), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pynini_Far, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6pynini_3Far_3__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_Far, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Far, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n  Far(filename, mode=\"r\", arc_type=\"standard\", far_type=\"default\")\n\n  Pynini FAR (\"Fst ARchive\") object.\n\n  This class is used to either read FSTs from or write FSTs to a FAR. When\n  opening a FAR for writing, the user may also specify the desired arc type\n  and FAR type.\n\n  Args:\n    filename: A string indicating the filename.\n    mode: FAR IO mode; one of: \"r\" (open for reading), \"w\" (open for writing).\n    arc_type: Desired arc type; ignored if the FAR is opened for reading.\n    far_type: Desired FAR type; ignored if the FAR is opened for reading.\n  ", /*tp_doc*/
  __pyx_tp_traverse_6pynini_Far, /*tp_traverse*/
  __pyx_tp_clear_6pynini_Far, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pynini_Far, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6pynini_3Far_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pynini_Far, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6pynini___pyx_scope_struct___1arg_patch *__pyx_freelist_6pynini___pyx_scope_struct___1arg_patch[8];
static int __pyx_freecount_6pynini___pyx_scope_struct___1arg_patch = 0;

static PyObject *__pyx_tp_new_6pynini___pyx_scope_struct___1arg_patch(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6pynini___pyx_scope_struct___1arg_patch > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6pynini___pyx_scope_struct___1arg_patch)))) {
    o = (PyObject*)__pyx_freelist_6pynini___pyx_scope_struct___1arg_patch[--__pyx_freecount_6pynini___pyx_scope_struct___1arg_patch];
    memset(o, 0, sizeof(struct __pyx_obj_6pynini___pyx_scope_struct___1arg_patch));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pynini___pyx_scope_struct___1arg_patch(PyObject *o) {
  struct __pyx_obj_6pynini___pyx_scope_struct___1arg_patch *p = (struct __pyx_obj_6pynini___pyx_scope_struct___1arg_patch *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_fnc);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6pynini___pyx_scope_struct___1arg_patch < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6pynini___pyx_scope_struct___1arg_patch)))) {
    __pyx_freelist_6pynini___pyx_scope_struct___1arg_patch[__pyx_freecount_6pynini___pyx_scope_struct___1arg_patch++] = ((struct __pyx_obj_6pynini___pyx_scope_struct___1arg_patch *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6pynini___pyx_scope_struct___1arg_patch(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pynini___pyx_scope_struct___1arg_patch *p = (struct __pyx_obj_6pynini___pyx_scope_struct___1arg_patch *)o;
  if (p->__pyx_v_fnc) {
    e = (*v)(p->__pyx_v_fnc, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6pynini___pyx_scope_struct___1arg_patch(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6pynini___pyx_scope_struct___1arg_patch *p = (struct __pyx_obj_6pynini___pyx_scope_struct___1arg_patch *)o;
  tmp = ((PyObject*)p->__pyx_v_fnc);
  p->__pyx_v_fnc = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6pynini___pyx_scope_struct___1arg_patch = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynini.__pyx_scope_struct___1arg_patch", /*tp_name*/
  sizeof(struct __pyx_obj_6pynini___pyx_scope_struct___1arg_patch), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pynini___pyx_scope_struct___1arg_patch, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pynini___pyx_scope_struct___1arg_patch, /*tp_traverse*/
  __pyx_tp_clear_6pynini___pyx_scope_struct___1arg_patch, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pynini___pyx_scope_struct___1arg_patch, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6pynini___pyx_scope_struct_1__shortestdistance_patch *__pyx_freelist_6pynini___pyx_scope_struct_1__shortestdistance_patch[8];
static int __pyx_freecount_6pynini___pyx_scope_struct_1__shortestdistance_patch = 0;

static PyObject *__pyx_tp_new_6pynini___pyx_scope_struct_1__shortestdistance_patch(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6pynini___pyx_scope_struct_1__shortestdistance_patch > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_1__shortestdistance_patch)))) {
    o = (PyObject*)__pyx_freelist_6pynini___pyx_scope_struct_1__shortestdistance_patch[--__pyx_freecount_6pynini___pyx_scope_struct_1__shortestdistance_patch];
    memset(o, 0, sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_1__shortestdistance_patch));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pynini___pyx_scope_struct_1__shortestdistance_patch(PyObject *o) {
  struct __pyx_obj_6pynini___pyx_scope_struct_1__shortestdistance_patch *p = (struct __pyx_obj_6pynini___pyx_scope_struct_1__shortestdistance_patch *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_fnc);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6pynini___pyx_scope_struct_1__shortestdistance_patch < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_1__shortestdistance_patch)))) {
    __pyx_freelist_6pynini___pyx_scope_struct_1__shortestdistance_patch[__pyx_freecount_6pynini___pyx_scope_struct_1__shortestdistance_patch++] = ((struct __pyx_obj_6pynini___pyx_scope_struct_1__shortestdistance_patch *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6pynini___pyx_scope_struct_1__shortestdistance_patch(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pynini___pyx_scope_struct_1__shortestdistance_patch *p = (struct __pyx_obj_6pynini___pyx_scope_struct_1__shortestdistance_patch *)o;
  if (p->__pyx_v_fnc) {
    e = (*v)(p->__pyx_v_fnc, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6pynini___pyx_scope_struct_1__shortestdistance_patch(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6pynini___pyx_scope_struct_1__shortestdistance_patch *p = (struct __pyx_obj_6pynini___pyx_scope_struct_1__shortestdistance_patch *)o;
  tmp = ((PyObject*)p->__pyx_v_fnc);
  p->__pyx_v_fnc = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6pynini___pyx_scope_struct_1__shortestdistance_patch = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynini.__pyx_scope_struct_1__shortestdistance_patch", /*tp_name*/
  sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_1__shortestdistance_patch), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pynini___pyx_scope_struct_1__shortestdistance_patch, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pynini___pyx_scope_struct_1__shortestdistance_patch, /*tp_traverse*/
  __pyx_tp_clear_6pynini___pyx_scope_struct_1__shortestdistance_patch, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pynini___pyx_scope_struct_1__shortestdistance_patch, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6pynini___pyx_scope_struct_2__compose_patch *__pyx_freelist_6pynini___pyx_scope_struct_2__compose_patch[8];
static int __pyx_freecount_6pynini___pyx_scope_struct_2__compose_patch = 0;

static PyObject *__pyx_tp_new_6pynini___pyx_scope_struct_2__compose_patch(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6pynini___pyx_scope_struct_2__compose_patch > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_2__compose_patch)))) {
    o = (PyObject*)__pyx_freelist_6pynini___pyx_scope_struct_2__compose_patch[--__pyx_freecount_6pynini___pyx_scope_struct_2__compose_patch];
    memset(o, 0, sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_2__compose_patch));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pynini___pyx_scope_struct_2__compose_patch(PyObject *o) {
  struct __pyx_obj_6pynini___pyx_scope_struct_2__compose_patch *p = (struct __pyx_obj_6pynini___pyx_scope_struct_2__compose_patch *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_fnc);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6pynini___pyx_scope_struct_2__compose_patch < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_2__compose_patch)))) {
    __pyx_freelist_6pynini___pyx_scope_struct_2__compose_patch[__pyx_freecount_6pynini___pyx_scope_struct_2__compose_patch++] = ((struct __pyx_obj_6pynini___pyx_scope_struct_2__compose_patch *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6pynini___pyx_scope_struct_2__compose_patch(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pynini___pyx_scope_struct_2__compose_patch *p = (struct __pyx_obj_6pynini___pyx_scope_struct_2__compose_patch *)o;
  if (p->__pyx_v_fnc) {
    e = (*v)(p->__pyx_v_fnc, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6pynini___pyx_scope_struct_2__compose_patch(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6pynini___pyx_scope_struct_2__compose_patch *p = (struct __pyx_obj_6pynini___pyx_scope_struct_2__compose_patch *)o;
  tmp = ((PyObject*)p->__pyx_v_fnc);
  p->__pyx_v_fnc = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6pynini___pyx_scope_struct_2__compose_patch = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynini.__pyx_scope_struct_2__compose_patch", /*tp_name*/
  sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_2__compose_patch), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pynini___pyx_scope_struct_2__compose_patch, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pynini___pyx_scope_struct_2__compose_patch, /*tp_traverse*/
  __pyx_tp_clear_6pynini___pyx_scope_struct_2__compose_patch, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pynini___pyx_scope_struct_2__compose_patch, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6pynini___pyx_scope_struct_3__difference_patch *__pyx_freelist_6pynini___pyx_scope_struct_3__difference_patch[8];
static int __pyx_freecount_6pynini___pyx_scope_struct_3__difference_patch = 0;

static PyObject *__pyx_tp_new_6pynini___pyx_scope_struct_3__difference_patch(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6pynini___pyx_scope_struct_3__difference_patch > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_3__difference_patch)))) {
    o = (PyObject*)__pyx_freelist_6pynini___pyx_scope_struct_3__difference_patch[--__pyx_freecount_6pynini___pyx_scope_struct_3__difference_patch];
    memset(o, 0, sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_3__difference_patch));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pynini___pyx_scope_struct_3__difference_patch(PyObject *o) {
  struct __pyx_obj_6pynini___pyx_scope_struct_3__difference_patch *p = (struct __pyx_obj_6pynini___pyx_scope_struct_3__difference_patch *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_fnc);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6pynini___pyx_scope_struct_3__difference_patch < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_3__difference_patch)))) {
    __pyx_freelist_6pynini___pyx_scope_struct_3__difference_patch[__pyx_freecount_6pynini___pyx_scope_struct_3__difference_patch++] = ((struct __pyx_obj_6pynini___pyx_scope_struct_3__difference_patch *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6pynini___pyx_scope_struct_3__difference_patch(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pynini___pyx_scope_struct_3__difference_patch *p = (struct __pyx_obj_6pynini___pyx_scope_struct_3__difference_patch *)o;
  if (p->__pyx_v_fnc) {
    e = (*v)(p->__pyx_v_fnc, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6pynini___pyx_scope_struct_3__difference_patch(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6pynini___pyx_scope_struct_3__difference_patch *p = (struct __pyx_obj_6pynini___pyx_scope_struct_3__difference_patch *)o;
  tmp = ((PyObject*)p->__pyx_v_fnc);
  p->__pyx_v_fnc = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6pynini___pyx_scope_struct_3__difference_patch = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynini.__pyx_scope_struct_3__difference_patch", /*tp_name*/
  sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_3__difference_patch), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pynini___pyx_scope_struct_3__difference_patch, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pynini___pyx_scope_struct_3__difference_patch, /*tp_traverse*/
  __pyx_tp_clear_6pynini___pyx_scope_struct_3__difference_patch, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pynini___pyx_scope_struct_3__difference_patch, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6pynini___pyx_scope_struct_4__comp_patch *__pyx_freelist_6pynini___pyx_scope_struct_4__comp_patch[8];
static int __pyx_freecount_6pynini___pyx_scope_struct_4__comp_patch = 0;

static PyObject *__pyx_tp_new_6pynini___pyx_scope_struct_4__comp_patch(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6pynini___pyx_scope_struct_4__comp_patch > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_4__comp_patch)))) {
    o = (PyObject*)__pyx_freelist_6pynini___pyx_scope_struct_4__comp_patch[--__pyx_freecount_6pynini___pyx_scope_struct_4__comp_patch];
    memset(o, 0, sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_4__comp_patch));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pynini___pyx_scope_struct_4__comp_patch(PyObject *o) {
  struct __pyx_obj_6pynini___pyx_scope_struct_4__comp_patch *p = (struct __pyx_obj_6pynini___pyx_scope_struct_4__comp_patch *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_fnc);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6pynini___pyx_scope_struct_4__comp_patch < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_4__comp_patch)))) {
    __pyx_freelist_6pynini___pyx_scope_struct_4__comp_patch[__pyx_freecount_6pynini___pyx_scope_struct_4__comp_patch++] = ((struct __pyx_obj_6pynini___pyx_scope_struct_4__comp_patch *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6pynini___pyx_scope_struct_4__comp_patch(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pynini___pyx_scope_struct_4__comp_patch *p = (struct __pyx_obj_6pynini___pyx_scope_struct_4__comp_patch *)o;
  if (p->__pyx_v_fnc) {
    e = (*v)(p->__pyx_v_fnc, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6pynini___pyx_scope_struct_4__comp_patch(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6pynini___pyx_scope_struct_4__comp_patch *p = (struct __pyx_obj_6pynini___pyx_scope_struct_4__comp_patch *)o;
  tmp = ((PyObject*)p->__pyx_v_fnc);
  p->__pyx_v_fnc = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6pynini___pyx_scope_struct_4__comp_patch = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynini.__pyx_scope_struct_4__comp_patch", /*tp_name*/
  sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_4__comp_patch), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pynini___pyx_scope_struct_4__comp_patch, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pynini___pyx_scope_struct_4__comp_patch, /*tp_traverse*/
  __pyx_tp_clear_6pynini___pyx_scope_struct_4__comp_patch, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pynini___pyx_scope_struct_4__comp_patch, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6pynini___pyx_scope_struct_5__comp_merge_patch *__pyx_freelist_6pynini___pyx_scope_struct_5__comp_merge_patch[8];
static int __pyx_freecount_6pynini___pyx_scope_struct_5__comp_merge_patch = 0;

static PyObject *__pyx_tp_new_6pynini___pyx_scope_struct_5__comp_merge_patch(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6pynini___pyx_scope_struct_5__comp_merge_patch > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_5__comp_merge_patch)))) {
    o = (PyObject*)__pyx_freelist_6pynini___pyx_scope_struct_5__comp_merge_patch[--__pyx_freecount_6pynini___pyx_scope_struct_5__comp_merge_patch];
    memset(o, 0, sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_5__comp_merge_patch));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pynini___pyx_scope_struct_5__comp_merge_patch(PyObject *o) {
  struct __pyx_obj_6pynini___pyx_scope_struct_5__comp_merge_patch *p = (struct __pyx_obj_6pynini___pyx_scope_struct_5__comp_merge_patch *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_fnc);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6pynini___pyx_scope_struct_5__comp_merge_patch < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_5__comp_merge_patch)))) {
    __pyx_freelist_6pynini___pyx_scope_struct_5__comp_merge_patch[__pyx_freecount_6pynini___pyx_scope_struct_5__comp_merge_patch++] = ((struct __pyx_obj_6pynini___pyx_scope_struct_5__comp_merge_patch *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6pynini___pyx_scope_struct_5__comp_merge_patch(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pynini___pyx_scope_struct_5__comp_merge_patch *p = (struct __pyx_obj_6pynini___pyx_scope_struct_5__comp_merge_patch *)o;
  if (p->__pyx_v_fnc) {
    e = (*v)(p->__pyx_v_fnc, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6pynini___pyx_scope_struct_5__comp_merge_patch(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6pynini___pyx_scope_struct_5__comp_merge_patch *p = (struct __pyx_obj_6pynini___pyx_scope_struct_5__comp_merge_patch *)o;
  tmp = ((PyObject*)p->__pyx_v_fnc);
  p->__pyx_v_fnc = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6pynini___pyx_scope_struct_5__comp_merge_patch = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynini.__pyx_scope_struct_5__comp_merge_patch", /*tp_name*/
  sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_5__comp_merge_patch), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pynini___pyx_scope_struct_5__comp_merge_patch, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pynini___pyx_scope_struct_5__comp_merge_patch, /*tp_traverse*/
  __pyx_tp_clear_6pynini___pyx_scope_struct_5__comp_merge_patch, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pynini___pyx_scope_struct_5__comp_merge_patch, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6pynini___pyx_scope_struct_6___iter__ *__pyx_freelist_6pynini___pyx_scope_struct_6___iter__[8];
static int __pyx_freecount_6pynini___pyx_scope_struct_6___iter__ = 0;

static PyObject *__pyx_tp_new_6pynini___pyx_scope_struct_6___iter__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6pynini___pyx_scope_struct_6___iter__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_6___iter__)))) {
    o = (PyObject*)__pyx_freelist_6pynini___pyx_scope_struct_6___iter__[--__pyx_freecount_6pynini___pyx_scope_struct_6___iter__];
    memset(o, 0, sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_6___iter__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pynini___pyx_scope_struct_6___iter__(PyObject *o) {
  struct __pyx_obj_6pynini___pyx_scope_struct_6___iter__ *p = (struct __pyx_obj_6pynini___pyx_scope_struct_6___iter__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6pynini___pyx_scope_struct_6___iter__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_6___iter__)))) {
    __pyx_freelist_6pynini___pyx_scope_struct_6___iter__[__pyx_freecount_6pynini___pyx_scope_struct_6___iter__++] = ((struct __pyx_obj_6pynini___pyx_scope_struct_6___iter__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6pynini___pyx_scope_struct_6___iter__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pynini___pyx_scope_struct_6___iter__ *p = (struct __pyx_obj_6pynini___pyx_scope_struct_6___iter__ *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_6pynini___pyx_scope_struct_6___iter__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynini.__pyx_scope_struct_6___iter__", /*tp_name*/
  sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_6___iter__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pynini___pyx_scope_struct_6___iter__, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pynini___pyx_scope_struct_6___iter__, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pynini___pyx_scope_struct_6___iter__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6pynini___pyx_scope_struct_7___iter__ *__pyx_freelist_6pynini___pyx_scope_struct_7___iter__[8];
static int __pyx_freecount_6pynini___pyx_scope_struct_7___iter__ = 0;

static PyObject *__pyx_tp_new_6pynini___pyx_scope_struct_7___iter__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6pynini___pyx_scope_struct_7___iter__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_7___iter__)))) {
    o = (PyObject*)__pyx_freelist_6pynini___pyx_scope_struct_7___iter__[--__pyx_freecount_6pynini___pyx_scope_struct_7___iter__];
    memset(o, 0, sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_7___iter__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pynini___pyx_scope_struct_7___iter__(PyObject *o) {
  struct __pyx_obj_6pynini___pyx_scope_struct_7___iter__ *p = (struct __pyx_obj_6pynini___pyx_scope_struct_7___iter__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6pynini___pyx_scope_struct_7___iter__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_7___iter__)))) {
    __pyx_freelist_6pynini___pyx_scope_struct_7___iter__[__pyx_freecount_6pynini___pyx_scope_struct_7___iter__++] = ((struct __pyx_obj_6pynini___pyx_scope_struct_7___iter__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6pynini___pyx_scope_struct_7___iter__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pynini___pyx_scope_struct_7___iter__ *p = (struct __pyx_obj_6pynini___pyx_scope_struct_7___iter__ *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_6pynini___pyx_scope_struct_7___iter__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynini.__pyx_scope_struct_7___iter__", /*tp_name*/
  sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_7___iter__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pynini___pyx_scope_struct_7___iter__, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pynini___pyx_scope_struct_7___iter__, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pynini___pyx_scope_struct_7___iter__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6pynini___pyx_scope_struct_8_istrings *__pyx_freelist_6pynini___pyx_scope_struct_8_istrings[8];
static int __pyx_freecount_6pynini___pyx_scope_struct_8_istrings = 0;

static PyObject *__pyx_tp_new_6pynini___pyx_scope_struct_8_istrings(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6pynini___pyx_scope_struct_8_istrings > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_8_istrings)))) {
    o = (PyObject*)__pyx_freelist_6pynini___pyx_scope_struct_8_istrings[--__pyx_freecount_6pynini___pyx_scope_struct_8_istrings];
    memset(o, 0, sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_8_istrings));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pynini___pyx_scope_struct_8_istrings(PyObject *o) {
  struct __pyx_obj_6pynini___pyx_scope_struct_8_istrings *p = (struct __pyx_obj_6pynini___pyx_scope_struct_8_istrings *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6pynini___pyx_scope_struct_8_istrings < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_8_istrings)))) {
    __pyx_freelist_6pynini___pyx_scope_struct_8_istrings[__pyx_freecount_6pynini___pyx_scope_struct_8_istrings++] = ((struct __pyx_obj_6pynini___pyx_scope_struct_8_istrings *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6pynini___pyx_scope_struct_8_istrings(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pynini___pyx_scope_struct_8_istrings *p = (struct __pyx_obj_6pynini___pyx_scope_struct_8_istrings *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_6pynini___pyx_scope_struct_8_istrings = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynini.__pyx_scope_struct_8_istrings", /*tp_name*/
  sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_8_istrings), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pynini___pyx_scope_struct_8_istrings, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pynini___pyx_scope_struct_8_istrings, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pynini___pyx_scope_struct_8_istrings, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6pynini___pyx_scope_struct_9_ostrings *__pyx_freelist_6pynini___pyx_scope_struct_9_ostrings[8];
static int __pyx_freecount_6pynini___pyx_scope_struct_9_ostrings = 0;

static PyObject *__pyx_tp_new_6pynini___pyx_scope_struct_9_ostrings(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6pynini___pyx_scope_struct_9_ostrings > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_9_ostrings)))) {
    o = (PyObject*)__pyx_freelist_6pynini___pyx_scope_struct_9_ostrings[--__pyx_freecount_6pynini___pyx_scope_struct_9_ostrings];
    memset(o, 0, sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_9_ostrings));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pynini___pyx_scope_struct_9_ostrings(PyObject *o) {
  struct __pyx_obj_6pynini___pyx_scope_struct_9_ostrings *p = (struct __pyx_obj_6pynini___pyx_scope_struct_9_ostrings *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6pynini___pyx_scope_struct_9_ostrings < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_9_ostrings)))) {
    __pyx_freelist_6pynini___pyx_scope_struct_9_ostrings[__pyx_freecount_6pynini___pyx_scope_struct_9_ostrings++] = ((struct __pyx_obj_6pynini___pyx_scope_struct_9_ostrings *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6pynini___pyx_scope_struct_9_ostrings(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pynini___pyx_scope_struct_9_ostrings *p = (struct __pyx_obj_6pynini___pyx_scope_struct_9_ostrings *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_6pynini___pyx_scope_struct_9_ostrings = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynini.__pyx_scope_struct_9_ostrings", /*tp_name*/
  sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_9_ostrings), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pynini___pyx_scope_struct_9_ostrings, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pynini___pyx_scope_struct_9_ostrings, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pynini___pyx_scope_struct_9_ostrings, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6pynini___pyx_scope_struct_10_weights *__pyx_freelist_6pynini___pyx_scope_struct_10_weights[8];
static int __pyx_freecount_6pynini___pyx_scope_struct_10_weights = 0;

static PyObject *__pyx_tp_new_6pynini___pyx_scope_struct_10_weights(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6pynini___pyx_scope_struct_10_weights > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_10_weights)))) {
    o = (PyObject*)__pyx_freelist_6pynini___pyx_scope_struct_10_weights[--__pyx_freecount_6pynini___pyx_scope_struct_10_weights];
    memset(o, 0, sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_10_weights));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pynini___pyx_scope_struct_10_weights(PyObject *o) {
  struct __pyx_obj_6pynini___pyx_scope_struct_10_weights *p = (struct __pyx_obj_6pynini___pyx_scope_struct_10_weights *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6pynini___pyx_scope_struct_10_weights < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_10_weights)))) {
    __pyx_freelist_6pynini___pyx_scope_struct_10_weights[__pyx_freecount_6pynini___pyx_scope_struct_10_weights++] = ((struct __pyx_obj_6pynini___pyx_scope_struct_10_weights *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6pynini___pyx_scope_struct_10_weights(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pynini___pyx_scope_struct_10_weights *p = (struct __pyx_obj_6pynini___pyx_scope_struct_10_weights *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_6pynini___pyx_scope_struct_10_weights = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynini.__pyx_scope_struct_10_weights", /*tp_name*/
  sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_10_weights), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pynini___pyx_scope_struct_10_weights, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pynini___pyx_scope_struct_10_weights, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pynini___pyx_scope_struct_10_weights, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6pynini___pyx_scope_struct_11__copy_patch *__pyx_freelist_6pynini___pyx_scope_struct_11__copy_patch[8];
static int __pyx_freecount_6pynini___pyx_scope_struct_11__copy_patch = 0;

static PyObject *__pyx_tp_new_6pynini___pyx_scope_struct_11__copy_patch(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6pynini___pyx_scope_struct_11__copy_patch > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_11__copy_patch)))) {
    o = (PyObject*)__pyx_freelist_6pynini___pyx_scope_struct_11__copy_patch[--__pyx_freecount_6pynini___pyx_scope_struct_11__copy_patch];
    memset(o, 0, sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_11__copy_patch));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pynini___pyx_scope_struct_11__copy_patch(PyObject *o) {
  struct __pyx_obj_6pynini___pyx_scope_struct_11__copy_patch *p = (struct __pyx_obj_6pynini___pyx_scope_struct_11__copy_patch *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_fnc);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6pynini___pyx_scope_struct_11__copy_patch < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_11__copy_patch)))) {
    __pyx_freelist_6pynini___pyx_scope_struct_11__copy_patch[__pyx_freecount_6pynini___pyx_scope_struct_11__copy_patch++] = ((struct __pyx_obj_6pynini___pyx_scope_struct_11__copy_patch *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6pynini___pyx_scope_struct_11__copy_patch(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pynini___pyx_scope_struct_11__copy_patch *p = (struct __pyx_obj_6pynini___pyx_scope_struct_11__copy_patch *)o;
  if (p->__pyx_v_fnc) {
    e = (*v)(p->__pyx_v_fnc, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6pynini___pyx_scope_struct_11__copy_patch(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6pynini___pyx_scope_struct_11__copy_patch *p = (struct __pyx_obj_6pynini___pyx_scope_struct_11__copy_patch *)o;
  tmp = ((PyObject*)p->__pyx_v_fnc);
  p->__pyx_v_fnc = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6pynini___pyx_scope_struct_11__copy_patch = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynini.__pyx_scope_struct_11__copy_patch", /*tp_name*/
  sizeof(struct __pyx_obj_6pynini___pyx_scope_struct_11__copy_patch), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pynini___pyx_scope_struct_11__copy_patch, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pynini___pyx_scope_struct_11__copy_patch, /*tp_traverse*/
  __pyx_tp_clear_6pynini___pyx_scope_struct_11__copy_patch, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pynini___pyx_scope_struct_11__copy_patch, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {"_from_pywrapfst", (PyCFunction)__pyx_pw_6pynini_1_from_pywrapfst, METH_O, 0},
  {"_read", (PyCFunction)__pyx_pw_6pynini_3_read, METH_O, 0},
  {"_read_from_string", (PyCFunction)__pyx_pw_6pynini_5_read_from_string, METH_O, 0},
  {"acceptor", (PyCFunction)__pyx_pw_6pynini_7acceptor, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pynini_6acceptor},
  {"transducer", (PyCFunction)__pyx_pw_6pynini_9transducer, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pynini_8transducer},
  {"cdrewrite", (PyCFunction)__pyx_pw_6pynini_11cdrewrite, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pynini_10cdrewrite},
  {"epsilon_machine", (PyCFunction)__pyx_pw_6pynini_13epsilon_machine, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pynini_12epsilon_machine},
  {"leniently_compose", (PyCFunction)__pyx_pw_6pynini_15leniently_compose, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pynini_14leniently_compose},
  {"matches", (PyCFunction)__pyx_pw_6pynini_17matches, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pynini_16matches},
  {"string_file", (PyCFunction)__pyx_pw_6pynini_19string_file, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pynini_18string_file},
  {"string_map", (PyCFunction)__pyx_pw_6pynini_21string_map, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pynini_20string_map},
  {"mpdt_compose", (PyCFunction)__pyx_pw_6pynini_51mpdt_compose, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pynini_50mpdt_compose},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_pynini(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_pynini},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "pynini",
    __pyx_k_Pynini_finite_state_grammar_comp, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_1arg_patch, __pyx_k_1arg_patch, sizeof(__pyx_k_1arg_patch), 0, 0, 1, 1},
  {&__pyx_n_s_1arg_patch_locals_patch, __pyx_k_1arg_patch_locals_patch, sizeof(__pyx_k_1arg_patch_locals_patch), 0, 0, 1, 1},
  {&__pyx_kp_s_2nd_argument_must_be_an_unweight, __pyx_k_2nd_argument_must_be_an_unweight, sizeof(__pyx_k_2nd_argument_must_be_an_unweight), 0, 0, 1, 0},
  {&__pyx_n_s_ACCEPTOR, __pyx_k_ACCEPTOR, sizeof(__pyx_k_ACCEPTOR), 0, 0, 1, 1},
  {&__pyx_n_s_ACCESSIBLE, __pyx_k_ACCESSIBLE, sizeof(__pyx_k_ACCESSIBLE), 0, 0, 1, 1},
  {&__pyx_n_s_ACYCLIC, __pyx_k_ACYCLIC, sizeof(__pyx_k_ACYCLIC), 0, 0, 1, 1},
  {&__pyx_n_s_ADD_ARC_PROPERTIES, __pyx_k_ADD_ARC_PROPERTIES, sizeof(__pyx_k_ADD_ARC_PROPERTIES), 0, 0, 1, 1},
  {&__pyx_n_s_ADD_STATE_PROPERTIES, __pyx_k_ADD_STATE_PROPERTIES, sizeof(__pyx_k_ADD_STATE_PROPERTIES), 0, 0, 1, 1},
  {&__pyx_n_s_ADD_SUPERFINAL_PROPERTIES, __pyx_k_ADD_SUPERFINAL_PROPERTIES, sizeof(__pyx_k_ADD_SUPERFINAL_PROPERTIES), 0, 0, 1, 1},
  {&__pyx_n_s_ARC_FLAGS, __pyx_k_ARC_FLAGS, sizeof(__pyx_k_ARC_FLAGS), 0, 0, 1, 1},
  {&__pyx_n_s_ARC_I_LABEL_VALUE, __pyx_k_ARC_I_LABEL_VALUE, sizeof(__pyx_k_ARC_I_LABEL_VALUE), 0, 0, 1, 1},
  {&__pyx_n_s_ARC_NEXT_STATE_VALUE, __pyx_k_ARC_NEXT_STATE_VALUE, sizeof(__pyx_k_ARC_NEXT_STATE_VALUE), 0, 0, 1, 1},
  {&__pyx_n_s_ARC_NO_CACHE, __pyx_k_ARC_NO_CACHE, sizeof(__pyx_k_ARC_NO_CACHE), 0, 0, 1, 1},
  {&__pyx_n_s_ARC_O_LABEL_VALUE, __pyx_k_ARC_O_LABEL_VALUE, sizeof(__pyx_k_ARC_O_LABEL_VALUE), 0, 0, 1, 1},
  {&__pyx_n_s_ARC_SORT_PROPERTIES, __pyx_k_ARC_SORT_PROPERTIES, sizeof(__pyx_k_ARC_SORT_PROPERTIES), 0, 0, 1, 1},
  {&__pyx_n_s_ARC_VALUE_FLAGS, __pyx_k_ARC_VALUE_FLAGS, sizeof(__pyx_k_ARC_VALUE_FLAGS), 0, 0, 1, 1},
  {&__pyx_n_s_ARC_WEIGHT_VALUE, __pyx_k_ARC_WEIGHT_VALUE, sizeof(__pyx_k_ARC_WEIGHT_VALUE), 0, 0, 1, 1},
  {&__pyx_n_s_Arc, __pyx_k_Arc, sizeof(__pyx_k_Arc), 0, 0, 1, 1},
  {&__pyx_n_s_ArcIterator, __pyx_k_ArcIterator, sizeof(__pyx_k_ArcIterator), 0, 0, 1, 1},
  {&__pyx_n_s_BINARY_PROPERTIES, __pyx_k_BINARY_PROPERTIES, sizeof(__pyx_k_BINARY_PROPERTIES), 0, 0, 1, 1},
  {&__pyx_n_s_COACCESSIBLE, __pyx_k_COACCESSIBLE, sizeof(__pyx_k_COACCESSIBLE), 0, 0, 1, 1},
  {&__pyx_n_s_COPY_PROPERTIES, __pyx_k_COPY_PROPERTIES, sizeof(__pyx_k_COPY_PROPERTIES), 0, 0, 1, 1},
  {&__pyx_n_s_CYCLIC, __pyx_k_CYCLIC, sizeof(__pyx_k_CYCLIC), 0, 0, 1, 1},
  {&__pyx_kp_s_Cannot_invoke_method_in_current, __pyx_k_Cannot_invoke_method_in_current, sizeof(__pyx_k_Cannot_invoke_method_in_current), 0, 0, 1, 0},
  {&__pyx_n_s_DELETE_ARC_PROPERTIES, __pyx_k_DELETE_ARC_PROPERTIES, sizeof(__pyx_k_DELETE_ARC_PROPERTIES), 0, 0, 1, 1},
  {&__pyx_n_s_DELETE_STATE_PROPERTIES, __pyx_k_DELETE_STATE_PROPERTIES, sizeof(__pyx_k_DELETE_STATE_PROPERTIES), 0, 0, 1, 1},
  {&__pyx_n_s_ENCODE_FLAGS, __pyx_k_ENCODE_FLAGS, sizeof(__pyx_k_ENCODE_FLAGS), 0, 0, 1, 1},
  {&__pyx_n_s_ENCODE_LABELS, __pyx_k_ENCODE_LABELS, sizeof(__pyx_k_ENCODE_LABELS), 0, 0, 1, 1},
  {&__pyx_n_s_ENCODE_WEIGHTS, __pyx_k_ENCODE_WEIGHTS, sizeof(__pyx_k_ENCODE_WEIGHTS), 0, 0, 1, 1},
  {&__pyx_n_s_EPSILONS, __pyx_k_EPSILONS, sizeof(__pyx_k_EPSILONS), 0, 0, 1, 1},
  {&__pyx_n_s_ERROR, __pyx_k_ERROR, sizeof(__pyx_k_ERROR), 0, 0, 1, 1},
  {&__pyx_n_s_EXPANDED, __pyx_k_EXPANDED, sizeof(__pyx_k_EXPANDED), 0, 0, 1, 1},
  {&__pyx_n_s_EXTRINSIC_PROPERTIES, __pyx_k_EXTRINSIC_PROPERTIES, sizeof(__pyx_k_EXTRINSIC_PROPERTIES), 0, 0, 1, 1},
  {&__pyx_n_s_EncodeMapper, __pyx_k_EncodeMapper, sizeof(__pyx_k_EncodeMapper), 0, 0, 1, 1},
  {&__pyx_kp_s_Expected_at_least_2_positional_a, __pyx_k_Expected_at_least_2_positional_a, sizeof(__pyx_k_Expected_at_least_2_positional_a), 0, 0, 1, 0},
  {&__pyx_kp_s_Expecting_acceptor_or_string_arg, __pyx_k_Expecting_acceptor_or_string_arg, sizeof(__pyx_k_Expecting_acceptor_or_string_arg), 0, 0, 1, 0},
  {&__pyx_n_s_FST_PROPERTIES, __pyx_k_FST_PROPERTIES, sizeof(__pyx_k_FST_PROPERTIES), 0, 0, 1, 1},
  {&__pyx_kp_s_FST_is_not_a_string, __pyx_k_FST_is_not_a_string, sizeof(__pyx_k_FST_is_not_a_string), 0, 0, 1, 0},
  {&__pyx_kp_s_FST_is_not_acyclic, __pyx_k_FST_is_not_acyclic, sizeof(__pyx_k_FST_is_not_acyclic), 0, 0, 1, 0},
  {&__pyx_kp_s_Far_r_mode_c_at_0x_x, __pyx_k_Far_r_mode_c_at_0x_x, sizeof(__pyx_k_Far_r_mode_c_at_0x_x), 0, 0, 1, 0},
  {&__pyx_n_s_Fst, __pyx_k_Fst, sizeof(__pyx_k_Fst), 0, 0, 1, 1},
  {&__pyx_n_s_FstArgError, __pyx_k_FstArgError, sizeof(__pyx_k_FstArgError), 0, 0, 1, 1},
  {&__pyx_n_s_FstBadWeightError, __pyx_k_FstBadWeightError, sizeof(__pyx_k_FstBadWeightError), 0, 0, 1, 1},
  {&__pyx_n_s_FstDeletedConstructorError, __pyx_k_FstDeletedConstructorError, sizeof(__pyx_k_FstDeletedConstructorError), 0, 0, 1, 1},
  {&__pyx_n_s_FstIOError, __pyx_k_FstIOError, sizeof(__pyx_k_FstIOError), 0, 0, 1, 1},
  {&__pyx_n_s_FstIndexError, __pyx_k_FstIndexError, sizeof(__pyx_k_FstIndexError), 0, 0, 1, 1},
  {&__pyx_n_s_FstOpError, __pyx_k_FstOpError, sizeof(__pyx_k_FstOpError), 0, 0, 1, 1},
  {&__pyx_n_s_FstStringCompilationError, __pyx_k_FstStringCompilationError, sizeof(__pyx_k_FstStringCompilationError), 0, 0, 1, 1},
  {&__pyx_n_s_INITIAL_ACYCLIC, __pyx_k_INITIAL_ACYCLIC, sizeof(__pyx_k_INITIAL_ACYCLIC), 0, 0, 1, 1},
  {&__pyx_n_s_INITIAL_CYCLIC, __pyx_k_INITIAL_CYCLIC, sizeof(__pyx_k_INITIAL_CYCLIC), 0, 0, 1, 1},
  {&__pyx_n_s_INTRINSIC_PROPERTIES, __pyx_k_INTRINSIC_PROPERTIES, sizeof(__pyx_k_INTRINSIC_PROPERTIES), 0, 0, 1, 1},
  {&__pyx_n_s_I_DETERMINISTIC, __pyx_k_I_DETERMINISTIC, sizeof(__pyx_k_I_DETERMINISTIC), 0, 0, 1, 1},
  {&__pyx_n_s_I_EPSILONS, __pyx_k_I_EPSILONS, sizeof(__pyx_k_I_EPSILONS), 0, 0, 1, 1},
  {&__pyx_n_s_I_LABEL_INVARIANT_PROPERTIES, __pyx_k_I_LABEL_INVARIANT_PROPERTIES, sizeof(__pyx_k_I_LABEL_INVARIANT_PROPERTIES), 0, 0, 1, 1},
  {&__pyx_n_s_I_LABEL_SORTED, __pyx_k_I_LABEL_SORTED, sizeof(__pyx_k_I_LABEL_SORTED), 0, 0, 1, 1},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0x07, __pyx_k_Incompatible_checksums_s_vs_0x07, sizeof(__pyx_k_Incompatible_checksums_s_vs_0x07), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0x79, __pyx_k_Incompatible_checksums_s_vs_0x79, sizeof(__pyx_k_Incompatible_checksums_s_vs_0x79), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0xcb, __pyx_k_Incompatible_checksums_s_vs_0xcb, sizeof(__pyx_k_Incompatible_checksums_s_vs_0xcb), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_token_type, __pyx_k_Invalid_token_type, sizeof(__pyx_k_Invalid_token_type), 0, 0, 1, 0},
  {&__pyx_n_s_KeyError, __pyx_k_KeyError, sizeof(__pyx_k_KeyError), 0, 0, 1, 1},
  {&__pyx_n_s_MPdtParentheses___iter, __pyx_k_MPdtParentheses___iter, sizeof(__pyx_k_MPdtParentheses___iter), 0, 0, 1, 1},
  {&__pyx_kp_s_MPdtParentheses_at_0x_x, __pyx_k_MPdtParentheses_at_0x_x, sizeof(__pyx_k_MPdtParentheses_at_0x_x), 0, 0, 1, 0},
  {&__pyx_n_s_MUTABLE, __pyx_k_MUTABLE, sizeof(__pyx_k_MUTABLE), 0, 0, 1, 1},
  {&__pyx_n_s_MutableArcIterator, __pyx_k_MutableArcIterator, sizeof(__pyx_k_MutableArcIterator), 0, 0, 1, 1},
  {&__pyx_n_s_NEG_TRINARY_PROPERTIES, __pyx_k_NEG_TRINARY_PROPERTIES, sizeof(__pyx_k_NEG_TRINARY_PROPERTIES), 0, 0, 1, 1},
  {&__pyx_n_s_NON_I_DETERMINISTIC, __pyx_k_NON_I_DETERMINISTIC, sizeof(__pyx_k_NON_I_DETERMINISTIC), 0, 0, 1, 1},
  {&__pyx_n_s_NON_O_DETERMINISTIC, __pyx_k_NON_O_DETERMINISTIC, sizeof(__pyx_k_NON_O_DETERMINISTIC), 0, 0, 1, 1},
  {&__pyx_n_s_NOT_ACCEPTOR, __pyx_k_NOT_ACCEPTOR, sizeof(__pyx_k_NOT_ACCEPTOR), 0, 0, 1, 1},
  {&__pyx_n_s_NOT_ACCESSIBLE, __pyx_k_NOT_ACCESSIBLE, sizeof(__pyx_k_NOT_ACCESSIBLE), 0, 0, 1, 1},
  {&__pyx_n_s_NOT_COACCESSIBLE, __pyx_k_NOT_COACCESSIBLE, sizeof(__pyx_k_NOT_COACCESSIBLE), 0, 0, 1, 1},
  {&__pyx_n_s_NOT_I_LABEL_SORTED, __pyx_k_NOT_I_LABEL_SORTED, sizeof(__pyx_k_NOT_I_LABEL_SORTED), 0, 0, 1, 1},
  {&__pyx_n_s_NOT_O_LABEL_SORTED, __pyx_k_NOT_O_LABEL_SORTED, sizeof(__pyx_k_NOT_O_LABEL_SORTED), 0, 0, 1, 1},
  {&__pyx_n_s_NOT_STRING, __pyx_k_NOT_STRING, sizeof(__pyx_k_NOT_STRING), 0, 0, 1, 1},
  {&__pyx_n_s_NOT_TOP_SORTED, __pyx_k_NOT_TOP_SORTED, sizeof(__pyx_k_NOT_TOP_SORTED), 0, 0, 1, 1},
  {&__pyx_n_s_NO_EPSILONS, __pyx_k_NO_EPSILONS, sizeof(__pyx_k_NO_EPSILONS), 0, 0, 1, 1},
  {&__pyx_n_s_NO_I_EPSILONS, __pyx_k_NO_I_EPSILONS, sizeof(__pyx_k_NO_I_EPSILONS), 0, 0, 1, 1},
  {&__pyx_n_s_NO_LABEL, __pyx_k_NO_LABEL, sizeof(__pyx_k_NO_LABEL), 0, 0, 1, 1},
  {&__pyx_n_s_NO_O_EPSILONS, __pyx_k_NO_O_EPSILONS, sizeof(__pyx_k_NO_O_EPSILONS), 0, 0, 1, 1},
  {&__pyx_n_s_NO_STATE_ID, __pyx_k_NO_STATE_ID, sizeof(__pyx_k_NO_STATE_ID), 0, 0, 1, 1},
  {&__pyx_n_s_NO_SYMBOL, __pyx_k_NO_SYMBOL, sizeof(__pyx_k_NO_SYMBOL), 0, 0, 1, 1},
  {&__pyx_n_s_NULL_PROPERTIES, __pyx_k_NULL_PROPERTIES, sizeof(__pyx_k_NULL_PROPERTIES), 0, 0, 1, 1},
  {&__pyx_n_s_O_DETERMINISTIC, __pyx_k_O_DETERMINISTIC, sizeof(__pyx_k_O_DETERMINISTIC), 0, 0, 1, 1},
  {&__pyx_n_s_O_EPSILONS, __pyx_k_O_EPSILONS, sizeof(__pyx_k_O_EPSILONS), 0, 0, 1, 1},
  {&__pyx_n_s_O_LABEL_INVARIANT_PROPERTIES, __pyx_k_O_LABEL_INVARIANT_PROPERTIES, sizeof(__pyx_k_O_LABEL_INVARIANT_PROPERTIES), 0, 0, 1, 1},
  {&__pyx_n_s_O_LABEL_SORTED, __pyx_k_O_LABEL_SORTED, sizeof(__pyx_k_O_LABEL_SORTED), 0, 0, 1, 1},
  {&__pyx_kp_s_Operation_failed, __pyx_k_Operation_failed, sizeof(__pyx_k_Operation_failed), 0, 0, 1, 0},
  {&__pyx_n_s_POS_TRINARY_PROPERTIES, __pyx_k_POS_TRINARY_PROPERTIES, sizeof(__pyx_k_POS_TRINARY_PROPERTIES), 0, 0, 1, 1},
  {&__pyx_n_s_PdtParentheses___iter, __pyx_k_PdtParentheses___iter, sizeof(__pyx_k_PdtParentheses___iter), 0, 0, 1, 1},
  {&__pyx_kp_s_PdtParentheses_at_0x_x, __pyx_k_PdtParentheses_at_0x_x, sizeof(__pyx_k_PdtParentheses_at_0x_x), 0, 0, 1, 0},
  {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_RM_SUPERFINAL_PROPERTIES, __pyx_k_RM_SUPERFINAL_PROPERTIES, sizeof(__pyx_k_RM_SUPERFINAL_PROPERTIES), 0, 0, 1, 1},
  {&__pyx_kp_s_Read_failed, __pyx_k_Read_failed, sizeof(__pyx_k_Read_failed), 0, 0, 1, 0},
  {&__pyx_kp_s_Read_failed_r, __pyx_k_Read_failed_r, sizeof(__pyx_k_Read_failed_r), 0, 0, 1, 0},
  {&__pyx_n_s_SET_ARC_PROPERTIES, __pyx_k_SET_ARC_PROPERTIES, sizeof(__pyx_k_SET_ARC_PROPERTIES), 0, 0, 1, 1},
  {&__pyx_n_s_SET_FINAL_PROPERTIES, __pyx_k_SET_FINAL_PROPERTIES, sizeof(__pyx_k_SET_FINAL_PROPERTIES), 0, 0, 1, 1},
  {&__pyx_n_s_SET_START_PROPERTIES, __pyx_k_SET_START_PROPERTIES, sizeof(__pyx_k_SET_START_PROPERTIES), 0, 0, 1, 1},
  {&__pyx_n_s_STATE_SORT_PROPERTIES, __pyx_k_STATE_SORT_PROPERTIES, sizeof(__pyx_k_STATE_SORT_PROPERTIES), 0, 0, 1, 1},
  {&__pyx_n_s_STRING, __pyx_k_STRING, sizeof(__pyx_k_STRING), 0, 0, 1, 1},
  {&__pyx_n_s_StateIterator, __pyx_k_StateIterator, sizeof(__pyx_k_StateIterator), 0, 0, 1, 1},
  {&__pyx_n_s_StopIteration, __pyx_k_StopIteration, sizeof(__pyx_k_StopIteration), 0, 0, 1, 1},
  {&__pyx_kp_s_StringPathIterator_at_0x_x, __pyx_k_StringPathIterator_at_0x_x, sizeof(__pyx_k_StringPathIterator_at_0x_x), 0, 0, 1, 0},
  {&__pyx_n_s_StringPathIterator_istrings, __pyx_k_StringPathIterator_istrings, sizeof(__pyx_k_StringPathIterator_istrings), 0, 0, 1, 1},
  {&__pyx_n_s_StringPathIterator_ostrings, __pyx_k_StringPathIterator_ostrings, sizeof(__pyx_k_StringPathIterator_ostrings), 0, 0, 1, 1},
  {&__pyx_n_s_StringPathIterator_weights, __pyx_k_StringPathIterator_weights, sizeof(__pyx_k_StringPathIterator_weights), 0, 0, 1, 1},
  {&__pyx_kp_s_String_compilation_failed, __pyx_k_String_compilation_failed, sizeof(__pyx_k_String_compilation_failed), 0, 0, 1, 0},
  {&__pyx_kp_s_String_map_compilation_failed, __pyx_k_String_map_compilation_failed, sizeof(__pyx_k_String_map_compilation_failed), 0, 0, 1, 0},
  {&__pyx_n_s_SymbolTable, __pyx_k_SymbolTable, sizeof(__pyx_k_SymbolTable), 0, 0, 1, 1},
  {&__pyx_n_s_SymbolTableIterator, __pyx_k_SymbolTableIterator, sizeof(__pyx_k_SymbolTableIterator), 0, 0, 1, 1},
  {&__pyx_n_s_SymbolTable_2, __pyx_k_SymbolTable_2, sizeof(__pyx_k_SymbolTable_2), 0, 0, 1, 1},
  {&__pyx_n_s_TOP_SORTED, __pyx_k_TOP_SORTED, sizeof(__pyx_k_TOP_SORTED), 0, 0, 1, 1},
  {&__pyx_n_s_TRINARY_PROPERTIES, __pyx_k_TRINARY_PROPERTIES, sizeof(__pyx_k_TRINARY_PROPERTIES), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_UNWEIGHTED, __pyx_k_UNWEIGHTED, sizeof(__pyx_k_UNWEIGHTED), 0, 0, 1, 1},
  {&__pyx_n_s_UNWEIGHTED_CYCLES, __pyx_k_UNWEIGHTED_CYCLES, sizeof(__pyx_k_UNWEIGHTED_CYCLES), 0, 0, 1, 1},
  {&__pyx_kp_s_Unable_to_resolve_parentheses_sy, __pyx_k_Unable_to_resolve_parentheses_sy, sizeof(__pyx_k_Unable_to_resolve_parentheses_sy), 0, 0, 1, 0},
  {&__pyx_kp_s_Unknown_PDT_compose_filter_type, __pyx_k_Unknown_PDT_compose_filter_type, sizeof(__pyx_k_Unknown_PDT_compose_filter_type), 0, 0, 1, 0},
  {&__pyx_kp_s_Unknown_PDT_parser_type_r, __pyx_k_Unknown_PDT_parser_type_r, sizeof(__pyx_k_Unknown_PDT_parser_type_r), 0, 0, 1, 0},
  {&__pyx_kp_s_Unknown_arc_type_r, __pyx_k_Unknown_arc_type_r, sizeof(__pyx_k_Unknown_arc_type_r), 0, 0, 1, 0},
  {&__pyx_kp_s_Unknown_context_dependent_rewrit, __pyx_k_Unknown_context_dependent_rewrit, sizeof(__pyx_k_Unknown_context_dependent_rewrit), 0, 0, 1, 0},
  {&__pyx_kp_s_Unknown_context_dependent_rewrit_2, __pyx_k_Unknown_context_dependent_rewrit_2, sizeof(__pyx_k_Unknown_context_dependent_rewrit_2), 0, 0, 1, 0},
  {&__pyx_kp_s_Unknown_mode_r, __pyx_k_Unknown_mode_r, sizeof(__pyx_k_Unknown_mode_r), 0, 0, 1, 0},
  {&__pyx_kp_s_Unknown_token_type_r, __pyx_k_Unknown_token_type_r, sizeof(__pyx_k_Unknown_token_type_r), 0, 0, 1, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_WEIGHTED, __pyx_k_WEIGHTED, sizeof(__pyx_k_WEIGHTED), 0, 0, 1, 1},
  {&__pyx_n_s_WEIGHTED_CYCLES, __pyx_k_WEIGHTED_CYCLES, sizeof(__pyx_k_WEIGHTED_CYCLES), 0, 0, 1, 1},
  {&__pyx_n_s_WEIGHT_INVARIANT_PROPERTIES, __pyx_k_WEIGHT_INVARIANT_PROPERTIES, sizeof(__pyx_k_WEIGHT_INVARIANT_PROPERTIES), 0, 0, 1, 1},
  {&__pyx_n_s_Weight, __pyx_k_Weight, sizeof(__pyx_k_Weight), 0, 0, 1, 1},
  {&__pyx_kp_s_Write_failed_r, __pyx_k_Write_failed_r, sizeof(__pyx_k_Write_failed_r), 0, 0, 1, 0},
  {&__pyx_n_s_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 0, 1, 1},
  {&__pyx_n_s_acceptor, __pyx_k_acceptor, sizeof(__pyx_k_acceptor), 0, 0, 1, 1},
  {&__pyx_n_s_add, __pyx_k_add, sizeof(__pyx_k_add), 0, 0, 1, 1},
  {&__pyx_n_s_add_pair, __pyx_k_add_pair, sizeof(__pyx_k_add_pair), 0, 0, 1, 1},
  {&__pyx_n_s_add_triple, __pyx_k_add_triple, sizeof(__pyx_k_add_triple), 0, 0, 1, 1},
  {&__pyx_n_s_arc_type, __pyx_k_arc_type, sizeof(__pyx_k_arc_type), 0, 0, 1, 1},
  {&__pyx_n_s_arcmap, __pyx_k_arcmap, sizeof(__pyx_k_arcmap), 0, 0, 1, 1},
  {&__pyx_n_s_arcsort, __pyx_k_arcsort, sizeof(__pyx_k_arcsort), 0, 0, 1, 1},
  {&__pyx_n_s_arg, __pyx_k_arg, sizeof(__pyx_k_arg), 0, 0, 1, 1},
  {&__pyx_n_s_arg1, __pyx_k_arg1, sizeof(__pyx_k_arg1), 0, 0, 1, 1},
  {&__pyx_n_s_arg2, __pyx_k_arg2, sizeof(__pyx_k_arg2), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_assignment, __pyx_k_assignment, sizeof(__pyx_k_assignment), 0, 0, 1, 1},
  {&__pyx_n_s_astring, __pyx_k_astring, sizeof(__pyx_k_astring), 0, 0, 1, 1},
  {&__pyx_n_s_attach_input_symbols, __pyx_k_attach_input_symbols, sizeof(__pyx_k_attach_input_symbols), 0, 0, 1, 1},
  {&__pyx_n_s_attach_output_symbols, __pyx_k_attach_output_symbols, sizeof(__pyx_k_attach_output_symbols), 0, 0, 1, 1},
  {&__pyx_n_s_attach_symbols, __pyx_k_attach_symbols, sizeof(__pyx_k_attach_symbols), 0, 0, 1, 1},
  {&__pyx_n_b_auto, __pyx_k_auto, sizeof(__pyx_k_auto), 0, 0, 0, 1},
  {&__pyx_n_b_byte, __pyx_k_byte, sizeof(__pyx_k_byte), 0, 0, 0, 1},
  {&__pyx_kp_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 0},
  {&__pyx_n_s_cal, __pyx_k_cal, sizeof(__pyx_k_cal), 0, 0, 1, 1},
  {&__pyx_n_s_call_arc_labeling, __pyx_k_call_arc_labeling, sizeof(__pyx_k_call_arc_labeling), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_b_closed, __pyx_k_closed, sizeof(__pyx_k_closed), 0, 0, 0, 1},
  {&__pyx_n_s_closed, __pyx_k_closed, sizeof(__pyx_k_closed), 0, 0, 1, 1},
  {&__pyx_n_s_closure, __pyx_k_closure, sizeof(__pyx_k_closure), 0, 0, 1, 1},
  {&__pyx_n_s_comp_merge_patch, __pyx_k_comp_merge_patch, sizeof(__pyx_k_comp_merge_patch), 0, 0, 1, 1},
  {&__pyx_n_s_comp_merge_patch_locals_patch, __pyx_k_comp_merge_patch_locals_patch, sizeof(__pyx_k_comp_merge_patch_locals_patch), 0, 0, 1, 1},
  {&__pyx_n_s_comp_patch, __pyx_k_comp_patch, sizeof(__pyx_k_comp_patch), 0, 0, 1, 1},
  {&__pyx_n_s_comp_patch_locals_patch, __pyx_k_comp_patch_locals_patch, sizeof(__pyx_k_comp_patch_locals_patch), 0, 0, 1, 1},
  {&__pyx_n_s_compact_symbol_table, __pyx_k_compact_symbol_table, sizeof(__pyx_k_compact_symbol_table), 0, 0, 1, 1},
  {&__pyx_n_s_compose, __pyx_k_compose, sizeof(__pyx_k_compose), 0, 0, 1, 1},
  {&__pyx_n_s_compose_filter, __pyx_k_compose_filter, sizeof(__pyx_k_compose_filter), 0, 0, 1, 1},
  {&__pyx_n_s_compose_filter_enum, __pyx_k_compose_filter_enum, sizeof(__pyx_k_compose_filter_enum), 0, 0, 1, 1},
  {&__pyx_n_s_compose_patch, __pyx_k_compose_patch, sizeof(__pyx_k_compose_patch), 0, 0, 1, 1},
  {&__pyx_n_s_compose_patch_locals_patch, __pyx_k_compose_patch_locals_patch, sizeof(__pyx_k_compose_patch_locals_patch), 0, 0, 1, 1},
  {&__pyx_n_s_compute_props, __pyx_k_compute_props, sizeof(__pyx_k_compute_props), 0, 0, 1, 1},
  {&__pyx_n_s_concat, __pyx_k_concat, sizeof(__pyx_k_concat), 0, 0, 1, 1},
  {&__pyx_n_s_connect, __pyx_k_connect, sizeof(__pyx_k_connect), 0, 0, 1, 1},
  {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
  {&__pyx_n_s_copy_patch, __pyx_k_copy_patch, sizeof(__pyx_k_copy_patch), 0, 0, 1, 1},
  {&__pyx_n_s_copy_patch_locals_patch, __pyx_k_copy_patch_locals_patch, sizeof(__pyx_k_copy_patch_locals_patch), 0, 0, 1, 1},
  {&__pyx_n_s_create, __pyx_k_create, sizeof(__pyx_k_create), 0, 0, 1, 1},
  {&__pyx_n_s_decode, __pyx_k_decode, sizeof(__pyx_k_decode), 0, 0, 1, 1},
  {&__pyx_n_b_default, __pyx_k_default, sizeof(__pyx_k_default), 0, 0, 0, 1},
  {&__pyx_n_s_determinize, __pyx_k_determinize, sizeof(__pyx_k_determinize), 0, 0, 1, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_n_s_difference, __pyx_k_difference, sizeof(__pyx_k_difference), 0, 0, 1, 1},
  {&__pyx_n_s_difference_patch, __pyx_k_difference_patch, sizeof(__pyx_k_difference_patch), 0, 0, 1, 1},
  {&__pyx_n_s_difference_patch_locals_patch, __pyx_k_difference_patch_locals_patch, sizeof(__pyx_k_difference_patch_locals_patch), 0, 0, 1, 1},
  {&__pyx_n_s_direction, __pyx_k_direction, sizeof(__pyx_k_direction), 0, 0, 1, 1},
  {&__pyx_n_s_disambiguate, __pyx_k_disambiguate, sizeof(__pyx_k_disambiguate), 0, 0, 1, 1},
  {&__pyx_n_s_divide, __pyx_k_divide, sizeof(__pyx_k_divide), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_done, __pyx_k_done, sizeof(__pyx_k_done), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_epsilon_on_replace, __pyx_k_epsilon_on_replace, sizeof(__pyx_k_epsilon_on_replace), 0, 0, 1, 1},
  {&__pyx_n_s_epsnormalize, __pyx_k_epsnormalize, sizeof(__pyx_k_epsnormalize), 0, 0, 1, 1},
  {&__pyx_n_s_equal, __pyx_k_equal, sizeof(__pyx_k_equal), 0, 0, 1, 1},
  {&__pyx_n_s_equivalent, __pyx_k_equivalent, sizeof(__pyx_k_equivalent), 0, 0, 1, 1},
  {&__pyx_n_s_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
  {&__pyx_n_s_exc, __pyx_k_exc, sizeof(__pyx_k_exc), 0, 0, 1, 1},
  {&__pyx_n_s_far_type, __pyx_k_far_type, sizeof(__pyx_k_far_type), 0, 0, 1, 1},
  {&__pyx_n_b_fifo, __pyx_k_fifo, sizeof(__pyx_k_fifo), 0, 0, 0, 1},
  {&__pyx_n_s_filename, __pyx_k_filename, sizeof(__pyx_k_filename), 0, 0, 1, 1},
  {&__pyx_n_s_find, __pyx_k_find, sizeof(__pyx_k_find), 0, 0, 1, 1},
  {&__pyx_n_s_first, __pyx_k_first, sizeof(__pyx_k_first), 0, 0, 1, 1},
  {&__pyx_n_s_fnc, __pyx_k_fnc, sizeof(__pyx_k_fnc), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_from_pywrapfst, __pyx_k_from_pywrapfst, sizeof(__pyx_k_from_pywrapfst), 0, 0, 1, 1},
  {&__pyx_n_s_fst, __pyx_k_fst, sizeof(__pyx_k_fst), 0, 0, 1, 1},
  {&__pyx_n_s_functools, __pyx_k_functools, sizeof(__pyx_k_functools), 0, 0, 1, 1},
  {&__pyx_n_s_get_byte_symbol_table, __pyx_k_get_byte_symbol_table, sizeof(__pyx_k_get_byte_symbol_table), 0, 0, 1, 1},
  {&__pyx_n_s_get_fst, __pyx_k_get_fst, sizeof(__pyx_k_get_fst), 0, 0, 1, 1},
  {&__pyx_n_s_get_key, __pyx_k_get_key, sizeof(__pyx_k_get_key), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
  {&__pyx_n_s_ifst, __pyx_k_ifst, sizeof(__pyx_k_ifst), 0, 0, 1, 1},
  {&__pyx_n_s_ifst1, __pyx_k_ifst1, sizeof(__pyx_k_ifst1), 0, 0, 1, 1},
  {&__pyx_n_s_ifst2, __pyx_k_ifst2, sizeof(__pyx_k_ifst2), 0, 0, 1, 1},
  {&__pyx_n_s_impdt, __pyx_k_impdt, sizeof(__pyx_k_impdt), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_input_token_type, __pyx_k_input_token_type, sizeof(__pyx_k_input_token_type), 0, 0, 1, 1},
  {&__pyx_n_s_intersect, __pyx_k_intersect, sizeof(__pyx_k_intersect), 0, 0, 1, 1},
  {&__pyx_n_s_invert, __pyx_k_invert, sizeof(__pyx_k_invert), 0, 0, 1, 1},
  {&__pyx_n_s_ipdt, __pyx_k_ipdt, sizeof(__pyx_k_ipdt), 0, 0, 1, 1},
  {&__pyx_n_s_isomorphic, __pyx_k_isomorphic, sizeof(__pyx_k_isomorphic), 0, 0, 1, 1},
  {&__pyx_n_s_istring, __pyx_k_istring, sizeof(__pyx_k_istring), 0, 0, 1, 1},
  {&__pyx_n_s_istrings, __pyx_k_istrings, sizeof(__pyx_k_istrings), 0, 0, 1, 1},
  {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {&__pyx_n_s_iter, __pyx_k_iter, sizeof(__pyx_k_iter), 0, 0, 1, 1},
  {&__pyx_n_s_keep_parentheses, __pyx_k_keep_parentheses, sizeof(__pyx_k_keep_parentheses), 0, 0, 1, 1},
  {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {&__pyx_n_s_kwargs, __pyx_k_kwargs, sizeof(__pyx_k_kwargs), 0, 0, 1, 1},
  {&__pyx_n_s_lambda, __pyx_k_lambda, sizeof(__pyx_k_lambda), 0, 0, 1, 1},
  {&__pyx_n_b_left, __pyx_k_left, sizeof(__pyx_k_left), 0, 0, 0, 1},
  {&__pyx_n_s_left_mpdt, __pyx_k_left_mpdt, sizeof(__pyx_k_left_mpdt), 0, 0, 1, 1},
  {&__pyx_n_s_left_pdt, __pyx_k_left_pdt, sizeof(__pyx_k_left_pdt), 0, 0, 1, 1},
  {&__pyx_n_s_lhs, __pyx_k_lhs, sizeof(__pyx_k_lhs), 0, 0, 1, 1},
  {&__pyx_n_s_lines, __pyx_k_lines, sizeof(__pyx_k_lines), 0, 0, 1, 1},
  {&__pyx_n_s_logging, __pyx_k_logging, sizeof(__pyx_k_logging), 0, 0, 1, 1},
  {&__pyx_n_s_lower, __pyx_k_lower, sizeof(__pyx_k_lower), 0, 0, 1, 1},
  {&__pyx_n_b_ltr, __pyx_k_ltr, sizeof(__pyx_k_ltr), 0, 0, 0, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_merge_symbol_table, __pyx_k_merge_symbol_table, sizeof(__pyx_k_merge_symbol_table), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_minimize, __pyx_k_minimize, sizeof(__pyx_k_minimize), 0, 0, 1, 1},
  {&__pyx_n_s_mode, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_mpdt, __pyx_k_mpdt, sizeof(__pyx_k_mpdt), 0, 0, 1, 1},
  {&__pyx_n_s_mpdt_expand, __pyx_k_mpdt_expand, sizeof(__pyx_k_mpdt_expand), 0, 0, 1, 1},
  {&__pyx_n_s_mpdt_reverse, __pyx_k_mpdt_reverse, sizeof(__pyx_k_mpdt_reverse), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_b_neither, __pyx_k_neither, sizeof(__pyx_k_neither), 0, 0, 0, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_n_s_next, __pyx_k_next, sizeof(__pyx_k_next), 0, 0, 1, 1},
  {&__pyx_n_s_nonterm, __pyx_k_nonterm, sizeof(__pyx_k_nonterm), 0, 0, 1, 1},
  {&__pyx_n_s_nt, __pyx_k_nt, sizeof(__pyx_k_nt), 0, 0, 1, 1},
  {&__pyx_n_b_obl, __pyx_k_obl, sizeof(__pyx_k_obl), 0, 0, 0, 1},
  {&__pyx_n_s_open, __pyx_k_open, sizeof(__pyx_k_open), 0, 0, 1, 1},
  {&__pyx_n_s_optimize, __pyx_k_optimize, sizeof(__pyx_k_optimize), 0, 0, 1, 1},
  {&__pyx_n_s_opts, __pyx_k_opts, sizeof(__pyx_k_opts), 0, 0, 1, 1},
  {&__pyx_n_s_ostring, __pyx_k_ostring, sizeof(__pyx_k_ostring), 0, 0, 1, 1},
  {&__pyx_n_s_ostrings, __pyx_k_ostrings, sizeof(__pyx_k_ostrings), 0, 0, 1, 1},
  {&__pyx_n_s_output_token_type, __pyx_k_output_token_type, sizeof(__pyx_k_output_token_type), 0, 0, 1, 1},
  {&__pyx_n_s_pairs, __pyx_k_pairs, sizeof(__pyx_k_pairs), 0, 0, 1, 1},
  {&__pyx_n_b_paren, __pyx_k_paren, sizeof(__pyx_k_paren), 0, 0, 0, 1},
  {&__pyx_n_s_parens, __pyx_k_parens, sizeof(__pyx_k_parens), 0, 0, 1, 1},
  {&__pyx_n_s_patch, __pyx_k_patch, sizeof(__pyx_k_patch), 0, 0, 1, 1},
  {&__pyx_n_s_path_gc, __pyx_k_path_gc, sizeof(__pyx_k_path_gc), 0, 0, 1, 1},
  {&__pyx_n_s_paths, __pyx_k_paths, sizeof(__pyx_k_paths), 0, 0, 1, 1},
  {&__pyx_n_s_pdt, __pyx_k_pdt, sizeof(__pyx_k_pdt), 0, 0, 1, 1},
  {&__pyx_n_s_pdt_compose, __pyx_k_pdt_compose, sizeof(__pyx_k_pdt_compose), 0, 0, 1, 1},
  {&__pyx_n_s_pdt_expand, __pyx_k_pdt_expand, sizeof(__pyx_k_pdt_expand), 0, 0, 1, 1},
  {&__pyx_n_s_pdt_parser_type, __pyx_k_pdt_parser_type, sizeof(__pyx_k_pdt_parser_type), 0, 0, 1, 1},
  {&__pyx_n_s_pdt_replace, __pyx_k_pdt_replace, sizeof(__pyx_k_pdt_replace), 0, 0, 1, 1},
  {&__pyx_n_s_pdt_reverse, __pyx_k_pdt_reverse, sizeof(__pyx_k_pdt_reverse), 0, 0, 1, 1},
  {&__pyx_n_s_pdt_shortestpath, __pyx_k_pdt_shortestpath, sizeof(__pyx_k_pdt_shortestpath), 0, 0, 1, 1},
  {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
  {&__pyx_n_s_plus, __pyx_k_plus, sizeof(__pyx_k_plus), 0, 0, 1, 1},
  {&__pyx_n_s_pop, __pyx_k_pop, sizeof(__pyx_k_pop), 0, 0, 1, 1},
  {&__pyx_n_s_power, __pyx_k_power, sizeof(__pyx_k_power), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_project, __pyx_k_project, sizeof(__pyx_k_project), 0, 0, 1, 1},
  {&__pyx_n_s_prune, __pyx_k_prune, sizeof(__pyx_k_prune), 0, 0, 1, 1},
  {&__pyx_n_s_push, __pyx_k_push, sizeof(__pyx_k_push), 0, 0, 1, 1},
  {&__pyx_n_s_pynini, __pyx_k_pynini, sizeof(__pyx_k_pynini), 0, 0, 1, 1},
  {&__pyx_kp_s_pynini_pyx, __pyx_k_pynini_pyx, sizeof(__pyx_k_pynini_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_pywrapfst, __pyx_k_pywrapfst, sizeof(__pyx_k_pywrapfst), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_Far, __pyx_k_pyx_unpickle_Far, sizeof(__pyx_k_pyx_unpickle_Far), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_MPdtParentheses, __pyx_k_pyx_unpickle_MPdtParentheses, sizeof(__pyx_k_pyx_unpickle_MPdtParentheses), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_PdtParentheses, __pyx_k_pyx_unpickle_PdtParentheses, sizeof(__pyx_k_pyx_unpickle_PdtParentheses), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_queue_type, __pyx_k_queue_type, sizeof(__pyx_k_queue_type), 0, 0, 1, 1},
  {&__pyx_n_b_r, __pyx_k_r, sizeof(__pyx_k_r), 0, 0, 0, 1},
  {&__pyx_n_s_ral, __pyx_k_ral, sizeof(__pyx_k_ral), 0, 0, 1, 1},
  {&__pyx_n_s_randequivalent, __pyx_k_randequivalent, sizeof(__pyx_k_randequivalent), 0, 0, 1, 1},
  {&__pyx_n_s_randgen, __pyx_k_randgen, sizeof(__pyx_k_randgen), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_read, __pyx_k_read, sizeof(__pyx_k_read), 0, 0, 1, 1},
  {&__pyx_n_s_read_from_string, __pyx_k_read_from_string, sizeof(__pyx_k_read_from_string), 0, 0, 1, 1},
  {&__pyx_n_s_read_from_string_2, __pyx_k_read_from_string_2, sizeof(__pyx_k_read_from_string_2), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_relabel_pairs, __pyx_k_relabel_pairs, sizeof(__pyx_k_relabel_pairs), 0, 0, 1, 1},
  {&__pyx_n_s_relabel_tables, __pyx_k_relabel_tables, sizeof(__pyx_k_relabel_tables), 0, 0, 1, 1},
  {&__pyx_n_s_rep, __pyx_k_rep, sizeof(__pyx_k_rep), 0, 0, 1, 1},
  {&__pyx_n_s_replace, __pyx_k_replace, sizeof(__pyx_k_replace), 0, 0, 1, 1},
  {&__pyx_n_s_replacement, __pyx_k_replacement, sizeof(__pyx_k_replacement), 0, 0, 1, 1},
  {&__pyx_n_s_replacements, __pyx_k_replacements, sizeof(__pyx_k_replacements), 0, 0, 1, 1},
  {&__pyx_n_s_reset, __pyx_k_reset, sizeof(__pyx_k_reset), 0, 0, 1, 1},
  {&__pyx_n_s_rest, __pyx_k_rest, sizeof(__pyx_k_rest), 0, 0, 1, 1},
  {&__pyx_n_s_result, __pyx_k_result, sizeof(__pyx_k_result), 0, 0, 1, 1},
  {&__pyx_n_s_result_fst, __pyx_k_result_fst, sizeof(__pyx_k_result_fst), 0, 0, 1, 1},
  {&__pyx_n_s_result_parens, __pyx_k_result_parens, sizeof(__pyx_k_result_parens), 0, 0, 1, 1},
  {&__pyx_n_s_return_arc_labeling, __pyx_k_return_arc_labeling, sizeof(__pyx_k_return_arc_labeling), 0, 0, 1, 1},
  {&__pyx_n_s_return_label, __pyx_k_return_label, sizeof(__pyx_k_return_label), 0, 0, 1, 1},
  {&__pyx_n_s_reverse, __pyx_k_reverse, sizeof(__pyx_k_reverse), 0, 0, 1, 1},
  {&__pyx_n_s_reweight, __pyx_k_reweight, sizeof(__pyx_k_reweight), 0, 0, 1, 1},
  {&__pyx_n_s_rho, __pyx_k_rho, sizeof(__pyx_k_rho), 0, 0, 1, 1},
  {&__pyx_n_s_rhs, __pyx_k_rhs, sizeof(__pyx_k_rhs), 0, 0, 1, 1},
  {&__pyx_n_s_rmepsilon, __pyx_k_rmepsilon, sizeof(__pyx_k_rmepsilon), 0, 0, 1, 1},
  {&__pyx_n_s_root, __pyx_k_root, sizeof(__pyx_k_root), 0, 0, 1, 1},
  {&__pyx_n_s_root_fst, __pyx_k_root_fst, sizeof(__pyx_k_root_fst), 0, 0, 1, 1},
  {&__pyx_kp_s_self__paths_cannot_be_converted, __pyx_k_self__paths_cannot_be_converted, sizeof(__pyx_k_self__paths_cannot_be_converted), 0, 0, 1, 0},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_shortestdistance, __pyx_k_shortestdistance, sizeof(__pyx_k_shortestdistance), 0, 0, 1, 1},
  {&__pyx_n_s_shortestdistance_patch, __pyx_k_shortestdistance_patch, sizeof(__pyx_k_shortestdistance_patch), 0, 0, 1, 1},
  {&__pyx_n_s_shortestdistance_patch_locals_p, __pyx_k_shortestdistance_patch_locals_p, sizeof(__pyx_k_shortestdistance_patch_locals_p), 0, 0, 1, 1},
  {&__pyx_n_s_shortestpath, __pyx_k_shortestpath, sizeof(__pyx_k_shortestpath), 0, 0, 1, 1},
  {&__pyx_n_s_sigma_star, __pyx_k_sigma_star, sizeof(__pyx_k_sigma_star), 0, 0, 1, 1},
  {&__pyx_n_b_standard, __pyx_k_standard, sizeof(__pyx_k_standard), 0, 0, 0, 1},
  {&__pyx_n_s_statemap, __pyx_k_statemap, sizeof(__pyx_k_statemap), 0, 0, 1, 1},
  {&__pyx_n_s_stringify, __pyx_k_stringify, sizeof(__pyx_k_stringify), 0, 0, 1, 1},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_super, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
  {&__pyx_n_s_synchronize, __pyx_k_synchronize, sizeof(__pyx_k_synchronize), 0, 0, 1, 1},
  {&__pyx_n_s_t, __pyx_k_t, sizeof(__pyx_k_t), 0, 0, 1, 1},
  {&__pyx_n_s_tau, __pyx_k_tau, sizeof(__pyx_k_tau), 0, 0, 1, 1},
  {&__pyx_n_s_tb, __pyx_k_tb, sizeof(__pyx_k_tb), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_times, __pyx_k_times, sizeof(__pyx_k_times), 0, 0, 1, 1},
  {&__pyx_n_s_token_type, __pyx_k_token_type, sizeof(__pyx_k_token_type), 0, 0, 1, 1},
  {&__pyx_n_s_topsort, __pyx_k_topsort, sizeof(__pyx_k_topsort), 0, 0, 1, 1},
  {&__pyx_n_s_transducer, __pyx_k_transducer, sizeof(__pyx_k_transducer), 0, 0, 1, 1},
  {&__pyx_n_s_u, __pyx_k_u, sizeof(__pyx_k_u), 0, 0, 1, 1},
  {&__pyx_n_s_union, __pyx_k_union, sizeof(__pyx_k_union), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_upper, __pyx_k_upper, sizeof(__pyx_k_upper), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_warning, __pyx_k_warning, sizeof(__pyx_k_warning), 0, 0, 1, 1},
  {&__pyx_n_s_wc, __pyx_k_wc, sizeof(__pyx_k_wc), 0, 0, 1, 1},
  {&__pyx_n_s_weight, __pyx_k_weight, sizeof(__pyx_k_weight), 0, 0, 1, 1},
  {&__pyx_n_s_weights, __pyx_k_weights, sizeof(__pyx_k_weights), 0, 0, 1, 1},
  {&__pyx_n_s_wraps, __pyx_k_wraps, sizeof(__pyx_k_wraps), 0, 0, 1, 1},
  {&__pyx_n_s_write, __pyx_k_write, sizeof(__pyx_k_write), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 162, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 324, __pyx_L1_error)
  __pyx_builtin_KeyError = __Pyx_GetBuiltinName(__pyx_n_s_KeyError); if (!__pyx_builtin_KeyError) __PYX_ERR(0, 328, __pyx_L1_error)
  __pyx_builtin_super = __Pyx_GetBuiltinName(__pyx_n_s_super); if (!__pyx_builtin_super) __PYX_ERR(0, 541, __pyx_L1_error)
  __pyx_builtin_id = __Pyx_GetBuiltinName(__pyx_n_s_id); if (!__pyx_builtin_id) __PYX_ERR(0, 1547, __pyx_L1_error)
  __pyx_builtin_StopIteration = __Pyx_GetBuiltinName(__pyx_n_s_StopIteration); if (!__pyx_builtin_StopIteration) __PYX_ERR(0, 2147, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "pynini.pyx":330
 *       raise KeyError(label)
 *     if label != sink_syms.AddSymbol(symbol, label):
 *       raise FstOpError(             # <<<<<<<<<<<<<<
 *           "Unable to resolve parentheses symbol table conflict")
 *     label = parens[i].second
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_Unable_to_resolve_parentheses_sy); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "pynini.pyx":337
 *       raise KeyError(label)
 *     if label != sink_syms.AddSymbol(symbol, label):
 *       raise FstOpError(             # <<<<<<<<<<<<<<
 *           "Unable to resolve parentheses symbol table conflict")
 * 
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_Unable_to_resolve_parentheses_sy); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "pynini.pyx":527
 *       ttype = _get_token_type(tostring(token_type))
 *       if ttype == SYMBOL:
 *         raise FstArgError("Invalid token type")             # <<<<<<<<<<<<<<
 *     cdef string result
 *     if not PrintString(deref(self._fst), addr(result), ttype, syms):
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_Invalid_token_type); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 527, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "pynini.pyx":530
 *     cdef string result
 *     if not PrintString(deref(self._fst), addr(result), ttype, syms):
 *       raise FstArgError("FST is not a string")             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_FST_is_not_a_string); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "pynini.pyx":908
 *   result._check_mutating_imethod()
 *   if not success:
 *     raise FstStringCompilationError("String compilation failed")             # <<<<<<<<<<<<<<
 *   return result
 * 
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_String_compilation_failed); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 908, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "pynini.pyx":977
 *     upper = istring
 *   if upper._fst.get().Properties(kAcceptor, True) != kAcceptor:
 *     logging.warning("Expecting acceptor or string argument, got a transducer")             # <<<<<<<<<<<<<<
 *   # Sets up lower language, and passes weight.
 *   if not isinstance(ostring, Fst):
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_Expecting_acceptor_or_string_arg); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 977, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "pynini.pyx":985
 *     lower = ostring
 *     if lower._fst.get().Properties(kAcceptor, True) != kAcceptor:
 *       logging.warning("Expecting acceptor or string argument, got a transducer")             # <<<<<<<<<<<<<<
 *   # Actually computes cross-product.
 *   CrossProduct(deref(upper._fst), deref(lower._fst), result._mfst.get(),
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_Expecting_acceptor_or_string_arg); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "pynini.pyx":1213
 *                     itype, otype, isyms, osyms, attach_input_symbols,
 *                     attach_output_symbols):
 *     raise FstIOError("Read failed")             # <<<<<<<<<<<<<<
 *   return result
 * 
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_Read_failed); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 1213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "pynini.pyx":1298
 *   if not StringMap(string_lines, result._mfst.get(), itype, otype, isyms, osyms,
 *                    attach_input_symbols, attach_output_symbols):
 *     raise FstArgError("String map compilation failed")             # <<<<<<<<<<<<<<
 *   return result
 * 
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_String_map_compilation_failed); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 1298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "pynini.pyx":1312
 * def _1arg_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst fst = _compile_or_copy_Fst(arg)
 *     return _init_Fst_from_MutableFst(fnc(fst, *args, **kwargs))
 */
  __pyx_tuple__10 = PyTuple_Pack(4, __pyx_n_s_arg, __pyx_n_s_args, __pyx_n_s_kwargs, __pyx_n_s_fst); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 1312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);
  __pyx_codeobj__11 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARARGS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__10, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pynini_pyx, __pyx_n_s_patch, 1312, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__11)) __PYX_ERR(0, 1312, __pyx_L1_error)

  /* "pynini.pyx":1333
 * def _shortestdistance_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst fst = _compile_or_copy_Fst(arg)
 *     return fnc(fst, *args, **kwargs)
 */
  __pyx_tuple__12 = PyTuple_Pack(4, __pyx_n_s_arg, __pyx_n_s_args, __pyx_n_s_kwargs, __pyx_n_s_fst); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 1333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);
  __pyx_codeobj__13 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARARGS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pynini_pyx, __pyx_n_s_patch, 1333, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__13)) __PYX_ERR(0, 1333, __pyx_L1_error)

  /* "pynini.pyx":1349
 * def _compose_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst lhs
 *     cdef Fst rhs
 */
  __pyx_tuple__14 = PyTuple_Pack(6, __pyx_n_s_arg1, __pyx_n_s_arg2, __pyx_n_s_args, __pyx_n_s_kwargs, __pyx_n_s_lhs, __pyx_n_s_rhs); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 1349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);
  __pyx_codeobj__15 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARARGS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pynini_pyx, __pyx_n_s_patch, 1349, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__15)) __PYX_ERR(0, 1349, __pyx_L1_error)

  /* "pynini.pyx":1372
 *     (lhs, rhs) = _compile_or_copy_two_Fsts(arg1, arg2)
 *     if rhs._mfst.get().Properties(kDifferenceRhs, True) != kDifferenceRhs:
 *       raise FstOpError("2nd argument must be an unweighted acceptor")             # <<<<<<<<<<<<<<
 *     MergeSymbols(lhs._mfst.get(), rhs._mfst.get(),
 *                  MERGE_LEFT_OUTPUT_AND_RIGHT_INPUT_SYMBOLS)
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_2nd_argument_must_be_an_unweight); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 1372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "pynini.pyx":1367
 * def _difference_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst lhs
 *     cdef Fst rhs
 */
  __pyx_tuple__17 = PyTuple_Pack(6, __pyx_n_s_arg1, __pyx_n_s_arg2, __pyx_n_s_args, __pyx_n_s_kwargs, __pyx_n_s_lhs, __pyx_n_s_rhs); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 1367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);
  __pyx_codeobj__18 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARARGS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__17, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pynini_pyx, __pyx_n_s_patch, 1367, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__18)) __PYX_ERR(0, 1367, __pyx_L1_error)

  /* "pynini.pyx":1391
 * def _comp_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst lhs
 *     cdef Fst rhs
 */
  __pyx_tuple__19 = PyTuple_Pack(6, __pyx_n_s_arg1, __pyx_n_s_arg2, __pyx_n_s_args, __pyx_n_s_kwargs, __pyx_n_s_lhs, __pyx_n_s_rhs); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 1391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);
  __pyx_codeobj__20 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARARGS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pynini_pyx, __pyx_n_s_patch, 1391, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__20)) __PYX_ERR(0, 1391, __pyx_L1_error)

  /* "pynini.pyx":1408
 * def _comp_merge_patch(fnc):
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst lhs
 *     cdef Fst rhs
 */
  __pyx_tuple__21 = PyTuple_Pack(6, __pyx_n_s_arg1, __pyx_n_s_arg2, __pyx_n_s_args, __pyx_n_s_kwargs, __pyx_n_s_lhs, __pyx_n_s_rhs); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 1408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);
  __pyx_codeobj__22 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARARGS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pynini_pyx, __pyx_n_s_patch, 1408, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__22)) __PYX_ERR(0, 1408, __pyx_L1_error)

  /* "pynini.pyx":2003
 *               parens._assign, result._mfst.get(), deref(opts), left_mpdt)
 *   if result._fst.get().Properties(kError, True) == kError:
 *     raise FstOpError("Operation failed")             # <<<<<<<<<<<<<<
 *   # If the "expand" filter is selected, all parentheses have been mapped to
 *   # epsilon. This conveniently removes the arcs that result.
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_s_Operation_failed); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 2003, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "pynini.pyx":2138
 *                                                   itype, otype, isyms, osyms))
 *     if self._paths.get().Error():
 *       raise FstArgError("FST is not acyclic")             # <<<<<<<<<<<<<<
 * 
 *   # This just registers this class as a possible iterator.
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_s_FST_is_not_acyclic); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 2138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._paths cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._paths cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_s_self__paths_cannot_be_converted); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "(tree fragment)":4
 *     raise TypeError("self._paths cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._paths cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_kp_s_self__paths_cannot_be_converted); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "pynini.pyx":2669
 *   # The junk in the `functools.wraps` decorator is due to a long-standing bug
 *   # in Python 2.7 (https://bugs.python.org/issue3445).
 *   @functools.wraps(fnc, ("__name__", "__doc__"))             # <<<<<<<<<<<<<<
 *   def patch(arg1, *args, **kwargs):
 *     cdef Fst result = _compile_or_copy_Fst(arg1)
 */
  __pyx_tuple__27 = PyTuple_Pack(2, __pyx_n_s_name_2, __pyx_n_s_doc); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 2669, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "pynini.pyx":2670
 *   # in Python 2.7 (https://bugs.python.org/issue3445).
 *   @functools.wraps(fnc, ("__name__", "__doc__"))
 *   def patch(arg1, *args, **kwargs):             # <<<<<<<<<<<<<<
 *     cdef Fst result = _compile_or_copy_Fst(arg1)
 *     fnc(result, *args, **kwargs)
 */
  __pyx_tuple__28 = PyTuple_Pack(4, __pyx_n_s_arg1, __pyx_n_s_args, __pyx_n_s_kwargs, __pyx_n_s_result); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(0, 2670, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);
  __pyx_codeobj__29 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARARGS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pynini_pyx, __pyx_n_s_patch, 2670, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__29)) __PYX_ERR(0, 2670, __pyx_L1_error)

  /* "pynini.pyx":1302
 * 
 * 
 * def get_byte_symbol_table():             # <<<<<<<<<<<<<<
 *   """Returns a symbol table containing all bytes."""
 *   return _init_SymbolTable(GetByteSymbolTable())
 */
  __pyx_codeobj__30 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pynini_pyx, __pyx_n_s_get_byte_symbol_table, 1302, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__30)) __PYX_ERR(0, 1302, __pyx_L1_error)

  /* "pynini.pyx":1310
 * 
 * 
 * def _1arg_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg, *args, **kwargs):
 */
  __pyx_tuple__31 = PyTuple_Pack(3, __pyx_n_s_fnc, __pyx_n_s_patch, __pyx_n_s_patch); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(0, 1310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);
  __pyx_codeobj__32 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__31, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pynini_pyx, __pyx_n_s_1arg_patch, 1310, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__32)) __PYX_ERR(0, 1310, __pyx_L1_error)

  /* "pynini.pyx":1331
 * 
 * 
 * def _shortestdistance_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg, *args, **kwargs):
 */
  __pyx_tuple__33 = PyTuple_Pack(3, __pyx_n_s_fnc, __pyx_n_s_patch, __pyx_n_s_patch); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(0, 1331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);
  __pyx_codeobj__34 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__33, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pynini_pyx, __pyx_n_s_shortestdistance_patch, 1331, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__34)) __PYX_ERR(0, 1331, __pyx_L1_error)

  /* "pynini.pyx":1347
 * 
 * 
 * def _compose_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */
  __pyx_tuple__35 = PyTuple_Pack(3, __pyx_n_s_fnc, __pyx_n_s_patch, __pyx_n_s_patch); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(0, 1347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);
  __pyx_codeobj__36 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__35, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pynini_pyx, __pyx_n_s_compose_patch, 1347, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__36)) __PYX_ERR(0, 1347, __pyx_L1_error)

  /* "pynini.pyx":1365
 * 
 * 
 * def _difference_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */
  __pyx_tuple__37 = PyTuple_Pack(3, __pyx_n_s_fnc, __pyx_n_s_patch, __pyx_n_s_patch); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(0, 1365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);
  __pyx_codeobj__38 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pynini_pyx, __pyx_n_s_difference_patch, 1365, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__38)) __PYX_ERR(0, 1365, __pyx_L1_error)

  /* "pynini.pyx":1389
 * 
 * 
 * def _comp_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */
  __pyx_tuple__39 = PyTuple_Pack(3, __pyx_n_s_fnc, __pyx_n_s_patch, __pyx_n_s_patch); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(0, 1389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);
  __pyx_codeobj__40 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__39, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pynini_pyx, __pyx_n_s_comp_patch, 1389, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__40)) __PYX_ERR(0, 1389, __pyx_L1_error)

  /* "pynini.pyx":1406
 * 
 * 
 * def _comp_merge_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */
  __pyx_tuple__41 = PyTuple_Pack(3, __pyx_n_s_fnc, __pyx_n_s_patch, __pyx_n_s_patch); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(0, 1406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);
  __pyx_codeobj__42 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pynini_pyx, __pyx_n_s_comp_merge_patch, 1406, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__42)) __PYX_ERR(0, 1406, __pyx_L1_error)

  /* "pynini.pyx":1422
 * 
 * 
 * def replace(root,             # <<<<<<<<<<<<<<
 *             replacements,
 *             call_arc_labeling=b"neither",
 */
  __pyx_tuple__43 = PyTuple_Pack(17, __pyx_n_s_root, __pyx_n_s_replacements, __pyx_n_s_call_arc_labeling, __pyx_n_s_return_arc_labeling, __pyx_n_s_epsilon_on_replace, __pyx_n_s_return_label, __pyx_n_s_root_fst, __pyx_n_s_arc_type, __pyx_n_s_nonterm, __pyx_n_s_replacement, __pyx_n_s_pairs, __pyx_n_s_nt, __pyx_n_s_rep, __pyx_n_s_cal, __pyx_n_s_ral, __pyx_n_s_opts, __pyx_n_s_result); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(0, 1422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);
  __pyx_codeobj__44 = (PyObject*)__Pyx_PyCode_New(6, 0, 17, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__43, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pynini_pyx, __pyx_n_s_replace, 1422, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__44)) __PYX_ERR(0, 1422, __pyx_L1_error)

  /* "pynini.pyx":1499
 * 
 * 
 * def union(*args):             # <<<<<<<<<<<<<<
 *   """
 *   union(*args)
 */
  __pyx_tuple__45 = PyTuple_Pack(5, __pyx_n_s_args, __pyx_n_s_first, __pyx_n_s_rest, __pyx_n_s_lhs, __pyx_n_s_rhs); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(0, 1499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);
  __pyx_codeobj__46 = (PyObject*)__Pyx_PyCode_New(0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARARGS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__45, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pynini_pyx, __pyx_n_s_union, 1499, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__46)) __PYX_ERR(0, 1499, __pyx_L1_error)

  /* "pynini.pyx":1625
 * 
 * 
 * def pdt_compose(ifst1,             # <<<<<<<<<<<<<<
 *                 ifst2,
 *                 PdtParentheses parens,
 */
  __pyx_tuple__47 = PyTuple_Pack(10, __pyx_n_s_ifst1, __pyx_n_s_ifst2, __pyx_n_s_parens, __pyx_n_s_compose_filter, __pyx_n_s_left_pdt, __pyx_n_s_lhs, __pyx_n_s_rhs, __pyx_n_s_result, __pyx_n_s_compose_filter_enum, __pyx_n_s_opts); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(0, 1625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);
  __pyx_codeobj__48 = (PyObject*)__Pyx_PyCode_New(5, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__47, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pynini_pyx, __pyx_n_s_pdt_compose, 1625, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__48)) __PYX_ERR(0, 1625, __pyx_L1_error)

  /* "pynini.pyx":1682
 * 
 * 
 * def pdt_expand(ipdt,             # <<<<<<<<<<<<<<
 *                PdtParentheses parens,
 *                bool connect=True,
 */
  __pyx_tuple__49 = PyTuple_Pack(9, __pyx_n_s_ipdt, __pyx_n_s_parens, __pyx_n_s_connect, __pyx_n_s_keep_parentheses, __pyx_n_s_weight, __pyx_n_s_pdt, __pyx_n_s_result, __pyx_n_s_wc, __pyx_n_s_opts); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(0, 1682, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);
  __pyx_codeobj__50 = (PyObject*)__Pyx_PyCode_New(5, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__49, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pynini_pyx, __pyx_n_s_pdt_expand, 1682, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__50)) __PYX_ERR(0, 1682, __pyx_L1_error)

  /* "pynini.pyx":1724
 * 
 * 
 * def pdt_replace(root, replacements, pdt_parser_type=b"left"):             # <<<<<<<<<<<<<<
 *   """
 *   pdt_replace(root, replacements, pdt_parser_type="left")
 */
  __pyx_tuple__51 = PyTuple_Pack(12, __pyx_n_s_root, __pyx_n_s_replacements, __pyx_n_s_pdt_parser_type, __pyx_n_s_root_fst, __pyx_n_s_arc_type, __pyx_n_s_nonterm, __pyx_n_s_replacement, __pyx_n_s_pairs, __pyx_n_s_nt, __pyx_n_s_rep, __pyx_n_s_result, __pyx_n_s_parens); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(0, 1724, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);
  __pyx_codeobj__52 = (PyObject*)__Pyx_PyCode_New(3, 0, 12, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__51, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pynini_pyx, __pyx_n_s_pdt_replace, 1724, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__52)) __PYX_ERR(0, 1724, __pyx_L1_error)

  /* "pynini.pyx":1785
 * 
 * 
 * def pdt_reverse(ipdt, PdtParentheses parens):             # <<<<<<<<<<<<<<
 *   """
 *   pdt_reverse(ipdt, parens)
 */
  __pyx_tuple__53 = PyTuple_Pack(4, __pyx_n_s_ipdt, __pyx_n_s_parens, __pyx_n_s_pdt, __pyx_n_s_result); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(0, 1785, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);
  __pyx_codeobj__54 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__53, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pynini_pyx, __pyx_n_s_pdt_reverse, 1785, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__54)) __PYX_ERR(0, 1785, __pyx_L1_error)

  /* "pynini.pyx":1808
 * 
 * 
 * def pdt_shortestpath(ipdt,             # <<<<<<<<<<<<<<
 *                      PdtParentheses parens,
 *                      queue_type=b"fifo",
 */
  __pyx_tuple__55 = PyTuple_Pack(8, __pyx_n_s_ipdt, __pyx_n_s_parens, __pyx_n_s_queue_type, __pyx_n_s_keep_parentheses, __pyx_n_s_path_gc, __pyx_n_s_pdt, __pyx_n_s_result, __pyx_n_s_opts); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(0, 1808, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);
  __pyx_codeobj__56 = (PyObject*)__Pyx_PyCode_New(5, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__55, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pynini_pyx, __pyx_n_s_pdt_shortestpath, 1808, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__56)) __PYX_ERR(0, 1808, __pyx_L1_error)

  /* "pynini.pyx":2014
 * 
 * 
 * def mpdt_expand(impdt, MPdtParentheses parens, bool connect=True,             # <<<<<<<<<<<<<<
 *                 bool keep_parentheses=False):
 *   """
 */
  __pyx_tuple__57 = PyTuple_Pack(7, __pyx_n_s_impdt, __pyx_n_s_parens, __pyx_n_s_connect, __pyx_n_s_keep_parentheses, __pyx_n_s_mpdt, __pyx_n_s_result, __pyx_n_s_opts); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(0, 2014, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);
  __pyx_codeobj__58 = (PyObject*)__Pyx_PyCode_New(4, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__57, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pynini_pyx, __pyx_n_s_mpdt_expand, 2014, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__58)) __PYX_ERR(0, 2014, __pyx_L1_error)

  /* "pynini.pyx":2051
 * 
 * 
 * def mpdt_reverse(impdt, MPdtParentheses parens):             # <<<<<<<<<<<<<<
 *   """
 *   mpdt_reverse(impdt, parens)
 */
  __pyx_tuple__59 = PyTuple_Pack(5, __pyx_n_s_impdt, __pyx_n_s_parens, __pyx_n_s_mpdt, __pyx_n_s_result_fst, __pyx_n_s_result_parens); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(0, 2051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);
  __pyx_codeobj__60 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__59, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pynini_pyx, __pyx_n_s_mpdt_reverse, 2051, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__60)) __PYX_ERR(0, 2051, __pyx_L1_error)

  /* "pynini.pyx":2666
 * 
 * 
 * def _copy_patch(fnc):             # <<<<<<<<<<<<<<
 *   # The junk in the `functools.wraps` decorator is due to a long-standing bug
 *   # in Python 2.7 (https://bugs.python.org/issue3445).
 */
  __pyx_tuple__61 = PyTuple_Pack(3, __pyx_n_s_fnc, __pyx_n_s_patch, __pyx_n_s_patch); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(0, 2666, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);
  __pyx_codeobj__62 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__61, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pynini_pyx, __pyx_n_s_copy_patch, 2666, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__62)) __PYX_ERR(0, 2666, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __pyx_unpickle_PdtParentheses(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     if __pyx_checksum != 0x078cdb7:
 *         from pickle import PickleError as __pyx_PickleError
 */
  __pyx_tuple__63 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);
  __pyx_codeobj__64 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__63, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_PdtParentheses, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__64)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__65 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);
  __pyx_codeobj__66 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__65, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_MPdtParentheses, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__66)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__67 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);
  __pyx_codeobj__68 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__67, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Far, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__68)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_7916983 = PyInt_FromLong(7916983L); if (unlikely(!__pyx_int_7916983)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_127029315 = PyInt_FromLong(127029315L); if (unlikely(!__pyx_int_127029315)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_213039201 = PyInt_FromLong(213039201L); if (unlikely(!__pyx_int_213039201)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_modinit_global_init_code(void); /*proto*/
static int __Pyx_modinit_variable_export_code(void); /*proto*/
static int __Pyx_modinit_function_export_code(void); /*proto*/
static int __Pyx_modinit_type_init_code(void); /*proto*/
static int __Pyx_modinit_type_import_code(void); /*proto*/
static int __Pyx_modinit_variable_import_code(void); /*proto*/
static int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_ptype_9pywrapfst__MutableFst = __Pyx_ImportType("pywrapfst", "_MutableFst", sizeof(struct __pyx_obj_9pywrapfst__MutableFst), 1); if (unlikely(!__pyx_ptype_9pywrapfst__MutableFst)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_9pywrapfst__MutableFst = (struct __pyx_vtabstruct_9pywrapfst__MutableFst*)__Pyx_GetVtable(__pyx_ptype_9pywrapfst__MutableFst->tp_dict); if (unlikely(!__pyx_vtabptr_9pywrapfst__MutableFst)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_6pynini_Fst = &__pyx_vtable_6pynini_Fst;
  __pyx_vtable_6pynini_Fst.__pyx_base = *__pyx_vtabptr_9pywrapfst__MutableFst;
  __pyx_vtable_6pynini_Fst.__pyx_base.__pyx_base.copy = (struct __pyx_obj_9pywrapfst__Fst *(*)(struct __pyx_obj_9pywrapfst__Fst *, int __pyx_skip_dispatch))__pyx_f_6pynini_3Fst_copy__pyx_wrap_1;
  __pyx_vtable_6pynini_Fst._from_MutableFstClass = (void (*)(struct __pyx_obj_6pynini_Fst *, fst::script::MutableFstClass *))__pyx_f_6pynini_3Fst__from_MutableFstClass;
  __pyx_vtable_6pynini_Fst.paths = (struct __pyx_obj_6pynini_StringPathIterator *(*)(struct __pyx_obj_6pynini_Fst *, int __pyx_skip_dispatch, struct __pyx_opt_args_6pynini_3Fst_paths *__pyx_optional_args))__pyx_f_6pynini_3Fst_paths;
  __pyx_vtable_6pynini_Fst.stringify = (std::string (*)(struct __pyx_obj_6pynini_Fst *, int __pyx_skip_dispatch, struct __pyx_opt_args_6pynini_3Fst_stringify *__pyx_optional_args))__pyx_f_6pynini_3Fst_stringify;
  __pyx_vtable_6pynini_Fst.copy = (struct __pyx_obj_6pynini_Fst *(*)(struct __pyx_obj_6pynini_Fst *, int __pyx_skip_dispatch))__pyx_f_6pynini_3Fst_copy;
  __pyx_vtable_6pynini_Fst._optimize = (void (*)(struct __pyx_obj_6pynini_Fst *, struct __pyx_opt_args_6pynini_3Fst__optimize *__pyx_optional_args))__pyx_f_6pynini_3Fst__optimize;
  __pyx_type_6pynini_Fst.tp_base = __pyx_ptype_9pywrapfst__MutableFst;
  if (PyType_Ready(&__pyx_type_6pynini_Fst) < 0) __PYX_ERR(0, 364, __pyx_L1_error)
  __pyx_type_6pynini_Fst.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pynini_Fst.tp_dictoffset && __pyx_type_6pynini_Fst.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pynini_Fst.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_6pynini_Fst.tp_dict, __pyx_vtabptr_6pynini_Fst) < 0) __PYX_ERR(0, 364, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "Fst", (PyObject *)&__pyx_type_6pynini_Fst) < 0) __PYX_ERR(0, 364, __pyx_L1_error)
  __pyx_ptype_6pynini_Fst = &__pyx_type_6pynini_Fst;
  __pyx_vtabptr_6pynini_PdtParentheses = &__pyx_vtable_6pynini_PdtParentheses;
  __pyx_vtable_6pynini_PdtParentheses.copy = (struct __pyx_obj_6pynini_PdtParentheses *(*)(struct __pyx_obj_6pynini_PdtParentheses *, int __pyx_skip_dispatch))__pyx_f_6pynini_14PdtParentheses_copy;
  __pyx_vtable_6pynini_PdtParentheses.add_pair = (void (*)(struct __pyx_obj_6pynini_PdtParentheses *, __pyx_t_10basictypes_int64, __pyx_t_10basictypes_int64, int __pyx_skip_dispatch))__pyx_f_6pynini_14PdtParentheses_add_pair;
  __pyx_vtable_6pynini_PdtParentheses.write = (void (*)(struct __pyx_obj_6pynini_PdtParentheses *, PyObject *, int __pyx_skip_dispatch))__pyx_f_6pynini_14PdtParentheses_write;
  if (PyType_Ready(&__pyx_type_6pynini_PdtParentheses) < 0) __PYX_ERR(0, 1528, __pyx_L1_error)
  __pyx_type_6pynini_PdtParentheses.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pynini_PdtParentheses.tp_dictoffset && __pyx_type_6pynini_PdtParentheses.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pynini_PdtParentheses.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_6pynini_PdtParentheses.tp_dict, __pyx_vtabptr_6pynini_PdtParentheses) < 0) __PYX_ERR(0, 1528, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "PdtParentheses", (PyObject *)&__pyx_type_6pynini_PdtParentheses) < 0) __PYX_ERR(0, 1528, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6pynini_PdtParentheses) < 0) __PYX_ERR(0, 1528, __pyx_L1_error)
  __pyx_ptype_6pynini_PdtParentheses = &__pyx_type_6pynini_PdtParentheses;
  __pyx_vtabptr_6pynini_MPdtParentheses = &__pyx_vtable_6pynini_MPdtParentheses;
  __pyx_vtable_6pynini_MPdtParentheses.copy = (struct __pyx_obj_6pynini_MPdtParentheses *(*)(struct __pyx_obj_6pynini_MPdtParentheses *, int __pyx_skip_dispatch))__pyx_f_6pynini_15MPdtParentheses_copy;
  __pyx_vtable_6pynini_MPdtParentheses.add_triple = (void (*)(struct __pyx_obj_6pynini_MPdtParentheses *, __pyx_t_10basictypes_int64, __pyx_t_10basictypes_int64, __pyx_t_10basictypes_int64, int __pyx_skip_dispatch))__pyx_f_6pynini_15MPdtParentheses_add_triple;
  __pyx_vtable_6pynini_MPdtParentheses.write = (void (*)(struct __pyx_obj_6pynini_MPdtParentheses *, PyObject *, int __pyx_skip_dispatch))__pyx_f_6pynini_15MPdtParentheses_write;
  if (PyType_Ready(&__pyx_type_6pynini_MPdtParentheses) < 0) __PYX_ERR(0, 1851, __pyx_L1_error)
  __pyx_type_6pynini_MPdtParentheses.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pynini_MPdtParentheses.tp_dictoffset && __pyx_type_6pynini_MPdtParentheses.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pynini_MPdtParentheses.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_6pynini_MPdtParentheses.tp_dict, __pyx_vtabptr_6pynini_MPdtParentheses) < 0) __PYX_ERR(0, 1851, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "MPdtParentheses", (PyObject *)&__pyx_type_6pynini_MPdtParentheses) < 0) __PYX_ERR(0, 1851, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6pynini_MPdtParentheses) < 0) __PYX_ERR(0, 1851, __pyx_L1_error)
  __pyx_ptype_6pynini_MPdtParentheses = &__pyx_type_6pynini_MPdtParentheses;
  __pyx_vtabptr_6pynini_StringPathIterator = &__pyx_vtable_6pynini_StringPathIterator;
  __pyx_vtable_6pynini_StringPathIterator.done = (bool (*)(struct __pyx_obj_6pynini_StringPathIterator *, int __pyx_skip_dispatch))__pyx_f_6pynini_18StringPathIterator_done;
  __pyx_vtable_6pynini_StringPathIterator.next = (void (*)(struct __pyx_obj_6pynini_StringPathIterator *, int __pyx_skip_dispatch))__pyx_f_6pynini_18StringPathIterator_next;
  __pyx_vtable_6pynini_StringPathIterator.reset = (void (*)(struct __pyx_obj_6pynini_StringPathIterator *, int __pyx_skip_dispatch))__pyx_f_6pynini_18StringPathIterator_reset;
  __pyx_vtable_6pynini_StringPathIterator.error = (bool (*)(struct __pyx_obj_6pynini_StringPathIterator *, int __pyx_skip_dispatch))__pyx_f_6pynini_18StringPathIterator_error;
  __pyx_vtable_6pynini_StringPathIterator.istring = (std::string (*)(struct __pyx_obj_6pynini_StringPathIterator *, int __pyx_skip_dispatch))__pyx_f_6pynini_18StringPathIterator_istring;
  __pyx_vtable_6pynini_StringPathIterator.ostring = (std::string (*)(struct __pyx_obj_6pynini_StringPathIterator *, int __pyx_skip_dispatch))__pyx_f_6pynini_18StringPathIterator_ostring;
  __pyx_vtable_6pynini_StringPathIterator.weight = (struct __pyx_obj_9pywrapfst_Weight *(*)(struct __pyx_obj_6pynini_StringPathIterator *, int __pyx_skip_dispatch))__pyx_f_6pynini_18StringPathIterator_weight;
  if (PyType_Ready(&__pyx_type_6pynini_StringPathIterator) < 0) __PYX_ERR(0, 2082, __pyx_L1_error)
  __pyx_type_6pynini_StringPathIterator.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pynini_StringPathIterator.tp_dictoffset && __pyx_type_6pynini_StringPathIterator.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pynini_StringPathIterator.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_6pynini_StringPathIterator.tp_dict, __pyx_vtabptr_6pynini_StringPathIterator) < 0) __PYX_ERR(0, 2082, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "StringPathIterator", (PyObject *)&__pyx_type_6pynini_StringPathIterator) < 0) __PYX_ERR(0, 2082, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6pynini_StringPathIterator) < 0) __PYX_ERR(0, 2082, __pyx_L1_error)
  __pyx_ptype_6pynini_StringPathIterator = &__pyx_type_6pynini_StringPathIterator;
  __pyx_vtabptr_6pynini_Far = &__pyx_vtable_6pynini_Far;
  __pyx_vtable_6pynini_Far._check_mode = (void (*)(struct __pyx_obj_6pynini_Far *, char))__pyx_f_6pynini_3Far__check_mode;
  __pyx_vtable_6pynini_Far._check_not_mode = (void (*)(struct __pyx_obj_6pynini_Far *, char))__pyx_f_6pynini_3Far__check_not_mode;
  __pyx_vtable_6pynini_Far.error = (bool (*)(struct __pyx_obj_6pynini_Far *, int __pyx_skip_dispatch))__pyx_f_6pynini_3Far_error;
  __pyx_vtable_6pynini_Far.arc_type = (std::string (*)(struct __pyx_obj_6pynini_Far *, int __pyx_skip_dispatch))__pyx_f_6pynini_3Far_arc_type;
  __pyx_vtable_6pynini_Far.closed = (bool (*)(struct __pyx_obj_6pynini_Far *, int __pyx_skip_dispatch))__pyx_f_6pynini_3Far_closed;
  __pyx_vtable_6pynini_Far.far_type = (std::string (*)(struct __pyx_obj_6pynini_Far *, int __pyx_skip_dispatch))__pyx_f_6pynini_3Far_far_type;
  __pyx_vtable_6pynini_Far.mode = (std::string (*)(struct __pyx_obj_6pynini_Far *, int __pyx_skip_dispatch))__pyx_f_6pynini_3Far_mode;
  __pyx_vtable_6pynini_Far.name = (std::string (*)(struct __pyx_obj_6pynini_Far *, int __pyx_skip_dispatch))__pyx_f_6pynini_3Far_name;
  __pyx_vtable_6pynini_Far.done = (bool (*)(struct __pyx_obj_6pynini_Far *, int __pyx_skip_dispatch))__pyx_f_6pynini_3Far_done;
  __pyx_vtable_6pynini_Far.find = (bool (*)(struct __pyx_obj_6pynini_Far *, PyObject *, int __pyx_skip_dispatch))__pyx_f_6pynini_3Far_find;
  __pyx_vtable_6pynini_Far.get_fst = (struct __pyx_obj_6pynini_Fst *(*)(struct __pyx_obj_6pynini_Far *, int __pyx_skip_dispatch))__pyx_f_6pynini_3Far_get_fst;
  __pyx_vtable_6pynini_Far.get_key = (std::string (*)(struct __pyx_obj_6pynini_Far *, int __pyx_skip_dispatch))__pyx_f_6pynini_3Far_get_key;
  __pyx_vtable_6pynini_Far.next = (void (*)(struct __pyx_obj_6pynini_Far *, int __pyx_skip_dispatch))__pyx_f_6pynini_3Far_next;
  __pyx_vtable_6pynini_Far.reset = (void (*)(struct __pyx_obj_6pynini_Far *, int __pyx_skip_dispatch))__pyx_f_6pynini_3Far_reset;
  __pyx_vtable_6pynini_Far.add = (void (*)(struct __pyx_obj_6pynini_Far *, PyObject *, struct __pyx_obj_6pynini_Fst *, int __pyx_skip_dispatch))__pyx_f_6pynini_3Far_add;
  __pyx_vtable_6pynini_Far.close = (void (*)(struct __pyx_obj_6pynini_Far *, int __pyx_skip_dispatch))__pyx_f_6pynini_3Far_close;
  if (PyType_Ready(&__pyx_type_6pynini_Far) < 0) __PYX_ERR(0, 2277, __pyx_L1_error)
  __pyx_type_6pynini_Far.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pynini_Far.tp_dictoffset && __pyx_type_6pynini_Far.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pynini_Far.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_6pynini_Far.tp_dict, __pyx_vtabptr_6pynini_Far) < 0) __PYX_ERR(0, 2277, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "Far", (PyObject *)&__pyx_type_6pynini_Far) < 0) __PYX_ERR(0, 2277, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6pynini_Far) < 0) __PYX_ERR(0, 2277, __pyx_L1_error)
  __pyx_ptype_6pynini_Far = &__pyx_type_6pynini_Far;
  if (PyType_Ready(&__pyx_type_6pynini___pyx_scope_struct___1arg_patch) < 0) __PYX_ERR(0, 1310, __pyx_L1_error)
  __pyx_type_6pynini___pyx_scope_struct___1arg_patch.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pynini___pyx_scope_struct___1arg_patch.tp_dictoffset && __pyx_type_6pynini___pyx_scope_struct___1arg_patch.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pynini___pyx_scope_struct___1arg_patch.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_6pynini___pyx_scope_struct___1arg_patch = &__pyx_type_6pynini___pyx_scope_struct___1arg_patch;
  if (PyType_Ready(&__pyx_type_6pynini___pyx_scope_struct_1__shortestdistance_patch) < 0) __PYX_ERR(0, 1331, __pyx_L1_error)
  __pyx_type_6pynini___pyx_scope_struct_1__shortestdistance_patch.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pynini___pyx_scope_struct_1__shortestdistance_patch.tp_dictoffset && __pyx_type_6pynini___pyx_scope_struct_1__shortestdistance_patch.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pynini___pyx_scope_struct_1__shortestdistance_patch.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_6pynini___pyx_scope_struct_1__shortestdistance_patch = &__pyx_type_6pynini___pyx_scope_struct_1__shortestdistance_patch;
  if (PyType_Ready(&__pyx_type_6pynini___pyx_scope_struct_2__compose_patch) < 0) __PYX_ERR(0, 1347, __pyx_L1_error)
  __pyx_type_6pynini___pyx_scope_struct_2__compose_patch.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pynini___pyx_scope_struct_2__compose_patch.tp_dictoffset && __pyx_type_6pynini___pyx_scope_struct_2__compose_patch.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pynini___pyx_scope_struct_2__compose_patch.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_6pynini___pyx_scope_struct_2__compose_patch = &__pyx_type_6pynini___pyx_scope_struct_2__compose_patch;
  if (PyType_Ready(&__pyx_type_6pynini___pyx_scope_struct_3__difference_patch) < 0) __PYX_ERR(0, 1365, __pyx_L1_error)
  __pyx_type_6pynini___pyx_scope_struct_3__difference_patch.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pynini___pyx_scope_struct_3__difference_patch.tp_dictoffset && __pyx_type_6pynini___pyx_scope_struct_3__difference_patch.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pynini___pyx_scope_struct_3__difference_patch.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_6pynini___pyx_scope_struct_3__difference_patch = &__pyx_type_6pynini___pyx_scope_struct_3__difference_patch;
  if (PyType_Ready(&__pyx_type_6pynini___pyx_scope_struct_4__comp_patch) < 0) __PYX_ERR(0, 1389, __pyx_L1_error)
  __pyx_type_6pynini___pyx_scope_struct_4__comp_patch.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pynini___pyx_scope_struct_4__comp_patch.tp_dictoffset && __pyx_type_6pynini___pyx_scope_struct_4__comp_patch.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pynini___pyx_scope_struct_4__comp_patch.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_6pynini___pyx_scope_struct_4__comp_patch = &__pyx_type_6pynini___pyx_scope_struct_4__comp_patch;
  if (PyType_Ready(&__pyx_type_6pynini___pyx_scope_struct_5__comp_merge_patch) < 0) __PYX_ERR(0, 1406, __pyx_L1_error)
  __pyx_type_6pynini___pyx_scope_struct_5__comp_merge_patch.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pynini___pyx_scope_struct_5__comp_merge_patch.tp_dictoffset && __pyx_type_6pynini___pyx_scope_struct_5__comp_merge_patch.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pynini___pyx_scope_struct_5__comp_merge_patch.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_6pynini___pyx_scope_struct_5__comp_merge_patch = &__pyx_type_6pynini___pyx_scope_struct_5__comp_merge_patch;
  if (PyType_Ready(&__pyx_type_6pynini___pyx_scope_struct_6___iter__) < 0) __PYX_ERR(0, 1552, __pyx_L1_error)
  __pyx_type_6pynini___pyx_scope_struct_6___iter__.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pynini___pyx_scope_struct_6___iter__.tp_dictoffset && __pyx_type_6pynini___pyx_scope_struct_6___iter__.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pynini___pyx_scope_struct_6___iter__.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_6pynini___pyx_scope_struct_6___iter__ = &__pyx_type_6pynini___pyx_scope_struct_6___iter__;
  if (PyType_Ready(&__pyx_type_6pynini___pyx_scope_struct_7___iter__) < 0) __PYX_ERR(0, 1877, __pyx_L1_error)
  __pyx_type_6pynini___pyx_scope_struct_7___iter__.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pynini___pyx_scope_struct_7___iter__.tp_dictoffset && __pyx_type_6pynini___pyx_scope_struct_7___iter__.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pynini___pyx_scope_struct_7___iter__.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_6pynini___pyx_scope_struct_7___iter__ = &__pyx_type_6pynini___pyx_scope_struct_7___iter__;
  if (PyType_Ready(&__pyx_type_6pynini___pyx_scope_struct_8_istrings) < 0) __PYX_ERR(0, 2201, __pyx_L1_error)
  __pyx_type_6pynini___pyx_scope_struct_8_istrings.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pynini___pyx_scope_struct_8_istrings.tp_dictoffset && __pyx_type_6pynini___pyx_scope_struct_8_istrings.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pynini___pyx_scope_struct_8_istrings.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_6pynini___pyx_scope_struct_8_istrings = &__pyx_type_6pynini___pyx_scope_struct_8_istrings;
  if (PyType_Ready(&__pyx_type_6pynini___pyx_scope_struct_9_ostrings) < 0) __PYX_ERR(0, 2228, __pyx_L1_error)
  __pyx_type_6pynini___pyx_scope_struct_9_ostrings.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pynini___pyx_scope_struct_9_ostrings.tp_dictoffset && __pyx_type_6pynini___pyx_scope_struct_9_ostrings.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pynini___pyx_scope_struct_9_ostrings.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_6pynini___pyx_scope_struct_9_ostrings = &__pyx_type_6pynini___pyx_scope_struct_9_ostrings;
  if (PyType_Ready(&__pyx_type_6pynini___pyx_scope_struct_10_weights) < 0) __PYX_ERR(0, 2257, __pyx_L1_error)
  __pyx_type_6pynini___pyx_scope_struct_10_weights.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pynini___pyx_scope_struct_10_weights.tp_dictoffset && __pyx_type_6pynini___pyx_scope_struct_10_weights.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pynini___pyx_scope_struct_10_weights.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_6pynini___pyx_scope_struct_10_weights = &__pyx_type_6pynini___pyx_scope_struct_10_weights;
  if (PyType_Ready(&__pyx_type_6pynini___pyx_scope_struct_11__copy_patch) < 0) __PYX_ERR(0, 2666, __pyx_L1_error)
  __pyx_type_6pynini___pyx_scope_struct_11__copy_patch.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pynini___pyx_scope_struct_11__copy_patch.tp_dictoffset && __pyx_type_6pynini___pyx_scope_struct_11__copy_patch.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pynini___pyx_scope_struct_11__copy_patch.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_6pynini___pyx_scope_struct_11__copy_patch = &__pyx_type_6pynini___pyx_scope_struct_11__copy_patch;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_ptype_9pywrapfst_Weight = __Pyx_ImportType("pywrapfst", "Weight", sizeof(struct __pyx_obj_9pywrapfst_Weight), 1); if (unlikely(!__pyx_ptype_9pywrapfst_Weight)) __PYX_ERR(2, 68, __pyx_L1_error)
  __pyx_vtabptr_9pywrapfst_Weight = (struct __pyx_vtabstruct_9pywrapfst_Weight*)__Pyx_GetVtable(__pyx_ptype_9pywrapfst_Weight->tp_dict); if (unlikely(!__pyx_vtabptr_9pywrapfst_Weight)) __PYX_ERR(2, 68, __pyx_L1_error)
  __pyx_ptype_9pywrapfst__SymbolTable = __Pyx_ImportType("pywrapfst", "_SymbolTable", sizeof(struct __pyx_obj_9pywrapfst__SymbolTable), 1); if (unlikely(!__pyx_ptype_9pywrapfst__SymbolTable)) __PYX_ERR(2, 101, __pyx_L1_error)
  __pyx_vtabptr_9pywrapfst__SymbolTable = (struct __pyx_vtabstruct_9pywrapfst__SymbolTable*)__Pyx_GetVtable(__pyx_ptype_9pywrapfst__SymbolTable->tp_dict); if (unlikely(!__pyx_vtabptr_9pywrapfst__SymbolTable)) __PYX_ERR(2, 101, __pyx_L1_error)
  __pyx_ptype_9pywrapfst__EncodeMapperSymbolTable = __Pyx_ImportType("pywrapfst", "_EncodeMapperSymbolTable", sizeof(struct __pyx_obj_9pywrapfst__EncodeMapperSymbolTable), 1); if (unlikely(!__pyx_ptype_9pywrapfst__EncodeMapperSymbolTable)) __PYX_ERR(2, 126, __pyx_L1_error)
  __pyx_vtabptr_9pywrapfst__EncodeMapperSymbolTable = (struct __pyx_vtabstruct_9pywrapfst__EncodeMapperSymbolTable*)__Pyx_GetVtable(__pyx_ptype_9pywrapfst__EncodeMapperSymbolTable->tp_dict); if (unlikely(!__pyx_vtabptr_9pywrapfst__EncodeMapperSymbolTable)) __PYX_ERR(2, 126, __pyx_L1_error)
  __pyx_ptype_9pywrapfst__FstSymbolTable = __Pyx_ImportType("pywrapfst", "_FstSymbolTable", sizeof(struct __pyx_obj_9pywrapfst__FstSymbolTable), 1); if (unlikely(!__pyx_ptype_9pywrapfst__FstSymbolTable)) __PYX_ERR(2, 131, __pyx_L1_error)
  __pyx_vtabptr_9pywrapfst__FstSymbolTable = (struct __pyx_vtabstruct_9pywrapfst__FstSymbolTable*)__Pyx_GetVtable(__pyx_ptype_9pywrapfst__FstSymbolTable->tp_dict); if (unlikely(!__pyx_vtabptr_9pywrapfst__FstSymbolTable)) __PYX_ERR(2, 131, __pyx_L1_error)
  __pyx_ptype_9pywrapfst__MutableSymbolTable = __Pyx_ImportType("pywrapfst", "_MutableSymbolTable", sizeof(struct __pyx_obj_9pywrapfst__MutableSymbolTable), 1); if (unlikely(!__pyx_ptype_9pywrapfst__MutableSymbolTable)) __PYX_ERR(2, 136, __pyx_L1_error)
  __pyx_vtabptr_9pywrapfst__MutableSymbolTable = (struct __pyx_vtabstruct_9pywrapfst__MutableSymbolTable*)__Pyx_GetVtable(__pyx_ptype_9pywrapfst__MutableSymbolTable->tp_dict); if (unlikely(!__pyx_vtabptr_9pywrapfst__MutableSymbolTable)) __PYX_ERR(2, 136, __pyx_L1_error)
  __pyx_ptype_9pywrapfst__MutableFstSymbolTable = __Pyx_ImportType("pywrapfst", "_MutableFstSymbolTable", sizeof(struct __pyx_obj_9pywrapfst__MutableFstSymbolTable), 1); if (unlikely(!__pyx_ptype_9pywrapfst__MutableFstSymbolTable)) __PYX_ERR(2, 145, __pyx_L1_error)
  __pyx_vtabptr_9pywrapfst__MutableFstSymbolTable = (struct __pyx_vtabstruct_9pywrapfst__MutableFstSymbolTable*)__Pyx_GetVtable(__pyx_ptype_9pywrapfst__MutableFstSymbolTable->tp_dict); if (unlikely(!__pyx_vtabptr_9pywrapfst__MutableFstSymbolTable)) __PYX_ERR(2, 145, __pyx_L1_error)
  __pyx_ptype_9pywrapfst_SymbolTable = __Pyx_ImportType("pywrapfst", "SymbolTable", sizeof(struct __pyx_obj_9pywrapfst_SymbolTable), 1); if (unlikely(!__pyx_ptype_9pywrapfst_SymbolTable)) __PYX_ERR(2, 150, __pyx_L1_error)
  __pyx_vtabptr_9pywrapfst_SymbolTable = (struct __pyx_vtabstruct_9pywrapfst_SymbolTable*)__Pyx_GetVtable(__pyx_ptype_9pywrapfst_SymbolTable->tp_dict); if (unlikely(!__pyx_vtabptr_9pywrapfst_SymbolTable)) __PYX_ERR(2, 150, __pyx_L1_error)
  __pyx_ptype_9pywrapfst_SymbolTableIterator = __Pyx_ImportType("pywrapfst", "SymbolTableIterator", sizeof(struct __pyx_obj_9pywrapfst_SymbolTableIterator), 1); if (unlikely(!__pyx_ptype_9pywrapfst_SymbolTableIterator)) __PYX_ERR(2, 171, __pyx_L1_error)
  __pyx_vtabptr_9pywrapfst_SymbolTableIterator = (struct __pyx_vtabstruct_9pywrapfst_SymbolTableIterator*)__Pyx_GetVtable(__pyx_ptype_9pywrapfst_SymbolTableIterator->tp_dict); if (unlikely(!__pyx_vtabptr_9pywrapfst_SymbolTableIterator)) __PYX_ERR(2, 171, __pyx_L1_error)
  __pyx_ptype_9pywrapfst_EncodeMapper = __Pyx_ImportType("pywrapfst", "EncodeMapper", sizeof(struct __pyx_obj_9pywrapfst_EncodeMapper), 1); if (unlikely(!__pyx_ptype_9pywrapfst_EncodeMapper)) __PYX_ERR(2, 190, __pyx_L1_error)
  __pyx_vtabptr_9pywrapfst_EncodeMapper = (struct __pyx_vtabstruct_9pywrapfst_EncodeMapper*)__Pyx_GetVtable(__pyx_ptype_9pywrapfst_EncodeMapper->tp_dict); if (unlikely(!__pyx_vtabptr_9pywrapfst_EncodeMapper)) __PYX_ERR(2, 190, __pyx_L1_error)
  __pyx_ptype_9pywrapfst__Fst = __Pyx_ImportType("pywrapfst", "_Fst", sizeof(struct __pyx_obj_9pywrapfst__Fst), 1); if (unlikely(!__pyx_ptype_9pywrapfst__Fst)) __PYX_ERR(2, 219, __pyx_L1_error)
  __pyx_vtabptr_9pywrapfst__Fst = (struct __pyx_vtabstruct_9pywrapfst__Fst*)__Pyx_GetVtable(__pyx_ptype_9pywrapfst__Fst->tp_dict); if (unlikely(!__pyx_vtabptr_9pywrapfst__Fst)) __PYX_ERR(2, 219, __pyx_L1_error)
  __pyx_ptype_9pywrapfst_Arc = __Pyx_ImportType("pywrapfst", "Arc", sizeof(struct __pyx_obj_9pywrapfst_Arc), 1); if (unlikely(!__pyx_ptype_9pywrapfst_Arc)) __PYX_ERR(2, 362, __pyx_L1_error)
  __pyx_vtabptr_9pywrapfst_Arc = (struct __pyx_vtabstruct_9pywrapfst_Arc*)__Pyx_GetVtable(__pyx_ptype_9pywrapfst_Arc->tp_dict); if (unlikely(!__pyx_vtabptr_9pywrapfst_Arc)) __PYX_ERR(2, 362, __pyx_L1_error)
  __pyx_ptype_9pywrapfst_ArcIterator = __Pyx_ImportType("pywrapfst", "ArcIterator", sizeof(struct __pyx_obj_9pywrapfst_ArcIterator), 1); if (unlikely(!__pyx_ptype_9pywrapfst_ArcIterator)) __PYX_ERR(2, 372, __pyx_L1_error)
  __pyx_vtabptr_9pywrapfst_ArcIterator = (struct __pyx_vtabstruct_9pywrapfst_ArcIterator*)__Pyx_GetVtable(__pyx_ptype_9pywrapfst_ArcIterator->tp_dict); if (unlikely(!__pyx_vtabptr_9pywrapfst_ArcIterator)) __PYX_ERR(2, 372, __pyx_L1_error)
  __pyx_ptype_9pywrapfst_MutableArcIterator = __Pyx_ImportType("pywrapfst", "MutableArcIterator", sizeof(struct __pyx_obj_9pywrapfst_MutableArcIterator), 1); if (unlikely(!__pyx_ptype_9pywrapfst_MutableArcIterator)) __PYX_ERR(2, 394, __pyx_L1_error)
  __pyx_vtabptr_9pywrapfst_MutableArcIterator = (struct __pyx_vtabstruct_9pywrapfst_MutableArcIterator*)__Pyx_GetVtable(__pyx_ptype_9pywrapfst_MutableArcIterator->tp_dict); if (unlikely(!__pyx_vtabptr_9pywrapfst_MutableArcIterator)) __PYX_ERR(2, 394, __pyx_L1_error)
  __pyx_ptype_9pywrapfst_StateIterator = __Pyx_ImportType("pywrapfst", "StateIterator", sizeof(struct __pyx_obj_9pywrapfst_StateIterator), 1); if (unlikely(!__pyx_ptype_9pywrapfst_StateIterator)) __PYX_ERR(2, 418, __pyx_L1_error)
  __pyx_vtabptr_9pywrapfst_StateIterator = (struct __pyx_vtabstruct_9pywrapfst_StateIterator*)__Pyx_GetVtable(__pyx_ptype_9pywrapfst_StateIterator->tp_dict); if (unlikely(!__pyx_vtabptr_9pywrapfst_StateIterator)) __PYX_ERR(2, 418, __pyx_L1_error)
  __pyx_ptype_9pywrapfst_Compiler = __Pyx_ImportType("pywrapfst", "Compiler", sizeof(struct __pyx_obj_9pywrapfst_Compiler), 1); if (unlikely(!__pyx_ptype_9pywrapfst_Compiler)) __PYX_ERR(2, 505, __pyx_L1_error)
  __pyx_vtabptr_9pywrapfst_Compiler = (struct __pyx_vtabstruct_9pywrapfst_Compiler*)__Pyx_GetVtable(__pyx_ptype_9pywrapfst_Compiler->tp_dict); if (unlikely(!__pyx_vtabptr_9pywrapfst_Compiler)) __PYX_ERR(2, 505, __pyx_L1_error)
  __pyx_ptype_9pywrapfst_FarReader = __Pyx_ImportType("pywrapfst", "FarReader", sizeof(struct __pyx_obj_9pywrapfst_FarReader), 1); if (unlikely(!__pyx_ptype_9pywrapfst_FarReader)) __PYX_ERR(2, 526, __pyx_L1_error)
  __pyx_vtabptr_9pywrapfst_FarReader = (struct __pyx_vtabstruct_9pywrapfst_FarReader*)__Pyx_GetVtable(__pyx_ptype_9pywrapfst_FarReader->tp_dict); if (unlikely(!__pyx_vtabptr_9pywrapfst_FarReader)) __PYX_ERR(2, 526, __pyx_L1_error)
  __pyx_ptype_9pywrapfst_FarWriter = __Pyx_ImportType("pywrapfst", "FarWriter", sizeof(struct __pyx_obj_9pywrapfst_FarWriter), 1); if (unlikely(!__pyx_ptype_9pywrapfst_FarWriter)) __PYX_ERR(2, 551, __pyx_L1_error)
  __pyx_vtabptr_9pywrapfst_FarWriter = (struct __pyx_vtabstruct_9pywrapfst_FarWriter*)__Pyx_GetVtable(__pyx_ptype_9pywrapfst_FarWriter->tp_dict); if (unlikely(!__pyx_vtabptr_9pywrapfst_FarWriter)) __PYX_ERR(2, 551, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __pyx_t_1 = __Pyx_ImportModule("pywrapfst"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "tostring", (void (**)(void))&__pyx_f_9pywrapfst_tostring, "std::string (PyObject *, struct __pyx_opt_args_9pywrapfst_tostring *__pyx_optional_args)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_get_compose_filter", (void (**)(void))&__pyx_f_9pywrapfst__get_compose_filter, "enum fst::ComposeFilter (std::string const &)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_get_queue_type", (void (**)(void))&__pyx_f_9pywrapfst__get_queue_type, "enum fst::QueueType (std::string const &)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_get_replace_label_type", (void (**)(void))&__pyx_f_9pywrapfst__get_replace_label_type, "enum fst::ReplaceLabelType (std::string const &, bool)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_get_WeightClass_or_One", (void (**)(void))&__pyx_f_9pywrapfst__get_WeightClass_or_One, "fst::script::WeightClass (std::string const &, PyObject *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_get_WeightClass_or_Zero", (void (**)(void))&__pyx_f_9pywrapfst__get_WeightClass_or_Zero, "fst::script::WeightClass (std::string const &, PyObject *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_init_SymbolTable", (void (**)(void))&__pyx_f_9pywrapfst__init_SymbolTable, "struct __pyx_obj_9pywrapfst_SymbolTable *(fst::SymbolTable *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_init_MutableFst", (void (**)(void))&__pyx_f_9pywrapfst__init_MutableFst, "struct __pyx_obj_9pywrapfst__MutableFst *(__pyx_t_9pywrapfst_MutableFstClass_ptr)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (!(defined(__cplusplus)) || (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ > 4)))
    #define CYTHON_SMALL_CODE __attribute__((optimize("Os")))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initpynini(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initpynini(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_pynini(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_pynini(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        result = PyDict_SetItemString(moddict, to_name, value);
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__") < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static int __pyx_pymod_exec_pynini(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m && __pyx_m == __pyx_pyinit_module) return 0;
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_pynini(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("pynini", __pyx_methods, __pyx_k_Pynini_finite_state_grammar_comp, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_pynini) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "pynini")) {
      if (unlikely(PyDict_SetItemString(modules, "pynini", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() != 0)) goto __pyx_L1_error;
  if (unlikely(__Pyx_modinit_type_import_code() != 0)) goto __pyx_L1_error;
  (void)__Pyx_modinit_variable_import_code();
  if (unlikely(__Pyx_modinit_function_import_code() != 0)) goto __pyx_L1_error;
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "pynini.pyx":141
 * 
 * 
 * import functools             # <<<<<<<<<<<<<<
 * 
 * from pywrapfst import FstArgError
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_functools, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_functools, __pyx_t_1) < 0) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":143
 * import functools
 * 
 * from pywrapfst import FstArgError             # <<<<<<<<<<<<<<
 * from pywrapfst import FstIOError
 * from pywrapfst import FstOpError
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_FstArgError);
  __Pyx_GIVEREF(__pyx_n_s_FstArgError);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_FstArgError);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_FstArgError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FstArgError, __pyx_t_1) < 0) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":144
 * 
 * from pywrapfst import FstArgError
 * from pywrapfst import FstIOError             # <<<<<<<<<<<<<<
 * from pywrapfst import FstOpError
 * 
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_FstIOError);
  __Pyx_GIVEREF(__pyx_n_s_FstIOError);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_FstIOError);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_FstIOError); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FstIOError, __pyx_t_2) < 0) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":145
 * from pywrapfst import FstArgError
 * from pywrapfst import FstIOError
 * from pywrapfst import FstOpError             # <<<<<<<<<<<<<<
 * 
 * import pywrapfst
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_FstOpError);
  __Pyx_GIVEREF(__pyx_n_s_FstOpError);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_FstOpError);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_FstOpError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FstOpError, __pyx_t_1) < 0) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":147
 * from pywrapfst import FstOpError
 * 
 * import pywrapfst             # <<<<<<<<<<<<<<
 * 
 * import logging
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pywrapfst, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pywrapfst, __pyx_t_2) < 0) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":149
 * import pywrapfst
 * 
 * import logging             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_logging, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_logging, __pyx_t_2) < 0) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":155
 * 
 * 
 * cdef uint64 kAcceptorAndString = kAcceptor | kString             # <<<<<<<<<<<<<<
 * cdef uint64 kDifferenceRhs = kAcceptor | kUnweighted
 * 
 */
  __pyx_v_6pynini_kAcceptorAndString = (fst::kAcceptor | fst::kString);

  /* "pynini.pyx":156
 * 
 * cdef uint64 kAcceptorAndString = kAcceptor | kString
 * cdef uint64 kDifferenceRhs = kAcceptor | kUnweighted             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_6pynini_kDifferenceRhs = (fst::kAcceptor | fst::kUnweighted);

  /* "pynini.pyx":162
 * 
 * 
 * class FstStringCompilationError(FstArgError, ValueError):             # <<<<<<<<<<<<<<
 * 
 *   pass
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstArgError); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_INCREF(__pyx_builtin_ValueError);
  __Pyx_GIVEREF(__pyx_builtin_ValueError);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_builtin_ValueError);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_FstStringCompilationError, __pyx_n_s_FstStringCompilationError, (PyObject *) NULL, __pyx_n_s_pynini, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_FstStringCompilationError, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FstStringCompilationError, __pyx_t_4) < 0) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":394
 * 
 *   @classmethod
 *   def from_pywrapfst(cls, _Fst ifst):             # <<<<<<<<<<<<<<
 *     """
 *     Fst.from_pywrapfst(ifst)
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pynini_Fst, __pyx_n_s_from_pywrapfst); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 394, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "pynini.pyx":393
 *     self._from_MutableFstClass(tfst.release())
 * 
 *   @classmethod             # <<<<<<<<<<<<<<
 *   def from_pywrapfst(cls, _Fst ifst):
 *     """
 */
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pynini_Fst->tp_dict, __pyx_n_s_from_pywrapfst, __pyx_t_2) < 0) __PYX_ERR(0, 394, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pynini_Fst);

  /* "pynini.pyx":416
 * 
 *   @classmethod
 *   def read(cls, filename):             # <<<<<<<<<<<<<<
 *     """
 *     Fst.read(filename)
 */
  __pyx_t_2 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pynini_Fst, __pyx_n_s_read); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "pynini.pyx":415
 *     return _from_pywrapfst(ifst)
 * 
 *   @classmethod             # <<<<<<<<<<<<<<
 *   def read(cls, filename):
 *     """
 */
  __pyx_t_1 = __Pyx_Method_ClassMethod(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pynini_Fst->tp_dict, __pyx_n_s_read, __pyx_t_1) < 0) __PYX_ERR(0, 416, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pynini_Fst);

  /* "pynini.pyx":434
 * 
 *   @classmethod
 *   def read_from_string(cls, state):             # <<<<<<<<<<<<<<
 *     """
 *     Fst.read(string)
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pynini_Fst, __pyx_n_s_read_from_string_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "pynini.pyx":433
 *     return _read(filename)
 * 
 *   @classmethod             # <<<<<<<<<<<<<<
 *   def read_from_string(cls, state):
 *     """
 */
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pynini_Fst->tp_dict, __pyx_n_s_read_from_string_2, __pyx_t_2) < 0) __PYX_ERR(0, 434, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pynini_Fst);

  /* "pynini.pyx":1302
 * 
 * 
 * def get_byte_symbol_table():             # <<<<<<<<<<<<<<
 *   """Returns a symbol table containing all bytes."""
 *   return _init_SymbolTable(GetByteSymbolTable())
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6pynini_23get_byte_symbol_table, NULL, __pyx_n_s_pynini); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_byte_symbol_table, __pyx_t_2) < 0) __PYX_ERR(0, 1302, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":1310
 * 
 * 
 * def _1arg_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg, *args, **kwargs):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6pynini_25_1arg_patch, NULL, __pyx_n_s_pynini); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_1arg_patch, __pyx_t_2) < 0) __PYX_ERR(0, 1310, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":1318
 * 
 * 
 * arcmap = _1arg_patch(pywrapfst.arcmap)             # <<<<<<<<<<<<<<
 * determinize = _1arg_patch(pywrapfst.determinize)
 * disambiguate = _1arg_patch(pywrapfst.disambiguate)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_1arg_patch); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_arcmap); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_arcmap, __pyx_t_1) < 0) __PYX_ERR(0, 1318, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":1319
 * 
 * arcmap = _1arg_patch(pywrapfst.arcmap)
 * determinize = _1arg_patch(pywrapfst.determinize)             # <<<<<<<<<<<<<<
 * disambiguate = _1arg_patch(pywrapfst.disambiguate)
 * epsnormalize = _1arg_patch(pywrapfst.epsnormalize)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_1arg_patch); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_determinize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_determinize, __pyx_t_3) < 0) __PYX_ERR(0, 1319, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":1320
 * arcmap = _1arg_patch(pywrapfst.arcmap)
 * determinize = _1arg_patch(pywrapfst.determinize)
 * disambiguate = _1arg_patch(pywrapfst.disambiguate)             # <<<<<<<<<<<<<<
 * epsnormalize = _1arg_patch(pywrapfst.epsnormalize)
 * prune = _1arg_patch(pywrapfst.prune)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_1arg_patch); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_disambiguate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_disambiguate, __pyx_t_2) < 0) __PYX_ERR(0, 1320, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":1321
 * determinize = _1arg_patch(pywrapfst.determinize)
 * disambiguate = _1arg_patch(pywrapfst.disambiguate)
 * epsnormalize = _1arg_patch(pywrapfst.epsnormalize)             # <<<<<<<<<<<<<<
 * prune = _1arg_patch(pywrapfst.prune)
 * push = _1arg_patch(pywrapfst.push)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_1arg_patch); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_epsnormalize); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_epsnormalize, __pyx_t_1) < 0) __PYX_ERR(0, 1321, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":1322
 * disambiguate = _1arg_patch(pywrapfst.disambiguate)
 * epsnormalize = _1arg_patch(pywrapfst.epsnormalize)
 * prune = _1arg_patch(pywrapfst.prune)             # <<<<<<<<<<<<<<
 * push = _1arg_patch(pywrapfst.push)
 * randgen = _1arg_patch(pywrapfst.randgen)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_1arg_patch); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_prune); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_prune, __pyx_t_3) < 0) __PYX_ERR(0, 1322, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":1323
 * epsnormalize = _1arg_patch(pywrapfst.epsnormalize)
 * prune = _1arg_patch(pywrapfst.prune)
 * push = _1arg_patch(pywrapfst.push)             # <<<<<<<<<<<<<<
 * randgen = _1arg_patch(pywrapfst.randgen)
 * reverse = _1arg_patch(pywrapfst.reverse)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_1arg_patch); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_push); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_push, __pyx_t_2) < 0) __PYX_ERR(0, 1323, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":1324
 * prune = _1arg_patch(pywrapfst.prune)
 * push = _1arg_patch(pywrapfst.push)
 * randgen = _1arg_patch(pywrapfst.randgen)             # <<<<<<<<<<<<<<
 * reverse = _1arg_patch(pywrapfst.reverse)
 * shortestpath = _1arg_patch(pywrapfst.shortestpath)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_1arg_patch); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_randgen); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_randgen, __pyx_t_1) < 0) __PYX_ERR(0, 1324, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":1325
 * push = _1arg_patch(pywrapfst.push)
 * randgen = _1arg_patch(pywrapfst.randgen)
 * reverse = _1arg_patch(pywrapfst.reverse)             # <<<<<<<<<<<<<<
 * shortestpath = _1arg_patch(pywrapfst.shortestpath)
 * statemap = _1arg_patch(pywrapfst.statemap)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_1arg_patch); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_reverse); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reverse, __pyx_t_3) < 0) __PYX_ERR(0, 1325, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":1326
 * randgen = _1arg_patch(pywrapfst.randgen)
 * reverse = _1arg_patch(pywrapfst.reverse)
 * shortestpath = _1arg_patch(pywrapfst.shortestpath)             # <<<<<<<<<<<<<<
 * statemap = _1arg_patch(pywrapfst.statemap)
 * synchronize = _1arg_patch(pywrapfst.synchronize)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_1arg_patch); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_shortestpath); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_shortestpath, __pyx_t_2) < 0) __PYX_ERR(0, 1326, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":1327
 * reverse = _1arg_patch(pywrapfst.reverse)
 * shortestpath = _1arg_patch(pywrapfst.shortestpath)
 * statemap = _1arg_patch(pywrapfst.statemap)             # <<<<<<<<<<<<<<
 * synchronize = _1arg_patch(pywrapfst.synchronize)
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_1arg_patch); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_statemap); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_statemap, __pyx_t_1) < 0) __PYX_ERR(0, 1327, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":1328
 * shortestpath = _1arg_patch(pywrapfst.shortestpath)
 * statemap = _1arg_patch(pywrapfst.statemap)
 * synchronize = _1arg_patch(pywrapfst.synchronize)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_1arg_patch); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_synchronize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_synchronize, __pyx_t_3) < 0) __PYX_ERR(0, 1328, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":1331
 * 
 * 
 * def _shortestdistance_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg, *args, **kwargs):
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_6pynini_27_shortestdistance_patch, NULL, __pyx_n_s_pynini); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_shortestdistance_patch, __pyx_t_3) < 0) __PYX_ERR(0, 1331, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":1339
 * 
 * 
 * shortestdistance = _shortestdistance_patch(pywrapfst.shortestdistance)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_shortestdistance_patch); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_shortestdistance); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_shortestdistance, __pyx_t_2) < 0) __PYX_ERR(0, 1339, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":1347
 * 
 * 
 * def _compose_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6pynini_29_compose_patch, NULL, __pyx_n_s_pynini); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_compose_patch, __pyx_t_2) < 0) __PYX_ERR(0, 1347, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":1361
 * 
 * 
 * compose = _compose_patch(pywrapfst.compose)             # <<<<<<<<<<<<<<
 * intersect = _compose_patch(pywrapfst.intersect)
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_compose_patch); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_compose); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_compose, __pyx_t_1) < 0) __PYX_ERR(0, 1361, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":1362
 * 
 * compose = _compose_patch(pywrapfst.compose)
 * intersect = _compose_patch(pywrapfst.intersect)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_compose_patch); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_intersect); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_intersect, __pyx_t_3) < 0) __PYX_ERR(0, 1362, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":1365
 * 
 * 
 * def _difference_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_6pynini_31_difference_patch, NULL, __pyx_n_s_pynini); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_difference_patch, __pyx_t_3) < 0) __PYX_ERR(0, 1365, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":1383
 * 
 * 
 * difference = _difference_patch(pywrapfst.difference)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_difference_patch); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_difference); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_difference, __pyx_t_2) < 0) __PYX_ERR(0, 1383, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":1389
 * 
 * 
 * def _comp_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6pynini_33_comp_patch, NULL, __pyx_n_s_pynini); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_comp_patch, __pyx_t_2) < 0) __PYX_ERR(0, 1389, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":1399
 * 
 * 
 * equal = _comp_patch(pywrapfst.equal)             # <<<<<<<<<<<<<<
 * isomorphic = _comp_patch(pywrapfst.isomorphic)
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_comp_patch); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_equal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_equal, __pyx_t_1) < 0) __PYX_ERR(0, 1399, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":1400
 * 
 * equal = _comp_patch(pywrapfst.equal)
 * isomorphic = _comp_patch(pywrapfst.isomorphic)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_comp_patch); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_isomorphic); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_isomorphic, __pyx_t_3) < 0) __PYX_ERR(0, 1400, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":1406
 * 
 * 
 * def _comp_merge_patch(fnc):             # <<<<<<<<<<<<<<
 *   @functools.wraps(fnc)
 *   def patch(arg1, arg2, *args, **kwargs):
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_6pynini_35_comp_merge_patch, NULL, __pyx_n_s_pynini); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_comp_merge_patch, __pyx_t_3) < 0) __PYX_ERR(0, 1406, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":1418
 * 
 * 
 * equivalent = _comp_merge_patch(pywrapfst.equivalent)             # <<<<<<<<<<<<<<
 * randequivalent = _comp_merge_patch(pywrapfst.randequivalent)
 * 
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_comp_merge_patch); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_equivalent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_equivalent, __pyx_t_2) < 0) __PYX_ERR(0, 1418, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":1419
 * 
 * equivalent = _comp_merge_patch(pywrapfst.equivalent)
 * randequivalent = _comp_merge_patch(pywrapfst.randequivalent)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_comp_merge_patch); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_pywrapfst); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_randequivalent); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_randequivalent, __pyx_t_1) < 0) __PYX_ERR(0, 1419, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":1422
 * 
 * 
 * def replace(root,             # <<<<<<<<<<<<<<
 *             replacements,
 *             call_arc_labeling=b"neither",
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pynini_37replace, NULL, __pyx_n_s_pynini); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_replace, __pyx_t_1) < 0) __PYX_ERR(0, 1422, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":1499
 * 
 * 
 * def union(*args):             # <<<<<<<<<<<<<<
 *   """
 *   union(*args)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pynini_39union, NULL, __pyx_n_s_pynini); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_union, __pyx_t_1) < 0) __PYX_ERR(0, 1499, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":1583
 * 
 *   @classmethod
 *   def read(cls, filename):             # <<<<<<<<<<<<<<
 *     """
 *     PdtParentheses.read(filename)
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pynini_PdtParentheses, __pyx_n_s_read); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "pynini.pyx":1582
 *     self._parens.push_back(pair[int64, int64](push, pop))
 * 
 *   @classmethod             # <<<<<<<<<<<<<<
 *   def read(cls, filename):
 *     """
 */
  __pyx_t_3 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1582, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pynini_PdtParentheses->tp_dict, __pyx_n_s_read, __pyx_t_3) < 0) __PYX_ERR(0, 1583, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_6pynini_PdtParentheses);

  /* "pynini.pyx":1625
 * 
 * 
 * def pdt_compose(ifst1,             # <<<<<<<<<<<<<<
 *                 ifst2,
 *                 PdtParentheses parens,
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_6pynini_41pdt_compose, NULL, __pyx_n_s_pynini); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pdt_compose, __pyx_t_3) < 0) __PYX_ERR(0, 1625, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":1682
 * 
 * 
 * def pdt_expand(ipdt,             # <<<<<<<<<<<<<<
 *                PdtParentheses parens,
 *                bool connect=True,
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_6pynini_43pdt_expand, NULL, __pyx_n_s_pynini); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1682, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pdt_expand, __pyx_t_3) < 0) __PYX_ERR(0, 1682, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":1724
 * 
 * 
 * def pdt_replace(root, replacements, pdt_parser_type=b"left"):             # <<<<<<<<<<<<<<
 *   """
 *   pdt_replace(root, replacements, pdt_parser_type="left")
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_6pynini_45pdt_replace, NULL, __pyx_n_s_pynini); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1724, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pdt_replace, __pyx_t_3) < 0) __PYX_ERR(0, 1724, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":1785
 * 
 * 
 * def pdt_reverse(ipdt, PdtParentheses parens):             # <<<<<<<<<<<<<<
 *   """
 *   pdt_reverse(ipdt, parens)
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_6pynini_47pdt_reverse, NULL, __pyx_n_s_pynini); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1785, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pdt_reverse, __pyx_t_3) < 0) __PYX_ERR(0, 1785, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":1808
 * 
 * 
 * def pdt_shortestpath(ipdt,             # <<<<<<<<<<<<<<
 *                      PdtParentheses parens,
 *                      queue_type=b"fifo",
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_6pynini_49pdt_shortestpath, NULL, __pyx_n_s_pynini); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1808, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pdt_shortestpath, __pyx_t_3) < 0) __PYX_ERR(0, 1808, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":1913
 * 
 *   @classmethod
 *   def read(cls, filename):             # <<<<<<<<<<<<<<
 *     """
 *     MPdtParentheses.read(filename)
 */
  __pyx_t_3 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pynini_MPdtParentheses, __pyx_n_s_read); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "pynini.pyx":1912
 *     self._assign.push_back(assignment)
 * 
 *   @classmethod             # <<<<<<<<<<<<<<
 *   def read(cls, filename):
 *     """
 */
  __pyx_t_1 = __Pyx_Method_ClassMethod(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pynini_MPdtParentheses->tp_dict, __pyx_n_s_read, __pyx_t_1) < 0) __PYX_ERR(0, 1913, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pynini_MPdtParentheses);

  /* "pynini.pyx":2014
 * 
 * 
 * def mpdt_expand(impdt, MPdtParentheses parens, bool connect=True,             # <<<<<<<<<<<<<<
 *                 bool keep_parentheses=False):
 *   """
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pynini_53mpdt_expand, NULL, __pyx_n_s_pynini); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2014, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_mpdt_expand, __pyx_t_1) < 0) __PYX_ERR(0, 2014, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2051
 * 
 * 
 * def mpdt_reverse(impdt, MPdtParentheses parens):             # <<<<<<<<<<<<<<
 *   """
 *   mpdt_reverse(impdt, parens)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pynini_55mpdt_reverse, NULL, __pyx_n_s_pynini); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_mpdt_reverse, __pyx_t_1) < 0) __PYX_ERR(0, 2051, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2545
 * 
 * 
 * from pywrapfst import Arc             # <<<<<<<<<<<<<<
 * from pywrapfst import ArcIterator
 * from pywrapfst import EncodeMapper
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2545, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Arc);
  __Pyx_GIVEREF(__pyx_n_s_Arc);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Arc);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_1, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2545, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_Arc); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2545, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Arc, __pyx_t_1) < 0) __PYX_ERR(0, 2545, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2546
 * 
 * from pywrapfst import Arc
 * from pywrapfst import ArcIterator             # <<<<<<<<<<<<<<
 * from pywrapfst import EncodeMapper
 * from pywrapfst import MutableArcIterator
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_ArcIterator);
  __Pyx_GIVEREF(__pyx_n_s_ArcIterator);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_ArcIterator);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_ArcIterator); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ArcIterator, __pyx_t_3) < 0) __PYX_ERR(0, 2546, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2547
 * from pywrapfst import Arc
 * from pywrapfst import ArcIterator
 * from pywrapfst import EncodeMapper             # <<<<<<<<<<<<<<
 * from pywrapfst import MutableArcIterator
 * from pywrapfst import StateIterator
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2547, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_EncodeMapper);
  __Pyx_GIVEREF(__pyx_n_s_EncodeMapper);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_EncodeMapper);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_1, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2547, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_EncodeMapper); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2547, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_EncodeMapper, __pyx_t_1) < 0) __PYX_ERR(0, 2547, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2548
 * from pywrapfst import ArcIterator
 * from pywrapfst import EncodeMapper
 * from pywrapfst import MutableArcIterator             # <<<<<<<<<<<<<<
 * from pywrapfst import StateIterator
 * from pywrapfst import SymbolTable
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_MutableArcIterator);
  __Pyx_GIVEREF(__pyx_n_s_MutableArcIterator);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_MutableArcIterator);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_MutableArcIterator); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MutableArcIterator, __pyx_t_3) < 0) __PYX_ERR(0, 2548, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2549
 * from pywrapfst import EncodeMapper
 * from pywrapfst import MutableArcIterator
 * from pywrapfst import StateIterator             # <<<<<<<<<<<<<<
 * from pywrapfst import SymbolTable
 * from pywrapfst import SymbolTableIterator
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_StateIterator);
  __Pyx_GIVEREF(__pyx_n_s_StateIterator);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_StateIterator);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_1, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_StateIterator); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_StateIterator, __pyx_t_1) < 0) __PYX_ERR(0, 2549, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2550
 * from pywrapfst import MutableArcIterator
 * from pywrapfst import StateIterator
 * from pywrapfst import SymbolTable             # <<<<<<<<<<<<<<
 * from pywrapfst import SymbolTableIterator
 * from pywrapfst import Weight
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_SymbolTable_2);
  __Pyx_GIVEREF(__pyx_n_s_SymbolTable_2);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_SymbolTable_2);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_SymbolTable_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SymbolTable_2, __pyx_t_3) < 0) __PYX_ERR(0, 2550, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2551
 * from pywrapfst import StateIterator
 * from pywrapfst import SymbolTable
 * from pywrapfst import SymbolTableIterator             # <<<<<<<<<<<<<<
 * from pywrapfst import Weight
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_SymbolTableIterator);
  __Pyx_GIVEREF(__pyx_n_s_SymbolTableIterator);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_SymbolTableIterator);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_1, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_SymbolTableIterator); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SymbolTableIterator, __pyx_t_1) < 0) __PYX_ERR(0, 2551, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2552
 * from pywrapfst import SymbolTable
 * from pywrapfst import SymbolTableIterator
 * from pywrapfst import Weight             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_Weight);
  __Pyx_GIVEREF(__pyx_n_s_Weight);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_Weight);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Weight); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Weight, __pyx_t_3) < 0) __PYX_ERR(0, 2552, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2558
 * 
 * 
 * from pywrapfst import FstBadWeightError             # <<<<<<<<<<<<<<
 * from pywrapfst import FstDeletedConstructorError
 * from pywrapfst import FstIndexError
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_FstBadWeightError);
  __Pyx_GIVEREF(__pyx_n_s_FstBadWeightError);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_FstBadWeightError);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_1, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_FstBadWeightError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FstBadWeightError, __pyx_t_1) < 0) __PYX_ERR(0, 2558, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2559
 * 
 * from pywrapfst import FstBadWeightError
 * from pywrapfst import FstDeletedConstructorError             # <<<<<<<<<<<<<<
 * from pywrapfst import FstIndexError
 * 
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_FstDeletedConstructorError);
  __Pyx_GIVEREF(__pyx_n_s_FstDeletedConstructorError);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_FstDeletedConstructorError);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_FstDeletedConstructorError); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FstDeletedConstructorError, __pyx_t_3) < 0) __PYX_ERR(0, 2559, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2560
 * from pywrapfst import FstBadWeightError
 * from pywrapfst import FstDeletedConstructorError
 * from pywrapfst import FstIndexError             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_FstIndexError);
  __Pyx_GIVEREF(__pyx_n_s_FstIndexError);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_FstIndexError);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_1, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_FstIndexError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FstIndexError, __pyx_t_1) < 0) __PYX_ERR(0, 2560, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2566
 * 
 * 
 * from pywrapfst import NO_LABEL             # <<<<<<<<<<<<<<
 * from pywrapfst import NO_STATE_ID
 * from pywrapfst import NO_SYMBOL
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_NO_LABEL);
  __Pyx_GIVEREF(__pyx_n_s_NO_LABEL);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_NO_LABEL);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_NO_LABEL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NO_LABEL, __pyx_t_3) < 0) __PYX_ERR(0, 2566, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2567
 * 
 * from pywrapfst import NO_LABEL
 * from pywrapfst import NO_STATE_ID             # <<<<<<<<<<<<<<
 * from pywrapfst import NO_SYMBOL
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_NO_STATE_ID);
  __Pyx_GIVEREF(__pyx_n_s_NO_STATE_ID);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_NO_STATE_ID);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_1, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_NO_STATE_ID); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NO_STATE_ID, __pyx_t_1) < 0) __PYX_ERR(0, 2567, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2568
 * from pywrapfst import NO_LABEL
 * from pywrapfst import NO_STATE_ID
 * from pywrapfst import NO_SYMBOL             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_NO_SYMBOL);
  __Pyx_GIVEREF(__pyx_n_s_NO_SYMBOL);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_NO_SYMBOL);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_NO_SYMBOL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NO_SYMBOL, __pyx_t_3) < 0) __PYX_ERR(0, 2568, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2573
 * # FST properties.
 * 
 * from pywrapfst import ACCEPTOR             # <<<<<<<<<<<<<<
 * from pywrapfst import ACCESSIBLE
 * from pywrapfst import ACYCLIC
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_ACCEPTOR);
  __Pyx_GIVEREF(__pyx_n_s_ACCEPTOR);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_ACCEPTOR);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_1, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_ACCEPTOR); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ACCEPTOR, __pyx_t_1) < 0) __PYX_ERR(0, 2573, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2574
 * 
 * from pywrapfst import ACCEPTOR
 * from pywrapfst import ACCESSIBLE             # <<<<<<<<<<<<<<
 * from pywrapfst import ACYCLIC
 * from pywrapfst import ADD_ARC_PROPERTIES
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_ACCESSIBLE);
  __Pyx_GIVEREF(__pyx_n_s_ACCESSIBLE);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_ACCESSIBLE);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_ACCESSIBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ACCESSIBLE, __pyx_t_3) < 0) __PYX_ERR(0, 2574, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2575
 * from pywrapfst import ACCEPTOR
 * from pywrapfst import ACCESSIBLE
 * from pywrapfst import ACYCLIC             # <<<<<<<<<<<<<<
 * from pywrapfst import ADD_ARC_PROPERTIES
 * from pywrapfst import ADD_STATE_PROPERTIES
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2575, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_ACYCLIC);
  __Pyx_GIVEREF(__pyx_n_s_ACYCLIC);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_ACYCLIC);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_1, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2575, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_ACYCLIC); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2575, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ACYCLIC, __pyx_t_1) < 0) __PYX_ERR(0, 2575, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2576
 * from pywrapfst import ACCESSIBLE
 * from pywrapfst import ACYCLIC
 * from pywrapfst import ADD_ARC_PROPERTIES             # <<<<<<<<<<<<<<
 * from pywrapfst import ADD_STATE_PROPERTIES
 * from pywrapfst import ADD_SUPERFINAL_PROPERTIES
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2576, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_ADD_ARC_PROPERTIES);
  __Pyx_GIVEREF(__pyx_n_s_ADD_ARC_PROPERTIES);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_ADD_ARC_PROPERTIES);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2576, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_ADD_ARC_PROPERTIES); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2576, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ADD_ARC_PROPERTIES, __pyx_t_3) < 0) __PYX_ERR(0, 2576, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2577
 * from pywrapfst import ACYCLIC
 * from pywrapfst import ADD_ARC_PROPERTIES
 * from pywrapfst import ADD_STATE_PROPERTIES             # <<<<<<<<<<<<<<
 * from pywrapfst import ADD_SUPERFINAL_PROPERTIES
 * from pywrapfst import ARC_SORT_PROPERTIES
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_ADD_STATE_PROPERTIES);
  __Pyx_GIVEREF(__pyx_n_s_ADD_STATE_PROPERTIES);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_ADD_STATE_PROPERTIES);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_1, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_ADD_STATE_PROPERTIES); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ADD_STATE_PROPERTIES, __pyx_t_1) < 0) __PYX_ERR(0, 2577, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2578
 * from pywrapfst import ADD_ARC_PROPERTIES
 * from pywrapfst import ADD_STATE_PROPERTIES
 * from pywrapfst import ADD_SUPERFINAL_PROPERTIES             # <<<<<<<<<<<<<<
 * from pywrapfst import ARC_SORT_PROPERTIES
 * from pywrapfst import BINARY_PROPERTIES
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_ADD_SUPERFINAL_PROPERTIES);
  __Pyx_GIVEREF(__pyx_n_s_ADD_SUPERFINAL_PROPERTIES);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_ADD_SUPERFINAL_PROPERTIES);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_ADD_SUPERFINAL_PROPERTIES); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ADD_SUPERFINAL_PROPERTIES, __pyx_t_3) < 0) __PYX_ERR(0, 2578, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2579
 * from pywrapfst import ADD_STATE_PROPERTIES
 * from pywrapfst import ADD_SUPERFINAL_PROPERTIES
 * from pywrapfst import ARC_SORT_PROPERTIES             # <<<<<<<<<<<<<<
 * from pywrapfst import BINARY_PROPERTIES
 * from pywrapfst import COACCESSIBLE
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_ARC_SORT_PROPERTIES);
  __Pyx_GIVEREF(__pyx_n_s_ARC_SORT_PROPERTIES);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_ARC_SORT_PROPERTIES);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_1, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_ARC_SORT_PROPERTIES); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ARC_SORT_PROPERTIES, __pyx_t_1) < 0) __PYX_ERR(0, 2579, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2580
 * from pywrapfst import ADD_SUPERFINAL_PROPERTIES
 * from pywrapfst import ARC_SORT_PROPERTIES
 * from pywrapfst import BINARY_PROPERTIES             # <<<<<<<<<<<<<<
 * from pywrapfst import COACCESSIBLE
 * from pywrapfst import COPY_PROPERTIES
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_BINARY_PROPERTIES);
  __Pyx_GIVEREF(__pyx_n_s_BINARY_PROPERTIES);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_BINARY_PROPERTIES);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_BINARY_PROPERTIES); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BINARY_PROPERTIES, __pyx_t_3) < 0) __PYX_ERR(0, 2580, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2581
 * from pywrapfst import ARC_SORT_PROPERTIES
 * from pywrapfst import BINARY_PROPERTIES
 * from pywrapfst import COACCESSIBLE             # <<<<<<<<<<<<<<
 * from pywrapfst import COPY_PROPERTIES
 * from pywrapfst import CYCLIC
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_COACCESSIBLE);
  __Pyx_GIVEREF(__pyx_n_s_COACCESSIBLE);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_COACCESSIBLE);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_1, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_COACCESSIBLE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COACCESSIBLE, __pyx_t_1) < 0) __PYX_ERR(0, 2581, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2582
 * from pywrapfst import BINARY_PROPERTIES
 * from pywrapfst import COACCESSIBLE
 * from pywrapfst import COPY_PROPERTIES             # <<<<<<<<<<<<<<
 * from pywrapfst import CYCLIC
 * from pywrapfst import DELETE_ARC_PROPERTIES
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2582, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_COPY_PROPERTIES);
  __Pyx_GIVEREF(__pyx_n_s_COPY_PROPERTIES);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_COPY_PROPERTIES);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2582, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_COPY_PROPERTIES); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2582, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COPY_PROPERTIES, __pyx_t_3) < 0) __PYX_ERR(0, 2582, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2583
 * from pywrapfst import COACCESSIBLE
 * from pywrapfst import COPY_PROPERTIES
 * from pywrapfst import CYCLIC             # <<<<<<<<<<<<<<
 * from pywrapfst import DELETE_ARC_PROPERTIES
 * from pywrapfst import DELETE_STATE_PROPERTIES
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_CYCLIC);
  __Pyx_GIVEREF(__pyx_n_s_CYCLIC);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_CYCLIC);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_1, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_CYCLIC); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CYCLIC, __pyx_t_1) < 0) __PYX_ERR(0, 2583, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2584
 * from pywrapfst import COPY_PROPERTIES
 * from pywrapfst import CYCLIC
 * from pywrapfst import DELETE_ARC_PROPERTIES             # <<<<<<<<<<<<<<
 * from pywrapfst import DELETE_STATE_PROPERTIES
 * from pywrapfst import EPSILONS
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_DELETE_ARC_PROPERTIES);
  __Pyx_GIVEREF(__pyx_n_s_DELETE_ARC_PROPERTIES);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_DELETE_ARC_PROPERTIES);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_DELETE_ARC_PROPERTIES); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DELETE_ARC_PROPERTIES, __pyx_t_3) < 0) __PYX_ERR(0, 2584, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2585
 * from pywrapfst import CYCLIC
 * from pywrapfst import DELETE_ARC_PROPERTIES
 * from pywrapfst import DELETE_STATE_PROPERTIES             # <<<<<<<<<<<<<<
 * from pywrapfst import EPSILONS
 * from pywrapfst import ERROR
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_DELETE_STATE_PROPERTIES);
  __Pyx_GIVEREF(__pyx_n_s_DELETE_STATE_PROPERTIES);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_DELETE_STATE_PROPERTIES);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_1, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_DELETE_STATE_PROPERTIES); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DELETE_STATE_PROPERTIES, __pyx_t_1) < 0) __PYX_ERR(0, 2585, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2586
 * from pywrapfst import DELETE_ARC_PROPERTIES
 * from pywrapfst import DELETE_STATE_PROPERTIES
 * from pywrapfst import EPSILONS             # <<<<<<<<<<<<<<
 * from pywrapfst import ERROR
 * from pywrapfst import EXPANDED
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2586, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_EPSILONS);
  __Pyx_GIVEREF(__pyx_n_s_EPSILONS);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_EPSILONS);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2586, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_EPSILONS); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2586, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_EPSILONS, __pyx_t_3) < 0) __PYX_ERR(0, 2586, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2587
 * from pywrapfst import DELETE_STATE_PROPERTIES
 * from pywrapfst import EPSILONS
 * from pywrapfst import ERROR             # <<<<<<<<<<<<<<
 * from pywrapfst import EXPANDED
 * from pywrapfst import EXTRINSIC_PROPERTIES
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_ERROR);
  __Pyx_GIVEREF(__pyx_n_s_ERROR);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_ERROR);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_1, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_ERROR); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ERROR, __pyx_t_1) < 0) __PYX_ERR(0, 2587, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2588
 * from pywrapfst import EPSILONS
 * from pywrapfst import ERROR
 * from pywrapfst import EXPANDED             # <<<<<<<<<<<<<<
 * from pywrapfst import EXTRINSIC_PROPERTIES
 * from pywrapfst import FST_PROPERTIES
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_EXPANDED);
  __Pyx_GIVEREF(__pyx_n_s_EXPANDED);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_EXPANDED);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_EXPANDED); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_EXPANDED, __pyx_t_3) < 0) __PYX_ERR(0, 2588, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2589
 * from pywrapfst import ERROR
 * from pywrapfst import EXPANDED
 * from pywrapfst import EXTRINSIC_PROPERTIES             # <<<<<<<<<<<<<<
 * from pywrapfst import FST_PROPERTIES
 * from pywrapfst import I_DETERMINISTIC
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_EXTRINSIC_PROPERTIES);
  __Pyx_GIVEREF(__pyx_n_s_EXTRINSIC_PROPERTIES);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_EXTRINSIC_PROPERTIES);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_1, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_EXTRINSIC_PROPERTIES); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_EXTRINSIC_PROPERTIES, __pyx_t_1) < 0) __PYX_ERR(0, 2589, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2590
 * from pywrapfst import EXPANDED
 * from pywrapfst import EXTRINSIC_PROPERTIES
 * from pywrapfst import FST_PROPERTIES             # <<<<<<<<<<<<<<
 * from pywrapfst import I_DETERMINISTIC
 * from pywrapfst import I_EPSILONS
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_FST_PROPERTIES);
  __Pyx_GIVEREF(__pyx_n_s_FST_PROPERTIES);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_FST_PROPERTIES);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_FST_PROPERTIES); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FST_PROPERTIES, __pyx_t_3) < 0) __PYX_ERR(0, 2590, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2591
 * from pywrapfst import EXTRINSIC_PROPERTIES
 * from pywrapfst import FST_PROPERTIES
 * from pywrapfst import I_DETERMINISTIC             # <<<<<<<<<<<<<<
 * from pywrapfst import I_EPSILONS
 * from pywrapfst import I_LABEL_INVARIANT_PROPERTIES
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_I_DETERMINISTIC);
  __Pyx_GIVEREF(__pyx_n_s_I_DETERMINISTIC);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_I_DETERMINISTIC);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_1, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_I_DETERMINISTIC); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_I_DETERMINISTIC, __pyx_t_1) < 0) __PYX_ERR(0, 2591, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2592
 * from pywrapfst import FST_PROPERTIES
 * from pywrapfst import I_DETERMINISTIC
 * from pywrapfst import I_EPSILONS             # <<<<<<<<<<<<<<
 * from pywrapfst import I_LABEL_INVARIANT_PROPERTIES
 * from pywrapfst import I_LABEL_SORTED
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2592, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_I_EPSILONS);
  __Pyx_GIVEREF(__pyx_n_s_I_EPSILONS);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_I_EPSILONS);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2592, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_I_EPSILONS); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2592, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_I_EPSILONS, __pyx_t_3) < 0) __PYX_ERR(0, 2592, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2593
 * from pywrapfst import I_DETERMINISTIC
 * from pywrapfst import I_EPSILONS
 * from pywrapfst import I_LABEL_INVARIANT_PROPERTIES             # <<<<<<<<<<<<<<
 * from pywrapfst import I_LABEL_SORTED
 * from pywrapfst import INITIAL_ACYCLIC
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_I_LABEL_INVARIANT_PROPERTIES);
  __Pyx_GIVEREF(__pyx_n_s_I_LABEL_INVARIANT_PROPERTIES);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_I_LABEL_INVARIANT_PROPERTIES);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_1, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_I_LABEL_INVARIANT_PROPERTIES); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_I_LABEL_INVARIANT_PROPERTIES, __pyx_t_1) < 0) __PYX_ERR(0, 2593, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2594
 * from pywrapfst import I_EPSILONS
 * from pywrapfst import I_LABEL_INVARIANT_PROPERTIES
 * from pywrapfst import I_LABEL_SORTED             # <<<<<<<<<<<<<<
 * from pywrapfst import INITIAL_ACYCLIC
 * from pywrapfst import INITIAL_CYCLIC
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_I_LABEL_SORTED);
  __Pyx_GIVEREF(__pyx_n_s_I_LABEL_SORTED);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_I_LABEL_SORTED);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_I_LABEL_SORTED); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_I_LABEL_SORTED, __pyx_t_3) < 0) __PYX_ERR(0, 2594, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2595
 * from pywrapfst import I_LABEL_INVARIANT_PROPERTIES
 * from pywrapfst import I_LABEL_SORTED
 * from pywrapfst import INITIAL_ACYCLIC             # <<<<<<<<<<<<<<
 * from pywrapfst import INITIAL_CYCLIC
 * from pywrapfst import INTRINSIC_PROPERTIES
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_INITIAL_ACYCLIC);
  __Pyx_GIVEREF(__pyx_n_s_INITIAL_ACYCLIC);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_INITIAL_ACYCLIC);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_1, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_INITIAL_ACYCLIC); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INITIAL_ACYCLIC, __pyx_t_1) < 0) __PYX_ERR(0, 2595, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2596
 * from pywrapfst import I_LABEL_SORTED
 * from pywrapfst import INITIAL_ACYCLIC
 * from pywrapfst import INITIAL_CYCLIC             # <<<<<<<<<<<<<<
 * from pywrapfst import INTRINSIC_PROPERTIES
 * from pywrapfst import MUTABLE
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_INITIAL_CYCLIC);
  __Pyx_GIVEREF(__pyx_n_s_INITIAL_CYCLIC);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_INITIAL_CYCLIC);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_INITIAL_CYCLIC); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INITIAL_CYCLIC, __pyx_t_3) < 0) __PYX_ERR(0, 2596, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2597
 * from pywrapfst import INITIAL_ACYCLIC
 * from pywrapfst import INITIAL_CYCLIC
 * from pywrapfst import INTRINSIC_PROPERTIES             # <<<<<<<<<<<<<<
 * from pywrapfst import MUTABLE
 * from pywrapfst import NEG_TRINARY_PROPERTIES
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2597, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_INTRINSIC_PROPERTIES);
  __Pyx_GIVEREF(__pyx_n_s_INTRINSIC_PROPERTIES);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_INTRINSIC_PROPERTIES);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_1, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2597, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_INTRINSIC_PROPERTIES); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2597, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_INTRINSIC_PROPERTIES, __pyx_t_1) < 0) __PYX_ERR(0, 2597, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2598
 * from pywrapfst import INITIAL_CYCLIC
 * from pywrapfst import INTRINSIC_PROPERTIES
 * from pywrapfst import MUTABLE             # <<<<<<<<<<<<<<
 * from pywrapfst import NEG_TRINARY_PROPERTIES
 * from pywrapfst import NO_EPSILONS
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_MUTABLE);
  __Pyx_GIVEREF(__pyx_n_s_MUTABLE);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_MUTABLE);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_MUTABLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MUTABLE, __pyx_t_3) < 0) __PYX_ERR(0, 2598, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2599
 * from pywrapfst import INTRINSIC_PROPERTIES
 * from pywrapfst import MUTABLE
 * from pywrapfst import NEG_TRINARY_PROPERTIES             # <<<<<<<<<<<<<<
 * from pywrapfst import NO_EPSILONS
 * from pywrapfst import NO_I_EPSILONS
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_NEG_TRINARY_PROPERTIES);
  __Pyx_GIVEREF(__pyx_n_s_NEG_TRINARY_PROPERTIES);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_NEG_TRINARY_PROPERTIES);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_1, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_NEG_TRINARY_PROPERTIES); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NEG_TRINARY_PROPERTIES, __pyx_t_1) < 0) __PYX_ERR(0, 2599, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2600
 * from pywrapfst import MUTABLE
 * from pywrapfst import NEG_TRINARY_PROPERTIES
 * from pywrapfst import NO_EPSILONS             # <<<<<<<<<<<<<<
 * from pywrapfst import NO_I_EPSILONS
 * from pywrapfst import NON_I_DETERMINISTIC
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2600, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_NO_EPSILONS);
  __Pyx_GIVEREF(__pyx_n_s_NO_EPSILONS);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_NO_EPSILONS);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2600, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_NO_EPSILONS); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2600, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NO_EPSILONS, __pyx_t_3) < 0) __PYX_ERR(0, 2600, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2601
 * from pywrapfst import NEG_TRINARY_PROPERTIES
 * from pywrapfst import NO_EPSILONS
 * from pywrapfst import NO_I_EPSILONS             # <<<<<<<<<<<<<<
 * from pywrapfst import NON_I_DETERMINISTIC
 * from pywrapfst import NON_O_DETERMINISTIC
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2601, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_NO_I_EPSILONS);
  __Pyx_GIVEREF(__pyx_n_s_NO_I_EPSILONS);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_NO_I_EPSILONS);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_1, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2601, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_NO_I_EPSILONS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2601, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NO_I_EPSILONS, __pyx_t_1) < 0) __PYX_ERR(0, 2601, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2602
 * from pywrapfst import NO_EPSILONS
 * from pywrapfst import NO_I_EPSILONS
 * from pywrapfst import NON_I_DETERMINISTIC             # <<<<<<<<<<<<<<
 * from pywrapfst import NON_O_DETERMINISTIC
 * from pywrapfst import NO_O_EPSILONS
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_NON_I_DETERMINISTIC);
  __Pyx_GIVEREF(__pyx_n_s_NON_I_DETERMINISTIC);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_NON_I_DETERMINISTIC);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_NON_I_DETERMINISTIC); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NON_I_DETERMINISTIC, __pyx_t_3) < 0) __PYX_ERR(0, 2602, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2603
 * from pywrapfst import NO_I_EPSILONS
 * from pywrapfst import NON_I_DETERMINISTIC
 * from pywrapfst import NON_O_DETERMINISTIC             # <<<<<<<<<<<<<<
 * from pywrapfst import NO_O_EPSILONS
 * from pywrapfst import NOT_ACCEPTOR
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_NON_O_DETERMINISTIC);
  __Pyx_GIVEREF(__pyx_n_s_NON_O_DETERMINISTIC);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_NON_O_DETERMINISTIC);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_1, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_NON_O_DETERMINISTIC); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NON_O_DETERMINISTIC, __pyx_t_1) < 0) __PYX_ERR(0, 2603, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2604
 * from pywrapfst import NON_I_DETERMINISTIC
 * from pywrapfst import NON_O_DETERMINISTIC
 * from pywrapfst import NO_O_EPSILONS             # <<<<<<<<<<<<<<
 * from pywrapfst import NOT_ACCEPTOR
 * from pywrapfst import NOT_ACCESSIBLE
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_NO_O_EPSILONS);
  __Pyx_GIVEREF(__pyx_n_s_NO_O_EPSILONS);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_NO_O_EPSILONS);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_NO_O_EPSILONS); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NO_O_EPSILONS, __pyx_t_3) < 0) __PYX_ERR(0, 2604, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2605
 * from pywrapfst import NON_O_DETERMINISTIC
 * from pywrapfst import NO_O_EPSILONS
 * from pywrapfst import NOT_ACCEPTOR             # <<<<<<<<<<<<<<
 * from pywrapfst import NOT_ACCESSIBLE
 * from pywrapfst import NOT_COACCESSIBLE
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_NOT_ACCEPTOR);
  __Pyx_GIVEREF(__pyx_n_s_NOT_ACCEPTOR);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_NOT_ACCEPTOR);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_1, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_NOT_ACCEPTOR); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NOT_ACCEPTOR, __pyx_t_1) < 0) __PYX_ERR(0, 2605, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2606
 * from pywrapfst import NO_O_EPSILONS
 * from pywrapfst import NOT_ACCEPTOR
 * from pywrapfst import NOT_ACCESSIBLE             # <<<<<<<<<<<<<<
 * from pywrapfst import NOT_COACCESSIBLE
 * from pywrapfst import NOT_I_LABEL_SORTED
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_NOT_ACCESSIBLE);
  __Pyx_GIVEREF(__pyx_n_s_NOT_ACCESSIBLE);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_NOT_ACCESSIBLE);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_NOT_ACCESSIBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NOT_ACCESSIBLE, __pyx_t_3) < 0) __PYX_ERR(0, 2606, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2607
 * from pywrapfst import NOT_ACCEPTOR
 * from pywrapfst import NOT_ACCESSIBLE
 * from pywrapfst import NOT_COACCESSIBLE             # <<<<<<<<<<<<<<
 * from pywrapfst import NOT_I_LABEL_SORTED
 * from pywrapfst import NOT_O_LABEL_SORTED
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_NOT_COACCESSIBLE);
  __Pyx_GIVEREF(__pyx_n_s_NOT_COACCESSIBLE);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_NOT_COACCESSIBLE);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_1, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_NOT_COACCESSIBLE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NOT_COACCESSIBLE, __pyx_t_1) < 0) __PYX_ERR(0, 2607, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2608
 * from pywrapfst import NOT_ACCESSIBLE
 * from pywrapfst import NOT_COACCESSIBLE
 * from pywrapfst import NOT_I_LABEL_SORTED             # <<<<<<<<<<<<<<
 * from pywrapfst import NOT_O_LABEL_SORTED
 * from pywrapfst import NOT_STRING
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_NOT_I_LABEL_SORTED);
  __Pyx_GIVEREF(__pyx_n_s_NOT_I_LABEL_SORTED);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_NOT_I_LABEL_SORTED);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_NOT_I_LABEL_SORTED); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NOT_I_LABEL_SORTED, __pyx_t_3) < 0) __PYX_ERR(0, 2608, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2609
 * from pywrapfst import NOT_COACCESSIBLE
 * from pywrapfst import NOT_I_LABEL_SORTED
 * from pywrapfst import NOT_O_LABEL_SORTED             # <<<<<<<<<<<<<<
 * from pywrapfst import NOT_STRING
 * from pywrapfst import NOT_TOP_SORTED
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_NOT_O_LABEL_SORTED);
  __Pyx_GIVEREF(__pyx_n_s_NOT_O_LABEL_SORTED);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_NOT_O_LABEL_SORTED);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_1, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_NOT_O_LABEL_SORTED); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NOT_O_LABEL_SORTED, __pyx_t_1) < 0) __PYX_ERR(0, 2609, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2610
 * from pywrapfst import NOT_I_LABEL_SORTED
 * from pywrapfst import NOT_O_LABEL_SORTED
 * from pywrapfst import NOT_STRING             # <<<<<<<<<<<<<<
 * from pywrapfst import NOT_TOP_SORTED
 * from pywrapfst import NULL_PROPERTIES
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_NOT_STRING);
  __Pyx_GIVEREF(__pyx_n_s_NOT_STRING);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_NOT_STRING);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_NOT_STRING); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NOT_STRING, __pyx_t_3) < 0) __PYX_ERR(0, 2610, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2611
 * from pywrapfst import NOT_O_LABEL_SORTED
 * from pywrapfst import NOT_STRING
 * from pywrapfst import NOT_TOP_SORTED             # <<<<<<<<<<<<<<
 * from pywrapfst import NULL_PROPERTIES
 * from pywrapfst import O_DETERMINISTIC
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2611, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_NOT_TOP_SORTED);
  __Pyx_GIVEREF(__pyx_n_s_NOT_TOP_SORTED);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_NOT_TOP_SORTED);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_1, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2611, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_NOT_TOP_SORTED); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2611, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NOT_TOP_SORTED, __pyx_t_1) < 0) __PYX_ERR(0, 2611, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2612
 * from pywrapfst import NOT_STRING
 * from pywrapfst import NOT_TOP_SORTED
 * from pywrapfst import NULL_PROPERTIES             # <<<<<<<<<<<<<<
 * from pywrapfst import O_DETERMINISTIC
 * from pywrapfst import O_EPSILONS
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_NULL_PROPERTIES);
  __Pyx_GIVEREF(__pyx_n_s_NULL_PROPERTIES);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_NULL_PROPERTIES);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_NULL_PROPERTIES); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NULL_PROPERTIES, __pyx_t_3) < 0) __PYX_ERR(0, 2612, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2613
 * from pywrapfst import NOT_TOP_SORTED
 * from pywrapfst import NULL_PROPERTIES
 * from pywrapfst import O_DETERMINISTIC             # <<<<<<<<<<<<<<
 * from pywrapfst import O_EPSILONS
 * from pywrapfst import O_LABEL_INVARIANT_PROPERTIES
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2613, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_O_DETERMINISTIC);
  __Pyx_GIVEREF(__pyx_n_s_O_DETERMINISTIC);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_O_DETERMINISTIC);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_1, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2613, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_O_DETERMINISTIC); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2613, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_O_DETERMINISTIC, __pyx_t_1) < 0) __PYX_ERR(0, 2613, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2614
 * from pywrapfst import NULL_PROPERTIES
 * from pywrapfst import O_DETERMINISTIC
 * from pywrapfst import O_EPSILONS             # <<<<<<<<<<<<<<
 * from pywrapfst import O_LABEL_INVARIANT_PROPERTIES
 * from pywrapfst import O_LABEL_SORTED
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_O_EPSILONS);
  __Pyx_GIVEREF(__pyx_n_s_O_EPSILONS);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_O_EPSILONS);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_O_EPSILONS); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_O_EPSILONS, __pyx_t_3) < 0) __PYX_ERR(0, 2614, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2615
 * from pywrapfst import O_DETERMINISTIC
 * from pywrapfst import O_EPSILONS
 * from pywrapfst import O_LABEL_INVARIANT_PROPERTIES             # <<<<<<<<<<<<<<
 * from pywrapfst import O_LABEL_SORTED
 * from pywrapfst import POS_TRINARY_PROPERTIES
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_O_LABEL_INVARIANT_PROPERTIES);
  __Pyx_GIVEREF(__pyx_n_s_O_LABEL_INVARIANT_PROPERTIES);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_O_LABEL_INVARIANT_PROPERTIES);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_1, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_O_LABEL_INVARIANT_PROPERTIES); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_O_LABEL_INVARIANT_PROPERTIES, __pyx_t_1) < 0) __PYX_ERR(0, 2615, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2616
 * from pywrapfst import O_EPSILONS
 * from pywrapfst import O_LABEL_INVARIANT_PROPERTIES
 * from pywrapfst import O_LABEL_SORTED             # <<<<<<<<<<<<<<
 * from pywrapfst import POS_TRINARY_PROPERTIES
 * from pywrapfst import RM_SUPERFINAL_PROPERTIES
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_O_LABEL_SORTED);
  __Pyx_GIVEREF(__pyx_n_s_O_LABEL_SORTED);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_O_LABEL_SORTED);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_O_LABEL_SORTED); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_O_LABEL_SORTED, __pyx_t_3) < 0) __PYX_ERR(0, 2616, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2617
 * from pywrapfst import O_LABEL_INVARIANT_PROPERTIES
 * from pywrapfst import O_LABEL_SORTED
 * from pywrapfst import POS_TRINARY_PROPERTIES             # <<<<<<<<<<<<<<
 * from pywrapfst import RM_SUPERFINAL_PROPERTIES
 * from pywrapfst import SET_ARC_PROPERTIES
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_POS_TRINARY_PROPERTIES);
  __Pyx_GIVEREF(__pyx_n_s_POS_TRINARY_PROPERTIES);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_POS_TRINARY_PROPERTIES);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_1, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_POS_TRINARY_PROPERTIES); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_POS_TRINARY_PROPERTIES, __pyx_t_1) < 0) __PYX_ERR(0, 2617, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2618
 * from pywrapfst import O_LABEL_SORTED
 * from pywrapfst import POS_TRINARY_PROPERTIES
 * from pywrapfst import RM_SUPERFINAL_PROPERTIES             # <<<<<<<<<<<<<<
 * from pywrapfst import SET_ARC_PROPERTIES
 * from pywrapfst import SET_FINAL_PROPERTIES
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_RM_SUPERFINAL_PROPERTIES);
  __Pyx_GIVEREF(__pyx_n_s_RM_SUPERFINAL_PROPERTIES);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_RM_SUPERFINAL_PROPERTIES);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_RM_SUPERFINAL_PROPERTIES); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_RM_SUPERFINAL_PROPERTIES, __pyx_t_3) < 0) __PYX_ERR(0, 2618, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2619
 * from pywrapfst import POS_TRINARY_PROPERTIES
 * from pywrapfst import RM_SUPERFINAL_PROPERTIES
 * from pywrapfst import SET_ARC_PROPERTIES             # <<<<<<<<<<<<<<
 * from pywrapfst import SET_FINAL_PROPERTIES
 * from pywrapfst import SET_START_PROPERTIES
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_SET_ARC_PROPERTIES);
  __Pyx_GIVEREF(__pyx_n_s_SET_ARC_PROPERTIES);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_SET_ARC_PROPERTIES);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_1, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_SET_ARC_PROPERTIES); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SET_ARC_PROPERTIES, __pyx_t_1) < 0) __PYX_ERR(0, 2619, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2620
 * from pywrapfst import RM_SUPERFINAL_PROPERTIES
 * from pywrapfst import SET_ARC_PROPERTIES
 * from pywrapfst import SET_FINAL_PROPERTIES             # <<<<<<<<<<<<<<
 * from pywrapfst import SET_START_PROPERTIES
 * from pywrapfst import STATE_SORT_PROPERTIES
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_SET_FINAL_PROPERTIES);
  __Pyx_GIVEREF(__pyx_n_s_SET_FINAL_PROPERTIES);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_SET_FINAL_PROPERTIES);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_SET_FINAL_PROPERTIES); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SET_FINAL_PROPERTIES, __pyx_t_3) < 0) __PYX_ERR(0, 2620, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2621
 * from pywrapfst import SET_ARC_PROPERTIES
 * from pywrapfst import SET_FINAL_PROPERTIES
 * from pywrapfst import SET_START_PROPERTIES             # <<<<<<<<<<<<<<
 * from pywrapfst import STATE_SORT_PROPERTIES
 * from pywrapfst import STRING
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_SET_START_PROPERTIES);
  __Pyx_GIVEREF(__pyx_n_s_SET_START_PROPERTIES);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_SET_START_PROPERTIES);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_1, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_SET_START_PROPERTIES); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SET_START_PROPERTIES, __pyx_t_1) < 0) __PYX_ERR(0, 2621, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2622
 * from pywrapfst import SET_FINAL_PROPERTIES
 * from pywrapfst import SET_START_PROPERTIES
 * from pywrapfst import STATE_SORT_PROPERTIES             # <<<<<<<<<<<<<<
 * from pywrapfst import STRING
 * from pywrapfst import TOP_SORTED
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2622, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_STATE_SORT_PROPERTIES);
  __Pyx_GIVEREF(__pyx_n_s_STATE_SORT_PROPERTIES);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_STATE_SORT_PROPERTIES);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2622, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_STATE_SORT_PROPERTIES); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2622, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_STATE_SORT_PROPERTIES, __pyx_t_3) < 0) __PYX_ERR(0, 2622, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2623
 * from pywrapfst import SET_START_PROPERTIES
 * from pywrapfst import STATE_SORT_PROPERTIES
 * from pywrapfst import STRING             # <<<<<<<<<<<<<<
 * from pywrapfst import TOP_SORTED
 * from pywrapfst import TRINARY_PROPERTIES
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_STRING);
  __Pyx_GIVEREF(__pyx_n_s_STRING);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_STRING);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_1, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_STRING); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_STRING, __pyx_t_1) < 0) __PYX_ERR(0, 2623, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2624
 * from pywrapfst import STATE_SORT_PROPERTIES
 * from pywrapfst import STRING
 * from pywrapfst import TOP_SORTED             # <<<<<<<<<<<<<<
 * from pywrapfst import TRINARY_PROPERTIES
 * from pywrapfst import UNWEIGHTED
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_TOP_SORTED);
  __Pyx_GIVEREF(__pyx_n_s_TOP_SORTED);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_TOP_SORTED);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_TOP_SORTED); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TOP_SORTED, __pyx_t_3) < 0) __PYX_ERR(0, 2624, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2625
 * from pywrapfst import STRING
 * from pywrapfst import TOP_SORTED
 * from pywrapfst import TRINARY_PROPERTIES             # <<<<<<<<<<<<<<
 * from pywrapfst import UNWEIGHTED
 * from pywrapfst import UNWEIGHTED_CYCLES
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_TRINARY_PROPERTIES);
  __Pyx_GIVEREF(__pyx_n_s_TRINARY_PROPERTIES);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_TRINARY_PROPERTIES);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_1, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_TRINARY_PROPERTIES); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TRINARY_PROPERTIES, __pyx_t_1) < 0) __PYX_ERR(0, 2625, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2626
 * from pywrapfst import TOP_SORTED
 * from pywrapfst import TRINARY_PROPERTIES
 * from pywrapfst import UNWEIGHTED             # <<<<<<<<<<<<<<
 * from pywrapfst import UNWEIGHTED_CYCLES
 * from pywrapfst import WEIGHTED
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2626, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_UNWEIGHTED);
  __Pyx_GIVEREF(__pyx_n_s_UNWEIGHTED);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_UNWEIGHTED);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2626, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_UNWEIGHTED); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2626, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_UNWEIGHTED, __pyx_t_3) < 0) __PYX_ERR(0, 2626, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2627
 * from pywrapfst import TRINARY_PROPERTIES
 * from pywrapfst import UNWEIGHTED
 * from pywrapfst import UNWEIGHTED_CYCLES             # <<<<<<<<<<<<<<
 * from pywrapfst import WEIGHTED
 * from pywrapfst import WEIGHTED_CYCLES
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_UNWEIGHTED_CYCLES);
  __Pyx_GIVEREF(__pyx_n_s_UNWEIGHTED_CYCLES);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_UNWEIGHTED_CYCLES);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_1, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_UNWEIGHTED_CYCLES); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_UNWEIGHTED_CYCLES, __pyx_t_1) < 0) __PYX_ERR(0, 2627, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2628
 * from pywrapfst import UNWEIGHTED
 * from pywrapfst import UNWEIGHTED_CYCLES
 * from pywrapfst import WEIGHTED             # <<<<<<<<<<<<<<
 * from pywrapfst import WEIGHTED_CYCLES
 * from pywrapfst import WEIGHT_INVARIANT_PROPERTIES
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2628, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_WEIGHTED);
  __Pyx_GIVEREF(__pyx_n_s_WEIGHTED);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_WEIGHTED);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2628, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_WEIGHTED); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2628, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WEIGHTED, __pyx_t_3) < 0) __PYX_ERR(0, 2628, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2629
 * from pywrapfst import UNWEIGHTED_CYCLES
 * from pywrapfst import WEIGHTED
 * from pywrapfst import WEIGHTED_CYCLES             # <<<<<<<<<<<<<<
 * from pywrapfst import WEIGHT_INVARIANT_PROPERTIES
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_WEIGHTED_CYCLES);
  __Pyx_GIVEREF(__pyx_n_s_WEIGHTED_CYCLES);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_WEIGHTED_CYCLES);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_1, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_WEIGHTED_CYCLES); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WEIGHTED_CYCLES, __pyx_t_1) < 0) __PYX_ERR(0, 2629, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2630
 * from pywrapfst import WEIGHTED
 * from pywrapfst import WEIGHTED_CYCLES
 * from pywrapfst import WEIGHT_INVARIANT_PROPERTIES             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2630, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_WEIGHT_INVARIANT_PROPERTIES);
  __Pyx_GIVEREF(__pyx_n_s_WEIGHT_INVARIANT_PROPERTIES);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_WEIGHT_INVARIANT_PROPERTIES);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2630, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_WEIGHT_INVARIANT_PROPERTIES); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2630, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WEIGHT_INVARIANT_PROPERTIES, __pyx_t_3) < 0) __PYX_ERR(0, 2630, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2636
 * 
 * 
 * from pywrapfst import ARC_FLAGS             # <<<<<<<<<<<<<<
 * from pywrapfst import ARC_I_LABEL_VALUE
 * from pywrapfst import ARC_NEXT_STATE_VALUE
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_ARC_FLAGS);
  __Pyx_GIVEREF(__pyx_n_s_ARC_FLAGS);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_ARC_FLAGS);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_1, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_ARC_FLAGS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ARC_FLAGS, __pyx_t_1) < 0) __PYX_ERR(0, 2636, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2637
 * 
 * from pywrapfst import ARC_FLAGS
 * from pywrapfst import ARC_I_LABEL_VALUE             # <<<<<<<<<<<<<<
 * from pywrapfst import ARC_NEXT_STATE_VALUE
 * from pywrapfst import ARC_NO_CACHE
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2637, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_ARC_I_LABEL_VALUE);
  __Pyx_GIVEREF(__pyx_n_s_ARC_I_LABEL_VALUE);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_ARC_I_LABEL_VALUE);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2637, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_ARC_I_LABEL_VALUE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2637, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ARC_I_LABEL_VALUE, __pyx_t_3) < 0) __PYX_ERR(0, 2637, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2638
 * from pywrapfst import ARC_FLAGS
 * from pywrapfst import ARC_I_LABEL_VALUE
 * from pywrapfst import ARC_NEXT_STATE_VALUE             # <<<<<<<<<<<<<<
 * from pywrapfst import ARC_NO_CACHE
 * from pywrapfst import ARC_O_LABEL_VALUE
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2638, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_ARC_NEXT_STATE_VALUE);
  __Pyx_GIVEREF(__pyx_n_s_ARC_NEXT_STATE_VALUE);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_ARC_NEXT_STATE_VALUE);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_1, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2638, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_ARC_NEXT_STATE_VALUE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2638, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ARC_NEXT_STATE_VALUE, __pyx_t_1) < 0) __PYX_ERR(0, 2638, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2639
 * from pywrapfst import ARC_I_LABEL_VALUE
 * from pywrapfst import ARC_NEXT_STATE_VALUE
 * from pywrapfst import ARC_NO_CACHE             # <<<<<<<<<<<<<<
 * from pywrapfst import ARC_O_LABEL_VALUE
 * from pywrapfst import ARC_VALUE_FLAGS
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2639, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_ARC_NO_CACHE);
  __Pyx_GIVEREF(__pyx_n_s_ARC_NO_CACHE);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_ARC_NO_CACHE);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2639, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_ARC_NO_CACHE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2639, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ARC_NO_CACHE, __pyx_t_3) < 0) __PYX_ERR(0, 2639, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2640
 * from pywrapfst import ARC_NEXT_STATE_VALUE
 * from pywrapfst import ARC_NO_CACHE
 * from pywrapfst import ARC_O_LABEL_VALUE             # <<<<<<<<<<<<<<
 * from pywrapfst import ARC_VALUE_FLAGS
 * from pywrapfst import ARC_WEIGHT_VALUE
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_ARC_O_LABEL_VALUE);
  __Pyx_GIVEREF(__pyx_n_s_ARC_O_LABEL_VALUE);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_ARC_O_LABEL_VALUE);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_1, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_ARC_O_LABEL_VALUE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ARC_O_LABEL_VALUE, __pyx_t_1) < 0) __PYX_ERR(0, 2640, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2641
 * from pywrapfst import ARC_NO_CACHE
 * from pywrapfst import ARC_O_LABEL_VALUE
 * from pywrapfst import ARC_VALUE_FLAGS             # <<<<<<<<<<<<<<
 * from pywrapfst import ARC_WEIGHT_VALUE
 * 
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2641, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_ARC_VALUE_FLAGS);
  __Pyx_GIVEREF(__pyx_n_s_ARC_VALUE_FLAGS);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_ARC_VALUE_FLAGS);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2641, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_ARC_VALUE_FLAGS); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2641, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ARC_VALUE_FLAGS, __pyx_t_3) < 0) __PYX_ERR(0, 2641, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2642
 * from pywrapfst import ARC_O_LABEL_VALUE
 * from pywrapfst import ARC_VALUE_FLAGS
 * from pywrapfst import ARC_WEIGHT_VALUE             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_ARC_WEIGHT_VALUE);
  __Pyx_GIVEREF(__pyx_n_s_ARC_WEIGHT_VALUE);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_ARC_WEIGHT_VALUE);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_1, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_ARC_WEIGHT_VALUE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ARC_WEIGHT_VALUE, __pyx_t_1) < 0) __PYX_ERR(0, 2642, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2648
 * 
 * 
 * from pywrapfst import ENCODE_FLAGS             # <<<<<<<<<<<<<<
 * from pywrapfst import ENCODE_LABELS
 * from pywrapfst import ENCODE_WEIGHTS
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2648, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_ENCODE_FLAGS);
  __Pyx_GIVEREF(__pyx_n_s_ENCODE_FLAGS);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_ENCODE_FLAGS);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2648, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_ENCODE_FLAGS); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2648, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ENCODE_FLAGS, __pyx_t_3) < 0) __PYX_ERR(0, 2648, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2649
 * 
 * from pywrapfst import ENCODE_FLAGS
 * from pywrapfst import ENCODE_LABELS             # <<<<<<<<<<<<<<
 * from pywrapfst import ENCODE_WEIGHTS
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2649, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_ENCODE_LABELS);
  __Pyx_GIVEREF(__pyx_n_s_ENCODE_LABELS);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_ENCODE_LABELS);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_1, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2649, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_ENCODE_LABELS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2649, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ENCODE_LABELS, __pyx_t_1) < 0) __PYX_ERR(0, 2649, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2650
 * from pywrapfst import ENCODE_FLAGS
 * from pywrapfst import ENCODE_LABELS
 * from pywrapfst import ENCODE_WEIGHTS             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2650, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_ENCODE_WEIGHTS);
  __Pyx_GIVEREF(__pyx_n_s_ENCODE_WEIGHTS);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_ENCODE_WEIGHTS);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2650, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_ENCODE_WEIGHTS); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2650, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ENCODE_WEIGHTS, __pyx_t_3) < 0) __PYX_ERR(0, 2650, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2656
 * 
 * 
 * a = acceptor             # <<<<<<<<<<<<<<
 * t = transducer
 * u = union
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_acceptor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_a, __pyx_t_1) < 0) __PYX_ERR(0, 2656, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2657
 * 
 * a = acceptor
 * t = transducer             # <<<<<<<<<<<<<<
 * u = union
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_transducer); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2657, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_t, __pyx_t_1) < 0) __PYX_ERR(0, 2657, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2658
 * a = acceptor
 * t = transducer
 * u = union             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_union); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_u, __pyx_t_1) < 0) __PYX_ERR(0, 2658, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2666
 * 
 * 
 * def _copy_patch(fnc):             # <<<<<<<<<<<<<<
 *   # The junk in the `functools.wraps` decorator is due to a long-standing bug
 *   # in Python 2.7 (https://bugs.python.org/issue3445).
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pynini_57_copy_patch, NULL, __pyx_n_s_pynini); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2666, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_copy_patch, __pyx_t_1) < 0) __PYX_ERR(0, 2666, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2677
 * 
 * 
 * arcsort = _copy_patch(Fst.arcsort)             # <<<<<<<<<<<<<<
 * closure = _copy_patch(Fst.closure)
 * concat = _copy_patch(Fst.concat)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_copy_patch); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2677, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_n_s_arcsort); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2677, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2677, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_arcsort, __pyx_t_2) < 0) __PYX_ERR(0, 2677, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2678
 * 
 * arcsort = _copy_patch(Fst.arcsort)
 * closure = _copy_patch(Fst.closure)             # <<<<<<<<<<<<<<
 * concat = _copy_patch(Fst.concat)
 * connect = _copy_patch(Fst.connect)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_copy_patch); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_n_s_closure); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_closure, __pyx_t_1) < 0) __PYX_ERR(0, 2678, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2679
 * arcsort = _copy_patch(Fst.arcsort)
 * closure = _copy_patch(Fst.closure)
 * concat = _copy_patch(Fst.concat)             # <<<<<<<<<<<<<<
 * connect = _copy_patch(Fst.connect)
 * decode = _copy_patch(Fst.decode)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_copy_patch); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_n_s_concat); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_concat, __pyx_t_2) < 0) __PYX_ERR(0, 2679, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2680
 * closure = _copy_patch(Fst.closure)
 * concat = _copy_patch(Fst.concat)
 * connect = _copy_patch(Fst.connect)             # <<<<<<<<<<<<<<
 * decode = _copy_patch(Fst.decode)
 * encode = _copy_patch(Fst.encode)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_copy_patch); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_n_s_connect); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_connect, __pyx_t_1) < 0) __PYX_ERR(0, 2680, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2681
 * concat = _copy_patch(Fst.concat)
 * connect = _copy_patch(Fst.connect)
 * decode = _copy_patch(Fst.decode)             # <<<<<<<<<<<<<<
 * encode = _copy_patch(Fst.encode)
 * invert = _copy_patch(Fst.invert)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_copy_patch); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2681, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_n_s_decode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2681, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2681, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_decode, __pyx_t_2) < 0) __PYX_ERR(0, 2681, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2682
 * connect = _copy_patch(Fst.connect)
 * decode = _copy_patch(Fst.decode)
 * encode = _copy_patch(Fst.encode)             # <<<<<<<<<<<<<<
 * invert = _copy_patch(Fst.invert)
 * minimize = _copy_patch(Fst.minimize)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_copy_patch); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2682, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2682, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2682, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_encode, __pyx_t_1) < 0) __PYX_ERR(0, 2682, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2683
 * decode = _copy_patch(Fst.decode)
 * encode = _copy_patch(Fst.encode)
 * invert = _copy_patch(Fst.invert)             # <<<<<<<<<<<<<<
 * minimize = _copy_patch(Fst.minimize)
 * optimize = _copy_patch(Fst.optimize)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_copy_patch); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_n_s_invert); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_invert, __pyx_t_2) < 0) __PYX_ERR(0, 2683, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2684
 * encode = _copy_patch(Fst.encode)
 * invert = _copy_patch(Fst.invert)
 * minimize = _copy_patch(Fst.minimize)             # <<<<<<<<<<<<<<
 * optimize = _copy_patch(Fst.optimize)
 * project = _copy_patch(Fst.project)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_copy_patch); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_n_s_minimize); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_minimize, __pyx_t_1) < 0) __PYX_ERR(0, 2684, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2685
 * invert = _copy_patch(Fst.invert)
 * minimize = _copy_patch(Fst.minimize)
 * optimize = _copy_patch(Fst.optimize)             # <<<<<<<<<<<<<<
 * project = _copy_patch(Fst.project)
 * relabel_pairs = _copy_patch(Fst.relabel_pairs)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_copy_patch); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2685, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_n_s_optimize); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2685, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2685, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_optimize, __pyx_t_2) < 0) __PYX_ERR(0, 2685, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2686
 * minimize = _copy_patch(Fst.minimize)
 * optimize = _copy_patch(Fst.optimize)
 * project = _copy_patch(Fst.project)             # <<<<<<<<<<<<<<
 * relabel_pairs = _copy_patch(Fst.relabel_pairs)
 * relabel_tables = _copy_patch(Fst.relabel_tables)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_copy_patch); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2686, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_n_s_project); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2686, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2686, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_project, __pyx_t_1) < 0) __PYX_ERR(0, 2686, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2687
 * optimize = _copy_patch(Fst.optimize)
 * project = _copy_patch(Fst.project)
 * relabel_pairs = _copy_patch(Fst.relabel_pairs)             # <<<<<<<<<<<<<<
 * relabel_tables = _copy_patch(Fst.relabel_tables)
 * reweight = _copy_patch(Fst.reweight)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_copy_patch); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2687, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_n_s_relabel_pairs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2687, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2687, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_relabel_pairs, __pyx_t_2) < 0) __PYX_ERR(0, 2687, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2688
 * project = _copy_patch(Fst.project)
 * relabel_pairs = _copy_patch(Fst.relabel_pairs)
 * relabel_tables = _copy_patch(Fst.relabel_tables)             # <<<<<<<<<<<<<<
 * reweight = _copy_patch(Fst.reweight)
 * rmepsilon = _copy_patch(Fst.rmepsilon)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_copy_patch); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_n_s_relabel_tables); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_relabel_tables, __pyx_t_1) < 0) __PYX_ERR(0, 2688, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2689
 * relabel_pairs = _copy_patch(Fst.relabel_pairs)
 * relabel_tables = _copy_patch(Fst.relabel_tables)
 * reweight = _copy_patch(Fst.reweight)             # <<<<<<<<<<<<<<
 * rmepsilon = _copy_patch(Fst.rmepsilon)
 * topsort = _copy_patch(Fst.topsort)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_copy_patch); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2689, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_n_s_reweight); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2689, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2689, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reweight, __pyx_t_2) < 0) __PYX_ERR(0, 2689, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2690
 * relabel_tables = _copy_patch(Fst.relabel_tables)
 * reweight = _copy_patch(Fst.reweight)
 * rmepsilon = _copy_patch(Fst.rmepsilon)             # <<<<<<<<<<<<<<
 * topsort = _copy_patch(Fst.topsort)
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_copy_patch); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2690, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_n_s_rmepsilon); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2690, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2690, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_rmepsilon, __pyx_t_1) < 0) __PYX_ERR(0, 2690, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynini.pyx":2691
 * reweight = _copy_patch(Fst.reweight)
 * rmepsilon = _copy_patch(Fst.rmepsilon)
 * topsort = _copy_patch(Fst.topsort)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_copy_patch); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2691, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6pynini_Fst), __pyx_n_s_topsort); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2691, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2691, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_topsort, __pyx_t_2) < 0) __PYX_ERR(0, 2691, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2697
 * 
 * 
 * from pywrapfst import compact_symbol_table             # <<<<<<<<<<<<<<
 * from pywrapfst import merge_symbol_table
 * 
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2697, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_compact_symbol_table);
  __Pyx_GIVEREF(__pyx_n_s_compact_symbol_table);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_compact_symbol_table);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2697, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_compact_symbol_table); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2697, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_compact_symbol_table, __pyx_t_2) < 0) __PYX_ERR(0, 2697, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2698
 * 
 * from pywrapfst import compact_symbol_table
 * from pywrapfst import merge_symbol_table             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_merge_symbol_table);
  __Pyx_GIVEREF(__pyx_n_s_merge_symbol_table);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_merge_symbol_table);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_merge_symbol_table); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_merge_symbol_table, __pyx_t_3) < 0) __PYX_ERR(0, 2698, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2704
 * 
 * 
 * from pywrapfst import divide             # <<<<<<<<<<<<<<
 * from pywrapfst import power
 * from pywrapfst import plus
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2704, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_divide);
  __Pyx_GIVEREF(__pyx_n_s_divide);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_divide);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2704, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_divide); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2704, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_divide, __pyx_t_2) < 0) __PYX_ERR(0, 2704, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2705
 * 
 * from pywrapfst import divide
 * from pywrapfst import power             # <<<<<<<<<<<<<<
 * from pywrapfst import plus
 * from pywrapfst import times
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2705, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_power);
  __Pyx_GIVEREF(__pyx_n_s_power);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_power);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2705, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_power); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2705, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_power, __pyx_t_3) < 0) __PYX_ERR(0, 2705, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":2706
 * from pywrapfst import divide
 * from pywrapfst import power
 * from pywrapfst import plus             # <<<<<<<<<<<<<<
 * from pywrapfst import times
 * 
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2706, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_plus);
  __Pyx_GIVEREF(__pyx_n_s_plus);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_plus);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2706, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_plus); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2706, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_plus, __pyx_t_2) < 0) __PYX_ERR(0, 2706, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pynini.pyx":2707
 * from pywrapfst import power
 * from pywrapfst import plus
 * from pywrapfst import times             # <<<<<<<<<<<<<<
 * 
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2707, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_times);
  __Pyx_GIVEREF(__pyx_n_s_times);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_times);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pywrapfst, __pyx_t_3, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2707, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_times); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2707, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_times, __pyx_t_3) < 0) __PYX_ERR(0, 2707, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_PdtParentheses(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     if __pyx_checksum != 0x078cdb7:
 *         from pickle import PickleError as __pyx_PickleError
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6pynini_59__pyx_unpickle_PdtParentheses, NULL, __pyx_n_s_pynini); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_PdtParentheses, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":9
 *         __pyx_unpickle_PdtParentheses__set_state(<PdtParentheses> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PdtParentheses__set_state(PdtParentheses __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._parens = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6pynini_61__pyx_unpickle_MPdtParentheses, NULL, __pyx_n_s_pynini); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_MPdtParentheses, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Far(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     if __pyx_checksum != 0xcb2b861:
 *         from pickle import PickleError as __pyx_PickleError
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6pynini_63__pyx_unpickle_Far, NULL, __pyx_n_s_pynini); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_Far, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pynini.pyx":1
 * #cython: nonecheck=True, c_string_type=unicode, c_string_encoding=utf8             # <<<<<<<<<<<<<<
 * # Licensed under the Apache License, Version 2.0 (the "License");
 * # you may not use this file except in compliance with the License.
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init pynini", 0, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init pynini");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* GetModuleGlobalName */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    if (likely(result)) {
        Py_INCREF(result);
    } else if (unlikely(PyErr_Occurred())) {
        result = NULL;
    } else {
#else
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* PyCFunctionFastCall */
    #if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
    #if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
    #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyErrFetchRestore */
    #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
    #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* WriteUnraisableException */
    static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* RaiseDoubleKeywords */
    static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
    static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
    static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* ArgTypeTest */
    static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* ExtTypeTest */
    static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* PyObjectCallNoArg */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* RaiseTooManyValuesToUnpack */
      static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
      static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
      static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
      static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* GetAttr */
      static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* HasAttr */
      static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* None */
      static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* FetchCommonType */
      static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunction */
      #include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* KeywordStringCheck */
          static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyErrExceptionMatches */
          #if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetAttr3 */
          static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r = __Pyx_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
}

/* Import */
          static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
          static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* GetItemInt */
          static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* CallNextTpDealloc */
          static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_dealloc != current_tp_dealloc)
        type = type->tp_base;
    while (type && type->tp_dealloc == current_tp_dealloc)
        type = type->tp_base;
    if (type)
        type->tp_dealloc(obj);
}

/* GetVTable */
          static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* PyObject_GenericGetAttrNoDict */
          #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
          #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
          static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* SetupReduce */
          static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name_2);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto BAD;
            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto BAD;
            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto BAD;
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto BAD;
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto BAD;
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto GOOD;
BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* CalculateMetaclass */
          static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* Py3ClassCreate */
          static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* ClassMethod */
          static PyObject* __Pyx_Method_ClassMethod(PyObject *method) {
#if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM <= 0x05080000
    if (PyObject_TypeCheck(method, &PyWrapperDescr_Type)) {
        return PyClassMethod_New(method);
    }
#else
#if CYTHON_COMPILING_IN_PYSTON || CYTHON_COMPILING_IN_PYPY
    if (PyMethodDescr_Check(method)) {
#else
    static PyTypeObject *methoddescr_type = NULL;
    if (methoddescr_type == NULL) {
       PyObject *meth = PyObject_GetAttrString((PyObject*)&PyList_Type, "append");
       if (!meth) return NULL;
       methoddescr_type = Py_TYPE(meth);
       Py_DECREF(meth);
    }
    if (__Pyx_TypeCheck(method, methoddescr_type)) {
#endif
        PyMethodDescrObject *descr = (PyMethodDescrObject *)method;
        #if PY_VERSION_HEX < 0x03020000
        PyTypeObject *d_type = descr->d_type;
        #else
        PyTypeObject *d_type = descr->d_common.d_type;
        #endif
        return PyDescr_NewClassMethod(d_type, descr->d_method);
    }
#endif
    else if (PyMethod_Check(method)) {
        return PyClassMethod_New(PyMethod_GET_FUNCTION(method));
    }
    else if (PyCFunction_Check(method)) {
        return PyClassMethod_New(method);
    }
#ifdef __Pyx_CyFunction_USED
    else if (__Pyx_TypeCheck(method, __pyx_CyFunctionType)) {
        return PyClassMethod_New(method);
    }
#endif
    PyErr_SetString(PyExc_TypeError,
                   "Class-level classmethod() can only be called on "
                   "a method_descriptor or instance method.");
    return NULL;
}

/* GetNameInClass */
            static PyObject *__Pyx_GetGlobalNameAfterAttributeLookup(PyObject *name) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    return __Pyx_GetModuleGlobalName(name);
}
static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result) {
        result = __Pyx_GetGlobalNameAfterAttributeLookup(name);
    }
    return result;
}

/* CLineInTraceback */
            #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
      use_cline = __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback);
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (PyObject_Not(use_cline) != 0) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
            static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
            #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntToPy */
            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int64_t(int64_t value) {
    const int64_t neg_one = (int64_t) -1, const_zero = (int64_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int64_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int64_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int64_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int64_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int64_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int64_t),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
            #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_char(char value) {
    const char neg_one = (char) -1, const_zero = (char) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(char) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(char) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(char) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(char) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(char) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(char),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64_t(uint64_t value) {
    const uint64_t neg_one = (uint64_t) -1, const_zero = (uint64_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint64_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint64_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint64_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(uint64_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint64_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(uint64_t),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
            static CYTHON_INLINE int64_t __Pyx_PyInt_As_int64_t(PyObject *x) {
    const int64_t neg_one = (int64_t) -1, const_zero = (int64_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int64_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int64_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int64_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int64_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int64_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(int64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) >= 2 * PyLong_SHIFT) {
                            return (int64_t) (((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) >= 3 * PyLong_SHIFT) {
                            return (int64_t) (((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) >= 4 * PyLong_SHIFT) {
                            return (int64_t) (((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int64_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int64_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int64_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int64_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int64_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int64_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int64_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (int64_t) (((int64_t)-1)*(((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (int64_t) ((((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (int64_t) (((int64_t)-1)*(((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (int64_t) ((((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (int64_t) (((int64_t)-1)*(((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (int64_t) ((((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int64_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int64_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int64_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int64_t) -1;
        }
    } else {
        int64_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int64_t) -1;
        val = __Pyx_PyInt_As_int64_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int64_t");
    return (int64_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int64_t");
    return (int64_t) -1;
}

/* CIntFromPy */
            static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *x) {
    const char neg_one = (char) -1, const_zero = (char) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(char) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(char, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (char) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case  1: __PYX_VERIFY_RETURN_INT(char, digit, digits[0])
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 2 * PyLong_SHIFT) {
                            return (char) (((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 3 * PyLong_SHIFT) {
                            return (char) (((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 4 * PyLong_SHIFT) {
                            return (char) (((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (char) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(char) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(char) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case -1: __PYX_VERIFY_RETURN_INT(char, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(char,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(char) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) ((((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) ((((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) ((((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(char) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(char) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            char val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (char) -1;
        }
    } else {
        char val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (char) -1;
        val = __Pyx_PyInt_As_char(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to char");
    return (char) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to char");
    return (char) -1;
}

/* CIntFromPy */
            static CYTHON_INLINE int32_t __Pyx_PyInt_As_int32_t(PyObject *x) {
    const int32_t neg_one = (int32_t) -1, const_zero = (int32_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int32_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int32_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int32_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int32_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int32_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(int32_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int32_t) >= 2 * PyLong_SHIFT) {
                            return (int32_t) (((((int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int32_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int32_t) >= 3 * PyLong_SHIFT) {
                            return (int32_t) (((((((int32_t)digits[2]) << PyLong_SHIFT) | (int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int32_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int32_t) >= 4 * PyLong_SHIFT) {
                            return (int32_t) (((((((((int32_t)digits[3]) << PyLong_SHIFT) | (int32_t)digits[2]) << PyLong_SHIFT) | (int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int32_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int32_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int32_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int32_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int32_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int32_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int32_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int32_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int32_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int32_t) - 1 > 2 * PyLong_SHIFT) {
                            return (int32_t) (((int32_t)-1)*(((((int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int32_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int32_t) - 1 > 2 * PyLong_SHIFT) {
                            return (int32_t) ((((((int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int32_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int32_t) - 1 > 3 * PyLong_SHIFT) {
                            return (int32_t) (((int32_t)-1)*(((((((int32_t)digits[2]) << PyLong_SHIFT) | (int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int32_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int32_t) - 1 > 3 * PyLong_SHIFT) {
                            return (int32_t) ((((((((int32_t)digits[2]) << PyLong_SHIFT) | (int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int32_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int32_t) - 1 > 4 * PyLong_SHIFT) {
                            return (int32_t) (((int32_t)-1)*(((((((((int32_t)digits[3]) << PyLong_SHIFT) | (int32_t)digits[2]) << PyLong_SHIFT) | (int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int32_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int32_t) - 1 > 4 * PyLong_SHIFT) {
                            return (int32_t) ((((((((((int32_t)digits[3]) << PyLong_SHIFT) | (int32_t)digits[2]) << PyLong_SHIFT) | (int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int32_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int32_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int32_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int32_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int32_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int32_t) -1;
        }
    } else {
        int32_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int32_t) -1;
        val = __Pyx_PyInt_As_int32_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int32_t");
    return (int32_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int32_t");
    return (int32_t) -1;
}

/* CIntFromPy */
            static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
            static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
            static CYTHON_INLINE uint64_t __Pyx_PyInt_As_uint64_t(PyObject *x) {
    const uint64_t neg_one = (uint64_t) -1, const_zero = (uint64_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(uint64_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(uint64_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (uint64_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint64_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(uint64_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(uint64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) >= 2 * PyLong_SHIFT) {
                            return (uint64_t) (((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) >= 3 * PyLong_SHIFT) {
                            return (uint64_t) (((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) >= 4 * PyLong_SHIFT) {
                            return (uint64_t) (((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (uint64_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(uint64_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint64_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint64_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(uint64_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(uint64_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(uint64_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint64_t) (((uint64_t)-1)*(((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(uint64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint64_t) ((((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint64_t) (((uint64_t)-1)*(((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint64_t) ((((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint64_t) (((uint64_t)-1)*(((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint64_t) ((((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(uint64_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint64_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            uint64_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (uint64_t) -1;
        }
    } else {
        uint64_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (uint64_t) -1;
        val = __Pyx_PyInt_As_uint64_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to uint64_t");
    return (uint64_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to uint64_t");
    return (uint64_t) -1;
}

/* CIntFromPy */
            static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* FastTypeChecks */
            #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* SaveResetException */
            #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if PY_VERSION_HEX >= 0x030700A2
    *type = tstate->exc_state.exc_type;
    *value = tstate->exc_state.exc_value;
    *tb = tstate->exc_state.exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if PY_VERSION_HEX >= 0x030700A2
    tmp_type = tstate->exc_state.exc_type;
    tmp_value = tstate->exc_state.exc_value;
    tmp_tb = tstate->exc_state.exc_traceback;
    tstate->exc_state.exc_type = type;
    tstate->exc_state.exc_value = value;
    tstate->exc_state.exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* SwapException */
            #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if PY_VERSION_HEX >= 0x030700A2
    tmp_type = tstate->exc_state.exc_type;
    tmp_value = tstate->exc_state.exc_value;
    tmp_tb = tstate->exc_state.exc_traceback;
    tstate->exc_state.exc_type = *type;
    tstate->exc_state.exc_value = *value;
    tstate->exc_state.exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* PyObjectCallMethod1 */
            static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = NULL;
#if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyCFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            args = PyTuple_New(2);
            if (unlikely(!args)) goto done;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
    goto done;
done:
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method, *result;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) return NULL;
    result = __Pyx__PyObject_CallMethod1(method, arg);
    Py_DECREF(method);
    return result;
}

/* CoroutineBase */
            #include <structmember.h>
#include <frameobject.h>
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__pyx_CoroutineObject *self) {
    PyObject *exc_type = self->exc_type;
    PyObject *exc_value = self->exc_value;
    PyObject *exc_traceback = self->exc_traceback;
    self->exc_type = NULL;
    self->exc_value = NULL;
    self->exc_traceback = NULL;
    Py_XDECREF(exc_type);
    Py_XDECREF(exc_value);
    Py_XDECREF(exc_traceback);
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(CYTHON_UNUSED __pyx_CoroutineObject *gen) {
    const char *msg;
    if (0) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(CYTHON_UNUSED PyObject *gen) {
    const char *msg;
    if (0) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(CYTHON_UNUSED PyObject *gen, PyObject *value, CYTHON_UNUSED int closing) {
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    if (self->exc_type) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        if (self->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = tstate->frame;
        }
#endif
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(self);
        __Pyx_ExceptionSave(&self->exc_type, &self->exc_value, &self->exc_traceback);
    }
    self->is_running = 1;
    retval = self->body((PyObject *) self, tstate, value);
    self->is_running = 0;
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__pyx_CoroutineObject *self) {
    if (likely(self->exc_traceback)) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
#endif
    }
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(CYTHON_UNUSED PyObject* gen, PyObject *retval) {
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = PyObject_CallObject(meth, args);
            } else {
                ret = PyObject_CallFunctionObjArgs(meth, typ, val, tb, NULL);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    Py_VISIT(gen->exc_type);
    Py_VISIT(gen->exc_value);
    Py_VISIT(gen->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    Py_CLEAR(gen->exc_type);
    Py_CLEAR(gen->exc_value);
    Py_CLEAR(gen->exc_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    self->ob_refcnt = 1;
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        self->ob_refcnt = refcnt;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->exc_type = NULL;
    gen->exc_value = NULL;
    gen->exc_traceback = NULL;
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
                static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
                #ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
                static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {(char*) "gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
                static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* ModuleImport */
                #ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

/* TypeImport */
                #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

/* FunctionImport */
                #ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
                static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
